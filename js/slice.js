(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,Buffer){
const EventEmitter = require('events');
var emitter = new EventEmitter();

// Module configured by:
// http://kripken.github.io/emscripten-site/docs/api_reference/module.html#module
var Module = {};
Module['noInitialRun'] = true;
Module['noExitRuntime'] = true;
Module['setStatus'] = function(text)
{
    emitter.emit('status', text);
}
Module['print'] = function(text)
{
    emitter.emit('stdout', text);
}
Module['printErr'] = function(text)
{
    emitter.emit('stderr', text);
}

// NOTE: res/CuraJS-Engine.js will inserted here, during build:
//
var Module;if(!Module)Module=(typeof Module!=="undefined"?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;if(Module["ENVIRONMENT"]){if(Module["ENVIRONMENT"]==="WEB"){ENVIRONMENT_IS_WEB=true}else if(Module["ENVIRONMENT"]==="WORKER"){ENVIRONMENT_IS_WORKER=true}else if(Module["ENVIRONMENT"]==="NODE"){ENVIRONMENT_IS_NODE=true}else if(Module["ENVIRONMENT"]==="SHELL"){ENVIRONMENT_IS_SHELL=true}else{throw new Error("The provided Module['ENVIRONMENT'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.")}}else{ENVIRONMENT_IS_WEB=typeof window==="object";ENVIRONMENT_IS_WORKER=typeof importScripts==="function";ENVIRONMENT_IS_NODE=typeof process==="object"&&typeof require==="function"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER}if(ENVIRONMENT_IS_NODE){if(!Module["print"])Module["print"]=console.log;if(!Module["printErr"])Module["printErr"]=console.warn;var nodeFS;var nodePath;Module["read"]=function read(filename,binary){if(!nodeFS)nodeFS=require("fs");if(!nodePath)nodePath=require("path");filename=nodePath["normalize"](filename);var ret=nodeFS["readFileSync"](filename);return binary?ret:ret.toString()};Module["readBinary"]=function readBinary(filename){var ret=Module["read"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};Module["load"]=function load(f){globalEval(read(f))};if(!Module["thisProgram"]){if(process["argv"].length>1){Module["thisProgram"]=process["argv"][1].replace(/\\/g,"/")}else{Module["thisProgram"]="unknown-program"}}Module["arguments"]=process["argv"].slice(2);if(typeof module!=="undefined"){module["exports"]=Module}process["on"]("uncaughtException",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));Module["inspect"]=(function(){return"[Emscripten Module object]"})}else if(ENVIRONMENT_IS_SHELL){if(!Module["print"])Module["print"]=print;if(typeof printErr!="undefined")Module["printErr"]=printErr;if(typeof read!="undefined"){Module["read"]=read}else{Module["read"]=function read(){throw"no read() available"}}Module["readBinary"]=function readBinary(f){if(typeof readbuffer==="function"){return new Uint8Array(readbuffer(f))}var data=read(f,"binary");assert(typeof data==="object");return data};if(typeof scriptArgs!="undefined"){Module["arguments"]=scriptArgs}else if(typeof arguments!="undefined"){Module["arguments"]=arguments}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module["read"]=function read(url){var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText};Module["readAsync"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response)}else{onerror()}};xhr.onerror=onerror;xhr.send(null)};if(typeof arguments!="undefined"){Module["arguments"]=arguments}if(typeof console!=="undefined"){if(!Module["print"])Module["print"]=function print(x){console.log(x)};if(!Module["printErr"])Module["printErr"]=function printErr(x){console.warn(x)}}else{var TRY_USE_DUMP=false;if(!Module["print"])Module["print"]=TRY_USE_DUMP&&typeof dump!=="undefined"?(function(x){dump(x)}):(function(x){})}if(ENVIRONMENT_IS_WORKER){Module["load"]=importScripts}if(typeof Module["setWindowTitle"]==="undefined"){Module["setWindowTitle"]=(function(title){document.title=title})}}else{throw"Unknown runtime environment. Where are we?"}function globalEval(x){eval.call(null,x)}if(!Module["load"]&&Module["read"]){Module["load"]=function load(f){globalEval(Module["read"](f))}}if(!Module["print"]){Module["print"]=(function(){})}if(!Module["printErr"]){Module["printErr"]=Module["print"]}if(!Module["arguments"]){Module["arguments"]=[]}if(!Module["thisProgram"]){Module["thisProgram"]="./this.program"}Module.print=Module["print"];Module.printErr=Module["printErr"];Module["preRun"]=[];Module["postRun"]=[];for(var key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;var Runtime={setTempRet0:(function(value){tempRet0=value}),getTempRet0:(function(){return tempRet0}),stackSave:(function(){return STACKTOP}),stackRestore:(function(stackTop){STACKTOP=stackTop}),getNativeTypeSize:(function(type){switch(type){case"i1":case"i8":return 1;case"i16":return 2;case"i32":return 4;case"i64":return 8;case"float":return 4;case"double":return 8;default:{if(type[type.length-1]==="*"){return Runtime.QUANTUM_SIZE}else if(type[0]==="i"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}),getNativeFieldSize:(function(type){return Math.max(Runtime.getNativeTypeSize(type),Runtime.QUANTUM_SIZE)}),STACK_ALIGN:16,prepVararg:(function(ptr,type){if(type==="double"||type==="i64"){if(ptr&7){assert((ptr&7)===4);ptr+=4}}else{assert((ptr&3)===0)}return ptr}),getAlignSize:(function(type,size,vararg){if(!vararg&&(type=="i64"||type=="double"))return 8;if(!type)return Math.min(size,8);return Math.min(size||(type?Runtime.getNativeFieldSize(type):0),Runtime.QUANTUM_SIZE)}),dynCall:(function(sig,ptr,args){if(args&&args.length){return Module["dynCall_"+sig].apply(null,[ptr].concat(args))}else{return Module["dynCall_"+sig].call(null,ptr)}}),functionPointers:[],addFunction:(function(func){for(var i=0;i<Runtime.functionPointers.length;i++){if(!Runtime.functionPointers[i]){Runtime.functionPointers[i]=func;return 2*(1+i)}}throw"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."}),removeFunction:(function(index){Runtime.functionPointers[(index-2)/2]=null}),warnOnce:(function(text){if(!Runtime.warnOnce.shown)Runtime.warnOnce.shown={};if(!Runtime.warnOnce.shown[text]){Runtime.warnOnce.shown[text]=1;Module.printErr(text)}}),funcWrappers:{},getFuncWrapper:(function(func,sig){assert(sig);if(!Runtime.funcWrappers[sig]){Runtime.funcWrappers[sig]={}}var sigCache=Runtime.funcWrappers[sig];if(!sigCache[func]){if(sig.length===1){sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func)}}else if(sig.length===2){sigCache[func]=function dynCall_wrapper(arg){return Runtime.dynCall(sig,func,[arg])}}else{sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func,Array.prototype.slice.call(arguments))}}}return sigCache[func]}),getCompilerSetting:(function(name){throw"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work"}),stackAlloc:(function(size){var ret=STACKTOP;STACKTOP=STACKTOP+size|0;STACKTOP=STACKTOP+15&-16;return ret}),staticAlloc:(function(size){var ret=STATICTOP;STATICTOP=STATICTOP+size|0;STATICTOP=STATICTOP+15&-16;return ret}),dynamicAlloc:(function(size){var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=(ret+size+15|0)&-16;HEAP32[DYNAMICTOP_PTR>>2]=end;if(end>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){HEAP32[DYNAMICTOP_PTR>>2]=ret;return 0}}return ret}),alignMemory:(function(size,quantum){var ret=size=Math.ceil(size/(quantum?quantum:16))*(quantum?quantum:16);return ret}),makeBigInt:(function(low,high,unsigned){var ret=unsigned?+(low>>>0)+ +(high>>>0)*+4294967296:+(low>>>0)+ +(high|0)*+4294967296;return ret}),GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};Module["Runtime"]=Runtime;var ABORT=0;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort("Assertion failed: "+text)}}function getCFunc(ident){var func=Module["_"+ident];if(!func){try{func=eval("_"+ident)}catch(e){}}assert(func,"Cannot call unknown function "+ident+" (perhaps LLVM optimizations or closure removed it?)");return func}var cwrap,ccall;((function(){var JSfuncs={"stackSave":(function(){Runtime.stackSave()}),"stackRestore":(function(){Runtime.stackRestore()}),"arrayToC":(function(arr){var ret=Runtime.stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),"stringToC":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=Runtime.stackAlloc(len);stringToUTF8(str,ret,len)}return ret})};var toC={"string":JSfuncs["stringToC"],"array":JSfuncs["arrayToC"]};ccall=function ccallFunc(ident,returnType,argTypes,args,opts){var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=Runtime.stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType==="string")ret=Pointer_stringify(ret);if(stack!==0){if(opts&&opts.async){EmterpreterAsync.asyncFinalizers.push((function(){Runtime.stackRestore(stack)}));return}Runtime.stackRestore(stack)}return ret};var sourceRegex=/^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;function parseJSFunc(jsfunc){var parsed=jsfunc.toString().match(sourceRegex).slice(1);return{arguments:parsed[0],body:parsed[1],returnValue:parsed[2]}}var JSsource=null;function ensureJSsource(){if(!JSsource){JSsource={};for(var fun in JSfuncs){if(JSfuncs.hasOwnProperty(fun)){JSsource[fun]=parseJSFunc(JSfuncs[fun])}}}}cwrap=function cwrap(ident,returnType,argTypes){argTypes=argTypes||[];var cfunc=getCFunc(ident);var numericArgs=argTypes.every((function(type){return type==="number"}));var numericRet=returnType!=="string";if(numericRet&&numericArgs){return cfunc}var argNames=argTypes.map((function(x,i){return"$"+i}));var funcstr="(function("+argNames.join(",")+") {";var nargs=argTypes.length;if(!numericArgs){ensureJSsource();funcstr+="var stack = "+JSsource["stackSave"].body+";";for(var i=0;i<nargs;i++){var arg=argNames[i],type=argTypes[i];if(type==="number")continue;var convertCode=JSsource[type+"ToC"];funcstr+="var "+convertCode.arguments+" = "+arg+";";funcstr+=convertCode.body+";";funcstr+=arg+"=("+convertCode.returnValue+");"}}var cfuncname=parseJSFunc((function(){return cfunc})).returnValue;funcstr+="var ret = "+cfuncname+"("+argNames.join(",")+");";if(!numericRet){var strgfy=parseJSFunc((function(){return Pointer_stringify})).returnValue;funcstr+="ret = "+strgfy+"(ret);"}if(!numericArgs){ensureJSsource();funcstr+=JSsource["stackRestore"].body.replace("()","(stack)")+";"}funcstr+="return ret})";return eval(funcstr)}}))();Module["ccall"]=ccall;Module["cwrap"]=cwrap;function setValue(ptr,value,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":HEAP8[ptr>>0]=value;break;case"i8":HEAP8[ptr>>0]=value;break;case"i16":HEAP16[ptr>>1]=value;break;case"i32":HEAP32[ptr>>2]=value;break;case"i64":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case"float":HEAPF32[ptr>>2]=value;break;case"double":HEAPF64[ptr>>3]=value;break;default:abort("invalid type for setValue: "+type)}}Module["setValue"]=setValue;function getValue(ptr,type,noSafe){type=type||"i8";if(type.charAt(type.length-1)==="*")type="i32";switch(type){case"i1":return HEAP8[ptr>>0];case"i8":return HEAP8[ptr>>0];case"i16":return HEAP16[ptr>>1];case"i32":return HEAP32[ptr>>2];case"i64":return HEAP32[ptr>>2];case"float":return HEAPF32[ptr>>2];case"double":return HEAPF64[ptr>>3];default:abort("invalid type for setValue: "+type)}return null}Module["getValue"]=getValue;var ALLOC_NORMAL=0;var ALLOC_STACK=1;var ALLOC_STATIC=2;var ALLOC_DYNAMIC=3;var ALLOC_NONE=4;Module["ALLOC_NORMAL"]=ALLOC_NORMAL;Module["ALLOC_STACK"]=ALLOC_STACK;Module["ALLOC_STATIC"]=ALLOC_STATIC;Module["ALLOC_DYNAMIC"]=ALLOC_DYNAMIC;Module["ALLOC_NONE"]=ALLOC_NONE;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab==="number"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types==="string"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[typeof _malloc==="function"?_malloc:Runtime.staticAlloc,Runtime.stackAlloc,Runtime.staticAlloc,Runtime.dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var ptr=ret,stop;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType==="i8"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];if(typeof curr==="function"){curr=Runtime.getFunctionIndex(curr)}type=singleType||types[i];if(type===0){i++;continue}if(type=="i64")type="i32";setValue(ret+i,curr,type);if(previousType!==type){typeSize=Runtime.getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}Module["allocate"]=allocate;function getMemory(size){if(!staticSealed)return Runtime.staticAlloc(size);if(!runtimeInitialized)return Runtime.dynamicAlloc(size);return _malloc(size)}Module["getMemory"]=getMemory;function Pointer_stringify(ptr,length){if(length===0||!ptr)return"";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret="";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return Module["UTF8ToString"](ptr)}Module["Pointer_stringify"]=Pointer_stringify;function AsciiToString(ptr){var str="";while(1){var ch=HEAP8[ptr++>>0];if(!ch)return str;str+=String.fromCharCode(ch)}}Module["AsciiToString"]=AsciiToString;function stringToAscii(str,outPtr){return writeAsciiToMemory(str,outPtr,false)}Module["stringToAscii"]=stringToAscii;var UTF8Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(u8Array,idx){var endPtr=idx;while(u8Array[endPtr])++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var u0,u1,u2,u3,u4,u5;var str="";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}}Module["UTF8ArrayToString"]=UTF8ArrayToString;function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}Module["UTF8ToString"]=UTF8ToString;function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}Module["stringToUTF8Array"]=stringToUTF8Array;function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}Module["stringToUTF8"]=stringToUTF8;function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}Module["lengthBytesUTF8"]=lengthBytesUTF8;var UTF16Decoder=typeof TextDecoder!=="undefined"?new TextDecoder("utf-16le"):undefined;function demangle(func){var hasLibcxxabi=!!Module["___cxa_demangle"];if(hasLibcxxabi){try{var s=func.substr(1);var len=lengthBytesUTF8(s)+1;var buf=_malloc(len);stringToUTF8(s,buf,len);var status=_malloc(4);var ret=Module["___cxa_demangle"](buf,0,0,status);if(getValue(status,"i32")===0&&ret){return Pointer_stringify(ret)}}catch(e){}finally{if(buf)_free(buf);if(status)_free(status);if(ret)_free(ret)}return func}Runtime.warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");return func}function demangleAll(text){return text.replace(/__Z[\w\d_]+/g,(function(x){var y=demangle(x);return x===y?x:x+" ["+y+"]"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return"(no stack trace available)"}}return err.stack.toString()}function stackTrace(){var js=jsStackTrace();if(Module["extraStackTrace"])js+="\n"+Module["extraStackTrace"]();return demangleAll(js)}Module["stackTrace"]=stackTrace;var HEAP;var buffer;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferViews(){Module["HEAP8"]=HEAP8=new Int8Array(buffer);Module["HEAP16"]=HEAP16=new Int16Array(buffer);Module["HEAP32"]=HEAP32=new Int32Array(buffer);Module["HEAPU8"]=HEAPU8=new Uint8Array(buffer);Module["HEAPU16"]=HEAPU16=new Uint16Array(buffer);Module["HEAPU32"]=HEAPU32=new Uint32Array(buffer);Module["HEAPF32"]=HEAPF32=new Float32Array(buffer);Module["HEAPF64"]=HEAPF64=new Float64Array(buffer)}var STATIC_BASE,STATICTOP,staticSealed;var STACK_BASE,STACKTOP,STACK_MAX;var DYNAMIC_BASE,DYNAMICTOP_PTR;STATIC_BASE=STATICTOP=STACK_BASE=STACKTOP=STACK_MAX=DYNAMIC_BASE=DYNAMICTOP_PTR=0;staticSealed=false;function abortOnCannotGrowMemory(){abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value "+TOTAL_MEMORY+", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")}function enlargeMemory(){abortOnCannotGrowMemory()}var TOTAL_STACK=Module["TOTAL_STACK"]||5242880;var TOTAL_MEMORY=Module["TOTAL_MEMORY"]||16777216;var WASM_PAGE_SIZE=64*1024;var totalMemory=WASM_PAGE_SIZE;while(totalMemory<TOTAL_MEMORY||totalMemory<2*TOTAL_STACK){if(totalMemory<16*1024*1024){totalMemory*=2}else{totalMemory+=16*1024*1024}}if(totalMemory!==TOTAL_MEMORY){TOTAL_MEMORY=totalMemory}if(Module["buffer"]){buffer=Module["buffer"]}else{{buffer=new ArrayBuffer(TOTAL_MEMORY)}}updateGlobalBufferViews();function getTotalMemory(){return TOTAL_MEMORY}HEAP32[0]=1668509029;HEAP16[1]=25459;if(HEAPU8[2]!==115||HEAPU8[3]!==99)throw"Runtime error: expected the system to be little-endian!";Module["HEAP"]=HEAP;Module["buffer"]=buffer;Module["HEAP8"]=HEAP8;Module["HEAP16"]=HEAP16;Module["HEAP32"]=HEAP32;Module["HEAPU8"]=HEAPU8;Module["HEAPU16"]=HEAPU16;Module["HEAPU32"]=HEAPU32;Module["HEAPF32"]=HEAPF32;Module["HEAPF64"]=HEAPF64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback();continue}var func=callback.func;if(typeof func==="number"){if(callback.arg===undefined){Runtime.dynCall("v",func)}else{Runtime.dynCall("vi",func,[callback.arg])}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}Module["addOnPreRun"]=addOnPreRun;function addOnInit(cb){__ATINIT__.unshift(cb)}Module["addOnInit"]=addOnInit;function addOnPreMain(cb){__ATMAIN__.unshift(cb)}Module["addOnPreMain"]=addOnPreMain;function addOnExit(cb){__ATEXIT__.unshift(cb)}Module["addOnExit"]=addOnExit;function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}Module["addOnPostRun"]=addOnPostRun;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}Module["intArrayFromString"]=intArrayFromString;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}Module["intArrayToString"]=intArrayToString;function writeStringToMemory(string,buffer,dontAddNull){Runtime.warnOnce("writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!");var lastChar,end;if(dontAddNull){end=buffer+lengthBytesUTF8(string);lastChar=HEAP8[end]}stringToUTF8(string,buffer,Infinity);if(dontAddNull)HEAP8[end]=lastChar}Module["writeStringToMemory"]=writeStringToMemory;function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}Module["writeArrayToMemory"]=writeArrayToMemory;function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}Module["writeAsciiToMemory"]=writeAsciiToMemory;if(!Math["imul"]||Math["imul"](4294967295,5)!==-5)Math["imul"]=function imul(a,b){var ah=a>>>16;var al=a&65535;var bh=b>>>16;var bl=b&65535;return al*bl+(ah*bl+al*bh<<16)|0};Math.imul=Math["imul"];if(!Math["clz32"])Math["clz32"]=(function(x){x=x>>>0;for(var i=0;i<32;i++){if(x&1<<31-i)return i}return 32});Math.clz32=Math["clz32"];if(!Math["trunc"])Math["trunc"]=(function(x){return x<0?Math.ceil(x):Math.floor(x)});Math.trunc=Math["trunc"];var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_round=Math.round;var Math_min=Math.min;var Math_clz32=Math.clz32;var Math_trunc=Math.trunc;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}Module["addRunDependency"]=addRunDependency;function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["removeRunDependency"]=removeRunDependency;Module["preloadedImages"]={};Module["preloadedAudios"]={};var ASM_CONSTS=[];STATIC_BASE=8;STATICTOP=STATIC_BASE+24944;__ATINIT__.push();allocate([84,32,0,0,105,54,0,0,112,0,0,0,0,0,0,0,84,32,0,0,152,54,0,0,120,0,0,0,0,0,0,0,44,32,0,0,121,55,0,0,220,32,0,0,16,56,0,0,0,0,0,0,1,0,0,0,40,0,0,0,3,244,255,255,84,32,0,0,181,55,0,0,248,4,0,0,0,0,0,0,84,32,0,0,41,67,0,0,104,0,0,0,0,0,0,0,44,32,0,0,23,67,0,0,44,32,0,0,83,67,0,0,220,32,0,0,132,67,0,0,0,0,0,0,1,0,0,0,88,0,0,0,3,244,255,255,84,32,0,0,179,67,0,0,160,0,0,0,0,0,0,0,84,32,0,0,199,67,0,0,240,4,0,0,0,0,0,0,84,32,0,0,221,67,0,0,160,0,0,0,0,0,0,0,220,32,0,0,21,68,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,224,0,0,0,0,0,0,0,220,32,0,0,89,68,0,0,0,0,0,0,1,0,0,0,248,0,0,0,0,0,0,0,44,32,0,0,111,68,0,0,220,32,0,0,136,68,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,32,1,0,0,0,0,0,0,220,32,0,0,204,68,0,0,0,0,0,0,1,0,0,0,248,0,0,0,0,0,0,0,220,32,0,0,243,68,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,88,1,0,0,0,0,0,0,220,32,0,0,55,69,0,0,0,0,0,0,1,0,0,0,112,1,0,0,0,0,0,0,44,32,0,0,77,69,0,0,220,32,0,0,102,69,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,152,1,0,0,0,0,0,0,220,32,0,0,170,69,0,0,0,0,0,0,1,0,0,0,112,1,0,0,0,0,0,0,220,32,0,0,238,70,0,0,0,0,0,0,3,0,0,0,160,0,0,0,2,0,0,0,216,1,0,0,2,0,0,0,224,1,0,0,0,8,0,0,44,32,0,0,85,71,0,0,44,32,0,0,51,71,0,0,220,32,0,0,104,71,0,0,0,0,0,0,3,0,0,0,160,0,0,0,2,0,0,0,216,1,0,0,2,0,0,0,16,2,0,0,0,8,0,0,44,32,0,0,173,71,0,0,220,32,0,0,207,71,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,56,2,0,0,0,8,0,0,44,32,0,0,20,72,0,0,220,32,0,0,41,72,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,56,2,0,0,0,8,0,0,220,32,0,0,110,72,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,128,2,0,0,2,0,0,0,44,32,0,0,138,72,0,0,220,32,0,0,159,72,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,128,2,0,0,2,0,0,0,220,32,0,0,187,72,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,128,2,0,0,2,0,0,0,220,32,0,0,215,72,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,128,2,0,0,2,0,0,0,220,32,0,0,254,72,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,8,3,0,0,0,0,0,0,44,32,0,0,68,73,0,0,220,32,0,0,104,73,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,48,3,0,0,0,0,0,0,44,32,0,0,174,73,0,0,220,32,0,0,205,73,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,88,3,0,0,0,0,0,0,44,32,0,0,19,74,0,0,220,32,0,0,44,74,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,128,3,0,0,0,0,0,0,44,32,0,0,114,74,0,0,220,32,0,0,139,74,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,168,3,0,0,2,0,0,0,44,32,0,0,160,74,0,0,220,32,0,0,55,75,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,168,3,0,0,2,0,0,0,84,32,0,0,184,74,0,0,224,3,0,0,0,0,0,0,220,32,0,0,219,74,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,0,4,0,0,2,0,0,0,44,32,0,0,254,74,0,0,84,32,0,0,21,75,0,0,224,3,0,0,0,0,0,0,220,32,0,0,76,75,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,0,4,0,0,2,0,0,0,220,32,0,0,110,75,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,0,4,0,0,2,0,0,0,220,32,0,0,144,75,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,0,4,0,0,2,0,0,0,84,32,0,0,179,75,0,0,160,0,0,0,0,0,0,0,220,32,0,0,201,75,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,168,4,0,0,2,0,0,0,44,32,0,0,219,75,0,0,220,32,0,0,240,75,0,0,0,0,0,0,2,0,0,0,160,0,0,0,2,0,0,0,168,4,0,0,2,0,0,0,84,32,0,0,2,76,0,0,160,0,0,0,0,0,0,0,84,32,0,0,23,76,0,0,160,0,0,0,0,0,0,0,44,32,0,0,174,76,0,0,44,32,0,0,203,78,0,0,84,32,0,0,43,79,0,0,16,5,0,0,0,0,0,0,84,32,0,0,216,78,0,0,32,5,0,0,0,0,0,0,44,32,0,0,249,78,0,0,84,32,0,0,6,79,0,0,0,5,0,0,0,0,0,0,84,32,0,0,28,80,0,0,248,4,0,0,0,0,0,0,84,32,0,0,55,80,0,0,248,4,0,0,0,0,0,0,84,32,0,0,103,80,0,0,16,5,0,0,0,0,0,0,84,32,0,0,67,80,0,0,88,5,0,0,0,0,0,0,84,32,0,0,137,80,0,0,16,5,0,0,0,0,0,0,164,32,0,0,177,80,0,0,164,32,0,0,179,80,0,0,164,32,0,0,182,80,0,0,192,32,0,0,184,80,0,0,1,0,0,0,152,5,0,0,84,32,0,0,190,80,0,0,0,5,0,0,0,0,0,0,108,0,0,0,0,0,0,0,120,0,0,0,1,0,0,0,2,0,0,0,148,255,255,255,148,255,255,255,120,0,0,0,3,0,0,0,4,0,0,0,108,0,0,0,0,0,0,0,24,0,0,0,5,0,0,0,6,0,0,0,148,255,255,255,148,255,255,255,24,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,40,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,92,0,0,0,0,0,0,0,48,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,5,0,0,0,164,255,255,255,0,0,0,0,164,255,255,255,164,255,255,255,48,0,0,0,18,0,0,0,19,0,0,0,13,0,0,0,20,0,0,0,0,0,0,0,72,0,0,0,21,0,0,0,22,0,0,0,6,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,5,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,93,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,5,0,0,0,101,93,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE);allocate([1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,0,0,0,0,104,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,112,0,0,0,25,0,0,0,26,0,0,0,2,0,0,0,8,0,0,0,2,0,0,0,2,0,0,0,8,0,0,0,2,0,0,0,2,0,0,0,9,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,144,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,1,0,0,0,3,0,0,0,9,0,0,0,0,0,0,0,176,0,0,0,30,0,0,0,31,0,0,0,29,0,0,0,2,0,0,0,4,0,0,0,10,0,0,0,0,0,0,0,192,0,0,0,32,0,0,0,33,0,0,0,29,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,1,0,0,34,0,0,0,35,0,0,0,29,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,56,1,0,0,36,0,0,0,37,0,0,0,29,0,0,0,3,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,24,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,0,0,0,0,120,1,0,0,38,0,0,0,39,0,0,0,29,0,0,0,7,0,0,0,8,0,0,0,25,0,0,0,9,0,0,0,26,0,0,0,3,0,0,0,4,0,0,0,10,0,0,0,0,0,0,0,176,1,0,0,40,0,0,0,41,0,0,0,29,0,0,0,10,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,1,0,0,0,248,255,255,255,176,1,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,0,0,0,0,232,1,0,0,42,0,0,0,43,0,0,0,29,0,0,0,18,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,2,0,0,0,248,255,255,255,232,1,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,24,2,0,0,44,0,0,0,45,0,0,0,29,0,0,0,1,0,0,0,0,0,0,0,64,2,0,0,46,0,0,0,47,0,0,0,29,0,0,0,2,0,0,0,0,0,0,0,96,2,0,0,48,0,0,0,49,0,0,0,29,0,0,0,26,0,0,0,27,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,28,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,136,2,0,0,50,0,0,0,51,0,0,0,29,0,0,0,29,0,0,0,30,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,31,0,0,0,13,0,0,0,14,0,0,0,0,0,0,0,168,2,0,0,52,0,0,0,53,0,0,0,29,0,0,0,32,0,0,0,33,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,34,0,0,0,19,0,0,0,20,0,0,0,0,0,0,0,200,2,0,0,54,0,0,0,55,0,0,0,29,0,0,0,35,0,0,0,36,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,37,0,0,0,25,0,0,0,26,0,0,0,0,0,0,0,232,2,0,0,56,0,0,0,57,0,0,0,29,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,16,3,0,0,58,0,0,0,59,0,0,0,29,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,56,3,0,0,60,0,0,0,61,0,0,0,29,0,0,0,1,0,0,0,37,0,0,0,0,0,0,0,96,3,0,0,62,0,0,0,63,0,0,0,29,0,0,0,2,0,0,0,38,0,0,0,0,0,0,0,136,3,0,0,64,0,0,0,65,0,0,0,29,0,0,0,11,0,0,0,3,0,0,0,27,0,0,0,0,0,0,0,176,3,0,0,66,0,0,0,67,0,0,0,29,0,0,0,12,0,0,0,4,0,0,0,28,0,0,0,0,0,0,0,8,4,0,0,68,0,0,0,69,0,0,0,29,0,0,0,3,0,0,0,4,0,0,0,11,0,0,0,38,0,0,0,39,0,0,0,12,0,0,0,40,0,0,0,0,0,0,0,208,3,0,0,68,0,0,0,70,0,0,0,29,0,0,0,3,0,0,0,4,0,0,0,11,0,0,0,38,0,0,0,39,0,0,0,12,0,0,0,40,0,0,0,0,0,0,0,56,4,0,0,71,0,0,0,72,0,0,0,29,0,0,0,5,0,0,0,6,0,0,0,13,0,0,0,41,0,0,0,42,0,0,0,14,0,0,0,43,0,0,0,0,0,0,0,120,4,0,0,73,0,0,0,74,0,0,0,29,0,0,0,0,0,0,0,136,4,0,0,75,0,0,0,76,0,0,0,29,0,0,0,5,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,7,0,0,0,1,0,0,0,15,0,0,0,15,0,0,0,0,0,0,0,208,4,0,0,77,0,0,0,78,0,0,0,29,0,0,0,44,0,0,0,45,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,0,0,0,0,224,4,0,0,79,0,0,0,80,0,0,0,29,0,0,0,46,0,0,0,47,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,160,0,0,0,68,0,0,0,81,0,0,0,29,0,0,0,0,0,0,0,176,4,0,0,68,0,0,0,82,0,0,0,29,0,0,0,16,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,8,0,0,0,17,0,0,0,9,0,0,0,18,0,0,0,10,0,0,0,5,0,0,0,19,0,0,0,16,0,0,0,0,0,0,0,24,4,0,0,68,0,0,0,83,0,0,0,29,0,0,0,7,0,0,0,8,0,0,0,17,0,0,0,48,0,0,0,49,0,0,0,18,0,0,0,50,0,0,0,0,0,0,0,88,4,0,0,68,0,0,0,84,0,0,0,29,0,0,0,9,0,0,0,10,0,0,0,19,0,0,0,51,0,0,0,52,0,0,0,20,0,0,0,53,0,0,0,0,0,0,0,224,3,0,0,68,0,0,0,85,0,0,0,29,0,0,0,3,0,0,0,4,0,0,0,11,0,0,0,38,0,0,0,39,0,0,0,12,0,0,0,40,0,0,0,1,0,0,0,0,0,0,0,0,5,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,20,0,0,0,5,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,40,5,0,0,86,0,0,0,90,0,0,0,88,0,0,0,89,0,0,0,20,0,0,0,6,0,0,0,2,0,0,0,6,0,0,0,0,0,0,0,56,5,0,0,91,0,0,0,92,0,0,0,54,0,0,0,0,0,0,0,72,5,0,0,93,0,0,0,94,0,0,0,55,0,0,0,0,0,0,0,120,5,0,0,86,0,0,0,95,0,0,0,88,0,0,0,89,0,0,0,21,0,0,0,0,0,0,0,104,5,0,0,86,0,0,0,96,0,0,0,88,0,0,0,89,0,0,0,22,0,0,0,0,0,0,0,176,5,0,0,86,0,0,0,97,0,0,0,88,0,0,0,89,0,0,0,20,0,0,0,7,0,0,0,3,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,32,2,32,2,32,2,32,2,32,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,96,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,8,216,4,192,4,192,4,192,4,192,4,192,4,192,4,192,8,213,8,213,8,213,8,213,8,213,8,213,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,8,197,4,192,4,192,4,192,4,192,4,192,4,192,8,214,8,214,8,214,8,214,8,214,8,214,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,8,198,4,192,4,192,4,192,4,192,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,101,112,108,97,99,101,58,37,115,58,37,115,10,0,71,57,50,32,37,99,48,10,0,71,52,32,80,37,100,10,0,77,49,48,56,32,83,37,48,46,49,102,10,0,77,37,100,48,49,10,0,77,49,48,51,10,0,71,49,32,88,37,48,46,50,102,32,89,37,48,46,50,102,32,90,37,48,46,50,102,32,70,37,48,46,49,102,10,0,71,49,32,90,37,48,46,50,102,10,0,71,49,49,10,0,71,49,32,70,37,105,32,37,99,37,48,46,53,102,10,0,71,49,0,71,48,0,32,70,37,105,0,32,88,37,48,46,50,102,32,89,37,48,46,50,102,0,32,90,37,48,46,50,102,0,32,37,99,37,48,46,53,102,0,71,49,48,10,0,71,49,48,32,83,49,10,0,77,49,51,53,32,84,37,105,10,0,84,37,105,10,0,77,49,50,54,32,84,48,32,59,32,118,97,108,117,101,32,61,32,37,100,10,0,77,49,48,54,32,83,37,100,10,0,77,49,50,55,32,84,48,10,0,77,49,48,55,10,0,87,114,111,116,101,32,37,53,46,49,102,32,77,66,46,10,0,87,114,111,116,101,32,37,53,46,49,102,32,107,105,108,111,98,121,116,101,115,46,10,0,80,114,105,110,116,32,116,105,109,101,58,32,37,100,10,0,70,105,108,97,109,101,110,116,58,32,37,100,10,0,70,105,108,97,109,101,110,116,50,58,32,37,100,10,0,60,95,95,84,73,77,69,95,95,62,0,60,70,73,76,65,77,69,78,84,62,0,60,70,73,76,65,77,69,78,50,62,0,116,114,97,118,101,108,0,84,89,80,69,58,37,115,0,83,109,97,108,108,32,108,97,121,101,114,44,32,97,100,100,105,110,103,32,100,101,108,97,121,32,111,102,32,37,102,0,117,115,97,103,101,58,32,67,117,114,97,69,110,103,105,110,101,32,91,45,104,93,32,91,45,118,93,32,91,45,109,32,51,120,51,109,97,116,114,105,120,93,32,91,45,99,32,60,99,111,110,102,105,103,32,102,105,108,101,62,93,32,91,45,115,32,60,115,101,116,116,105,110,103,107,101,121,62,61,60,118,97,108,117,101,62,93,32,45,111,32,60,111,117,116,112,117,116,46,103,99,111,100,101,62,32,60,109,111,100,101,108,46,115,116,108,62,10,0,65,114,105,116,104,109,101,116,105,99,32,101,120,99,101,112,116,105,111,110,46,10,0,67,117,114,97,95,83,116,101,97,109,69,110,103,105,110,101,32,118,101,114,115,105,111,110,32,37,115,10,0,68,69,86,95,87,69,66,0,67,111,112,121,114,105,103,104,116,32,40,67,41,32,50,48,49,52,32,68,97,118,105,100,32,66,114,97,97,109,10,0,84,104,105,115,32,112,114,111,103,114,97,109,32,105,115,32,102,114,101,101,32,115,111,102,116,119,97,114,101,58,32,121,111,117,32,99,97,110,32,114,101,100,105,115,116,114,105,98,117,116,101,32,105,116,32,97,110,100,47,111,114,32,109,111,100,105,102,121,10,0,105,116,32,117,110,100,101,114,32,116,104,101,32,116,101,114,109,115,32,111,102,32,116,104,101,32,71,78,85,32,65,102,102,101,114,111,32,71,101,110,101,114,97,108,32,80,117,98,108,105,99,32,76,105,99,101,110,115,101,32,97,115,32,112,117,98,108,105,115,104,101,100,32,98,121,10,0,116,104,101,32,70,114,101,101,32,83,111,102,116,119,97,114,101,32,70,111,117,110,100,97,116,105,111,110,44,32,101,105,116,104,101,114,32,118,101,114,115,105,111,110,32,51,32,111,102,32,116,104,101,32,76,105,99,101,110,115,101,44,32,111,114,10,0,40,97,116,32,121,111,117,114,32,111,112,116,105,111,110,41,32,97,110,121,32,108,97,116,101,114,32,118,101,114,115,105,111,110,46,10,0,84,104,105,115,32,112,114,111,103,114,97,109,32,105,115,32,100,105,115,116,114,105,98,117,116,101,100,32,105,110,32,116,104,101,32,104,111,112,101,32,116,104,97,116,32,105,116,32,119,105,108,108,32,98,101,32,117,115,101,102,117,108,44,10,0,98,117,116,32,87,73,84,72,79,85,84,32,65,78,89,32,87,65,82,82,65,78,84,89,59,32,119,105,116,104,111,117,116,32,101,118,101,110,32,116,104,101,32,105,109,112,108,105,101,100,32,119,97,114,114,97,110,116,121,32,111,102,10,0,77,69,82,67,72,65,78,84,65,66,73,76,73,84,89,32,111,114,32,70,73,84,78,69,83,83,32,70,79,82,32,65,32,80,65,82,84,73,67,85,76,65,82,32,80,85,82,80,79,83,69,46,32,32,83,101,101,32,116,104,101,10,0,71,78,85,32,65,102,102,101,114,111,32,71,101,110,101,114,97,108,32,80,117,98,108,105,99,32,76,105,99,101,110,115,101,32,102,111,114,32,109,111,114,101,32,100,101,116,97,105,108,115,46,10,0,89,111,117,32,115,104,111,117,108,100,32,104,97,118,101,32,114,101,99,101,105,118,101,100,32,97,32,99,111,112,121,32,111,102,32,116,104,101,32,71,78,85,32,65,102,102,101,114,111,32,71,101,110,101,114,97,108,32,80,117,98,108,105,99,32,76,105,99,101,110,115,101,10,0,97,108,111,110,103,32,119,105,116,104,32,116,104,105,115,32,112,114,111,103,114,97,109,46,32,32,73,102,32,110,111,116,44,32,115,101,101,32,60,104,116,116,112,58,47,47,119,119,119,46,103,110,117,46,111,114,103,47,108,105,99,101,110,115,101,115,47,62,46,10,0,68,101,102,97,117,108,116,32,99,111,110,102,105,103,32,39,37,115,39,32,110,111,116,32,117,115,101,100,10,0,65,114,103,58,32,37,115,10,0,49,50,55,46,48,46,48,46,49,0,71,101,110,101,114,97,116,101,100,32,119,105,116,104,32,67,117,114,97,95,83,116,101,97,109,69,110,103,105,110,101,32,37,115,0,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,37,115,32,102,111,114,32,111,117,116,112,117,116,46,10,0,70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,99,111,110,102,105,103,32,39,37,115,39,10,0,83,101,116,116,105,110,103,32,110,111,116,32,102,111,117,110,100,58,32,37,115,32,37,115,10,0,37,108,102,44,37,108,102,44,37,108,102,44,37,108,102,44,37,108,102,44,37,108,102,44,37,108,102,44,37,108,102,44,37,108,102,0,85,110,107,110,111,119,110,32,111,112,116,105,111,110,58,32,37,99,10,0,112,114,111,99,101,115,115,0,84,111,116,97,108,32,116,105,109,101,32,101,108,97,112,115,101,100,32,37,53,46,50,102,115,46,10,0,70,76,65,86,79,82,58,85,108,116,105,71,67,111,100,101,0,84,73,77,69,58,60,95,95,84,73,77,69,95,95,62,0,77,65,84,69,82,73,65,76,58,60,70,73,76,65,77,69,78,84,62,0,77,65,84,69,82,73,65,76,50,58,60,70,73,76,65,77,69,78,50,62,0,101,110,97,98,108,101,32,97,117,116,111,45,114,101,116,114,97,99,116,105,111,110,0,77,50,50,55,32,83,37,100,32,80,37,100,0,76,97,121,101,114,32,99,111,117,110,116,58,32,37,100,0,115,117,112,112,111,114,116,0,83,85,80,80,79,82,84,0,76,65,89,69,82,58,45,50,0,82,65,70,84,0,76,65,89,69,82,58,45,49,0,87,114,111,116,101,32,108,97,121,101,114,115,32,105,110,32,37,53,46,50,102,115,46,10,0,101,120,112,111,114,116,0,83,75,73,82,84,0,87,65,76,76,45,79,85,84,69,82,0,87,65,76,76,45,73,78,78,69,82,0,70,73,76,76,0,76,65,89,69,82,58,37,100,0,111,111,122,101,115,104,105,101,108,100,0,105,110,115,101,116,48,0,105,110,115,101,116,0,105,110,115,101,116,120,0,71,101,110,101,114,97,116,101,100,32,105,110,115,101,116,32,105,110,32,37,53,46,51,102,115,10,0,71,101,110,101,114,97,116,101,100,32,117,112,47,100,111,119,110,32,115,107,105,110,32,105,110,32,37,53,46,51,102,115,10,0,115,107,105,110,0,115,107,105,114,116,0,82,101,97,100,105,110,103,32,109,101,115,104,32,102,114,111,109,32,115,111,99,107,101,116,32,119,105,116,104,32,37,105,32,118,101,114,116,101,120,101,115,10,0,76,111,97,100,105,110,103,32,37,115,32,102,114,111,109,32,100,105,115,107,46,46,46,10,0,70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,109,111,100,101,108,58,32,37,115,10,0,76,111,97,100,101,100,32,102,114,111,109,32,100,105,115,107,32,105,110,32,37,53,46,51,102,115,10,0,65,110,97,108,121,122,105,110,103,32,97,110,100,32,111,112,116,105,109,105,122,105,110,103,32,109,111,100,101,108,46,46,46,10,0,32,32,70,97,99,101,32,99,111,117,110,116,115,58,32,37,105,32,45,62,32,37,105,32,37,48,46,49,102,37,37,10,0,32,32,86,101,114,116,101,120,32,99,111,117,110,116,115,58,32,37,105,32,45,62,32,37,105,32,37,48,46,49,102,37,37,10,0,32,32,83,105,122,101,58,32,37,102,32,37,102,32,37,102,10,0,32,32,118,77,105,110,58,32,37,102,32,37,102,32,37,102,10,0,32,32,118,77,97,120,58,32,37,102,32,37,102,32,37,102,10,0,32,32,77,97,116,114,105,120,58,32,37,102,32,37,102,32,37,102,10,0,79,98,106,101,99,116,32,105,115,32,119,97,121,32,116,111,32,98,105,103,44,32,67,117,114,97,69,110,103,105,110,101,32,98,117,103,63,0,79,112,116,105,109,105,122,101,32,109,111,100,101,108,32,37,53,46,51,102,115,32,10,0,83,108,105,99,105,110,103,32,109,111,100,101,108,46,46,46,10,0,111,112,101,110,111,117,116,108,105,110,101,0,83,108,105,99,101,100,32,109,111,100,101,108,32,105,110,32,37,53,46,51,102,115,10,0,71,101,110,101,114,97,116,105,110,103,32,115,117,112,112,111,114,116,32,109,97,112,46,46,46,10,0,71,101,110,101,114,97,116,105,110,103,32,108,97,121,101,114,32,112,97,114,116,115,46,46,46,10,0,71,101,110,101,114,97,116,101,100,32,108,97,121,101,114,32,112,97,114,116,115,32,105,110,32,37,53,46,51,102,115,10,0,111,112,116,105,109,105,122,101,100,0,108,97,121,101,114,84,104,105,99,107,110,101,115,115,0,105,110,105,116,105,97,108,76,97,121,101,114,84,104,105,99,107,110,101,115,115,0,102,105,108,97,109,101,110,116,68,105,97,109,101,116,101,114,0,102,105,108,97,109,101,110,116,70,108,111,119,0,108,97,121,101,114,48,101,120,116,114,117,115,105,111,110,87,105,100,116,104,0,101,120,116,114,117,115,105,111,110,87,105,100,116,104,0,105,110,115,101,116,67,111,117,110,116,0,100,111,119,110,83,107,105,110,67,111,117,110,116,0,117,112,83,107,105,110,67,111,117,110,116,0,115,107,105,114,116,68,105,115,116,97,110,99,101,0,115,107,105,114,116,76,105,110,101,67,111,117,110,116,0,115,107,105,114,116,77,105,110,76,101,110,103,116,104,0,105,110,105,116,105,97,108,83,112,101,101,100,117,112,76,97,121,101,114,115,0,105,110,105,116,105,97,108,76,97,121,101,114,83,112,101,101,100,0,112,114,105,110,116,83,112,101,101,100,0,105,110,115,101,116,48,83,112,101,101,100,0,105,110,115,101,116,88,83,112,101,101,100,0,109,111,118,101,83,112,101,101,100,0,102,97,110,70,117,108,108,79,110,76,97,121,101,114,78,114,0,115,112,97,114,115,101,73,110,102,105,108,108,76,105,110,101,68,105,115,116,97,110,99,101,0,105,110,102,105,108,108,79,118,101,114,108,97,112,0,105,110,102,105,108,108,83,112,101,101,100,0,105,110,102,105,108,108,80,97,116,116,101,114,110,0,115,117,112,112,111,114,116,84,121,112,101,0,115,117,112,112,111,114,116,65,110,103,108,101,0,115,117,112,112,111,114,116,69,118,101,114,121,119,104,101,114,101,0,115,117,112,112,111,114,116,76,105,110,101,68,105,115,116,97,110,99,101,0,115,117,112,112,111,114,116,88,89,68,105,115,116,97,110,99,101,0,115,117,112,112,111,114,116,90,68,105,115,116,97,110,99,101,0,115,117,112,112,111,114,116,69,120,116,114,117,100,101,114,0,114,101,116,114,97,99,116,105,111,110,65,109,111,117,110,116,0,114,101,116,114,97,99,116,105,111,110,65,109,111,117,110,116,80,114,105,109,101,0,114,101,116,114,97,99,116,105,111,110,83,112,101,101,100,0,114,101,116,114,97,99,116,105,111,110,65,109,111,117,110,116,69,120,116,114,117,100,101,114,83,119,105,116,99,104,0,114,101,116,114,97,99,116,105,111,110,77,105,110,105,109,97,108,68,105,115,116,97,110,99,101,0,109,105,110,105,109,97,108,69,120,116,114,117,115,105,111,110,66,101,102,111,114,101,82,101,116,114,97,99,116,105,111,110,0,114,101,116,114,97,99,116,105,111,110,90,72,111,112,0,101,110,97,98,108,101,67,111,109,98,105,110,103,0,101,110,97,98,108,101,79,111,122,101,83,104,105,101,108,100,0,119,105,112,101,84,111,119,101,114,83,105,122,101,0,109,117,108,116,105,86,111,108,117,109,101,79,118,101,114,108,97,112,0,111,98,106,101,99,116,80,111,115,105,116,105,111,110,46,88,0,112,111,115,120,0,111,98,106,101,99,116,80,111,115,105,116,105,111,110,46,89,0,112,111,115,121,0,111,98,106,101,99,116,83,105,110,107,0,97,117,116,111,67,101,110,116,101,114,0,114,97,102,116,77,97,114,103,105,110,0,114,97,102,116,76,105,110,101,83,112,97,99,105,110,103,0,114,97,102,116,66,97,115,101,84,104,105,99,107,110,101,115,115,0,114,97,102,116,66,97,115,101,76,105,110,101,119,105,100,116,104,0,114,97,102,116,73,110,116,101,114,102,97,99,101,84,104,105,99,107,110,101,115,115,0,114,97,102,116,73,110,116,101,114,102,97,99,101,76,105,110,101,119,105,100,116,104,0,114,97,102,116,73,110,116,101,114,102,97,99,101,76,105,110,101,83,112,97,99,105,110,103,0,114,97,102,116,65,105,114,71,97,112,0,114,97,102,116,65,105,114,71,97,112,76,97,121,101,114,48,0,114,97,102,116,66,97,115,101,83,112,101,101,100,0,114,97,102,116,70,97,110,83,112,101,101,100,0,114,97,102,116,83,117,114,102,97,99,101,84,104,105,99,107,110,101,115,115,0,114,97,102,116,83,117,114,102,97,99,101,76,105,110,101,119,105,100,116,104,0,114,97,102,116,83,117,114,102,97,99,101,76,105,110,101,83,112,97,99,105,110,103,0,114,97,102,116,83,117,114,102,97,99,101,76,97,121,101,114,115,0,114,97,102,116,83,117,114,102,97,99,101,83,112,101,101,100,0,109,105,110,105,109,97,108,76,97,121,101,114,84,105,109,101,0,109,105,110,105,109,97,108,70,101,101,100,114,97,116,101,0,99,111,111,108,72,101,97,100,76,105,102,116,0,102,97,110,83,112,101,101,100,77,105,110,0,102,97,110,83,112,101,101,100,77,97,120,0,102,105,120,72,111,114,114,105,98,108,101,0,115,112,105,114,97,108,105,122,101,77,111,100,101,0,115,105,109,112,108,101,77,111,100,101,0,103,99,111,100,101,70,108,97,118,111,114,0,101,120,116,114,117,100,101,114,79,102,102,115,101,116,91,49,93,46,88,0,101,120,116,114,117,100,101,114,79,102,102,115,101,116,91,49,93,46,89,0,101,120,116,114,117,100,101,114,79,102,102,115,101,116,91,50,93,46,88,0,101,120,116,114,117,100,101,114,79,102,102,115,101,116,91,50,93,46,89,0,101,120,116,114,117,100,101,114,79,102,102,115,101,116,91,51,93,46,88,0,101,120,116,114,117,100,101,114,79,102,102,115,101,116,91,51,93,46,89,0,77,49,48,57,32,83,50,49,48,32,32,32,32,32,59,72,101,97,116,117,112,32,116,111,32,50,49,48,67,10,71,50,49,32,32,32,32,32,32,32,32,32,32,32,59,109,101,116,114,105,99,32,118,97,108,117,101,115,10,71,57,48,32,32,32,32,32,32,32,32,32,32,32,59,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,105,110,103,10,71,50,56,32,32,32,32,32,32,32,32,32,32,32,59,72,111,109,101,10,71,49,32,90,49,53,46,48,32,70,51,48,48,32,59,109,111,118,101,32,116,104,101,32,112,108,97,116,102,111,114,109,32,100,111,119,110,32,49,53,109,109,10,71,57,50,32,69,48,32,32,32,32,32,32,32,32,59,122,101,114,111,32,116,104,101,32,101,120,116,114,117,100,101,100,32,108,101,110,103,116,104,10,71,49,32,70,50,48,48,32,69,53,32,32,32,32,59,101,120,116,114,117,100,101,32,53,109,109,32,111,102,32,102,101,101,100,32,115,116,111,99,107,10,71,57,50,32,69,48,32,32,32,32,32,32,32,32,59,122,101,114,111,32,116,104,101,32,101,120,116,114,117,100,101,100,32,108,101,110,103,116,104,32,97,103,97,105,110,10,0,77,49,48,52,32,83,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,101,120,116,114,117,100,101,114,32,104,101,97,116,101,114,32,111,102,102,10,77,49,52,48,32,83,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,104,101,97,116,101,100,32,98,101,100,32,104,101,97,116,101,114,32,111,102,102,32,40,105,102,32,121,111,117,32,104,97,118,101,32,105,116,41,10,71,57,49,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,114,101,108,97,116,105,118,101,32,112,111,115,105,116,105,111,110,105,110,103,10,71,49,32,69,45,49,32,70,51,48,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,114,101,116,114,97,99,116,32,116,104,101,32,102,105,108,97,109,101,110,116,32,97,32,98,105,116,32,98,101,102,111,114,101,32,108,105,102,116,105,110,103,32,116,104,101,32,110,111,122,122,108,101,44,32,116,111,32,114,101,108,101,97,115,101,32,115,111,109,101,32,111,102,32,116,104,101,32,112,114,101,115,115,117,114,101,10,71,49,32,90,43,48,46,53,32,69,45,53,32,88,45,50,48,32,89,45,50,48,32,70,57,48,48,48,32,32,32,59,109,111,118,101,32,90,32,117,112,32,97,32,98,105,116,32,97,110,100,32,114,101,116,114,97,99,116,32,102,105,108,97,109,101,110,116,32,101,118,101,110,32,109,111,114,101,10,71,50,56,32,88,48,32,89,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,109,111,118,101,32,88,47,89,32,116,111,32,109,105,110,32,101,110,100,115,116,111,112,115,44,32,115,111,32,116,104,101,32,104,101,97,100,32,105,115,32,111,117,116,32,111,102,32,116,104,101,32,119,97,121,10,77,56,52,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,115,116,101,112,112,101,114,115,32,111,102,102,10,71,57,48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,59,97,98,115,111,108,117,116,101,32,112,111,115,105,116,105,111,110,105,110,103,10,0,115,116,97,114,116,67,111,100,101,0,101,110,100,67,111,100,101,0,112,114,101,83,119,105,116,99,104,69,120,116,114,117,100,101,114,67,111,100,101,0,112,111,115,116,83,119,105,116,99,104,69,120,116,114,117,100,101,114,67,111,100,101,0,100,101,102,97,117,108,116,46,99,102,103,0,34,34,34,0,67,111,110,102,105,103,40,37,115,41,58,76,37,122,100,58,32,70,97,105,108,101,100,32,119,104,105,108,101,32,114,101,97,100,105,110,103,32,109,117,108,116,105,108,105,110,101,32,115,116,114,105,110,103,46,10,0,67,111,110,102,105,103,40,37,115,41,58,32,76,105,110,101,32,37,122,100,58,32,78,111,32,107,101,121,32,118,97,108,117,101,32,112,97,105,114,32,102,111,117,110,100,10,0,67,111,110,102,105,103,40,37,115,41,58,76,37,122,100,58,32,70,97,105,108,101,100,32,116,111,32,115,101,116,32,39,37,115,39,32,116,111,32,39,37,115,39,10,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,49,52,98,97,115,105,99,95,105,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,76,97,121,101,114,32,99,111,117,110,116,58,32,37,105,10,0,114,116,0,32,118,101,114,116,101,120,32,37,108,102,32,37,108,102,32,37,108,102,0,114,98,0,115,111,108,105,100,0,46,115,116,108,0,82,101,97,100,105,110,103,32,109,101,115,104,32,102,114,111,109,32,98,105,110,97,114,121,32,98,108,111,98,32,119,105,116,104,32,37,105,32,118,101,114,116,101,120,101,115,10,0,80,114,111,103,114,101,115,115,58,37,115,58,37,105,58,37,105,10,0,67,111,110,110,101,99,116,32,116,111,32,37,115,58,37,100,32,102,97,105,108,101,100,10,0,67,108,105,101,110,116,83,111,99,107,101,116,58,58,114,101,99,118,65,108,108,32,101,114,114,111,114,46,46,46,0,78,49,48,67,108,105,112,112,101,114,76,105,98,49,49,67,108,105,112,112,101,114,66,97,115,101,69,0,85,112,100,97,116,101,69,100,103,101,73,110,116,111,65,69,76,58,32,105,110,118,97,108,105,100,32,99,97,108,108,0,78,49,48,67,108,105,112,112,101,114,76,105,98,49,54,99,108,105,112,112,101,114,69,120,99,101,112,116,105,111,110,69,0,68,111,77,97,120,105,109,97,32,101,114,114,111,114,0,73,110,116,101,114,115,101,99,116,105,111,110,32,101,114,114,111,114,0,80,114,111,99,101,115,115,72,111,114,105,122,111,110,116,97,108,32,101,114,114,111,114,0,78,49,48,67,108,105,112,112,101,114,76,105,98,55,67,108,105,112,112,101,114,69,0,67,111,111,114,100,105,110,97,116,101,32,111,117,116,115,105,100,101,32,97,108,108,111,119,101,100,32,114,97,110,103,101,0,69,114,114,111,114,58,32,80,111,108,121,84,114,101,101,32,115,116,114,117,99,116,32,105,115,32,110,101,101,100,32,102,111,114,32,111,112,101,110,32,112,97,116,104,32,99,108,105,112,112,105,110,103,46,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+4312);allocate([255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,110,97,110,0,45,0,119,43,0,114,119,97,0,114,0,10,0,78,83,116,51,95,95,50,56,105,111,115,95,98,97,115,101,69,0,78,83,116,51,95,95,50,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,78,83,116,51,95,95,50,55,99,111,108,108,97,116,101,73,99,69,69,0,78,83,116,51,95,95,50,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,78,83,116,51,95,95,50,55,99,111,108,108,97,116,101,73,119,69,69,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,37,112,0,78,83,116,51,95,95,50,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,78,83,116,51,95,95,50,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,78,83,116,51,95,95,50,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,37,112,0,0,0,0,76,0,108,108,0,37,0,0,0,0,0,78,83,116,51,95,95,50,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,50,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,78,83,116,51,95,95,50,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,37,73,58,37,77,58,37,83,32,37,112,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,65,77,0,80,77,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,77,97,114,99,104,0,65,112,114,105,108,0,77,97,121,0,74,117,110,101,0,74,117,108,121,0,65,117,103,117,115,116,0,83,101,112,116,101,109,98,101,114,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,68,101,99,101,109,98,101,114,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,83,117,110,100,97,121,0,77,111,110,100,97,121,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,84,104,117,114,115,100,97,121,0,70,114,105,100,97,121,0,83,97,116,117,114,100,97,121,0,83,117,110,0,77,111,110,0,84,117,101,0,87,101,100,0,84,104,117,0,70,114,105,0,83,97,116,0,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,37,72,58,37,77,37,72,58,37,77,58,37,83,37,72,58,37,77,58,37,83,78,83,116,51,95,95,50,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,78,83,116,51,95,95,50,57,116,105,109,101,95,98,97,115,101,69,0,78,83,116,51,95,95,50,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,78,83,116,51,95,95,50,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,48,95,95,116,105,109,101,95,112,117,116,69,0,78,83,116,51,95,95,50,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,95,98,97,115,101,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,78,83,116,51,95,95,50,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,48,49,50,51,52,53,54,55,56,57,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,48,49,50,51,52,53,54,55,56,57,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,37,46,48,76,102,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,78,83,116,51,95,95,50,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,78,83,116,51,95,95,50,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,78,83,116,51,95,95,50,56,109,101,115,115,97,103,101,115,73,99,69,69,0,78,83,116,51,95,95,50,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,50,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,78,83,116,51,95,95,50,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,78,83,116,51,95,95,50,56,109,101,115,115,97,103,101,115,73,119,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,78,83,116,51,95,95,50,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,78,83,116,51,95,95,50,53,99,116,121,112,101,73,99,69,69,0,78,83,116,51,95,95,50,49,48,99,116,121,112,101,95,98,97,115,101,69,0,78,83,116,51,95,95,50,53,99,116,121,112,101,73,119,69,69,0,78,83,116,51,95,95,50,56,110,117,109,112,117,110,99,116,73,99,69,69,0,78,83,116,51,95,95,50,56,110,117,109,112,117,110,99,116,73,119,69,69,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,104,111,109,101,47,116,114,97,118,105,115,47,98,117,105,108,100,47,83,107,101,101,110,47,67,117,114,97,74,83,45,69,110,103,105,110,101,47,116,111,111,108,115,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,109,97,115,116,101,114,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,118,101,99,116,111,114,0,78,83,116,51,95,95,50,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,104,111,109,101,47,116,114,97,118,105,115,47,98,117,105,108,100,47,83,107,101,101,110,47,67,117,114,97,74,83,45,69,110,103,105,110,101,47,116,111,111,108,115,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,109,97,115,116,101,114,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,115,116,114,105,110,103,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,33,34,97,108,108,111,99,97,116,111,114,60,84,62,58,58,97,108,108,111,99,97,116,101,58,58,98,97,100,95,97,108,108,111,99,34,0,47,104,111,109,101,47,116,114,97,118,105,115,47,98,117,105,108,100,47,83,107,101,101,110,47,67,117,114,97,74,83,45,69,110,103,105,110,101,47,116,111,111,108,115,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,109,97,115,116,101,114,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,109,101,109,111,114,121,0,97,108,108,111,99,97,116,101,0,37,115,10,0,37,100,0,37,76,102,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,83,116,57,101,120,99,101,112,116,105,111,110,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,57,98,97,100,95,97,108,108,111,99,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,83,116,56,98,97,100,95,99,97,115,116,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,118,0,68,110,0,99,0,80,75,99,0,108,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,102,97,108,115,101,0,46,0],"i8",ALLOC_NONE,Runtime.GLOBAL_BASE+14552);var tempDoublePtr=STATICTOP;STATICTOP+=16;function _atexit(func,arg){__ATEXIT__.unshift({func:func,arg:arg})}function ___cxa_atexit(){return _atexit.apply(null,arguments)}Module["_i64Subtract"]=_i64Subtract;function ___assert_fail(condition,filename,line,func){ABORT=true;throw"Assertion failed: "+Pointer_stringify(condition)+", at: "+[filename?Pointer_stringify(filename):"unknown filename",line,func?Pointer_stringify(func):"unknown function"]+" at "+stackTrace()}Module["_roundf"]=_roundf;function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:(function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var ptr in EXCEPTIONS.infos){var info=EXCEPTIONS.infos[ptr];if(info.adjusted===adjusted){return ptr}}return adjusted}),addRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++}),decRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0&&!info.rethrown){if(info.destructor){Runtime.dynCall("vi",info.destructor,[ptr])}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}}),clearRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0})};function ___resumeException(ptr){if(!EXCEPTIONS.last){EXCEPTIONS.last=ptr}throw ptr+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."}function ___cxa_find_matching_catch(){var thrown=EXCEPTIONS.last;if(!thrown){return(asm["setTempRet0"](0),0)|0}var info=EXCEPTIONS.infos[thrown];var throwntype=info.type;if(!throwntype){return(asm["setTempRet0"](0),thrown)|0}var typeArray=Array.prototype.slice.call(arguments);var pointer=Module["___cxa_is_pointer_type"](throwntype);if(!___cxa_find_matching_catch.buffer)___cxa_find_matching_catch.buffer=_malloc(4);HEAP32[___cxa_find_matching_catch.buffer>>2]=thrown;thrown=___cxa_find_matching_catch.buffer;for(var i=0;i<typeArray.length;i++){if(typeArray[i]&&Module["___cxa_can_catch"](typeArray[i],throwntype,thrown)){thrown=HEAP32[thrown>>2];info.adjusted=thrown;return(asm["setTempRet0"](typeArray[i]),thrown)|0}}thrown=HEAP32[thrown>>2];return(asm["setTempRet0"](throwntype),thrown)|0}function ___cxa_throw(ptr,type,destructor){EXCEPTIONS.infos[ptr]={ptr:ptr,adjusted:ptr,type:type,destructor:destructor,refcount:0,caught:false,rethrown:false};EXCEPTIONS.last=ptr;if(!("uncaught_exception"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exception=1}else{__ZSt18uncaught_exceptionv.uncaught_exception++}throw ptr+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."}Module["_memset"]=_memset;function ___gxx_personality_v0(){}Module["_pthread_mutex_lock"]=_pthread_mutex_lock;function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]);return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?Pointer_stringify(tm_zone):""};var pattern=Pointer_stringify(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule])}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value==="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={"%a":(function(date){return WEEKDAYS[date.tm_wday].substring(0,3)}),"%A":(function(date){return WEEKDAYS[date.tm_wday]}),"%b":(function(date){return MONTHS[date.tm_mon].substring(0,3)}),"%B":(function(date){return MONTHS[date.tm_mon]}),"%C":(function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)}),"%d":(function(date){return leadingNulls(date.tm_mday,2)}),"%e":(function(date){return leadingSomething(date.tm_mday,2," ")}),"%g":(function(date){return getWeekBasedYear(date).toString().substring(2)}),"%G":(function(date){return getWeekBasedYear(date)}),"%H":(function(date){return leadingNulls(date.tm_hour,2)}),"%I":(function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)}),"%j":(function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)}),"%m":(function(date){return leadingNulls(date.tm_mon+1,2)}),"%M":(function(date){return leadingNulls(date.tm_min,2)}),"%n":(function(){return"\n"}),"%p":(function(date){if(date.tm_hour>=0&&date.tm_hour<12){return"AM"}else{return"PM"}}),"%S":(function(date){return leadingNulls(date.tm_sec,2)}),"%t":(function(){return"\t"}),"%u":(function(date){var day=new Date(date.tm_year+1900,date.tm_mon+1,date.tm_mday,0,0,0,0);return day.getDay()||7}),"%U":(function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?"01":"00"}),"%V":(function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return"53"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return"01"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)}),"%w":(function(date){var day=new Date(date.tm_year+1900,date.tm_mon+1,date.tm_mday,0,0,0,0);return day.getDay()}),"%W":(function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?"01":"00"}),"%y":(function(date){return(date.tm_year+1900).toString().substring(2)}),"%Y":(function(date){return date.tm_year+1900}),"%z":(function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?"+":"-")+String("0000"+off).slice(-4)}),"%Z":(function(date){return date.tm_zone}),"%%":(function(){return"%"})};for(var rule in EXPANSION_RULES_2){if(pattern.indexOf(rule)>=0){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date))}}var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}function _abort(){Module["abort"]()}function _pthread_once(ptr,func){if(!_pthread_once.seen)_pthread_once.seen={};if(ptr in _pthread_once.seen)return;Runtime.dynCall("v",func);_pthread_once.seen[ptr]=1}Module["_i64Add"]=_i64Add;var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],"i8",ALLOC_STATIC);Module["_llvm_cttz_i32"]=_llvm_cttz_i32;Module["___udivmoddi4"]=___udivmoddi4;Module["___divdi3"]=___divdi3;function ___lock(){}function ___unlock(){}var PTHREAD_SPECIFIC={};function _pthread_getspecific(key){return PTHREAD_SPECIFIC[key]||0}var PTHREAD_SPECIFIC_NEXT_KEY=1;var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key,destructor){if(key==0){return ERRNO_CODES.EINVAL}HEAP32[key>>2]=PTHREAD_SPECIFIC_NEXT_KEY;PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY]=0;PTHREAD_SPECIFIC_NEXT_KEY++;return 0}function __inet_pton4_raw(str){var b=str.split(".");for(var i=0;i<4;i++){var tmp=Number(b[i]);if(isNaN(tmp))return null;b[i]=tmp}return(b[0]|b[1]<<8|b[2]<<16|b[3]<<24)>>>0}function _inet_addr(ptr){var addr=__inet_pton4_raw(Pointer_stringify(ptr));if(addr===null){return-1}return addr}function __exit(status){Module["exit"](status)}function _exit(status){__exit(status)}function _pthread_setspecific(key,value){if(!(key in PTHREAD_SPECIFIC)){return ERRNO_CODES.EINVAL}PTHREAD_SPECIFIC[key]=value;return 0}function _malloc(bytes){var ptr=Runtime.dynamicAlloc(bytes+8);return ptr+8&4294967288}Module["_malloc"]=_malloc;function ___cxa_allocate_exception(size){return _malloc(size)}var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};function ___setErrNo(value){if(Module["___errno_location"])HEAP32[Module["___errno_location"]()>>2]=value;return value}var PATH={splitPath:(function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)}),normalizeArray:(function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up--;up){parts.unshift("..")}}return parts}),normalize:(function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter((function(p){return!!p})),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path}),dirname:(function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir}),basename:(function(path){if(path==="/")return"/";var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)}),extname:(function(path){return PATH.splitPath(path)[3]}),join:(function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))}),join2:(function(l,r){return PATH.normalize(l+"/"+r)}),resolve:(function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!=="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter((function(p){return!!p})),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."}),relative:(function(from,to){from=PATH.resolve(from).substr(1);to=PATH.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")})};var TTY={ttys:[],init:(function(){}),shutdown:(function(){}),register:(function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)}),stream_ops:{open:(function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}stream.tty=tty;stream.seekable=false}),close:(function(stream){stream.tty.ops.flush(stream.tty)}),flush:(function(stream){stream.tty.ops.flush(stream.tty)}),read:(function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(ERRNO_CODES.ENXIO)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead}),write:(function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(ERRNO_CODES.ENXIO)}for(var i=0;i<length;i++){try{stream.tty.ops.put_char(stream.tty,buffer[offset+i])}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}}if(length){stream.node.timestamp=Date.now()}return i})},default_tty_ops:{get_char:(function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=new Buffer(BUFSIZE);var bytesRead=0;var isPosixPlatform=process.platform!="win32";var fd=process.stdin.fd;if(isPosixPlatform){var usingDevice=false;try{fd=fs.openSync("/dev/stdin","r");usingDevice=true}catch(e){}}try{bytesRead=fs.readSync(fd,buf,0,BUFSIZE,null)}catch(e){if(e.toString().indexOf("EOF")!=-1)bytesRead=0;else throw e}if(usingDevice){fs.closeSync(fd)}if(bytesRead>0){result=buf.slice(0,bytesRead).toString("utf-8")}else{result=null}}else if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()}),put_char:(function(tty,val){if(val===null||val===10){Module["print"](UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}}),flush:(function(tty){if(tty.output&&tty.output.length>0){Module["print"](UTF8ArrayToString(tty.output,0));tty.output=[]}})},default_tty1_ops:{put_char:(function(tty,val){if(val===null||val===10){Module["printErr"](UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}}),flush:(function(tty){if(tty.output&&tty.output.length>0){Module["printErr"](UTF8ArrayToString(tty.output,0));tty.output=[]}})}};var MEMFS={ops_table:null,mount:(function(mount){return MEMFS.createNode(null,"/",16384|511,0)}),createNode:(function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node}return node}),getFileDataAsRegularArray:(function(node){if(node.contents&&node.contents.subarray){var arr=[];for(var i=0;i<node.usedBytes;++i)arr.push(node.contents[i]);return arr}return node.contents}),getFileDataAsTypedArray:(function(node){if(!node.contents)return new Uint8Array;if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)}),expandFileStorage:(function(node,newCapacity){if(node.contents&&node.contents.subarray&&newCapacity>node.contents.length){node.contents=MEMFS.getFileDataAsRegularArray(node);node.usedBytes=node.contents.length}if(!node.contents||node.contents.subarray){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)|0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0);return}if(!node.contents&&newCapacity>0)node.contents=[];while(node.contents.length<newCapacity)node.contents.push(0)}),resizeFileStorage:(function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0;return}if(!node.contents||node.contents.subarray){var oldContents=node.contents;node.contents=new Uint8Array(new ArrayBuffer(newSize));if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize;return}if(!node.contents)node.contents=[];if(node.contents.length>newSize)node.contents.length=newSize;else while(node.contents.length<newSize)node.contents.push(0);node.usedBytes=newSize}),node_ops:{getattr:(function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr}),setattr:(function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}}),lookup:(function(parent,name){throw FS.genericErrors[ERRNO_CODES.ENOENT]}),mknod:(function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)}),rename:(function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}}}delete old_node.parent.contents[old_node.name];old_node.name=new_name;new_dir.contents[new_name]=old_node;old_node.parent=new_dir}),unlink:(function(parent,name){delete parent.contents[name]}),rmdir:(function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}delete parent.contents[name]}),readdir:(function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries}),symlink:(function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node}),readlink:(function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return node.link})},stream_ops:{read:(function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);assert(size>=0);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size}),write:(function(stream,buffer,offset,length,position,canOwn){if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=new Uint8Array(buffer.subarray(offset,offset+length));node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray)node.contents.set(buffer.subarray(offset,offset+length),position);else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length}),llseek:(function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return position}),allocate:(function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)}),mmap:(function(stream,buffer,offset,length,position,prot,flags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&(contents.buffer===buffer||contents.buffer===buffer.buffer)){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<stream.node.usedBytes){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;ptr=_malloc(length);if(!ptr){throw new FS.ErrnoError(ERRNO_CODES.ENOMEM)}buffer.set(contents,ptr)}return{ptr:ptr,allocated:allocated}}),msync:(function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0})}};var IDBFS={dbs:{},indexedDB:(function(){if(typeof indexedDB!=="undefined")return indexedDB;var ret=null;if(typeof window==="object")ret=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB;assert(ret,"IDBFS used, but indexedDB not supported");return ret}),DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:(function(mount){return MEMFS.mount.apply(null,arguments)}),syncfs:(function(mount,populate,callback){IDBFS.getLocalSet(mount,(function(err,local){if(err)return callback(err);IDBFS.getRemoteSet(mount,(function(err,remote){if(err)return callback(err);var src=populate?remote:local;var dst=populate?local:remote;IDBFS.reconcile(src,dst,callback)}))}))}),getDB:(function(name,callback){var db=IDBFS.dbs[name];if(db){return callback(null,db)}var req;try{req=IDBFS.indexedDB().open(name,IDBFS.DB_VERSION)}catch(e){return callback(e)}if(!req){return callback("Unable to connect to IndexedDB")}req.onupgradeneeded=(function(e){var db=e.target.result;var transaction=e.target.transaction;var fileStore;if(db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)){fileStore=transaction.objectStore(IDBFS.DB_STORE_NAME)}else{fileStore=db.createObjectStore(IDBFS.DB_STORE_NAME)}if(!fileStore.indexNames.contains("timestamp")){fileStore.createIndex("timestamp","timestamp",{unique:false})}});req.onsuccess=(function(){db=req.result;IDBFS.dbs[name]=db;callback(null,db)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),getLocalSet:(function(mount,callback){var entries={};function isRealDir(p){return p!=="."&&p!==".."}function toAbsolute(root){return(function(p){return PATH.join2(root,p)})}var check=FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));while(check.length){var path=check.pop();var stat;try{stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){check.push.apply(check,FS.readdir(path).filter(isRealDir).map(toAbsolute(path)))}entries[path]={timestamp:stat.mtime}}return callback(null,{type:"local",entries:entries})}),getRemoteSet:(function(mount,callback){var entries={};IDBFS.getDB(mount.mountpoint,(function(err,db){if(err)return callback(err);var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readonly");transaction.onerror=(function(e){callback(this.error);e.preventDefault()});var store=transaction.objectStore(IDBFS.DB_STORE_NAME);var index=store.index("timestamp");index.openKeyCursor().onsuccess=(function(event){var cursor=event.target.result;if(!cursor){return callback(null,{type:"remote",db:db,entries:entries})}entries[cursor.primaryKey]={timestamp:cursor.key};cursor.continue()})}))}),loadLocalEntry:(function(path,callback){var stat,node;try{var lookup=FS.lookupPath(path);node=lookup.node;stat=FS.stat(path)}catch(e){return callback(e)}if(FS.isDir(stat.mode)){return callback(null,{timestamp:stat.mtime,mode:stat.mode})}else if(FS.isFile(stat.mode)){node.contents=MEMFS.getFileDataAsTypedArray(node);return callback(null,{timestamp:stat.mtime,mode:stat.mode,contents:node.contents})}else{return callback(new Error("node type not supported"))}}),storeLocalEntry:(function(path,entry,callback){try{if(FS.isDir(entry.mode)){FS.mkdir(path,entry.mode)}else if(FS.isFile(entry.mode)){FS.writeFile(path,entry.contents,{encoding:"binary",canOwn:true})}else{return callback(new Error("node type not supported"))}FS.chmod(path,entry.mode);FS.utime(path,entry.timestamp,entry.timestamp)}catch(e){return callback(e)}callback(null)}),removeLocalEntry:(function(path,callback){try{var lookup=FS.lookupPath(path);var stat=FS.stat(path);if(FS.isDir(stat.mode)){FS.rmdir(path)}else if(FS.isFile(stat.mode)){FS.unlink(path)}}catch(e){return callback(e)}callback(null)}),loadRemoteEntry:(function(store,path,callback){var req=store.get(path);req.onsuccess=(function(event){callback(null,event.target.result)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),storeRemoteEntry:(function(store,path,entry,callback){var req=store.put(entry,path);req.onsuccess=(function(){callback(null)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),removeRemoteEntry:(function(store,path,callback){var req=store.delete(path);req.onsuccess=(function(){callback(null)});req.onerror=(function(e){callback(this.error);e.preventDefault()})}),reconcile:(function(src,dst,callback){var total=0;var create=[];Object.keys(src.entries).forEach((function(key){var e=src.entries[key];var e2=dst.entries[key];if(!e2||e.timestamp>e2.timestamp){create.push(key);total++}}));var remove=[];Object.keys(dst.entries).forEach((function(key){var e=dst.entries[key];var e2=src.entries[key];if(!e2){remove.push(key);total++}}));if(!total){return callback(null)}var completed=0;var db=src.type==="remote"?src.db:dst.db;var transaction=db.transaction([IDBFS.DB_STORE_NAME],"readwrite");var store=transaction.objectStore(IDBFS.DB_STORE_NAME);function done(err){if(err){if(!done.errored){done.errored=true;return callback(err)}return}if(++completed>=total){return callback(null)}}transaction.onerror=(function(e){done(this.error);e.preventDefault()});create.sort().forEach((function(path){if(dst.type==="local"){IDBFS.loadRemoteEntry(store,path,(function(err,entry){if(err)return done(err);IDBFS.storeLocalEntry(path,entry,done)}))}else{IDBFS.loadLocalEntry(path,(function(err,entry){if(err)return done(err);IDBFS.storeRemoteEntry(store,path,entry,done)}))}}));remove.sort().reverse().forEach((function(path){if(dst.type==="local"){IDBFS.removeLocalEntry(path,done)}else{IDBFS.removeRemoteEntry(store,path,done)}}))})};var NODEFS={isWindows:false,staticInit:(function(){NODEFS.isWindows=!!process.platform.match(/^win/)}),mount:(function(mount){assert(ENVIRONMENT_IS_NODE);return NODEFS.createNode(null,"/",NODEFS.getMode(mount.opts.root),0)}),createNode:(function(parent,name,mode,dev){if(!FS.isDir(mode)&&!FS.isFile(mode)&&!FS.isLink(mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var node=FS.createNode(parent,name,mode);node.node_ops=NODEFS.node_ops;node.stream_ops=NODEFS.stream_ops;return node}),getMode:(function(path){var stat;try{stat=fs.lstatSync(path);if(NODEFS.isWindows){stat.mode=stat.mode|(stat.mode&146)>>1}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}return stat.mode}),realPath:(function(node){var parts=[];while(node.parent!==node){parts.push(node.name);node=node.parent}parts.push(node.mount.opts.root);parts.reverse();return PATH.join.apply(null,parts)}),flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:(function(flags){flags&=~2097152;flags&=~2048;flags&=~32768;flags&=~524288;if(flags in NODEFS.flagsToPermissionStringMap){return NODEFS.flagsToPermissionStringMap[flags]}else{throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}}),node_ops:{getattr:(function(node){var path=NODEFS.realPath(node);var stat;try{stat=fs.lstatSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}if(NODEFS.isWindows&&!stat.blksize){stat.blksize=4096}if(NODEFS.isWindows&&!stat.blocks){stat.blocks=(stat.size+stat.blksize-1)/stat.blksize|0}return{dev:stat.dev,ino:stat.ino,mode:stat.mode,nlink:stat.nlink,uid:stat.uid,gid:stat.gid,rdev:stat.rdev,size:stat.size,atime:stat.atime,mtime:stat.mtime,ctime:stat.ctime,blksize:stat.blksize,blocks:stat.blocks}}),setattr:(function(node,attr){var path=NODEFS.realPath(node);try{if(attr.mode!==undefined){fs.chmodSync(path,attr.mode);node.mode=attr.mode}if(attr.timestamp!==undefined){var date=new Date(attr.timestamp);fs.utimesSync(path,date,date)}if(attr.size!==undefined){fs.truncateSync(path,attr.size)}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),lookup:(function(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);var mode=NODEFS.getMode(path);return NODEFS.createNode(parent,name,mode)}),mknod:(function(parent,name,mode,dev){var node=NODEFS.createNode(parent,name,mode,dev);var path=NODEFS.realPath(node);try{if(FS.isDir(node.mode)){fs.mkdirSync(path,node.mode)}else{fs.writeFileSync(path,"",{mode:node.mode})}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}return node}),rename:(function(oldNode,newDir,newName){var oldPath=NODEFS.realPath(oldNode);var newPath=PATH.join2(NODEFS.realPath(newDir),newName);try{fs.renameSync(oldPath,newPath)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),unlink:(function(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);try{fs.unlinkSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),rmdir:(function(parent,name){var path=PATH.join2(NODEFS.realPath(parent),name);try{fs.rmdirSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),readdir:(function(node){var path=NODEFS.realPath(node);try{return fs.readdirSync(path)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),symlink:(function(parent,newName,oldPath){var newPath=PATH.join2(NODEFS.realPath(parent),newName);try{fs.symlinkSync(oldPath,newPath)}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),readlink:(function(node){var path=NODEFS.realPath(node);try{path=fs.readlinkSync(path);path=NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root),path);return path}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}})},stream_ops:{open:(function(stream){var path=NODEFS.realPath(stream.node);try{if(FS.isFile(stream.node.mode)){stream.nfd=fs.openSync(path,NODEFS.flagsToPermissionString(stream.flags))}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),close:(function(stream){try{if(FS.isFile(stream.node.mode)&&stream.nfd){fs.closeSync(stream.nfd)}}catch(e){if(!e.code)throw e;throw new FS.ErrnoError(ERRNO_CODES[e.code])}}),read:(function(stream,buffer,offset,length,position){if(length===0)return 0;var nbuffer=new Buffer(length);var res;try{res=fs.readSync(stream.nfd,nbuffer,0,length,position)}catch(e){throw new FS.ErrnoError(ERRNO_CODES[e.code])}if(res>0){for(var i=0;i<res;i++){buffer[offset+i]=nbuffer[i]}}return res}),write:(function(stream,buffer,offset,length,position){var nbuffer=new Buffer(buffer.subarray(offset,offset+length));var res;try{res=fs.writeSync(stream.nfd,nbuffer,0,length,position)}catch(e){throw new FS.ErrnoError(ERRNO_CODES[e.code])}return res}),llseek:(function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){try{var stat=fs.fstatSync(stream.nfd);position+=stat.size}catch(e){throw new FS.ErrnoError(ERRNO_CODES[e.code])}}}if(position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return position})}};var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:(function(mount){assert(ENVIRONMENT_IS_WORKER);if(!WORKERFS.reader)WORKERFS.reader=new FileReaderSync;var root=WORKERFS.createNode(null,"/",WORKERFS.DIR_MODE,0);var createdParents={};function ensureParent(path){var parts=path.split("/");var parent=root;for(var i=0;i<parts.length-1;i++){var curr=parts.slice(0,i+1).join("/");if(!createdParents[curr]){createdParents[curr]=WORKERFS.createNode(parent,parts[i],WORKERFS.DIR_MODE,0)}parent=createdParents[curr]}return parent}function base(path){var parts=path.split("/");return parts[parts.length-1]}Array.prototype.forEach.call(mount.opts["files"]||[],(function(file){WORKERFS.createNode(ensureParent(file.name),base(file.name),WORKERFS.FILE_MODE,0,file,file.lastModifiedDate)}));(mount.opts["blobs"]||[]).forEach((function(obj){WORKERFS.createNode(ensureParent(obj["name"]),base(obj["name"]),WORKERFS.FILE_MODE,0,obj["data"])}));(mount.opts["packages"]||[]).forEach((function(pack){pack["metadata"].files.forEach((function(file){var name=file.filename.substr(1);WORKERFS.createNode(ensureParent(name),base(name),WORKERFS.FILE_MODE,0,pack["blob"].slice(file.start,file.end))}))}));return root}),createNode:(function(parent,name,mode,dev,contents,mtime){var node=FS.createNode(parent,name,mode);node.mode=mode;node.node_ops=WORKERFS.node_ops;node.stream_ops=WORKERFS.stream_ops;node.timestamp=(mtime||new Date).getTime();assert(WORKERFS.FILE_MODE!==WORKERFS.DIR_MODE);if(mode===WORKERFS.FILE_MODE){node.size=contents.size;node.contents=contents}else{node.size=4096;node.contents={}}if(parent){parent.contents[name]=node}return node}),node_ops:{getattr:(function(node){return{dev:1,ino:undefined,mode:node.mode,nlink:1,uid:0,gid:0,rdev:undefined,size:node.size,atime:new Date(node.timestamp),mtime:new Date(node.timestamp),ctime:new Date(node.timestamp),blksize:4096,blocks:Math.ceil(node.size/4096)}}),setattr:(function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}}),lookup:(function(parent,name){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}),mknod:(function(parent,name,mode,dev){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),rename:(function(oldNode,newDir,newName){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),unlink:(function(parent,name){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),rmdir:(function(parent,name){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),readdir:(function(node){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),symlink:(function(parent,newName,oldPath){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}),readlink:(function(node){throw new FS.ErrnoError(ERRNO_CODES.EPERM)})},stream_ops:{read:(function(stream,buffer,offset,length,position){if(position>=stream.node.size)return 0;var chunk=stream.node.contents.slice(position,position+length);var ab=WORKERFS.reader.readAsArrayBuffer(chunk);buffer.set(new Uint8Array(ab),offset);return chunk.size}),write:(function(stream,buffer,offset,length,position){throw new FS.ErrnoError(ERRNO_CODES.EIO)}),llseek:(function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.size}}if(position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return position})}};STATICTOP+=16;STATICTOP+=16;STATICTOP+=16;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:(function(e){if(!(e instanceof FS.ErrnoError))throw e+" : "+stackTrace();return ___setErrNo(e.errno)}),lookupPath:(function(path,opts){path=PATH.resolve(FS.cwd(),path);opts=opts||{};if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};for(var key in defaults){if(opts[key]===undefined){opts[key]=defaults[key]}}if(opts.recurse_count>8){throw new FS.ErrnoError(ERRNO_CODES.ELOOP)}var parts=PATH.normalizeArray(path.split("/").filter((function(p){return!!p})),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count});current=lookup.node;if(count++>40){throw new FS.ErrnoError(ERRNO_CODES.ELOOP)}}}}return{path:current_path,node:current}}),getPath:(function(node){var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent}}),hashName:(function(parentid,name){var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length}),hashAddNode:(function(node){var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node}),hashRemoveNode:(function(node){var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}}),lookupNode:(function(parent,name){var err=FS.mayLookup(parent);if(err){throw new FS.ErrnoError(err,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)}),createNode:(function(parent,name,mode,rdev){if(!FS.FSNode){FS.FSNode=(function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev});FS.FSNode.prototype={};var readMode=292|73;var writeMode=146;Object.defineProperties(FS.FSNode.prototype,{read:{get:(function(){return(this.mode&readMode)===readMode}),set:(function(val){val?this.mode|=readMode:this.mode&=~readMode})},write:{get:(function(){return(this.mode&writeMode)===writeMode}),set:(function(val){val?this.mode|=writeMode:this.mode&=~writeMode})},isFolder:{get:(function(){return FS.isDir(this.mode)})},isDevice:{get:(function(){return FS.isChrdev(this.mode)})}})}var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node}),destroyNode:(function(node){FS.hashRemoveNode(node)}),isRoot:(function(node){return node===node.parent}),isMountpoint:(function(node){return!!node.mounted}),isFile:(function(mode){return(mode&61440)===32768}),isDir:(function(mode){return(mode&61440)===16384}),isLink:(function(mode){return(mode&61440)===40960}),isChrdev:(function(mode){return(mode&61440)===8192}),isBlkdev:(function(mode){return(mode&61440)===24576}),isFIFO:(function(mode){return(mode&61440)===4096}),isSocket:(function(mode){return(mode&49152)===49152}),flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:(function(str){var flags=FS.flagModes[str];if(typeof flags==="undefined"){throw new Error("Unknown file open mode: "+str)}return flags}),flagsToPermissionString:(function(flag){var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms}),nodePermissions:(function(node,perms){if(FS.ignorePermissions){return 0}if(perms.indexOf("r")!==-1&&!(node.mode&292)){return ERRNO_CODES.EACCES}else if(perms.indexOf("w")!==-1&&!(node.mode&146)){return ERRNO_CODES.EACCES}else if(perms.indexOf("x")!==-1&&!(node.mode&73)){return ERRNO_CODES.EACCES}return 0}),mayLookup:(function(dir){var err=FS.nodePermissions(dir,"x");if(err)return err;if(!dir.node_ops.lookup)return ERRNO_CODES.EACCES;return 0}),mayCreate:(function(dir,name){try{var node=FS.lookupNode(dir,name);return ERRNO_CODES.EEXIST}catch(e){}return FS.nodePermissions(dir,"wx")}),mayDelete:(function(dir,name,isdir){var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var err=FS.nodePermissions(dir,"wx");if(err){return err}if(isdir){if(!FS.isDir(node.mode)){return ERRNO_CODES.ENOTDIR}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return ERRNO_CODES.EBUSY}}else{if(FS.isDir(node.mode)){return ERRNO_CODES.EISDIR}}return 0}),mayOpen:(function(node,flags){if(!node){return ERRNO_CODES.ENOENT}if(FS.isLink(node.mode)){return ERRNO_CODES.ELOOP}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return ERRNO_CODES.EISDIR}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))}),MAX_OPEN_FDS:4096,nextfd:(function(fd_start,fd_end){fd_start=fd_start||0;fd_end=fd_end||FS.MAX_OPEN_FDS;for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(ERRNO_CODES.EMFILE)}),getStream:(function(fd){return FS.streams[fd]}),createStream:(function(stream,fd_start,fd_end){if(!FS.FSStream){FS.FSStream=(function(){});FS.FSStream.prototype={};Object.defineProperties(FS.FSStream.prototype,{object:{get:(function(){return this.node}),set:(function(val){this.node=val})},isRead:{get:(function(){return(this.flags&2097155)!==1})},isWrite:{get:(function(){return(this.flags&2097155)!==0})},isAppend:{get:(function(){return this.flags&1024})}})}var newStream=new FS.FSStream;for(var p in stream){newStream[p]=stream[p]}stream=newStream;var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream}),closeStream:(function(fd){FS.streams[fd]=null}),chrdev_stream_ops:{open:(function(stream){var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}}),llseek:(function(){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)})},major:(function(dev){return dev>>8}),minor:(function(dev){return dev&255}),makedev:(function(ma,mi){return ma<<8|mi}),registerDevice:(function(dev,ops){FS.devices[dev]={stream_ops:ops}}),getDevice:(function(dev){return FS.devices[dev]}),getMounts:(function(mount){var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts}),syncfs:(function(populate,callback){if(typeof populate==="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){console.log("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work")}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(err){assert(FS.syncFSRequests>0);FS.syncFSRequests--;return callback(err)}function done(err){if(err){if(!done.errored){done.errored=true;return doCallback(err)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach((function(mount){if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)}))}),mount:(function(type,opts,mountpoint){var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot}),unmount:(function(mountpoint){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach((function(hash){var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.indexOf(current.mount)!==-1){FS.destroyNode(current)}current=next}}));node.mounted=null;var idx=node.mount.mounts.indexOf(mount);assert(idx!==-1);node.mount.mounts.splice(idx,1)}),lookup:(function(parent,name){return parent.node_ops.lookup(parent,name)}),mknod:(function(path,mode,dev){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var err=FS.mayCreate(parent,name);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}return parent.node_ops.mknod(parent,name,mode,dev)}),create:(function(path,mode){mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)}),mkdir:(function(path,mode){mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)}),mkdirTree:(function(path,mode){var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=ERRNO_CODES.EEXIST)throw e}}}),mkdev:(function(path,mode,dev){if(typeof dev==="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)}),symlink:(function(oldpath,newpath){if(!PATH.resolve(oldpath)){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}var newname=PATH.basename(newpath);var err=FS.mayCreate(parent,newname);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}return parent.node_ops.symlink(parent,newname,oldpath)}),rename:(function(old_path,new_path){var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;try{lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}if(!old_dir||!new_dir)throw new FS.ErrnoError(ERRNO_CODES.ENOENT);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(ERRNO_CODES.EXDEV)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}relative=PATH.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var err=FS.mayDelete(old_dir,old_name,isdir);if(err){throw new FS.ErrnoError(err)}err=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(err){throw new FS.ErrnoError(err)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}if(new_dir!==old_dir){err=FS.nodePermissions(old_dir,"w");if(err){throw new FS.ErrnoError(err)}}try{if(FS.trackingDelegate["willMovePath"]){FS.trackingDelegate["willMovePath"](old_path,new_path)}}catch(e){console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}try{if(FS.trackingDelegate["onMovePath"])FS.trackingDelegate["onMovePath"](old_path,new_path)}catch(e){console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: "+e.message)}}),rmdir:(function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,true);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}}),readdir:(function(path){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}return node.node_ops.readdir(node)}),unlink:(function(path){var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var err=FS.mayDelete(parent,name,false);if(err){throw new FS.ErrnoError(err)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(ERRNO_CODES.EBUSY)}try{if(FS.trackingDelegate["willDeletePath"]){FS.trackingDelegate["willDeletePath"](path)}}catch(e){console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: "+e.message)}parent.node_ops.unlink(parent,name);FS.destroyNode(node);try{if(FS.trackingDelegate["onDeletePath"])FS.trackingDelegate["onDeletePath"](path)}catch(e){console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: "+e.message)}}),readlink:(function(path){var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(!link.node_ops.readlink){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}return PATH.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))}),stat:(function(path,dontFollow){var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(!node.node_ops.getattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}return node.node_ops.getattr(node)}),lstat:(function(path){return FS.stat(path,true)}),chmod:(function(path,mode,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})}),lchmod:(function(path,mode){FS.chmod(path,mode,true)}),fchmod:(function(fd,mode){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}FS.chmod(stream.node,mode)}),chown:(function(path,uid,gid,dontFollow){var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}node.node_ops.setattr(node,{timestamp:Date.now()})}),lchown:(function(path,uid,gid){FS.chown(path,uid,gid,true)}),fchown:(function(fd,uid,gid){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}FS.chown(stream.node,uid,gid)}),truncate:(function(path,len){if(len<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var node;if(typeof path==="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(ERRNO_CODES.EPERM)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EISDIR)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var err=FS.nodePermissions(node,"w");if(err){throw new FS.ErrnoError(err)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})}),ftruncate:(function(fd,len){var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}FS.truncate(stream.node,len)}),utime:(function(path,atime,mtime){var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})}),open:(function(path,flags,mode,fd_start,fd_end){if(path===""){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}flags=typeof flags==="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode==="undefined"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path==="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(ERRNO_CODES.EEXIST)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}if(!created){var err=FS.mayOpen(node,flags);if(err){throw new FS.ErrnoError(err)}}if(flags&512){FS.truncate(node,0)}flags&=~(128|512);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1;Module["printErr"]("read file: "+path)}}try{if(FS.trackingDelegate["onOpenFile"]){var trackingFlags=0;if((flags&2097155)!==1){trackingFlags|=FS.tracking.openFlags.READ}if((flags&2097155)!==0){trackingFlags|=FS.tracking.openFlags.WRITE}FS.trackingDelegate["onOpenFile"](path,trackingFlags)}}catch(e){console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: "+e.message)}return stream}),close:(function(stream){if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}}),llseek:(function(stream,offset,whence){if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position}),read:(function(stream,buffer,offset,length,position){if(length<0||position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EISDIR)}if(!stream.stream_ops.read){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var seeking=true;if(typeof position==="undefined"){position=stream.position;seeking=false}else if(!stream.seekable){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead}),write:(function(stream,buffer,offset,length,position,canOwn){if(length<0||position<0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.EISDIR)}if(!stream.stream_ops.write){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if(stream.flags&1024){FS.llseek(stream,0,2)}var seeking=true;if(typeof position==="undefined"){position=stream.position;seeking=false}else if(!stream.seekable){throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;try{if(stream.path&&FS.trackingDelegate["onWriteToFile"])FS.trackingDelegate["onWriteToFile"](stream.path)}catch(e){console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: "+e.message)}return bytesWritten}),allocate:(function(stream,offset,length){if(offset<0||length<=0){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(ERRNO_CODES.EBADF)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)}stream.stream_ops.allocate(stream,offset,length)}),mmap:(function(stream,buffer,offset,length,position,prot,flags){if((stream.flags&2097155)===1){throw new FS.ErrnoError(ERRNO_CODES.EACCES)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(ERRNO_CODES.ENODEV)}return stream.stream_ops.mmap(stream,buffer,offset,length,position,prot,flags)}),msync:(function(stream,buffer,offset,length,mmapFlags){if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)}),munmap:(function(stream){return 0}),ioctl:(function(stream,cmd,arg){if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(ERRNO_CODES.ENOTTY)}return stream.stream_ops.ioctl(stream,cmd,arg)}),readFile:(function(path,opts){opts=opts||{};opts.flags=opts.flags||"r";opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret}),writeFile:(function(path,data,opts){opts=opts||{};opts.flags=opts.flags||"w";opts.encoding=opts.encoding||"utf8";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var stream=FS.open(path,opts.flags,opts.mode);if(opts.encoding==="utf8"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,0,opts.canOwn)}else if(opts.encoding==="binary"){FS.write(stream,data,0,data.length,0,opts.canOwn)}FS.close(stream)}),cwd:(function(){return FS.currentPath}),chdir:(function(path){var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(ERRNO_CODES.ENOENT)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)}var err=FS.nodePermissions(lookup.node,"x");if(err){throw new FS.ErrnoError(err)}FS.currentPath=lookup.path}),createDefaultDirectories:(function(){FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")}),createDefaultDevices:(function(){FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:(function(){return 0}),write:(function(stream,buffer,offset,length,pos){return length})});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device;if(typeof crypto!=="undefined"){var randomBuffer=new Uint8Array(1);random_device=(function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]})}else if(ENVIRONMENT_IS_NODE){random_device=(function(){return require("crypto").randomBytes(1)[0]})}else{random_device=(function(){return Math.random()*256|0})}FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")}),createSpecialDirectories:(function(){FS.mkdir("/proc");FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:(function(){var node=FS.createNode("/proc/self","fd",16384|511,73);node.node_ops={lookup:(function(parent,name){var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(ERRNO_CODES.EBADF);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:(function(){return stream.path})}};ret.parent=ret;return ret})};return node})},{},"/proc/self/fd")}),createStandardStreams:(function(){if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin","r");assert(stdin.fd===0,"invalid handle for stdin ("+stdin.fd+")");var stdout=FS.open("/dev/stdout","w");assert(stdout.fd===1,"invalid handle for stdout ("+stdout.fd+")");var stderr=FS.open("/dev/stderr","w");assert(stderr.fd===2,"invalid handle for stderr ("+stderr.fd+")")}),ensureErrnoError:(function(){if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=(function(errno){this.errno=errno;for(var key in ERRNO_CODES){if(ERRNO_CODES[key]===errno){this.code=key;break}}});this.setErrno(errno);this.message=ERRNO_MESSAGES[errno]};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[ERRNO_CODES.ENOENT].forEach((function(code){FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"}))}),staticInit:(function(){FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS,"IDBFS":IDBFS,"NODEFS":NODEFS,"WORKERFS":WORKERFS}}),init:(function(input,output,error){assert(!FS.init.initialized,"FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()}),quit:(function(){FS.init.initialized=false;var fflush=Module["_fflush"];if(fflush)fflush(0);for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}}),getMode:(function(canRead,canWrite){var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode}),joinPath:(function(parts,forceRelative){var path=PATH.join.apply(null,parts);if(forceRelative&&path[0]=="/")path=path.substr(1);return path}),absolutePath:(function(relative,base){return PATH.resolve(base,relative)}),standardizePath:(function(path){return PATH.normalize(path)}),findObject:(function(path,dontResolveLastLink){var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else{___setErrNo(ret.error);return null}}),analyzePath:(function(path,dontResolveLastLink){try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret}),createFolder:(function(parent,name,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.mkdir(path,mode)}),createPath:(function(parent,path,canRead,canWrite){parent=typeof parent==="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current}),createFile:(function(parent,name,properties,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)}),createDataFile:(function(parent,name,data,canRead,canWrite,canOwn){var path=name?PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name):parent;var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data==="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,"w");FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node}),createDevice:(function(parent,name,input,output){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:(function(stream){stream.seekable=false}),close:(function(stream){if(output&&output.buffer&&output.buffer.length){output(10)}}),read:(function(stream,buffer,offset,length,pos){var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead}),write:(function(stream,buffer,offset,length,pos){for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EIO)}}if(length){stream.node.timestamp=Date.now()}return i})});return FS.mkdev(path,mode,dev)}),createLink:(function(parent,name,target,canRead,canWrite){var path=PATH.join2(typeof parent==="string"?parent:FS.getPath(parent),name);return FS.symlink(target,path)}),forceLoadFile:(function(obj){if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;var success=true;if(typeof XMLHttpRequest!=="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(Module["read"]){try{obj.contents=intArrayFromString(Module["read"](obj.url),true);obj.usedBytes=obj.contents.length}catch(e){success=false}}else{throw new Error("Cannot load without read() or XMLHttpRequest.")}if(!success)___setErrNo(ERRNO_CODES.EIO);return success}),createLazyFile:(function(parent,name,url,canRead,canWrite){function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=(function(from,to){if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);if(typeof Uint8Array!="undefined")xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else{return intArrayFromString(xhr.responseText||"",true)}});var lazyArray=this;lazyArray.setDataGetter((function(chunkNum){var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]==="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]==="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]}));if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;console.log("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!=="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:(function(){if(!this.lengthKnown){this.cacheLength()}return this._length})},chunkSize:{get:(function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize})}});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:(function(){return this.contents.length})}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach((function(key){var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(ERRNO_CODES.EIO)}return fn.apply(null,arguments)}}));stream_ops.read=function stream_ops_read(stream,buffer,offset,length,position){if(!FS.forceLoadFile(node)){throw new FS.ErrnoError(ERRNO_CODES.EIO)}var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);assert(size>=0);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size};node.stream_ops=stream_ops;return node}),createPreloadedFile:(function(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish){Browser.init();var fullname=name?PATH.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}var handled=false;Module["preloadPlugins"].forEach((function(plugin){if(handled)return;if(plugin["canHandle"](fullname)){plugin["handle"](byteArray,fullname,finish,(function(){if(onerror)onerror();removeRunDependency(dep)}));handled=true}}));if(!handled)finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){Browser.asyncLoad(url,(function(byteArray){processData(byteArray)}),onerror)}else{processData(url)}}),indexedDB:(function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB}),DB_NAME:(function(){return"EM_FS_"+window.location.pathname}),DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(function(paths,onload,onerror){onload=onload||(function(){});onerror=onerror||(function(){});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=function openRequest_onupgradeneeded(){console.log("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)};openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach((function(path){var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=function putRequest_onsuccess(){ok++;if(ok+fail==total)finish()};putRequest.onerror=function putRequest_onerror(){fail++;if(ok+fail==total)finish()}}));transaction.onerror=onerror};openRequest.onerror=onerror}),loadFilesFromDB:(function(paths,onload,onerror){onload=onload||(function(){});onerror=onerror||(function(){});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=function openRequest_onsuccess(){var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach((function(path){var getRequest=files.get(path);getRequest.onsuccess=function getRequest_onsuccess(){if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()};getRequest.onerror=function getRequest_onerror(){fail++;if(ok+fail==total)finish()}}));transaction.onerror=onerror};openRequest.onerror=onerror})};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:(function(dirfd,path){if(path[0]!=="/"){var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(ERRNO_CODES.EBADF);dir=dirstream.path}path=PATH.join2(dir,path)}return path}),doStat:(function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-ERRNO_CODES.ENOTDIR}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;HEAP32[buf+36>>2]=stat.size;HEAP32[buf+40>>2]=4096;HEAP32[buf+44>>2]=stat.blocks;HEAP32[buf+48>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+52>>2]=0;HEAP32[buf+56>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ino;return 0}),doMsync:(function(addr,stream,len,flags){var buffer=new Uint8Array(HEAPU8.subarray(addr,addr+len));FS.msync(stream,buffer,0,len,flags)}),doMkdir:(function(path,mode){path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0}),doMknod:(function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-ERRNO_CODES.EINVAL}FS.mknod(path,mode,dev);return 0}),doReadlink:(function(path,buf,bufsize){if(bufsize<=0)return-ERRNO_CODES.EINVAL;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len}),doAccess:(function(path,amode){if(amode&~7){return-ERRNO_CODES.EINVAL}var node;var lookup=FS.lookupPath(path,{follow:true});node=lookup.node;var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return-ERRNO_CODES.EACCES}return 0}),doDup:(function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd}),doReadv:(function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break}return ret}),doWritev:(function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret}),varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),getStreamFromFD:(function(){var stream=FS.getStream(SYSCALLS.get());if(!stream)throw new FS.ErrnoError(ERRNO_CODES.EBADF);return stream}),getSocketFromFD:(function(){var socket=SOCKFS.getSocket(SYSCALLS.get());if(!socket)throw new FS.ErrnoError(ERRNO_CODES.EBADF);return socket}),getSocketAddress:(function(allowNull){var addrp=SYSCALLS.get(),addrlen=SYSCALLS.get();if(allowNull&&addrp===0)return null;var info=__read_sockaddr(addrp,addrlen);if(info.errno)throw new FS.ErrnoError(info.errno);info.addr=DNS.lookup_addr(info.addr)||info.addr;return info}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0)})};function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),op=SYSCALLS.get();switch(op){case 21505:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;return 0};case 21506:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;return 0};case 21519:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;var argp=SYSCALLS.get();HEAP32[argp>>2]=0;return 0};case 21520:{if(!stream.tty)return-ERRNO_CODES.ENOTTY;return-ERRNO_CODES.EINVAL};case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp)};default:abort("bad ioctl syscall "+op)}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["_bitshift64Ashr"]=_bitshift64Ashr;Module["_bitshift64Lshr"]=_bitshift64Lshr;function _pthread_cleanup_push(routine,arg){__ATEXIT__.push((function(){Runtime.dynCall("vi",routine,[arg])}));_pthread_cleanup_push.level=__ATEXIT__.length}Module["_pthread_cond_broadcast"]=_pthread_cond_broadcast;function _pthread_cleanup_pop(){assert(_pthread_cleanup_push.level==__ATEXIT__.length,"cannot pop if something else added meanwhile!");__ATEXIT__.pop();_pthread_cleanup_push.level=__ATEXIT__.length}function ___cxa_begin_catch(ptr){var info=EXCEPTIONS.infos[ptr];if(info&&!info.caught){info.caught=true;__ZSt18uncaught_exceptionv.uncaught_exception--}if(info)info.rethrown=false;EXCEPTIONS.caught.push(ptr);EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));return ptr}function ___syscall5(which,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(),flags=SYSCALLS.get(),mode=SYSCALLS.get();var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}Module["_memcpy"]=_memcpy;function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module["___udivdi3"]=___udivdi3;Module["___muldsi3"]=___muldsi3;Module["___muldi3"]=___muldi3;Module["_sbrk"]=_sbrk;Module["_bitshift64Shl"]=_bitshift64Shl;var __sigalrm_handler=0;function _signal(sig,func){if(sig==14){__sigalrm_handler=func}else{}return 0}Module["_memmove"]=_memmove;var SOCKFS={mount:(function(mount){Module["websocket"]=Module["websocket"]&&"object"===typeof Module["websocket"]?Module["websocket"]:{};Module["websocket"]._callbacks={};Module["websocket"]["on"]=(function(event,callback){if("function"===typeof callback){this._callbacks[event]=callback}return this});Module["websocket"].emit=(function(event,param){if("function"===typeof this._callbacks[event]){this._callbacks[event].call(this,param)}});return FS.createNode(null,"/",16384|511,0)}),createSocket:(function(family,type,protocol){var streaming=type==1;if(protocol){assert(streaming==(protocol==6))}var sock={family:family,type:type,protocol:protocol,server:null,error:null,peers:{},pending:[],recv_queue:[],sock_ops:SOCKFS.websocket_sock_ops};var name=SOCKFS.nextname();var node=FS.createNode(SOCKFS.root,name,49152,0);node.sock=sock;var stream=FS.createStream({path:name,node:node,flags:FS.modeStringToFlags("r+"),seekable:false,stream_ops:SOCKFS.stream_ops});sock.stream=stream;return sock}),getSocket:(function(fd){var stream=FS.getStream(fd);if(!stream||!FS.isSocket(stream.node.mode)){return null}return stream.node.sock}),stream_ops:{poll:(function(stream){var sock=stream.node.sock;return sock.sock_ops.poll(sock)}),ioctl:(function(stream,request,varargs){var sock=stream.node.sock;return sock.sock_ops.ioctl(sock,request,varargs)}),read:(function(stream,buffer,offset,length,position){var sock=stream.node.sock;var msg=sock.sock_ops.recvmsg(sock,length);if(!msg){return 0}buffer.set(msg.buffer,offset);return msg.buffer.length}),write:(function(stream,buffer,offset,length,position){var sock=stream.node.sock;return sock.sock_ops.sendmsg(sock,buffer,offset,length)}),close:(function(stream){var sock=stream.node.sock;sock.sock_ops.close(sock)})},nextname:(function(){if(!SOCKFS.nextname.current){SOCKFS.nextname.current=0}return"socket["+SOCKFS.nextname.current++ +"]"}),websocket_sock_ops:{createPeer:(function(sock,addr,port){var ws;if(typeof addr==="object"){ws=addr;addr=null;port=null}if(ws){if(ws._socket){addr=ws._socket.remoteAddress;port=ws._socket.remotePort}else{var result=/ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);if(!result){throw new Error("WebSocket URL must be in the format ws(s)://address:port")}addr=result[1];port=parseInt(result[2],10)}}else{try{var runtimeConfig=Module["websocket"]&&"object"===typeof Module["websocket"];var url="ws:#".replace("#","//");if(runtimeConfig){if("string"===typeof Module["websocket"]["url"]){url=Module["websocket"]["url"]}}if(url==="ws://"||url==="wss://"){var parts=addr.split("/");url=url+parts[0]+":"+port+"/"+parts.slice(1).join("/")}var subProtocols="binary";if(runtimeConfig){if("string"===typeof Module["websocket"]["subprotocol"]){subProtocols=Module["websocket"]["subprotocol"]}}subProtocols=subProtocols.replace(/^ +| +$/g,"").split(/ *, */);var opts=ENVIRONMENT_IS_NODE?{"protocol":subProtocols.toString()}:subProtocols;var WebSocketConstructor;if(ENVIRONMENT_IS_NODE){WebSocketConstructor=require("ws")}else if(ENVIRONMENT_IS_WEB){WebSocketConstructor=window["WebSocket"]}else{WebSocketConstructor=WebSocket}ws=new WebSocketConstructor(url,opts);ws.binaryType="arraybuffer"}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH)}}var peer={addr:addr,port:port,socket:ws,dgram_send_queue:[]};SOCKFS.websocket_sock_ops.addPeer(sock,peer);SOCKFS.websocket_sock_ops.handlePeerEvents(sock,peer);if(sock.type===2&&typeof sock.sport!=="undefined"){peer.dgram_send_queue.push(new Uint8Array([255,255,255,255,"p".charCodeAt(0),"o".charCodeAt(0),"r".charCodeAt(0),"t".charCodeAt(0),(sock.sport&65280)>>8,sock.sport&255]))}return peer}),getPeer:(function(sock,addr,port){return sock.peers[addr+":"+port]}),addPeer:(function(sock,peer){sock.peers[peer.addr+":"+peer.port]=peer}),removePeer:(function(sock,peer){delete sock.peers[peer.addr+":"+peer.port]}),handlePeerEvents:(function(sock,peer){var first=true;var handleOpen=(function(){Module["websocket"].emit("open",sock.stream.fd);try{var queued=peer.dgram_send_queue.shift();while(queued){peer.socket.send(queued);queued=peer.dgram_send_queue.shift()}}catch(e){peer.socket.close()}});function handleMessage(data){assert(typeof data!=="string"&&data.byteLength!==undefined);if(data.byteLength==0){return}data=new Uint8Array(data);var wasfirst=first;first=false;if(wasfirst&&data.length===10&&data[0]===255&&data[1]===255&&data[2]===255&&data[3]===255&&data[4]==="p".charCodeAt(0)&&data[5]==="o".charCodeAt(0)&&data[6]==="r".charCodeAt(0)&&data[7]==="t".charCodeAt(0)){var newport=data[8]<<8|data[9];SOCKFS.websocket_sock_ops.removePeer(sock,peer);peer.port=newport;SOCKFS.websocket_sock_ops.addPeer(sock,peer);return}sock.recv_queue.push({addr:peer.addr,port:peer.port,data:data});Module["websocket"].emit("message",sock.stream.fd)}if(ENVIRONMENT_IS_NODE){peer.socket.on("open",handleOpen);peer.socket.on("message",(function(data,flags){if(!flags.binary){return}handleMessage((new Uint8Array(data)).buffer)}));peer.socket.on("close",(function(){Module["websocket"].emit("close",sock.stream.fd)}));peer.socket.on("error",(function(error){sock.error=ERRNO_CODES.ECONNREFUSED;Module["websocket"].emit("error",[sock.stream.fd,sock.error,"ECONNREFUSED: Connection refused"])}))}else{peer.socket.onopen=handleOpen;peer.socket.onclose=(function(){Module["websocket"].emit("close",sock.stream.fd)});peer.socket.onmessage=function peer_socket_onmessage(event){handleMessage(event.data)};peer.socket.onerror=(function(error){sock.error=ERRNO_CODES.ECONNREFUSED;Module["websocket"].emit("error",[sock.stream.fd,sock.error,"ECONNREFUSED: Connection refused"])})}}),poll:(function(sock){if(sock.type===1&&sock.server){return sock.pending.length?64|1:0}var mask=0;var dest=sock.type===1?SOCKFS.websocket_sock_ops.getPeer(sock,sock.daddr,sock.dport):null;if(sock.recv_queue.length||!dest||dest&&dest.socket.readyState===dest.socket.CLOSING||dest&&dest.socket.readyState===dest.socket.CLOSED){mask|=64|1}if(!dest||dest&&dest.socket.readyState===dest.socket.OPEN){mask|=4}if(dest&&dest.socket.readyState===dest.socket.CLOSING||dest&&dest.socket.readyState===dest.socket.CLOSED){mask|=16}return mask}),ioctl:(function(sock,request,arg){switch(request){case 21531:var bytes=0;if(sock.recv_queue.length){bytes=sock.recv_queue[0].data.length}HEAP32[arg>>2]=bytes;return 0;default:return ERRNO_CODES.EINVAL}}),close:(function(sock){if(sock.server){try{sock.server.close()}catch(e){}sock.server=null}var peers=Object.keys(sock.peers);for(var i=0;i<peers.length;i++){var peer=sock.peers[peers[i]];try{peer.socket.close()}catch(e){}SOCKFS.websocket_sock_ops.removePeer(sock,peer)}return 0}),bind:(function(sock,addr,port){if(typeof sock.saddr!=="undefined"||typeof sock.sport!=="undefined"){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}sock.saddr=addr;sock.sport=port;if(sock.type===2){if(sock.server){sock.server.close();sock.server=null}try{sock.sock_ops.listen(sock,0)}catch(e){if(!(e instanceof FS.ErrnoError))throw e;if(e.errno!==ERRNO_CODES.EOPNOTSUPP)throw e}}}),connect:(function(sock,addr,port){if(sock.server){throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)}if(typeof sock.daddr!=="undefined"&&typeof sock.dport!=="undefined"){var dest=SOCKFS.websocket_sock_ops.getPeer(sock,sock.daddr,sock.dport);if(dest){if(dest.socket.readyState===dest.socket.CONNECTING){throw new FS.ErrnoError(ERRNO_CODES.EALREADY)}else{throw new FS.ErrnoError(ERRNO_CODES.EISCONN)}}}var peer=SOCKFS.websocket_sock_ops.createPeer(sock,addr,port);sock.daddr=peer.addr;sock.dport=peer.port;throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS)}),listen:(function(sock,backlog){if(!ENVIRONMENT_IS_NODE){throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)}if(sock.server){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var WebSocketServer=require("ws").Server;var host=sock.saddr;sock.server=new WebSocketServer({host:host,port:sock.sport});Module["websocket"].emit("listen",sock.stream.fd);sock.server.on("connection",(function(ws){if(sock.type===1){var newsock=SOCKFS.createSocket(sock.family,sock.type,sock.protocol);var peer=SOCKFS.websocket_sock_ops.createPeer(newsock,ws);newsock.daddr=peer.addr;newsock.dport=peer.port;sock.pending.push(newsock);Module["websocket"].emit("connection",newsock.stream.fd)}else{SOCKFS.websocket_sock_ops.createPeer(sock,ws);Module["websocket"].emit("connection",sock.stream.fd)}}));sock.server.on("closed",(function(){Module["websocket"].emit("close",sock.stream.fd);sock.server=null}));sock.server.on("error",(function(error){sock.error=ERRNO_CODES.EHOSTUNREACH;Module["websocket"].emit("error",[sock.stream.fd,sock.error,"EHOSTUNREACH: Host is unreachable"])}))}),accept:(function(listensock){if(!listensock.server){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}var newsock=listensock.pending.shift();newsock.stream.flags=listensock.stream.flags;return newsock}),getname:(function(sock,peer){var addr,port;if(peer){if(sock.daddr===undefined||sock.dport===undefined){throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)}addr=sock.daddr;port=sock.dport}else{addr=sock.saddr||0;port=sock.sport||0}return{addr:addr,port:port}}),sendmsg:(function(sock,buffer,offset,length,addr,port){if(sock.type===2){if(addr===undefined||port===undefined){addr=sock.daddr;port=sock.dport}if(addr===undefined||port===undefined){throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ)}}else{addr=sock.daddr;port=sock.dport}var dest=SOCKFS.websocket_sock_ops.getPeer(sock,addr,port);if(sock.type===1){if(!dest||dest.socket.readyState===dest.socket.CLOSING||dest.socket.readyState===dest.socket.CLOSED){throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)}else if(dest.socket.readyState===dest.socket.CONNECTING){throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}}var data;if(buffer instanceof Array||buffer instanceof ArrayBuffer){data=buffer.slice(offset,offset+length)}else{data=buffer.buffer.slice(buffer.byteOffset+offset,buffer.byteOffset+offset+length)}if(sock.type===2){if(!dest||dest.socket.readyState!==dest.socket.OPEN){if(!dest||dest.socket.readyState===dest.socket.CLOSING||dest.socket.readyState===dest.socket.CLOSED){dest=SOCKFS.websocket_sock_ops.createPeer(sock,addr,port)}dest.dgram_send_queue.push(data);return length}}try{dest.socket.send(data);return length}catch(e){throw new FS.ErrnoError(ERRNO_CODES.EINVAL)}}),recvmsg:(function(sock,length){if(sock.type===1&&sock.server){throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)}var queued=sock.recv_queue.shift();if(!queued){if(sock.type===1){var dest=SOCKFS.websocket_sock_ops.getPeer(sock,sock.daddr,sock.dport);if(!dest){throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN)}else if(dest.socket.readyState===dest.socket.CLOSING||dest.socket.readyState===dest.socket.CLOSED){return null}else{throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}}else{throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)}}var queuedLength=queued.data.byteLength||queued.data.length;var queuedOffset=queued.data.byteOffset||0;var queuedBuffer=queued.data.buffer||queued.data;var bytesRead=Math.min(length,queuedLength);var res={buffer:new Uint8Array(queuedBuffer,queuedOffset,bytesRead),addr:queued.addr,port:queued.port};if(sock.type===1&&bytesRead<queuedLength){var bytesRemaining=queuedLength-bytesRead;queued.data=new Uint8Array(queuedBuffer,queuedOffset+bytesRead,bytesRemaining);sock.recv_queue.unshift(queued)}return res})}};var _htons=undefined;Module["_htons"]=_htons;function __inet_pton6_raw(str){var words;var w,offset,z;var valid6regx=/^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i;var parts=[];if(!valid6regx.test(str)){return null}if(str==="::"){return[0,0,0,0,0,0,0,0]}if(str.indexOf("::")===0){str=str.replace("::","Z:")}else{str=str.replace("::",":Z:")}if(str.indexOf(".")>0){str=str.replace(new RegExp("[.]","g"),":");words=str.split(":");words[words.length-4]=parseInt(words[words.length-4])+parseInt(words[words.length-3])*256;words[words.length-3]=parseInt(words[words.length-2])+parseInt(words[words.length-1])*256;words=words.slice(0,words.length-2)}else{words=str.split(":")}offset=0;z=0;for(w=0;w<words.length;w++){if(typeof words[w]==="string"){if(words[w]==="Z"){for(z=0;z<8-words.length+1;z++){parts[w+z]=0}offset=z-1}else{parts[w+offset]=_htons(parseInt(words[w],16))}}else{parts[w+offset]=words[w]}}return[parts[1]<<16|parts[0],parts[3]<<16|parts[2],parts[5]<<16|parts[4],parts[7]<<16|parts[6]]}var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:(function(name){var res=__inet_pton4_raw(name);if(res!==null){return name}res=__inet_pton6_raw(name);if(res!==null){return name}var addr;if(DNS.address_map.addrs[name]){addr=DNS.address_map.addrs[name]}else{var id=DNS.address_map.id++;assert(id<65535,"exceeded max address mappings of 65535");addr="172.29."+(id&255)+"."+(id&65280);DNS.address_map.names[addr]=name;DNS.address_map.addrs[name]=addr}return addr}),lookup_addr:(function(addr){if(DNS.address_map.names[addr]){return DNS.address_map.names[addr]}return null})};var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};function __inet_ntop4_raw(addr){return(addr&255)+"."+(addr>>8&255)+"."+(addr>>16&255)+"."+(addr>>24&255)}function __inet_ntop6_raw(ints){var str="";var word=0;var longest=0;var lastzero=0;var zstart=0;var len=0;var i=0;var parts=[ints[0]&65535,ints[0]>>16,ints[1]&65535,ints[1]>>16,ints[2]&65535,ints[2]>>16,ints[3]&65535,ints[3]>>16];var hasipv4=true;var v4part="";for(i=0;i<5;i++){if(parts[i]!==0){hasipv4=false;break}}if(hasipv4){v4part=__inet_ntop4_raw(parts[6]|parts[7]<<16);if(parts[5]===-1){str="::ffff:";str+=v4part;return str}if(parts[5]===0){str="::";if(v4part==="0.0.0.0")v4part="";if(v4part==="0.0.0.1")v4part="1";str+=v4part;return str}}for(word=0;word<8;word++){if(parts[word]===0){if(word-lastzero>1){len=0}lastzero=word;len++}if(len>longest){longest=len;zstart=word-longest+1}}for(word=0;word<8;word++){if(longest>1){if(parts[word]===0&&word>=zstart&&word<zstart+longest){if(word===zstart){str+=":";if(zstart===0)str+=":"}continue}}str+=Number(_ntohs(parts[word]&65535)).toString(16);str+=word<7?":":""}return str}function __read_sockaddr(sa,salen){var family=HEAP16[sa>>1];var port=_ntohs(HEAP16[sa+2>>1]);var addr;switch(family){case 2:if(salen!==16){return{errno:ERRNO_CODES.EINVAL}}addr=HEAP32[sa+4>>2];addr=__inet_ntop4_raw(addr);break;case 10:if(salen!==28){return{errno:ERRNO_CODES.EINVAL}}addr=[HEAP32[sa+8>>2],HEAP32[sa+12>>2],HEAP32[sa+16>>2],HEAP32[sa+20>>2]];addr=__inet_ntop6_raw(addr);break;default:return{errno:ERRNO_CODES.EAFNOSUPPORT}}return{family:family,addr:addr,port:port}}function __write_sockaddr(sa,family,addr,port){switch(family){case 2:addr=__inet_pton4_raw(addr);HEAP16[sa>>1]=family;HEAP32[sa+4>>2]=addr;HEAP16[sa+2>>1]=_htons(port);break;case 10:addr=__inet_pton6_raw(addr);HEAP32[sa>>2]=family;HEAP32[sa+8>>2]=addr[0];HEAP32[sa+12>>2]=addr[1];HEAP32[sa+16>>2]=addr[2];HEAP32[sa+20>>2]=addr[3];HEAP16[sa+2>>1]=_htons(port);HEAP32[sa+4>>2]=0;HEAP32[sa+24>>2]=0;break;default:return{errno:ERRNO_CODES.EAFNOSUPPORT}}return{}}function ___syscall102(which,varargs){SYSCALLS.varargs=varargs;try{var call=SYSCALLS.get(),socketvararg=SYSCALLS.get();SYSCALLS.varargs=socketvararg;switch(call){case 1:{var domain=SYSCALLS.get(),type=SYSCALLS.get(),protocol=SYSCALLS.get();var sock=SOCKFS.createSocket(domain,type,protocol);assert(sock.stream.fd<64);return sock.stream.fd};case 2:{var sock=SYSCALLS.getSocketFromFD(),info=SYSCALLS.getSocketAddress();sock.sock_ops.bind(sock,info.addr,info.port);return 0};case 3:{var sock=SYSCALLS.getSocketFromFD(),info=SYSCALLS.getSocketAddress();sock.sock_ops.connect(sock,info.addr,info.port);return 0};case 4:{var sock=SYSCALLS.getSocketFromFD(),backlog=SYSCALLS.get();sock.sock_ops.listen(sock,backlog);return 0};case 5:{var sock=SYSCALLS.getSocketFromFD(),addr=SYSCALLS.get(),addrlen=SYSCALLS.get();var newsock=sock.sock_ops.accept(sock);if(addr){var res=__write_sockaddr(addr,newsock.family,DNS.lookup_name(newsock.daddr),newsock.dport);assert(!res.errno)}return newsock.stream.fd};case 6:{var sock=SYSCALLS.getSocketFromFD(),addr=SYSCALLS.get(),addrlen=SYSCALLS.get();var res=__write_sockaddr(addr,sock.family,DNS.lookup_name(sock.saddr||"0.0.0.0"),sock.sport);assert(!res.errno);return 0};case 7:{var sock=SYSCALLS.getSocketFromFD(),addr=SYSCALLS.get(),addrlen=SYSCALLS.get();if(!sock.daddr){return-ERRNO_CODES.ENOTCONN}var res=__write_sockaddr(addr,sock.family,DNS.lookup_name(sock.daddr),sock.dport);assert(!res.errno);return 0};case 11:{var sock=SYSCALLS.getSocketFromFD(),message=SYSCALLS.get(),length=SYSCALLS.get(),flags=SYSCALLS.get(),dest=SYSCALLS.getSocketAddress(true);if(!dest){return FS.write(sock.stream,HEAP8,message,length)}else{return sock.sock_ops.sendmsg(sock,HEAP8,message,length,dest.addr,dest.port)}};case 12:{var sock=SYSCALLS.getSocketFromFD(),buf=SYSCALLS.get(),len=SYSCALLS.get(),flags=SYSCALLS.get(),addr=SYSCALLS.get(),addrlen=SYSCALLS.get();var msg=sock.sock_ops.recvmsg(sock,len);if(!msg)return 0;if(addr){var res=__write_sockaddr(addr,sock.family,DNS.lookup_name(msg.addr),msg.port);assert(!res.errno)}HEAPU8.set(msg.buffer,buf);return msg.buffer.byteLength};case 14:{return-ERRNO_CODES.ENOPROTOOPT};case 15:{var sock=SYSCALLS.getSocketFromFD(),level=SYSCALLS.get(),optname=SYSCALLS.get(),optval=SYSCALLS.get(),optlen=SYSCALLS.get();if(level===1){if(optname===4){HEAP32[optval>>2]=sock.error;HEAP32[optlen>>2]=4;sock.error=null;return 0}}return-ERRNO_CODES.ENOPROTOOPT};case 16:{var sock=SYSCALLS.getSocketFromFD(),message=SYSCALLS.get(),flags=SYSCALLS.get();var iov=HEAP32[message+8>>2];var num=HEAP32[message+12>>2];var addr,port;var name=HEAP32[message>>2];var namelen=HEAP32[message+4>>2];if(name){var info=__read_sockaddr(name,namelen);if(info.errno)return-info.errno;port=info.port;addr=DNS.lookup_addr(info.addr)||info.addr}var total=0;for(var i=0;i<num;i++){total+=HEAP32[iov+(8*i+4)>>2]}var view=new Uint8Array(total);var offset=0;for(var i=0;i<num;i++){var iovbase=HEAP32[iov+(8*i+0)>>2];var iovlen=HEAP32[iov+(8*i+4)>>2];for(var j=0;j<iovlen;j++){view[offset++]=HEAP8[iovbase+j>>0]}}return sock.sock_ops.sendmsg(sock,view,0,total,addr,port)};case 17:{var sock=SYSCALLS.getSocketFromFD(),message=SYSCALLS.get(),flags=SYSCALLS.get();var iov=HEAP32[message+8>>2];var num=HEAP32[message+12>>2];var total=0;for(var i=0;i<num;i++){total+=HEAP32[iov+(8*i+4)>>2]}var msg=sock.sock_ops.recvmsg(sock,total);if(!msg)return 0;var name=HEAP32[message>>2];if(name){var res=__write_sockaddr(name,sock.family,DNS.lookup_name(msg.addr),msg.port);assert(!res.errno)}var bytesRead=0;var bytesRemaining=msg.buffer.byteLength;for(var i=0;bytesRemaining>0&&i<num;i++){var iovbase=HEAP32[iov+(8*i+0)>>2];var iovlen=HEAP32[iov+(8*i+4)>>2];if(!iovlen){continue}var length=Math.min(iovlen,bytesRemaining);var buf=msg.buffer.subarray(bytesRead,bytesRead+length);HEAPU8.set(buf,iovbase+bytesRead);bytesRead+=length;bytesRemaining-=length}return bytesRead};default:abort("unsupported socketcall syscall "+call)}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0}Module["___uremdi3"]=___uremdi3;function _pthread_cond_wait(){return 0}Module["_pthread_mutex_unlock"]=_pthread_mutex_unlock;Module["_llvm_bswap_i32"]=_llvm_bswap_i32;Module["_llvm_bswap_i16"]=_llvm_bswap_i16;Module["_pthread_self"]=_pthread_self;function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;assert(offset_high===0);FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();return SYSCALLS.doWritev(stream,iov,iovcnt)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall221(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),cmd=SYSCALLS.get();switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return-ERRNO_CODES.EINVAL}var newStream;newStream=FS.open(stream.path,stream.flags,0,arg);return newStream.fd};case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0};case 12:case 12:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0};case 13:case 14:case 13:case 14:return 0;case 16:case 8:return-ERRNO_CODES.EINVAL;case 9:___setErrNo(ERRNO_CODES.EINVAL);return-1;default:{return-ERRNO_CODES.EINVAL}}}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall145(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();return SYSCALLS.doReadv(stream,iov,iovcnt)}catch(e){if(typeof FS==="undefined"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var ___dso_handle=STATICTOP;STATICTOP+=16;FS.staticInit();__ATINIT__.unshift((function(){if(!Module["noFSInit"]&&!FS.init.initialized)FS.init()}));__ATMAIN__.push((function(){FS.ignorePermissions=false}));__ATEXIT__.push((function(){FS.quit()}));Module["FS_createFolder"]=FS.createFolder;Module["FS_createPath"]=FS.createPath;Module["FS_createDataFile"]=FS.createDataFile;Module["FS_createPreloadedFile"]=FS.createPreloadedFile;Module["FS_createLazyFile"]=FS.createLazyFile;Module["FS_createLink"]=FS.createLink;Module["FS_createDevice"]=FS.createDevice;Module["FS_unlink"]=FS.unlink;__ATINIT__.unshift((function(){TTY.init()}));__ATEXIT__.push((function(){TTY.shutdown()}));if(ENVIRONMENT_IS_NODE){var fs=require("fs");var NODEJS_PATH=require("path");NODEFS.staticInit()}__ATINIT__.push((function(){SOCKFS.root=FS.mount(SOCKFS,{},null)}));DYNAMICTOP_PTR=allocate(1,"i32",ALLOC_STATIC);STACK_BASE=STACKTOP=Runtime.alignMemory(STATICTOP);STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=Runtime.alignMemory(STACK_MAX);HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;staticSealed=true;function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7){try{return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiii(index,a1,a2,a3){try{return Module["dynCall_iiii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiii(index,a1,a2,a3,a4,a5){try{Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6){try{return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vi(index,a1){try{Module["dynCall_vi"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_vii(index,a1,a2){try{Module["dynCall_vii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6){try{return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiid(index,a1,a2,a3,a4,a5){try{return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_ii(index,a1){try{return Module["dynCall_ii"](index,a1)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viii(index,a1,a2,a3){try{Module["dynCall_viii"](index,a1,a2,a3)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_v(index){try{Module["dynCall_v"](index)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8){try{return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiii(index,a1,a2,a3,a4){try{return Module["dynCall_iiiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6){try{Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iii(index,a1,a2){try{return Module["dynCall_iii"](index,a1,a2)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_iiiiii(index,a1,a2,a3,a4,a5){try{return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}function invoke_viiii(index,a1,a2,a3,a4){try{Module["dynCall_viiii"](index,a1,a2,a3,a4)}catch(e){if(typeof e!=="number"&&e!=="longjmp")throw e;asm["setThrew"](1,0)}}Module.asmGlobalArg={"Math":Math,"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array,"NaN":NaN,"Infinity":Infinity};Module.asmLibraryArg={"abort":abort,"assert":assert,"enlargeMemory":enlargeMemory,"getTotalMemory":getTotalMemory,"abortOnCannotGrowMemory":abortOnCannotGrowMemory,"invoke_iiiiiiii":invoke_iiiiiiii,"invoke_iiii":invoke_iiii,"invoke_viiiii":invoke_viiiii,"invoke_iiiiiid":invoke_iiiiiid,"invoke_vi":invoke_vi,"invoke_vii":invoke_vii,"invoke_iiiiiii":invoke_iiiiiii,"invoke_iiiiid":invoke_iiiiid,"invoke_ii":invoke_ii,"invoke_viii":invoke_viii,"invoke_v":invoke_v,"invoke_iiiiiiiii":invoke_iiiiiiiii,"invoke_iiiii":invoke_iiiii,"invoke_viiiiii":invoke_viiiiii,"invoke_iii":invoke_iii,"invoke_iiiiii":invoke_iiiiii,"invoke_viiii":invoke_viiii,"_pthread_cleanup_pop":_pthread_cleanup_pop,"_strftime":_strftime,"_pthread_cond_wait":_pthread_cond_wait,"__inet_pton4_raw":__inet_pton4_raw,"__inet_ntop6_raw":__inet_ntop6_raw,"___syscall102":___syscall102,"_pthread_key_create":_pthread_key_create,"__inet_ntop4_raw":__inet_ntop4_raw,"_inet_addr":_inet_addr,"_pthread_cleanup_push":_pthread_cleanup_push,"___gxx_personality_v0":___gxx_personality_v0,"__inet_pton6_raw":__inet_pton6_raw,"__read_sockaddr":__read_sockaddr,"___assert_fail":___assert_fail,"___cxa_allocate_exception":___cxa_allocate_exception,"___cxa_find_matching_catch":___cxa_find_matching_catch,"__isLeapYear":__isLeapYear,"__addDays":__addDays,"_strftime_l":_strftime_l,"_signal":_signal,"___setErrNo":___setErrNo,"___cxa_begin_catch":___cxa_begin_catch,"_emscripten_memcpy_big":_emscripten_memcpy_big,"___resumeException":___resumeException,"__ZSt18uncaught_exceptionv":__ZSt18uncaught_exceptionv,"__exit":__exit,"_pthread_getspecific":_pthread_getspecific,"__arraySum":__arraySum,"___syscall221":___syscall221,"_abort":_abort,"_pthread_once":_pthread_once,"___syscall54":___syscall54,"___unlock":___unlock,"__write_sockaddr":__write_sockaddr,"_pthread_setspecific":_pthread_setspecific,"___cxa_atexit":___cxa_atexit,"___cxa_throw":___cxa_throw,"___lock":___lock,"___syscall6":___syscall6,"___syscall5":___syscall5,"_gettimeofday":_gettimeofday,"_atexit":_atexit,"___syscall140":___syscall140,"_exit":_exit,"___syscall145":___syscall145,"___syscall146":___syscall146,"STACKTOP":STACKTOP,"STACK_MAX":STACK_MAX,"DYNAMICTOP_PTR":DYNAMICTOP_PTR,"tempDoublePtr":tempDoublePtr,"ABORT":ABORT,"cttz_i8":cttz_i8,"___dso_handle":___dso_handle};// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer) {
"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.DYNAMICTOP_PTR|0;var l=env.tempDoublePtr|0;var m=env.ABORT|0;var n=env.cttz_i8|0;var o=env.___dso_handle|0;var p=0;var q=0;var r=0;var s=0;var t=global.NaN,u=global.Infinity;var v=0,w=0,x=0,y=0,z=0.0,A=0,B=0,C=0,D=0.0;var E=0;var F=global.Math.floor;var G=global.Math.abs;var H=global.Math.sqrt;var I=global.Math.pow;var J=global.Math.cos;var K=global.Math.sin;var L=global.Math.tan;var M=global.Math.acos;var N=global.Math.asin;var O=global.Math.atan;var P=global.Math.atan2;var Q=global.Math.exp;var R=global.Math.log;var S=global.Math.ceil;var T=global.Math.imul;var U=global.Math.min;var V=global.Math.max;var W=global.Math.clz32;var X=env.abort;var Y=env.assert;var Z=env.enlargeMemory;var _=env.getTotalMemory;var $=env.abortOnCannotGrowMemory;var aa=env.invoke_iiiiiiii;var ba=env.invoke_iiii;var ca=env.invoke_viiiii;var da=env.invoke_iiiiiid;var ea=env.invoke_vi;var fa=env.invoke_vii;var ga=env.invoke_iiiiiii;var ha=env.invoke_iiiiid;var ia=env.invoke_ii;var ja=env.invoke_viii;var ka=env.invoke_v;var la=env.invoke_iiiiiiiii;var ma=env.invoke_iiiii;var na=env.invoke_viiiiii;var oa=env.invoke_iii;var pa=env.invoke_iiiiii;var qa=env.invoke_viiii;var ra=env._pthread_cleanup_pop;var sa=env._strftime;var ta=env._pthread_cond_wait;var ua=env.__inet_pton4_raw;var va=env.__inet_ntop6_raw;var wa=env.___syscall102;var xa=env._pthread_key_create;var ya=env.__inet_ntop4_raw;var za=env._inet_addr;var Aa=env._pthread_cleanup_push;var Ba=env.___gxx_personality_v0;var Ca=env.__inet_pton6_raw;var Da=env.__read_sockaddr;var Ea=env.___assert_fail;var Fa=env.___cxa_allocate_exception;var Ga=env.___cxa_find_matching_catch;var Ha=env.__isLeapYear;var Ia=env.__addDays;var Ja=env._strftime_l;var Ka=env._signal;var La=env.___setErrNo;var Ma=env.___cxa_begin_catch;var Na=env._emscripten_memcpy_big;var Oa=env.___resumeException;var Pa=env.__ZSt18uncaught_exceptionv;var Qa=env.__exit;var Ra=env._pthread_getspecific;var Sa=env.__arraySum;var Ta=env.___syscall221;var Ua=env._abort;var Va=env._pthread_once;var Wa=env.___syscall54;var Xa=env.___unlock;var Ya=env.__write_sockaddr;var Za=env._pthread_setspecific;var _a=env.___cxa_atexit;var $a=env.___cxa_throw;var ab=env.___lock;var bb=env.___syscall6;var cb=env.___syscall5;var db=env._gettimeofday;var eb=env._atexit;var fb=env.___syscall140;var gb=env._exit;var hb=env.___syscall145;var ib=env.___syscall146;var jb=0.0;
// EMSCRIPTEN_START_FUNCS
function ah(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;z=i;i=i+112|0;l=(f-e|0)/12|0;if(l>>>0>100){x=vf(l)|0;k=x}else{k=z;x=0}w=(e|0)==(f|0);if(w)m=0;else{m=0;o=e;p=k;while(1){n=a[o+8+3>>0]|0;if(n<<24>>24<0)n=c[o+4>>2]|0;else n=n&255;if(!n){a[p>>0]=2;m=m+1|0;l=l+-1|0}else a[p>>0]=1;o=o+12|0;if((o|0)==(f|0))break;else p=p+1|0}}n=0;o=m;m=d;a:while(1){r=(l|0)!=0;u=n;p=m;while(1){m=c[b>>2]|0;do if(m){n=c[m+12>>2]|0;if((n|0)==(c[m+16>>2]|0))m=sb[c[(c[m>>2]|0)+36>>2]&63](m)|0;else m=c[n>>2]|0;if((m|0)==-1){c[b>>2]=0;d=1;break}else{d=(c[b>>2]|0)==0;break}}else d=1;while(0);if(!p){q=0;v=0;m=1}else{m=c[p+12>>2]|0;if((m|0)==(c[p+16>>2]|0))m=sb[c[(c[p>>2]|0)+36>>2]&63](p)|0;else m=c[m>>2]|0;m=(m|0)==-1;q=m?0:p;v=m?0:p}n=c[b>>2]|0;if(!(r&(d^m)))break a;m=c[n+12>>2]|0;if((m|0)==(c[n+16>>2]|0))m=sb[c[(c[n>>2]|0)+36>>2]&63](n)|0;else m=c[m>>2]|0;if(!j)m=yb[c[(c[g>>2]|0)+28>>2]&15](g,m)|0;t=u+1|0;if(w){u=t;p=v}else{r=e;d=0;s=k;break}}while(1){do if((a[s>>0]|0)==1){p=r+8+3|0;if((a[p>>0]|0)<0)n=c[r>>2]|0;else n=r;n=c[n+(u<<2)>>2]|0;if(!j)n=yb[c[(c[g>>2]|0)+28>>2]&15](g,n)|0;if((m|0)!=(n|0)){a[s>>0]=0;n=d;q=o;l=l+-1|0;break}n=a[p>>0]|0;if(n<<24>>24<0)n=c[r+4>>2]|0;else n=n&255;if((n|0)==(t|0)){a[s>>0]=2;n=1;q=o+1|0;l=l+-1|0}else{n=1;q=o}}else{n=d;q=o}while(0);r=r+12|0;if((r|0)==(f|0))break;else{d=n;s=s+1|0;o=q}}if(!n){n=t;o=q;m=v;continue}m=c[b>>2]|0;n=m+12|0;o=c[n>>2]|0;if((o|0)==(c[m+16>>2]|0))sb[c[(c[m>>2]|0)+40>>2]&63](m)|0;else c[n>>2]=o+4;if((q+l|0)>>>0<2){n=t;o=q;m=v;continue}else{m=e;p=k;o=q}while(1){if((a[p>>0]|0)==2){n=a[m+8+3>>0]|0;if(n<<24>>24<0)n=c[m+4>>2]|0;else n=n&255;if((n|0)!=(t|0)){a[p>>0]=0;o=o+-1|0}}m=m+12|0;if((m|0)==(f|0)){n=t;m=v;continue a}else p=p+1|0}}do if(n){l=c[n+12>>2]|0;if((l|0)==(c[n+16>>2]|0))l=sb[c[(c[n>>2]|0)+36>>2]&63](n)|0;else l=c[l>>2]|0;if((l|0)==-1){c[b>>2]=0;m=1;break}else{m=(c[b>>2]|0)==0;break}}else m=1;while(0);if(q){l=c[q+12>>2]|0;if((l|0)==(c[q+16>>2]|0))l=sb[c[(c[q>>2]|0)+36>>2]&63](q)|0;else l=c[l>>2]|0;if((l|0)!=-1){if(!m)y=72}else y=38}else y=38;if((y|0)==38?m:0)y=72;if((y|0)==72)c[h>>2]=c[h>>2]|2;b:do if(w)y=76;else while(1){if((a[k>>0]|0)==2)break b;e=e+12|0;if((e|0)==(f|0)){y=76;break}else k=k+1|0}while(0);if((y|0)==76){c[h>>2]=c[h>>2]|4;e=f}wf(x);i=z;return e|0}function bh(a){a=a|0;return}function ch(a){a=a|0;wf(a);return}function dh(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0;m=i;i=i+16|0;l=m+4|0;h=m;if(!(c[e+4>>2]&1)){k=c[(c[b>>2]|0)+24>>2]|0;c[h>>2]=c[d>>2];c[l>>2]=c[h>>2];b=zb[k&31](b,l,e,f,g&1)|0}else{e=c[e+28>>2]|0;b=e+4|0;c[b>>2]=(c[b>>2]|0)+1;b=qg(e,22012)|0;Fl(e);e=c[b>>2]|0;if(g)pb[c[e+24>>2]&63](l,b);else pb[c[e+28>>2]&63](l,b);j=l+11|0;e=a[j>>0]|0;if(e<<24>>24<0){b=c[l>>2]|0;k=8}else b=l;while(1){k=e<<24>>24<0;if((b|0)==((k?c[l>>2]|0:l)+(k?c[l+4>>2]|0:e&255)|0))break;e=a[b>>0]|0;f=c[d>>2]|0;do if(f|0){h=f+24|0;g=c[h>>2]|0;if((g|0)!=(c[f+28>>2]|0)){c[h>>2]=g+1;a[g>>0]=e;break}if((yb[c[(c[f>>2]|0)+52>>2]&15](f,e&255)|0)==-1)c[d>>2]=0}while(0);e=a[j>>0]|0;b=b+1|0;k=8}b=c[d>>2]|0;Ml(l)}i=m;return b|0}function eh(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;b=i;i=i+64|0;k=b;m=b+50|0;o=b+36|0;j=b+32|0;h=b+28|0;l=b+24|0;a[m>>0]=a[17645]|0;a[m+1>>0]=a[17646]|0;a[m+2>>0]=a[17647]|0;a[m+3>>0]=a[17648]|0;a[m+4>>0]=a[17649]|0;a[m+5>>0]=a[17650]|0;n=e+4|0;qh(m+1|0,20668,1,c[n>>2]|0);p=sg()|0;c[k>>2]=g;m=o+(lh(o,13,p,m,k)|0)|0;n=mh(o,m,c[n>>2]|0)|0;g=c[e+28>>2]|0;p=g+4|0;c[p>>2]=(c[p>>2]|0)+1;c[l>>2]=g;rh(o,n,m,k,j,h,l);Fl(g);g=ve(c[d>>2]|0,k,c[j>>2]|0,c[h>>2]|0,e,f)|0;i=b;return g|0}function fh(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;a=i;i=i+96|0;k=a+8|0;o=a;n=a+64|0;j=a+60|0;h=a+56|0;l=a+52|0;m=o;c[m>>2]=37;c[m+4>>2]=0;m=d+4|0;qh(o+1|0,17642,1,c[m>>2]|0);p=sg()|0;q=k;c[q>>2]=f;c[q+4>>2]=g;f=n+(lh(n,23,p,o,k)|0)|0;m=mh(n,f,c[m>>2]|0)|0;g=c[d+28>>2]|0;o=g+4|0;c[o>>2]=(c[o>>2]|0)+1;c[l>>2]=g;rh(n,m,f,k,j,h,l);Fl(g);g=ve(c[b>>2]|0,k,c[j>>2]|0,c[h>>2]|0,d,e)|0;i=a;return g|0}function gh(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;b=i;i=i+64|0;k=b;m=b+48|0;o=b+36|0;j=b+32|0;h=b+28|0;l=b+24|0;a[m>>0]=a[17645]|0;a[m+1>>0]=a[17646]|0;a[m+2>>0]=a[17647]|0;a[m+3>>0]=a[17648]|0;a[m+4>>0]=a[17649]|0;a[m+5>>0]=a[17650]|0;n=e+4|0;qh(m+1|0,20668,0,c[n>>2]|0);p=sg()|0;c[k>>2]=g;m=o+(lh(o,12,p,m,k)|0)|0;n=mh(o,m,c[n>>2]|0)|0;g=c[e+28>>2]|0;p=g+4|0;c[p>>2]=(c[p>>2]|0)+1;c[l>>2]=g;rh(o,n,m,k,j,h,l);Fl(g);g=ve(c[d>>2]|0,k,c[j>>2]|0,c[h>>2]|0,e,f)|0;i=b;return g|0}function hh(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;a=i;i=i+96|0;k=a+8|0;o=a;n=a+64|0;j=a+60|0;h=a+56|0;l=a+52|0;m=o;c[m>>2]=37;c[m+4>>2]=0;m=d+4|0;qh(o+1|0,17642,0,c[m>>2]|0);p=sg()|0;q=k;c[q>>2]=f;c[q+4>>2]=g;f=n+(lh(n,23,p,o,k)|0)|0;m=mh(n,f,c[m>>2]|0)|0;g=c[d+28>>2]|0;o=g+4|0;c[o>>2]=(c[o>>2]|0)+1;c[l>>2]=g;rh(n,m,f,k,j,h,l);Fl(g);g=ve(c[b>>2]|0,k,c[j>>2]|0,c[h>>2]|0,d,e)|0;i=a;return g|0}function ih(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=+f;var g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;v=i;i=i+160|0;o=v+48|0;n=v+32|0;k=v+24|0;j=v+8|0;m=v;r=v+130|0;p=v+68|0;g=v+72|0;u=v+64|0;s=v+60|0;t=v+56|0;q=m;c[q>>2]=37;c[q+4>>2]=0;q=d+4|0;l=nh(m+1|0,24933,c[q>>2]|0)|0;c[p>>2]=r;a=sg()|0;if(l){c[j>>2]=c[d+8>>2];h[j+8>>3]=f;a=lh(r,30,a,m,j)|0}else{h[k>>3]=f;a=lh(r,30,a,m,k)|0}if((a|0)>29){a=sg()|0;if(l){c[n>>2]=c[d+8>>2];h[n+8>>3]=f;a=oh(p,a,m,n)|0}else{h[o>>3]=f;a=oh(p,a,m,o)|0}m=c[p>>2]|0;k=m}else{k=r;m=0}n=k+a|0;l=mh(k,n,c[q>>2]|0)|0;if((k|0)==(r|0)){j=0;a=r}else{j=vf(a<<1)|0;g=j;a=k}r=c[d+28>>2]|0;q=r+4|0;c[q>>2]=(c[q>>2]|0)+1;c[t>>2]=r;ph(a,l,n,g,u,s,t);Fl(r);e=ve(c[b>>2]|0,g,c[u>>2]|0,c[s>>2]|0,d,e)|0;wf(j);wf(m);i=v;return e|0}function jh(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=+f;var g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;v=i;i=i+160|0;o=v+48|0;n=v+32|0;k=v+24|0;j=v+8|0;m=v;r=v+130|0;p=v+68|0;g=v+72|0;u=v+64|0;s=v+60|0;t=v+56|0;q=m;c[q>>2]=37;c[q+4>>2]=0;q=d+4|0;l=nh(m+1|0,17640,c[q>>2]|0)|0;c[p>>2]=r;a=sg()|0;if(l){c[j>>2]=c[d+8>>2];h[j+8>>3]=f;a=lh(r,30,a,m,j)|0}else{h[k>>3]=f;a=lh(r,30,a,m,k)|0}if((a|0)>29){a=sg()|0;if(l){c[n>>2]=c[d+8>>2];h[n+8>>3]=f;a=oh(p,a,m,n)|0}else{h[o>>3]=f;a=oh(p,a,m,o)|0}m=c[p>>2]|0;k=m}else{k=r;m=0}n=k+a|0;l=mh(k,n,c[q>>2]|0)|0;if((k|0)==(r|0)){j=0;a=r}else{j=vf(a<<1)|0;g=j;a=k}r=c[d+28>>2]|0;q=r+4|0;c[q>>2]=(c[q>>2]|0)+1;c[t>>2]=r;ph(a,l,n,g,u,s,t);Fl(r);e=ve(c[b>>2]|0,g,c[u>>2]|0,c[s>>2]|0,d,e)|0;wf(j);wf(m);i=v;return e|0}function kh(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0;b=i;i=i+80|0;k=b;l=b+60|0;h=b+40|0;a[l>>0]=a[17634]|0;a[l+1>>0]=a[17635]|0;a[l+2>>0]=a[17636]|0;a[l+3>>0]=a[17637]|0;a[l+4>>0]=a[17638]|0;a[l+5>>0]=a[17639]|0;j=sg()|0;c[k>>2]=g;g=lh(h,20,j,l,k)|0;l=h+g|0;j=mh(h,l,c[e+4>>2]|0)|0;n=c[e+28>>2]|0;m=n+4|0;c[m>>2]=(c[m>>2]|0)+1;m=qg(n,21996)|0;Fl(n);wb[c[(c[m>>2]|0)+32>>2]&7](m,h,l,k)|0;g=k+g|0;g=ve(c[d>>2]|0,k,(j|0)==(l|0)?g:k+(j-h)|0,g,e,f)|0;i=b;return g|0}function lh(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;i=i+16|0;h=g;c[h>>2]=f;f=rf(d)|0;d=Pe(a,b,e,h)|0;if(f|0)c[(en()|0)+184>>2]=f;i=g;return d|0}function mh(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;a:do switch((d&176)<<24>>24){case 16:{d=a[b>>0]|0;switch(d<<24>>24){case 43:case 45:{b=b+1|0;break a}default:{}}if((c-b|0)>1&d<<24>>24==48){switch(a[b+1>>0]|0){case 88:case 120:break;default:{e=7;break a}}b=b+2|0}else e=7;break}case 32:{b=c;break}default:e=7}while(0);return b|0}function nh(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;if(d&2048){a[b>>0]=43;b=b+1|0}if(d&1024){a[b>>0]=35;b=b+1|0}i=d&260;f=d>>>14;h=(i|0)==260;if(h)g=0;else{a[b>>0]=46;a[b+1>>0]=42;g=1;b=b+2|0}d=a[c>>0]|0;if(d<<24>>24){e=b;while(1){c=c+1|0;b=e+1|0;a[e>>0]=d;d=a[c>>0]|0;if(!(d<<24>>24))break;else e=b}}a:do switch(i&511){case 4:if(!(f&1)){a[b>>0]=102;break a}else{a[b>>0]=70;break a}case 256:if(!(f&1)){a[b>>0]=101;break a}else{a[b>>0]=69;break a}default:{d=(f&1|0)!=0;if(h)if(d){a[b>>0]=65;break a}else{a[b>>0]=97;break a}else if(d){a[b>>0]=71;break a}else{a[b>>0]=103;break a}}}while(0);return g|0}function oh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;l=i;i=i+32|0;f=l+16|0;k=l;c[k>>2]=e;g=rf(b)|0;e=vf(240)|0;do if(e){c[f>>2]=c[k>>2];b=Pe(e,240,d,f)|0;if(b>>>0<240){k=xf(e,b+1|0)|0;c[a>>2]=k|0?k:e;break}wf(e);if((b|0)>=0?(h=b+1|0,j=vf(h)|0,c[a>>2]=j,(j|0)!=0):0)b=Pe(j,h,d,k)|0;else b=-1}else b=-1;while(0);if(g|0)c[(en()|0)+184>>2]=g;i=l;return b|0}function ph(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;w=i;i=i+16|0;u=w;v=qg(c[j>>2]|0,21996)|0;t=qg(c[j>>2]|0,22012)|0;pb[c[(c[t>>2]|0)+20>>2]&63](u,t);c[h>>2]=f;j=a[b>>0]|0;switch(j<<24>>24){case 43:case 45:{s=yb[c[(c[v>>2]|0)+28>>2]&15](v,j)|0;m=c[h>>2]|0;c[h>>2]=m+1;a[m>>0]=s;m=b+1|0;break}default:m=b}s=e;a:do if((s-m|0)>1?(a[m>>0]|0)==48:0){j=m+1|0;switch(a[j>>0]|0){case 88:case 120:break;default:{n=4;break a}}r=yb[c[(c[v>>2]|0)+28>>2]&15](v,48)|0;q=c[h>>2]|0;c[h>>2]=q+1;a[q>>0]=r;m=m+2|0;q=yb[c[(c[v>>2]|0)+28>>2]&15](v,a[j>>0]|0)|0;r=c[h>>2]|0;c[h>>2]=r+1;a[r>>0]=q;if(m>>>0<e>>>0){j=m;while(1){r=a[j>>0]|0;sg()|0;if(!((r+-48|0)>>>0<10|((r|32)+-97|0)>>>0<6)){r=m;break a}j=j+1|0;if(j>>>0>=e>>>0){r=m;break}}}else{r=m;j=m}}else n=4;while(0);b:do if((n|0)==4)if(m>>>0<e>>>0){j=m;while(1){r=a[j>>0]|0;sg()|0;if((r+-48|0)>>>0>=10){r=m;break b}j=j+1|0;if(j>>>0>=e>>>0){r=m;break}}}else{r=m;j=m}while(0);p=u+11|0;o=a[p>>0]|0;q=u+4|0;if((o<<24>>24<0?c[q>>2]|0:o&255)|0){if((r|0)!=(j|0)?(l=j+-1|0,r>>>0<l>>>0):0){m=r;do{o=a[m>>0]|0;a[m>>0]=a[l>>0]|0;a[l>>0]=o;m=m+1|0;l=l+-1|0}while(m>>>0<l>>>0)}o=sb[c[(c[t>>2]|0)+16>>2]&63](t)|0;if(r>>>0<j>>>0){m=0;n=r;l=0;while(1){x=a[((a[p>>0]|0)<0?c[u>>2]|0:u)+l>>0]|0;if(x<<24>>24>0&(m|0)==(x<<24>>24|0)){m=c[h>>2]|0;c[h>>2]=m+1;a[m>>0]=o;m=a[p>>0]|0;l=(l>>>0<((m<<24>>24<0?c[q>>2]|0:m&255)+-1|0)>>>0&1)+l|0;m=0}y=yb[c[(c[v>>2]|0)+28>>2]&15](v,a[n>>0]|0)|0;x=c[h>>2]|0;c[h>>2]=x+1;a[x>>0]=y;n=n+1|0;if((n|0)==(j|0))break;else m=m+1|0}}l=f+(r-b)|0;m=c[h>>2]|0;if((l|0)!=(m|0)?(k=m+-1|0,l>>>0<k>>>0):0){do{y=a[l>>0]|0;a[l>>0]=a[k>>0]|0;a[k>>0]=y;l=l+1|0;k=k+-1|0}while(l>>>0<k>>>0);l=v}else l=v}else{wb[c[(c[v>>2]|0)+32>>2]&7](v,r,j,c[h>>2]|0)|0;c[h>>2]=(c[h>>2]|0)+(j-r);l=v}c:do if(j>>>0<e>>>0){while(1){k=a[j>>0]|0;if(k<<24>>24==46)break;x=yb[c[(c[l>>2]|0)+28>>2]&15](v,k)|0;y=c[h>>2]|0;c[h>>2]=y+1;a[y>>0]=x;j=j+1|0;if(j>>>0>=e>>>0)break c}x=sb[c[(c[t>>2]|0)+12>>2]&63](t)|0;y=c[h>>2]|0;c[h>>2]=y+1;a[y>>0]=x;j=j+1|0}while(0);wb[c[(c[v>>2]|0)+32>>2]&7](v,j,e,c[h>>2]|0)|0;y=(c[h>>2]|0)+(s-j)|0;c[h>>2]=y;c[g>>2]=(d|0)==(e|0)?y:f+(d-b)|0;Ml(u);i=w;return}function qh(b,c,d,e){b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;if(e&2048){a[b>>0]=43;b=b+1|0}if(e&512){a[b>>0]=35;b=b+1|0}f=a[c>>0]|0;if(f<<24>>24){g=c;while(1){g=g+1|0;c=b+1|0;a[b>>0]=f;f=a[g>>0]|0;if(!(f<<24>>24)){b=c;break}else b=c}}a:do switch(e&74){case 64:{a[b>>0]=111;break}case 8:if(!(e&16384)){a[b>>0]=120;break a}else{a[b>>0]=88;break a}default:if(d){a[b>>0]=100;break a}else{a[b>>0]=117;break a}}while(0);return}function rh(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;s=i;i=i+16|0;r=s;q=qg(c[j>>2]|0,21996)|0;n=qg(c[j>>2]|0,22012)|0;pb[c[(c[n>>2]|0)+20>>2]&63](r,n);o=r+11|0;l=a[o>>0]|0;p=r+4|0;if((l<<24>>24<0?c[p>>2]|0:l&255)|0){c[h>>2]=f;j=a[b>>0]|0;switch(j<<24>>24){case 43:case 45:{l=yb[c[(c[q>>2]|0)+28>>2]&15](q,j)|0;j=c[h>>2]|0;c[h>>2]=j+1;a[j>>0]=l;j=b+1|0;break}default:j=b}a:do if((e-j|0)>1?(a[j>>0]|0)==48:0){k=j+1|0;switch(a[k>>0]|0){case 88:case 120:break;default:break a}t=yb[c[(c[q>>2]|0)+28>>2]&15](q,48)|0;l=c[h>>2]|0;c[h>>2]=l+1;a[l>>0]=t;k=yb[c[(c[q>>2]|0)+28>>2]&15](q,a[k>>0]|0)|0;l=c[h>>2]|0;c[h>>2]=l+1;a[l>>0]=k;j=j+2|0}while(0);if((j|0)!=(e|0)?(m=e+-1|0,j>>>0<m>>>0):0){l=j;k=m;do{t=a[l>>0]|0;a[l>>0]=a[k>>0]|0;a[k>>0]=t;l=l+1|0;k=k+-1|0}while(l>>>0<k>>>0)}n=sb[c[(c[n>>2]|0)+16>>2]&63](n)|0;if(j>>>0<e>>>0){m=j;k=0;l=0;while(1){t=a[((a[o>>0]|0)<0?c[r>>2]|0:r)+k>>0]|0;if(t<<24>>24!=0&(l|0)==(t<<24>>24|0)){l=c[h>>2]|0;c[h>>2]=l+1;a[l>>0]=n;l=a[o>>0]|0;k=(k>>>0<((l<<24>>24<0?c[p>>2]|0:l&255)+-1|0)>>>0&1)+k|0;l=0}u=yb[c[(c[q>>2]|0)+28>>2]&15](q,a[m>>0]|0)|0;t=c[h>>2]|0;c[h>>2]=t+1;a[t>>0]=u;m=m+1|0;if((m|0)==(e|0))break;else l=l+1|0}}l=b;j=f+(j-l)|0;k=c[h>>2]|0;if((j|0)!=(k|0)){b=k+-1|0;if(j>>>0<b>>>0){do{u=a[j>>0]|0;a[j>>0]=a[b>>0]|0;a[b>>0]=u;j=j+1|0;b=b+-1|0}while(j>>>0<b>>>0);b=l;j=c[h>>2]|0}else{b=l;j=k}}else b=l}else{wb[c[(c[q>>2]|0)+32>>2]&7](q,b,e,f)|0;j=f+(e-b)|0;c[h>>2]=j}c[g>>2]=(d|0)==(e|0)?j:f+(d-b)|0;Ml(r);i=s;return}function sh(a){a=a|0;return}function th(a){a=a|0;wf(a);return}function uh(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0;m=i;i=i+16|0;l=m+4|0;h=m;if(!(c[e+4>>2]&1)){k=c[(c[b>>2]|0)+24>>2]|0;c[h>>2]=c[d>>2];c[l>>2]=c[h>>2];b=zb[k&31](b,l,e,f,g&1)|0}else{e=c[e+28>>2]|0;b=e+4|0;c[b>>2]=(c[b>>2]|0)+1;b=qg(e,22036)|0;Fl(e);e=c[b>>2]|0;if(g)pb[c[e+24>>2]&63](l,b);else pb[c[e+28>>2]&63](l,b);j=l+8+3|0;g=a[j>>0]|0;b=g<<24>>24<0;k=l+4|0;if((b?c[k>>2]|0:g&255)|0){g=b?c[l>>2]|0:l;b=c[d>>2]|0;do{e=c[g>>2]|0;if(b){f=b+24|0;h=c[f>>2]|0;if((h|0)==(c[b+28>>2]|0))e=yb[c[(c[b>>2]|0)+52>>2]&15](b,e)|0;else{c[f>>2]=h+4;c[h>>2]=e}if((e|0)==-1){c[d>>2]=0;b=0}}else b=0;g=g+4|0;h=a[j>>0]|0;f=h<<24>>24<0}while((g|0)!=((f?c[l>>2]|0:l)+((f?c[k>>2]|0:h&255)<<2)|0))}b=c[d>>2]|0;Tl(l)}i=m;return b|0}function vh(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;b=i;i=i+128|0;k=b;m=b+118|0;o=b+104|0;j=b+100|0;h=b+96|0;l=b+92|0;a[m>>0]=a[17645]|0;a[m+1>>0]=a[17646]|0;a[m+2>>0]=a[17647]|0;a[m+3>>0]=a[17648]|0;a[m+4>>0]=a[17649]|0;a[m+5>>0]=a[17650]|0;n=e+4|0;qh(m+1|0,20668,1,c[n>>2]|0);p=sg()|0;c[k>>2]=g;m=o+(lh(o,13,p,m,k)|0)|0;n=mh(o,m,c[n>>2]|0)|0;g=c[e+28>>2]|0;p=g+4|0;c[p>>2]=(c[p>>2]|0)+1;c[l>>2]=g;Eh(o,n,m,k,j,h,l);Fl(g);g=Ch(c[d>>2]|0,k,c[j>>2]|0,c[h>>2]|0,e,f)|0;i=b;return g|0}function wh(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;a=i;i=i+224|0;k=a+8|0;o=a;n=a+192|0;j=a+188|0;h=a+184|0;l=a+180|0;m=o;c[m>>2]=37;c[m+4>>2]=0;m=d+4|0;qh(o+1|0,17642,1,c[m>>2]|0);p=sg()|0;q=k;c[q>>2]=f;c[q+4>>2]=g;f=n+(lh(n,23,p,o,k)|0)|0;m=mh(n,f,c[m>>2]|0)|0;g=c[d+28>>2]|0;o=g+4|0;c[o>>2]=(c[o>>2]|0)+1;c[l>>2]=g;Eh(n,m,f,k,j,h,l);Fl(g);g=Ch(c[b>>2]|0,k,c[j>>2]|0,c[h>>2]|0,d,e)|0;i=a;return g|0}function xh(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;b=i;i=i+128|0;k=b;m=b+108|0;o=b+96|0;j=b+92|0;h=b+88|0;l=b+84|0;a[m>>0]=a[17645]|0;a[m+1>>0]=a[17646]|0;a[m+2>>0]=a[17647]|0;a[m+3>>0]=a[17648]|0;a[m+4>>0]=a[17649]|0;a[m+5>>0]=a[17650]|0;n=e+4|0;qh(m+1|0,20668,0,c[n>>2]|0);p=sg()|0;c[k>>2]=g;m=o+(lh(o,12,p,m,k)|0)|0;n=mh(o,m,c[n>>2]|0)|0;g=c[e+28>>2]|0;p=g+4|0;c[p>>2]=(c[p>>2]|0)+1;c[l>>2]=g;Eh(o,n,m,k,j,h,l);Fl(g);g=Ch(c[d>>2]|0,k,c[j>>2]|0,c[h>>2]|0,e,f)|0;i=b;return g|0}function yh(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;a=i;i=i+224|0;k=a+8|0;o=a;n=a+192|0;j=a+188|0;h=a+184|0;l=a+180|0;m=o;c[m>>2]=37;c[m+4>>2]=0;m=d+4|0;qh(o+1|0,17642,0,c[m>>2]|0);p=sg()|0;q=k;c[q>>2]=f;c[q+4>>2]=g;f=n+(lh(n,23,p,o,k)|0)|0;m=mh(n,f,c[m>>2]|0)|0;g=c[d+28>>2]|0;o=g+4|0;c[o>>2]=(c[o>>2]|0)+1;c[l>>2]=g;Eh(n,m,f,k,j,h,l);Fl(g);g=Ch(c[b>>2]|0,k,c[j>>2]|0,c[h>>2]|0,d,e)|0;i=a;return g|0}function zh(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=+f;var g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;v=i;i=i+336|0;o=v+48|0;n=v+32|0;k=v+24|0;j=v+8|0;m=v;r=v+300|0;p=v+296|0;g=v+68|0;u=v+64|0;s=v+60|0;t=v+56|0;q=m;c[q>>2]=37;c[q+4>>2]=0;q=d+4|0;l=nh(m+1|0,24933,c[q>>2]|0)|0;c[p>>2]=r;a=sg()|0;if(l){c[j>>2]=c[d+8>>2];h[j+8>>3]=f;a=lh(r,30,a,m,j)|0}else{h[k>>3]=f;a=lh(r,30,a,m,k)|0}if((a|0)>29){a=sg()|0;if(l){c[n>>2]=c[d+8>>2];h[n+8>>3]=f;a=oh(p,a,m,n)|0}else{h[o>>3]=f;a=oh(p,a,m,o)|0}n=c[p>>2]|0;k=n}else{k=r;n=0}m=k+a|0;l=mh(k,m,c[q>>2]|0)|0;if((k|0)==(r|0)){j=0;a=r}else{j=vf(a<<3)|0;g=j;a=k}r=c[d+28>>2]|0;q=r+4|0;c[q>>2]=(c[q>>2]|0)+1;c[t>>2]=r;Dh(a,l,m,g,u,s,t);Fl(r);a=Ch(c[b>>2]|0,g,c[u>>2]|0,c[s>>2]|0,d,e)|0;c[b>>2]=a;if(j|0)wf(j);wf(n);i=v;return a|0}function Ah(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=+f;var g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;v=i;i=i+336|0;o=v+48|0;n=v+32|0;k=v+24|0;j=v+8|0;m=v;r=v+300|0;p=v+296|0;g=v+68|0;u=v+64|0;s=v+60|0;t=v+56|0;q=m;c[q>>2]=37;c[q+4>>2]=0;q=d+4|0;l=nh(m+1|0,17640,c[q>>2]|0)|0;c[p>>2]=r;a=sg()|0;if(l){c[j>>2]=c[d+8>>2];h[j+8>>3]=f;a=lh(r,30,a,m,j)|0}else{h[k>>3]=f;a=lh(r,30,a,m,k)|0}if((a|0)>29){a=sg()|0;if(l){c[n>>2]=c[d+8>>2];h[n+8>>3]=f;a=oh(p,a,m,n)|0}else{h[o>>3]=f;a=oh(p,a,m,o)|0}n=c[p>>2]|0;k=n}else{k=r;n=0}m=k+a|0;l=mh(k,m,c[q>>2]|0)|0;if((k|0)==(r|0)){j=0;a=r}else{j=vf(a<<3)|0;g=j;a=k}r=c[d+28>>2]|0;q=r+4|0;c[q>>2]=(c[q>>2]|0)+1;c[t>>2]=r;Dh(a,l,m,g,u,s,t);Fl(r);a=Ch(c[b>>2]|0,g,c[u>>2]|0,c[s>>2]|0,d,e)|0;c[b>>2]=a;if(j|0)wf(j);wf(n);i=v;return a|0}function Bh(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0;b=i;i=i+176|0;k=b;l=b+168|0;h=b+148|0;a[l>>0]=a[17634]|0;a[l+1>>0]=a[17635]|0;a[l+2>>0]=a[17636]|0;a[l+3>>0]=a[17637]|0;a[l+4>>0]=a[17638]|0;a[l+5>>0]=a[17639]|0;j=sg()|0;c[k>>2]=g;g=lh(h,20,j,l,k)|0;l=h+g|0;j=mh(h,l,c[e+4>>2]|0)|0;n=c[e+28>>2]|0;m=n+4|0;c[m>>2]=(c[m>>2]|0)+1;m=qg(n,22028)|0;Fl(n);wb[c[(c[m>>2]|0)+48>>2]&7](m,h,l,k)|0;g=k+(g<<2)|0;g=Ch(c[d>>2]|0,k,(j|0)==(l|0)?g:k+(j-h<<2)|0,g,e,f)|0;i=b;return g|0}function Ch(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;p=i;i=i+16|0;o=p;do if(!b)b=0;else{q=d;j=f-q>>2;m=g+12|0;l=c[m>>2]|0;j=(l|0)>(j|0)?l-j|0:0;l=e;q=l-q|0;g=q>>2;if((q|0)>0?(lb[c[(c[b>>2]|0)+48>>2]&31](b,d,g)|0)!=(g|0):0){b=0;break}if((j|0)>0){c[o>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;if(j>>>0>1073741807)Il();do if(j>>>0>=2){g=j+4&-4;if(g>>>0>1073741823)Ea(19862,19899,1734,20006);else{n=Hl(g<<2)|0;c[o>>2]=n;c[o+8>>2]=g|-2147483648;c[o+4>>2]=j;k=j;break}}else{a[o+8+3>>0]=j;n=o;k=1}while(0);g=k;d=n;while(1){g=g+-1|0;c[d>>2]=h;if(!g)break;else d=d+4|0}c[n+(j<<2)>>2]=0;q=(lb[c[(c[b>>2]|0)+48>>2]&31](b,(a[o+8+3>>0]|0)<0?c[o>>2]|0:o,j)|0)==(j|0);Tl(o);if(!q){b=0;break}}q=f-l|0;f=q>>2;if((q|0)>0?(lb[c[(c[b>>2]|0)+48>>2]&31](b,e,f)|0)!=(f|0):0){b=0;break}c[m>>2]=0}while(0);i=p;return b|0}function Dh(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;y=i;i=i+16|0;w=y;x=qg(c[j>>2]|0,22028)|0;u=qg(c[j>>2]|0,22036)|0;pb[c[(c[u>>2]|0)+20>>2]&63](w,u);c[h>>2]=f;j=a[b>>0]|0;switch(j<<24>>24){case 43:case 45:{v=yb[c[(c[x>>2]|0)+44>>2]&15](x,j)|0;l=c[h>>2]|0;c[h>>2]=l+4;c[l>>2]=v;l=b+1|0;break}default:l=b}v=e;a:do if((v-l|0)>1?(a[l>>0]|0)==48:0){j=l+1|0;switch(a[j>>0]|0){case 88:case 120:break;default:{n=4;break a}}t=yb[c[(c[x>>2]|0)+44>>2]&15](x,48)|0;s=c[h>>2]|0;c[h>>2]=s+4;c[s>>2]=t;l=l+2|0;s=yb[c[(c[x>>2]|0)+44>>2]&15](x,a[j>>0]|0)|0;t=c[h>>2]|0;c[h>>2]=t+4;c[t>>2]=s;if(l>>>0<e>>>0){k=l;while(1){t=a[k>>0]|0;sg()|0;if(!((t+-48|0)>>>0<10|((t|32)+-97|0)>>>0<6)){t=l;break a}k=k+1|0;if(k>>>0>=e>>>0){t=l;break}}}else{t=l;k=l}}else n=4;while(0);b:do if((n|0)==4)if(l>>>0<e>>>0){k=l;while(1){t=a[k>>0]|0;sg()|0;if((t+-48|0)>>>0>=10){t=l;break b}k=k+1|0;if(k>>>0>=e>>>0){t=l;break}}}else{t=l;k=l}while(0);r=w+11|0;q=a[r>>0]|0;s=w+4|0;if((q<<24>>24<0?c[s>>2]|0:q&255)|0){if((t|0)!=(k|0)?(o=k+-1|0,t>>>0<o>>>0):0){l=t;j=o;do{q=a[l>>0]|0;a[l>>0]=a[j>>0]|0;a[j>>0]=q;l=l+1|0;j=j+-1|0}while(l>>>0<j>>>0)}q=sb[c[(c[u>>2]|0)+16>>2]&63](u)|0;if(t>>>0<k>>>0){p=t;l=0;n=0;while(1){j=a[r>>0]|0;o=j<<24>>24<0;z=a[(o?c[w>>2]|0:w)+l>>0]|0;if(z<<24>>24>0&(n|0)==(z<<24>>24|0)){n=c[h>>2]|0;c[h>>2]=n+4;c[n>>2]=q;l=(l>>>0<((o?c[s>>2]|0:j&255)+-1|0)>>>0&1)+l|0;n=0}o=yb[c[(c[x>>2]|0)+44>>2]&15](x,a[p>>0]|0)|0;z=c[h>>2]|0;j=z+4|0;c[h>>2]=j;c[z>>2]=o;p=p+1|0;if((p|0)==(k|0))break;else n=n+1|0}}else j=c[h>>2]|0;l=f+(t-b<<2)|0;if((l|0)!=(j|0)?(m=j+-4|0,l>>>0<m>>>0):0){do{z=c[l>>2]|0;c[l>>2]=c[m>>2];c[m>>2]=z;l=l+4|0;m=m+-4|0}while(l>>>0<m>>>0);l=x}else l=x}else{wb[c[(c[x>>2]|0)+48>>2]&7](x,t,k,c[h>>2]|0)|0;j=(c[h>>2]|0)+(k-t<<2)|0;c[h>>2]=j;l=x}c:do if(k>>>0<e>>>0){while(1){j=a[k>>0]|0;if(j<<24>>24==46)break;t=yb[c[(c[l>>2]|0)+44>>2]&15](x,j)|0;z=c[h>>2]|0;j=z+4|0;c[h>>2]=j;c[z>>2]=t;k=k+1|0;if(k>>>0>=e>>>0)break c}u=sb[c[(c[u>>2]|0)+12>>2]&63](u)|0;z=c[h>>2]|0;j=z+4|0;c[h>>2]=j;c[z>>2]=u;k=k+1|0}while(0);wb[c[(c[x>>2]|0)+48>>2]&7](x,k,e,j)|0;z=(c[h>>2]|0)+(v-k<<2)|0;c[h>>2]=z;c[g>>2]=(d|0)==(e|0)?z:f+(d-b<<2)|0;Ml(w);i=y;return}function Eh(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;v=i;i=i+16|0;u=v;t=qg(c[j>>2]|0,22028)|0;n=qg(c[j>>2]|0,22036)|0;pb[c[(c[n>>2]|0)+20>>2]&63](u,n);r=u+11|0;q=a[r>>0]|0;s=u+4|0;if((q<<24>>24<0?c[s>>2]|0:q&255)|0){c[h>>2]=f;j=a[b>>0]|0;switch(j<<24>>24){case 43:case 45:{q=yb[c[(c[t>>2]|0)+44>>2]&15](t,j)|0;j=c[h>>2]|0;c[h>>2]=j+4;c[j>>2]=q;j=b+1|0;break}default:j=b}a:do if((e-j|0)>1?(a[j>>0]|0)==48:0){k=j+1|0;switch(a[k>>0]|0){case 88:case 120:break;default:{q=j;break a}}q=yb[c[(c[t>>2]|0)+44>>2]&15](t,48)|0;p=c[h>>2]|0;c[h>>2]=p+4;c[p>>2]=q;p=yb[c[(c[t>>2]|0)+44>>2]&15](t,a[k>>0]|0)|0;q=c[h>>2]|0;c[h>>2]=q+4;c[q>>2]=p;q=j+2|0}else q=j;while(0);if((q|0)!=(e|0)?(m=e+-1|0,q>>>0<m>>>0):0){k=q;j=m;do{p=a[k>>0]|0;a[k>>0]=a[j>>0]|0;a[j>>0]=p;k=k+1|0;j=j+-1|0}while(k>>>0<j>>>0)}p=sb[c[(c[n>>2]|0)+16>>2]&63](n)|0;if(q>>>0<e>>>0){o=q;k=0;m=0;while(1){j=a[r>>0]|0;n=j<<24>>24<0;w=a[(n?c[u>>2]|0:u)+k>>0]|0;if(w<<24>>24!=0&(m|0)==(w<<24>>24|0)){m=c[h>>2]|0;c[h>>2]=m+4;c[m>>2]=p;k=(k>>>0<((n?c[s>>2]|0:j&255)+-1|0)>>>0&1)+k|0;m=0}n=yb[c[(c[t>>2]|0)+44>>2]&15](t,a[o>>0]|0)|0;w=c[h>>2]|0;j=w+4|0;c[h>>2]=j;c[w>>2]=n;o=o+1|0;if((o|0)==(e|0))break;else m=m+1|0}}else j=c[h>>2]|0;k=f+(q-b<<2)|0;if((k|0)!=(j|0)?(l=j+-4|0,k>>>0<l>>>0):0)do{w=c[k>>2]|0;c[k>>2]=c[l>>2];c[l>>2]=w;k=k+4|0;l=l+-4|0}while(k>>>0<l>>>0)}else{wb[c[(c[t>>2]|0)+48>>2]&7](t,b,e,f)|0;j=f+(e-b<<2)|0;c[h>>2]=j}c[g>>2]=(d|0)==(e|0)?j:f+(d-b<<2)|0;Ml(u);i=v;return}function Fh(a){a=a|0;return}function Gh(a){a=a|0;wf(a);return}function Hh(a){a=a|0;return 2}function Ih(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;return _h(a,c[b>>2]|0,c[d>>2]|0,e,f,g,18150,18158)|0}function Jh(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0;j=b+8|0;j=sb[c[(c[j>>2]|0)+20>>2]&63](j)|0;i=a[j+11>>0]|0;k=i<<24>>24<0;l=k?c[j>>2]|0:j;return _h(b,c[d>>2]|0,c[e>>2]|0,f,g,h,l,l+(k?c[j+4>>2]|0:i&255)|0)|0}function Kh(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=c[e+28>>2]|0;e=h+4|0;c[e>>2]=(c[e>>2]|0)+1;e=qg(h,21996)|0;Fl(h);Yh(a,g+24|0,b,c[d>>2]|0,f,e);return c[b>>2]|0}function Lh(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=c[e+28>>2]|0;e=h+4|0;c[e>>2]=(c[e>>2]|0)+1;e=qg(h,21996)|0;Fl(h);Zh(a,g+16|0,b,c[d>>2]|0,f,e);return c[b>>2]|0}function Mh(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;a=c[e+28>>2]|0;e=a+4|0;c[e>>2]=(c[e>>2]|0)+1;e=qg(a,21996)|0;Fl(a);$h(g+20|0,b,c[d>>2]|0,f,e);return c[b>>2]|0}function Nh(e,f,g,h,j,k,l,m){e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0;s=i;i=i+16|0;n=s+12|0;m=s+8|0;o=s+4|0;p=s;c[j>>2]=0;t=c[h+28>>2]|0;q=t+4|0;c[q>>2]=(c[q>>2]|0)+1;q=qg(t,21996)|0;Fl(t);a:do switch(l<<24>>24|0){case 65:case 97:{Yh(e,k+24|0,f,c[g>>2]|0,j,q);r=113;break}case 104:case 66:case 98:{Zh(e,k+16|0,f,c[g>>2]|0,j,q);r=113;break}case 99:{t=e+8|0;t=sb[c[(c[t>>2]|0)+12>>2]&63](t)|0;r=a[t+11>>0]|0;q=r<<24>>24<0;l=q?c[t>>2]|0:t;c[f>>2]=_h(e,c[f>>2]|0,c[g>>2]|0,h,j,k,l,l+(q?c[t+4>>2]|0:r&255)|0)|0;r=113;break}case 101:case 100:{m=ai(f,c[g>>2]|0,j,q,2)|0;n=c[j>>2]|0;if((m+-1|0)>>>0<31&(n&4|0)==0){c[k+12>>2]=m;r=113;break a}else{c[j>>2]=n|4;r=113;break a}}case 68:{c[f>>2]=_h(e,c[f>>2]|0,c[g>>2]|0,h,j,k,18110,18118)|0;r=113;break}case 70:{c[f>>2]=_h(e,c[f>>2]|0,c[g>>2]|0,h,j,k,18118,18126)|0;r=113;break}case 72:{m=ai(f,c[g>>2]|0,j,q,2)|0;n=c[j>>2]|0;if((m|0)<24&(n&4|0)==0){c[k+8>>2]=m;r=113;break a}else{c[j>>2]=n|4;r=113;break a}}case 73:{m=ai(f,c[g>>2]|0,j,q,2)|0;n=c[j>>2]|0;if((m+-1|0)>>>0<12&(n&4|0)==0){c[k+8>>2]=m;r=113;break a}else{c[j>>2]=n|4;r=113;break a}}case 106:{m=ai(f,c[g>>2]|0,j,q,3)|0;n=c[j>>2]|0;if((m|0)<366&(n&4|0)==0){c[k+28>>2]=m;r=113;break a}else{c[j>>2]=n|4;r=113;break a}}case 109:{m=ai(f,c[g>>2]|0,j,q,2)|0;n=c[j>>2]|0;if((m|0)<13&(n&4|0)==0){c[k+16>>2]=m+-1;r=113;break a}else{c[j>>2]=n|4;r=113;break a}}case 77:{m=ai(f,c[g>>2]|0,j,q,2)|0;n=c[j>>2]|0;if((m|0)<60&(n&4|0)==0){c[k+4>>2]=m;r=113;break a}else{c[j>>2]=n|4;r=113;break a}}case 116:case 110:{h=q+8|0;m=c[g>>2]|0;b:while(1){n=c[f>>2]|0;do if(n){if((c[n+12>>2]|0)==(c[n+16>>2]|0))if((sb[c[(c[n>>2]|0)+36>>2]&63](n)|0)==-1){c[f>>2]=0;n=0;break}else{n=c[f>>2]|0;break}}else n=0;while(0);o=(n|0)==0;n=m;do if(m){if((c[n+12>>2]|0)!=(c[n+16>>2]|0))if(o){p=n;break}else break b;if((sb[c[(c[m>>2]|0)+36>>2]&63](n)|0)!=-1)if(o)p=n;else break b;else{m=0;r=35}}else r=35;while(0);if((r|0)==35){r=0;if(o){n=0;break}else p=0}n=c[f>>2]|0;o=c[n+12>>2]|0;if((o|0)==(c[n+16>>2]|0))n=sb[c[(c[n>>2]|0)+36>>2]&63](n)|0;else n=d[o>>0]|0;if((n&255)<<24>>24<=-1){n=p;break}if(!(b[(c[h>>2]|0)+(n<<24>>24<<1)>>1]&8192)){n=p;break}n=c[f>>2]|0;o=n+12|0;p=c[o>>2]|0;if((p|0)==(c[n+16>>2]|0)){sb[c[(c[n>>2]|0)+40>>2]&63](n)|0;continue}else{c[o>>2]=p+1;continue}}m=c[f>>2]|0;do if(m){if((c[m+12>>2]|0)==(c[m+16>>2]|0))if((sb[c[(c[m>>2]|0)+36>>2]&63](m)|0)==-1){c[f>>2]=0;m=0;break}else{m=c[f>>2]|0;break}}else m=0;while(0);m=(m|0)==0;do if(n){if((c[n+12>>2]|0)==(c[n+16>>2]|0)?(sb[c[(c[n>>2]|0)+36>>2]&63](n)|0)==-1:0){r=54;break}if(m){r=113;break a}}else r=54;while(0);if((r|0)==54?!m:0){r=113;break a}c[j>>2]=c[j>>2]|2;r=113;break}case 112:{h=k+8|0;p=c[g>>2]|0;o=e+8|0;o=sb[c[(c[o>>2]|0)+8>>2]&63](o)|0;m=a[o+11>>0]|0;if(m<<24>>24<0)n=c[o+4>>2]|0;else n=m&255;m=a[o+12+11>>0]|0;if(m<<24>>24<0)m=c[o+16>>2]|0;else m=m&255;if((n|0)==(0-m|0)){c[j>>2]=c[j>>2]|4;r=113;break a}m=(Kg(f,p,o,o+24|0,q,j,0)|0)-o|0;n=c[h>>2]|0;if((n|0)==12&(m|0)==0){c[h>>2]=0;r=113;break a}if((n|0)<12&(m|0)==12){c[h>>2]=n+12;r=113}else r=113;break}case 114:{c[f>>2]=_h(e,c[f>>2]|0,c[g>>2]|0,h,j,k,18126,18137)|0;r=113;break}case 82:{c[f>>2]=_h(e,c[f>>2]|0,c[g>>2]|0,h,j,k,18137,18142)|0;r=113;break}case 83:{m=ai(f,c[g>>2]|0,j,q,2)|0;n=c[j>>2]|0;if((m|0)<61&(n&4|0)==0){c[k>>2]=m;r=113;break a}else{c[j>>2]=n|4;r=113;break a}}case 84:{c[f>>2]=_h(e,c[f>>2]|0,c[g>>2]|0,h,j,k,18142,18150)|0;r=113;break}case 119:{m=ai(f,c[g>>2]|0,j,q,1)|0;n=c[j>>2]|0;if((m|0)<7&(n&4|0)==0){c[k+24>>2]=m;r=113;break a}else{c[j>>2]=n|4;r=113;break a}}case 120:{t=c[(c[e>>2]|0)+20>>2]|0;c[o>>2]=c[f>>2];c[p>>2]=c[g>>2];c[m>>2]=c[o>>2];c[n>>2]=c[p>>2];m=qb[t&63](e,m,n,h,j,k)|0;break}case 88:{t=e+8|0;t=sb[c[(c[t>>2]|0)+24>>2]&63](t)|0;r=a[t+11>>0]|0;q=r<<24>>24<0;l=q?c[t>>2]|0:t;c[f>>2]=_h(e,c[f>>2]|0,c[g>>2]|0,h,j,k,l,l+(q?c[t+4>>2]|0:r&255)|0)|0;r=113;break}case 121:{$h(k+20|0,f,c[g>>2]|0,j,q);r=113;break}case 89:{m=ai(f,c[g>>2]|0,j,q,4)|0;if(!(c[j>>2]&4)){c[k+20>>2]=m+-1900;r=113}else r=113;break}case 37:{n=c[g>>2]|0;m=c[f>>2]|0;do if(m){if((c[m+12>>2]|0)==(c[m+16>>2]|0))if((sb[c[(c[m>>2]|0)+36>>2]&63](m)|0)==-1){c[f>>2]=0;m=0;break}else{m=c[f>>2]|0;break}}else m=0;while(0);m=(m|0)==0;do if(n){if((c[n+12>>2]|0)==(c[n+16>>2]|0)?(sb[c[(c[n>>2]|0)+36>>2]&63](n)|0)==-1:0){r=91;break}if(m)h=n;else r=92}else r=91;while(0);if((r|0)==91)if(m)r=92;else h=0;if((r|0)==92){c[j>>2]=c[j>>2]|6;r=113;break a}m=c[f>>2]|0;n=c[m+12>>2]|0;if((n|0)==(c[m+16>>2]|0))m=sb[c[(c[m>>2]|0)+36>>2]&63](m)|0;else m=d[n>>0]|0;if((lb[c[(c[q>>2]|0)+36>>2]&31](q,m&255,0)|0)<<24>>24!=37){c[j>>2]=c[j>>2]|4;r=113;break a}m=c[f>>2]|0;n=m+12|0;o=c[n>>2]|0;p=c[m+16>>2]|0;if((o|0)==(p|0)){sb[c[(c[m>>2]|0)+40>>2]&63](m)|0;m=c[f>>2]|0;if(!m)m=0;else{n=c[m+12>>2]|0;p=c[m+16>>2]|0;r=102}}else{r=o+1|0;c[n>>2]=r;n=r;r=102}do if((r|0)==102)if((n|0)==(p|0))if((sb[c[(c[m>>2]|0)+36>>2]&63](m)|0)==-1){c[f>>2]=0;m=0;break}else{m=c[f>>2]|0;break}while(0);m=(m|0)==0;do if(h){if((c[h+12>>2]|0)==(c[h+16>>2]|0)?(sb[c[(c[h>>2]|0)+36>>2]&63](h)|0)==-1:0){r=110;break}if(m){r=113;break a}}else r=110;while(0);if((r|0)==110?!m:0){r=113;break a}c[j>>2]=c[j>>2]|2;r=113;break}default:{c[j>>2]=c[j>>2]|4;r=113}}while(0);if((r|0)==113)m=c[f>>2]|0;i=s;return m|0}function Oh(b){b=b|0;var d=0,e=0;if(!(a[20824]|0)){a[20824]=1;if(!(a[20832]|0)){a[20832]=1;b=22676;d=0;while(1){e=22676+(d*12|0)|0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;b=b+12|0;if((b|0)==22844)break;else d=d+1|0}_a(102,0,o|0)|0}Ol(22676,18025);Ol(22688,18032);Ol(22700,18039);Ol(22712,18047);Ol(22724,18057);Ol(22736,18066);Ol(22748,18073);Ol(22760,18082);Ol(22772,18086);Ol(22784,18090);Ol(22796,18094);Ol(22808,18098);Ol(22820,18102);Ol(22832,18106);c[5711]=22676;b=22676}else b=c[5711]|0;return b|0}function Ph(b){b=b|0;var d=0,e=0;if(!(a[20808]|0)){a[20808]=1;if(!(a[20816]|0)){a[20816]=1;b=22384;d=0;while(1){e=22384+(d*12|0)|0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;b=b+12|0;if((b|0)==22672)break;else d=d+1|0}_a(103,0,o|0)|0}Ol(22384,17895);Ol(22396,17903);Ol(22408,17912);Ol(22420,17918);Ol(22432,17924);Ol(22444,17928);Ol(22456,17933);Ol(22468,17938);Ol(22480,17945);Ol(22492,17955);Ol(22504,17963);Ol(22516,17972);Ol(22528,17981);Ol(22540,17985);Ol(22552,17989);Ol(22564,17993);Ol(22576,17924);Ol(22588,17997);Ol(22600,18001);Ol(22612,18005);Ol(22624,18009);Ol(22636,18013);Ol(22648,18017);Ol(22660,18021);c[5668]=22384;b=22384}else b=c[5668]|0;return b|0}function Qh(b){b=b|0;var d=0,e=0;if(!(a[20792]|0)){a[20792]=1;if(!(a[20800]|0)){a[20800]=1;b=22092;d=0;while(1){e=22092+(d*12|0)|0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;b=b+12|0;if((b|0)==22380)break;else d=d+1|0}_a(104,0,o|0)|0}Ol(22092,17889);Ol(22104,17892);c[5595]=22092;b=22092}else b=c[5595]|0;return b|0}function Rh(b){b=b|0;if(!(a[20784]|0)){a[20784]=1;c[5520]=0;c[5521]=0;c[5522]=0;Ll(22080,17868,20);_a(105,22080,o|0)|0}return 22080}function Sh(b){b=b|0;if(!(a[20776]|0)){a[20776]=1;c[5517]=0;c[5518]=0;c[5519]=0;Ll(22068,17856,11);_a(105,22068,o|0)|0}return 22068}function Th(b){b=b|0;if(!(a[20752]|0)){a[20752]=1;c[5192]=0;a[20771]=8;b=20760;c[b>>2]=623865125;c[b+4>>2]=2032480100;a[20768]=0;_a(105,20760,o|0)|0}return 20760}function Uh(b){b=b|0;if(!(a[20728]|0)){a[20728]=1;c[5186]=0;a[20747]=8;b=20736;c[b>>2]=624576549;c[b+4>>2]=1394948685;a[20744]=0;_a(105,20736,o|0)|0}return 20736}function Vh(a){a=a|0;a=22380;do{a=a+-12|0;Ml(a)}while((a|0)!=22092);return}function Wh(a){a=a|0;a=22672;do{a=a+-12|0;Ml(a)}while((a|0)!=22384);return}function Xh(a){a=a|0;a=22844;do{a=a+-12|0;Ml(a)}while((a|0)!=22676);return}function Yh(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;a=a+8|0;a=sb[c[c[a>>2]>>2]&63](a)|0;e=(Kg(d,e,a,a+168|0,g,f,0)|0)-a|0;if((e|0)<168)c[b>>2]=((e|0)/12|0|0)%7|0;return}function Zh(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;a=a+8|0;a=sb[c[(c[a>>2]|0)+4>>2]&63](a)|0;e=(Kg(d,e,a,a+288|0,g,f,0)|0)-a|0;if((e|0)<288)c[b>>2]=((e|0)/12|0|0)%12|0;return}function _h(e,f,g,h,j,k,l,m){e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;C=i;i=i+16|0;v=C+12|0;u=C+8|0;y=C+4|0;z=C;x=c[h+28>>2]|0;w=x+4|0;c[w>>2]=(c[w>>2]|0)+1;w=qg(x,21996)|0;Fl(x);c[j>>2]=0;x=w+8|0;a:do if((l|0)!=(m|0)){b:while(1){n=f;if(f){if((c[f+12>>2]|0)==(c[f+16>>2]|0)){t=(sb[c[(c[f>>2]|0)+36>>2]&63](f)|0)==-1;f=t?0:f;n=t?0:n}}else f=0;p=(f|0)==0;o=g;do if(g){if((c[g+12>>2]|0)==(c[g+16>>2]|0)?(sb[c[(c[g>>2]|0)+36>>2]&63](g)|0)==-1:0){o=0;B=9;break}if(!p){B=10;break b}}else B=9;while(0);if((B|0)==9){B=0;if(p){f=0;g=0;B=10;break}else g=0}c:do if((lb[c[(c[w>>2]|0)+36>>2]&31](w,a[l>>0]|0,0)|0)<<24>>24==37){q=l+1|0;if((q|0)==(m|0)){B=13;break b}p=lb[c[(c[w>>2]|0)+36>>2]&31](w,a[q>>0]|0,0)|0;switch(p<<24>>24){case 48:case 69:{l=l+2|0;if((l|0)==(m|0)){B=18;break b}f=p;p=lb[c[(c[w>>2]|0)+36>>2]&31](w,a[l>>0]|0,0)|0;l=q;break}default:f=0}t=c[(c[e>>2]|0)+36>>2]|0;c[y>>2]=n;c[z>>2]=o;c[u>>2]=c[y>>2];c[v>>2]=c[z>>2];l=l+2|0;f=vb[t&15](e,u,v,h,j,k,p,f)|0}else{n=a[l>>0]|0;if(n<<24>>24>-1?(A=c[x>>2]|0,b[A+(n<<24>>24<<1)>>1]&8192):0){do{l=l+1|0;if((l|0)==(m|0)){l=m;break}n=a[l>>0]|0;if(n<<24>>24<=-1)break}while((b[A+(n<<24>>24<<1)>>1]&8192)!=0);o=f;n=g;q=g;p=g;while(1){if(o)if((c[o+12>>2]|0)==(c[o+16>>2]|0)){t=(sb[c[(c[o>>2]|0)+36>>2]&63](o)|0)==-1;f=t?0:f;t=t?0:o}else t=o;else t=0;o=(t|0)==0;do if(p){if((c[p+12>>2]|0)!=(c[p+16>>2]|0))if(o){s=n;g=q;r=p;break}else{g=q;break c}if((sb[c[(c[p>>2]|0)+36>>2]&63](p)|0)!=-1)if((n|0)==0^o){s=n;g=q;r=n}else{g=q;break c}else{n=0;g=0;B=32}}else{g=q;B=32}while(0);if((B|0)==32){B=0;if(o)break c;else{s=n;r=0}}o=t+12|0;n=c[o>>2]|0;p=t+16|0;if((n|0)==(c[p>>2]|0))n=sb[c[(c[t>>2]|0)+36>>2]&63](t)|0;else n=d[n>>0]|0;if((n&255)<<24>>24<=-1)break c;if(!(b[(c[x>>2]|0)+(n<<24>>24<<1)>>1]&8192))break c;n=c[o>>2]|0;if((n|0)==(c[p>>2]|0)){sb[c[(c[t>>2]|0)+40>>2]&63](t)|0;o=t;n=s;q=g;p=r;continue}else{c[o>>2]=n+1;o=t;n=s;q=g;p=r;continue}}}o=f+12|0;n=c[o>>2]|0;p=f+16|0;if((n|0)==(c[p>>2]|0))n=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else n=d[n>>0]|0;t=yb[c[(c[w>>2]|0)+12>>2]&15](w,n&255)|0;if(t<<24>>24!=(yb[c[(c[w>>2]|0)+12>>2]&15](w,a[l>>0]|0)|0)<<24>>24){B=51;break b}n=c[o>>2]|0;if((n|0)==(c[p>>2]|0))sb[c[(c[f>>2]|0)+40>>2]&63](f)|0;else c[o>>2]=n+1;l=l+1|0}while(0);if(!((l|0)!=(m|0)&(c[j>>2]|0)==0)){B=52;break a}}if((B|0)==10){c[j>>2]=4;B=52;break}else if((B|0)==13){c[j>>2]=4;B=52;break}else if((B|0)==18){c[j>>2]=4;B=52;break}else if((B|0)==51){c[j>>2]=4;B=53;break}}else B=52;while(0);if((B|0)==52)if(!f)f=0;else B=53;if((B|0)==53)if((c[f+12>>2]|0)==(c[f+16>>2]|0)){A=(sb[c[(c[f>>2]|0)+36>>2]&63](f)|0)==-1;f=A?0:f}l=(f|0)==0;do if(g){if((c[g+12>>2]|0)==(c[g+16>>2]|0)?(sb[c[(c[g>>2]|0)+36>>2]&63](g)|0)==-1:0){B=59;break}if(!l)B=60}else B=59;while(0);if((B|0)==59?l:0)B=60;if((B|0)==60)c[j>>2]=c[j>>2]|2;i=C;return f|0}function $h(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;d=ai(b,d,e,f,4)|0;if(!(c[e>>2]&4)){if((d|0)<69)d=d+2e3|0;else d=(d|0)<100?d+1900|0:d;c[a>>2]=d+-1900}return}function ai(a,e,f,g,h){a=a|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;i=c[a>>2]|0;do if(i){if((c[i+12>>2]|0)==(c[i+16>>2]|0))if((sb[c[(c[i>>2]|0)+36>>2]&63](i)|0)==-1){c[a>>2]=0;i=0;break}else{i=c[a>>2]|0;break}}else i=0;while(0);i=(i|0)==0;do if(e){if((c[e+12>>2]|0)==(c[e+16>>2]|0)?(sb[c[(c[e>>2]|0)+36>>2]&63](e)|0)==-1:0){q=10;break}if(i)q=12;else q=11}else q=10;while(0);if((q|0)==10)if(i)q=11;else{e=0;q=12}a:do if((q|0)==11){c[f>>2]=c[f>>2]|6;i=0}else if((q|0)==12){i=c[a>>2]|0;j=c[i+12>>2]|0;if((j|0)==(c[i+16>>2]|0))i=sb[c[(c[i>>2]|0)+36>>2]&63](i)|0;else i=d[j>>0]|0;j=i&255;if(j<<24>>24>-1?(p=g+8|0,b[(c[p>>2]|0)+(i<<24>>24<<1)>>1]&2048):0){i=(lb[c[(c[g>>2]|0)+36>>2]&31](g,j,0)|0)<<24>>24;j=c[a>>2]|0;k=j+12|0;l=c[k>>2]|0;if((l|0)==(c[j+16>>2]|0)){sb[c[(c[j>>2]|0)+40>>2]&63](j)|0;l=e;k=e}else{c[k>>2]=l+1;l=e;k=e}while(1){i=i+-48|0;n=h+-1|0;e=c[a>>2]|0;do if(e){if((c[e+12>>2]|0)==(c[e+16>>2]|0))if((sb[c[(c[e>>2]|0)+36>>2]&63](e)|0)==-1){c[a>>2]=0;e=0;break}else{e=c[a>>2]|0;break}}else e=0;while(0);j=(e|0)==0;if(k)if((c[k+12>>2]|0)==(c[k+16>>2]|0)){m=(sb[c[(c[k>>2]|0)+36>>2]&63](k)|0)==-1;o=m?0:l;m=m?0:l}else{o=l;m=k}else{o=l;m=0}e=c[a>>2]|0;if(!((h|0)>1&(j^(m|0)==0)))break;j=c[e+12>>2]|0;if((j|0)==(c[e+16>>2]|0))e=sb[c[(c[e>>2]|0)+36>>2]&63](e)|0;else e=d[j>>0]|0;j=e&255;if(j<<24>>24<=-1)break a;if(!(b[(c[p>>2]|0)+(e<<24>>24<<1)>>1]&2048))break a;i=((lb[c[(c[g>>2]|0)+36>>2]&31](g,j,0)|0)<<24>>24)+(i*10|0)|0;e=c[a>>2]|0;j=e+12|0;k=c[j>>2]|0;if((k|0)==(c[e+16>>2]|0)){sb[c[(c[e>>2]|0)+40>>2]&63](e)|0;h=n;l=o;k=m;continue}else{c[j>>2]=k+1;h=n;l=o;k=m;continue}}do if(e){if((c[e+12>>2]|0)==(c[e+16>>2]|0))if((sb[c[(c[e>>2]|0)+36>>2]&63](e)|0)==-1){c[a>>2]=0;e=0;break}else{e=c[a>>2]|0;break}}else e=0;while(0);e=(e|0)==0;do if(o){if((c[o+12>>2]|0)==(c[o+16>>2]|0)?(sb[c[(c[o>>2]|0)+36>>2]&63](o)|0)==-1:0){q=47;break}if(e)break a}else q=47;while(0);if((q|0)==47?!e:0)break;c[f>>2]=c[f>>2]|2;break}c[f>>2]=c[f>>2]|4;i=0}while(0);return i|0}function bi(a){a=a|0;return}function ci(a){a=a|0;wf(a);return}function di(a){a=a|0;return 2}function ei(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;return wi(a,c[b>>2]|0,c[d>>2]|0,e,f,g,7172,7204)|0}function fi(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0;j=b+8|0;j=sb[c[(c[j>>2]|0)+20>>2]&63](j)|0;i=a[j+8+3>>0]|0;k=i<<24>>24<0;l=k?c[j>>2]|0:j;return wi(b,c[d>>2]|0,c[e>>2]|0,f,g,h,l,l+((k?c[j+4>>2]|0:i&255)<<2)|0)|0}function gi(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=c[e+28>>2]|0;e=h+4|0;c[e>>2]=(c[e>>2]|0)+1;e=qg(h,22028)|0;Fl(h);ui(a,g+24|0,b,c[d>>2]|0,f,e);return c[b>>2]|0}function hi(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=c[e+28>>2]|0;e=h+4|0;c[e>>2]=(c[e>>2]|0)+1;e=qg(h,22028)|0;Fl(h);vi(a,g+16|0,b,c[d>>2]|0,f,e);return c[b>>2]|0}function ii(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;a=c[e+28>>2]|0;e=a+4|0;c[e>>2]=(c[e>>2]|0)+1;e=qg(a,22028)|0;Fl(a);xi(g+20|0,b,c[d>>2]|0,f,e);return c[b>>2]|0}function ji(b,d,e,f,g,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0;q=i;i=i+16|0;l=q+12|0;k=q+8|0;m=q+4|0;n=q;c[g>>2]=0;r=c[f+28>>2]|0;o=r+4|0;c[o>>2]=(c[o>>2]|0)+1;o=qg(r,22028)|0;Fl(r);a:do switch(j<<24>>24|0){case 65:case 97:{ui(b,h+24|0,d,c[e>>2]|0,g,o);p=127;break}case 104:case 66:case 98:{vi(b,h+16|0,d,c[e>>2]|0,g,o);p=127;break}case 99:{r=b+8|0;r=sb[c[(c[r>>2]|0)+12>>2]&63](r)|0;p=a[r+8+3>>0]|0;o=p<<24>>24<0;j=o?c[r>>2]|0:r;c[d>>2]=wi(b,c[d>>2]|0,c[e>>2]|0,f,g,h,j,j+((o?c[r+4>>2]|0:p&255)<<2)|0)|0;p=127;break}case 101:case 100:{k=yi(d,c[e>>2]|0,g,o,2)|0;l=c[g>>2]|0;if((k+-1|0)>>>0<31&(l&4|0)==0){c[h+12>>2]=k;p=127;break a}else{c[g>>2]=l|4;p=127;break a}}case 68:{c[d>>2]=wi(b,c[d>>2]|0,c[e>>2]|0,f,g,h,7012,7044)|0;p=127;break}case 70:{c[d>>2]=wi(b,c[d>>2]|0,c[e>>2]|0,f,g,h,7044,7076)|0;p=127;break}case 72:{k=yi(d,c[e>>2]|0,g,o,2)|0;l=c[g>>2]|0;if((k|0)<24&(l&4|0)==0){c[h+8>>2]=k;p=127;break a}else{c[g>>2]=l|4;p=127;break a}}case 73:{k=yi(d,c[e>>2]|0,g,o,2)|0;l=c[g>>2]|0;if((k+-1|0)>>>0<12&(l&4|0)==0){c[h+8>>2]=k;p=127;break a}else{c[g>>2]=l|4;p=127;break a}}case 106:{k=yi(d,c[e>>2]|0,g,o,3)|0;l=c[g>>2]|0;if((k|0)<366&(l&4|0)==0){c[h+28>>2]=k;p=127;break a}else{c[g>>2]=l|4;p=127;break a}}case 109:{k=yi(d,c[e>>2]|0,g,o,2)|0;l=c[g>>2]|0;if((k|0)<13&(l&4|0)==0){c[h+16>>2]=k+-1;p=127;break a}else{c[g>>2]=l|4;p=127;break a}}case 77:{k=yi(d,c[e>>2]|0,g,o,2)|0;l=c[g>>2]|0;if((k|0)<60&(l&4|0)==0){c[h+4>>2]=k;p=127;break a}else{c[g>>2]=l|4;p=127;break a}}case 116:case 110:{n=c[e>>2]|0;while(1){l=c[d>>2]|0;do if(l){k=c[l+12>>2]|0;if((k|0)==(c[l+16>>2]|0))k=sb[c[(c[l>>2]|0)+36>>2]&63](l)|0;else k=c[k>>2]|0;if((k|0)==-1){c[d>>2]=0;l=1;break}else{l=(c[d>>2]|0)==0;break}}else l=1;while(0);m=n;if(n){k=c[m+12>>2]|0;if((k|0)==(c[m+16>>2]|0))k=sb[c[(c[n>>2]|0)+36>>2]&63](m)|0;else k=c[k>>2]|0;if((k|0)!=-1)if(l){k=n;n=m}else break;else{k=0;p=38}}else{k=n;p=38}if((p|0)==38){p=0;if(l){m=0;break}else n=0}l=c[d>>2]|0;m=c[l+12>>2]|0;if((m|0)==(c[l+16>>2]|0))l=sb[c[(c[l>>2]|0)+36>>2]&63](l)|0;else l=c[m>>2]|0;if(!(lb[c[(c[o>>2]|0)+12>>2]&31](o,8192,l)|0)){m=n;break}l=c[d>>2]|0;m=l+12|0;n=c[m>>2]|0;if((n|0)==(c[l+16>>2]|0)){sb[c[(c[l>>2]|0)+40>>2]&63](l)|0;n=k;continue}else{c[m>>2]=n+4;n=k;continue}}k=c[d>>2]|0;do if(k){l=c[k+12>>2]|0;if((l|0)==(c[k+16>>2]|0))k=sb[c[(c[k>>2]|0)+36>>2]&63](k)|0;else k=c[l>>2]|0;if((k|0)==-1){c[d>>2]=0;l=1;break}else{l=(c[d>>2]|0)==0;break}}else l=1;while(0);if(m){k=c[m+12>>2]|0;if((k|0)==(c[m+16>>2]|0))k=sb[c[(c[m>>2]|0)+36>>2]&63](m)|0;else k=c[k>>2]|0;if((k|0)!=-1){if(l){p=127;break a}}else p=59}else p=59;if((p|0)==59?!l:0){p=127;break a}c[g>>2]=c[g>>2]|2;p=127;break}case 112:{f=h+8|0;n=c[e>>2]|0;m=b+8|0;m=sb[c[(c[m>>2]|0)+8>>2]&63](m)|0;k=a[m+8+3>>0]|0;if(k<<24>>24<0)l=c[m+4>>2]|0;else l=k&255;k=a[m+20+3>>0]|0;if(k<<24>>24<0)k=c[m+16>>2]|0;else k=k&255;if((l|0)==(0-k|0)){c[g>>2]=c[g>>2]|4;p=127;break a}k=(ah(d,n,m,m+24|0,o,g,0)|0)-m|0;l=c[f>>2]|0;if((l|0)==12&(k|0)==0){c[f>>2]=0;p=127;break a}if((l|0)<12&(k|0)==12){c[f>>2]=l+12;p=127}else p=127;break}case 114:{c[d>>2]=wi(b,c[d>>2]|0,c[e>>2]|0,f,g,h,7076,7120)|0;p=127;break}case 82:{c[d>>2]=wi(b,c[d>>2]|0,c[e>>2]|0,f,g,h,7120,7140)|0;p=127;break}case 83:{k=yi(d,c[e>>2]|0,g,o,2)|0;l=c[g>>2]|0;if((k|0)<61&(l&4|0)==0){c[h>>2]=k;p=127;break a}else{c[g>>2]=l|4;p=127;break a}}case 84:{c[d>>2]=wi(b,c[d>>2]|0,c[e>>2]|0,f,g,h,7140,7172)|0;p=127;break}case 119:{k=yi(d,c[e>>2]|0,g,o,1)|0;l=c[g>>2]|0;if((k|0)<7&(l&4|0)==0){c[h+24>>2]=k;p=127;break a}else{c[g>>2]=l|4;p=127;break a}}case 120:{r=c[(c[b>>2]|0)+20>>2]|0;c[m>>2]=c[d>>2];c[n>>2]=c[e>>2];c[k>>2]=c[m>>2];c[l>>2]=c[n>>2];k=qb[r&63](b,k,l,f,g,h)|0;break}case 88:{r=b+8|0;r=sb[c[(c[r>>2]|0)+24>>2]&63](r)|0;p=a[r+8+3>>0]|0;o=p<<24>>24<0;j=o?c[r>>2]|0:r;c[d>>2]=wi(b,c[d>>2]|0,c[e>>2]|0,f,g,h,j,j+((o?c[r+4>>2]|0:p&255)<<2)|0)|0;p=127;break}case 121:{xi(h+20|0,d,c[e>>2]|0,g,o);p=127;break}case 89:{k=yi(d,c[e>>2]|0,g,o,4)|0;if(!(c[g>>2]&4)){c[h+20>>2]=k+-1900;p=127}else p=127;break}case 37:{m=c[e>>2]|0;k=c[d>>2]|0;do if(k){l=c[k+12>>2]|0;if((l|0)==(c[k+16>>2]|0))k=sb[c[(c[k>>2]|0)+36>>2]&63](k)|0;else k=c[l>>2]|0;if((k|0)==-1){c[d>>2]=0;l=1;break}else{l=(c[d>>2]|0)==0;break}}else l=1;while(0);if(m){k=c[m+12>>2]|0;if((k|0)==(c[m+16>>2]|0))k=sb[c[(c[m>>2]|0)+36>>2]&63](m)|0;else k=c[k>>2]|0;if((k|0)!=-1)if(l)f=m;else p=102;else p=100}else p=100;if((p|0)==100)if(l)p=102;else f=0;if((p|0)==102){c[g>>2]=c[g>>2]|6;p=127;break a}k=c[d>>2]|0;l=c[k+12>>2]|0;if((l|0)==(c[k+16>>2]|0))k=sb[c[(c[k>>2]|0)+36>>2]&63](k)|0;else k=c[l>>2]|0;if((lb[c[(c[o>>2]|0)+52>>2]&31](o,k,0)|0)<<24>>24!=37){c[g>>2]=c[g>>2]|4;p=127;break a}k=c[d>>2]|0;l=k+12|0;m=c[l>>2]|0;n=c[k+16>>2]|0;if((m|0)==(n|0)){sb[c[(c[k>>2]|0)+40>>2]&63](k)|0;k=c[d>>2]|0;if(!k)l=1;else{l=c[k+12>>2]|0;n=c[k+16>>2]|0;p=112}}else{p=m+4|0;c[l>>2]=p;l=p;p=112}do if((p|0)==112){if((l|0)==(n|0))k=sb[c[(c[k>>2]|0)+36>>2]&63](k)|0;else k=c[l>>2]|0;if((k|0)==-1){c[d>>2]=0;l=1;break}else{l=(c[d>>2]|0)==0;break}}while(0);if(f){k=c[f+12>>2]|0;if((k|0)==(c[f+16>>2]|0))k=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else k=c[k>>2]|0;if((k|0)!=-1){if(l){p=127;break a}}else p=123}else p=123;if((p|0)==123?!l:0){p=127;break a}c[g>>2]=c[g>>2]|2;p=127;break}default:{c[g>>2]=c[g>>2]|4;p=127}}while(0);if((p|0)==127)k=c[d>>2]|0;i=q;return k|0}function ki(b){b=b|0;var d=0,e=0;if(!(a[20904]|0)){a[20904]=1;if(!(a[20912]|0)){a[20912]=1;b=23488;d=0;while(1){e=23488+(d*12|0)|0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;b=b+12|0;if((b|0)==23656)break;else d=d+1|0}_a(106,0,o|0)|0}Vl(23488,6672);Vl(23500,6700);Vl(23512,6728);Vl(23524,6760);Vl(23536,6800);Vl(23548,6836);Vl(23560,6864);Vl(23572,6900);Vl(23584,6916);Vl(23596,6932);Vl(23608,6948);Vl(23620,6964);Vl(23632,6980);Vl(23644,6996);c[5914]=23488;b=23488}else b=c[5914]|0;return b|0}function li(b){b=b|0;var d=0,e=0;if(!(a[20888]|0)){a[20888]=1;if(!(a[20896]|0)){a[20896]=1;b=23196;d=0;while(1){e=23196+(d*12|0)|0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;b=b+12|0;if((b|0)==23484)break;else d=d+1|0}_a(107,0,o|0)|0}Vl(23196,6152);Vl(23208,6184);Vl(23220,6220);Vl(23232,6244);Vl(23244,6268);Vl(23256,6284);Vl(23268,6304);Vl(23280,6324);Vl(23292,6352);Vl(23304,6392);Vl(23316,6424);Vl(23328,6460);Vl(23340,6496);Vl(23352,6512);Vl(23364,6528);Vl(23376,6544);Vl(23388,6268);Vl(23400,6560);Vl(23412,6576);Vl(23424,6592);Vl(23436,6608);Vl(23448,6624);Vl(23460,6640);Vl(23472,6656);c[5871]=23196;b=23196}else b=c[5871]|0;return b|0}function mi(b){b=b|0;var d=0,e=0;if(!(a[20872]|0)){a[20872]=1;if(!(a[20880]|0)){a[20880]=1;b=22904;d=0;while(1){e=22904+(d*12|0)|0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;b=b+12|0;if((b|0)==23192)break;else d=d+1|0}_a(108,0,o|0)|0}Vl(22904,6128);Vl(22916,6140);c[5798]=22904;b=22904}else b=c[5798]|0;return b|0}function ni(b){b=b|0;if(!(a[20864]|0)){a[20864]=1;c[5723]=0;c[5724]=0;c[5725]=0;Sl(22892,6044,20);_a(109,22892,o|0)|0}return 22892}function oi(b){b=b|0;if(!(a[20856]|0)){a[20856]=1;c[5720]=0;c[5721]=0;c[5722]=0;Sl(22880,5996,11);_a(109,22880,o|0)|0}return 22880}function pi(b){b=b|0;if(!(a[20848]|0)){a[20848]=1;c[5717]=0;c[5718]=0;c[5719]=0;Sl(22868,5960,8);_a(109,22868,o|0)|0}return 22868}function qi(b){b=b|0;if(!(a[20840]|0)){a[20840]=1;c[5714]=0;c[5715]=0;c[5716]=0;Sl(22856,5924,8);_a(109,22856,o|0)|0}return 22856}function ri(a){a=a|0;a=23192;do{a=a+-12|0;Tl(a)}while((a|0)!=22904);return}function si(a){a=a|0;a=23484;do{a=a+-12|0;Tl(a)}while((a|0)!=23196);return}function ti(a){a=a|0;a=23656;do{a=a+-12|0;Tl(a)}while((a|0)!=23488);return}function ui(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;a=a+8|0;a=sb[c[c[a>>2]>>2]&63](a)|0;e=(ah(d,e,a,a+168|0,g,f,0)|0)-a|0;if((e|0)<168)c[b>>2]=((e|0)/12|0|0)%7|0;return}function vi(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;a=a+8|0;a=sb[c[(c[a>>2]|0)+4>>2]&63](a)|0;e=(ah(d,e,a,a+288|0,g,f,0)|0)-a|0;if((e|0)<288)c[b>>2]=((e|0)/12|0|0)%12|0;return}function wi(a,b,d,e,f,g,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;x=i;i=i+16|0;s=x+12|0;r=x+8|0;u=x+4|0;v=x;q=c[e+28>>2]|0;t=q+4|0;c[t>>2]=(c[t>>2]|0)+1;t=qg(q,22028)|0;Fl(q);c[f>>2]=0;a:do if((h|0)!=(j|0)){b:while(1){l=b;if(!b){b=0;m=1;n=l}else{k=c[b+12>>2]|0;if((k|0)==(c[b+16>>2]|0))k=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else k=c[k>>2]|0;n=(k|0)==-1;b=n?0:b;m=n;n=n?0:l}k=d;if(d){l=c[d+12>>2]|0;if((l|0)==(c[d+16>>2]|0))l=sb[c[(c[d>>2]|0)+36>>2]&63](d)|0;else l=c[l>>2]|0;if((l|0)!=-1){if(!m){w=14;break}}else{k=0;w=12}}else w=12;if((w|0)==12){w=0;if(m){d=0;w=14;break}else d=0}c:do if((lb[c[(c[t>>2]|0)+52>>2]&31](t,c[h>>2]|0,0)|0)<<24>>24==37){m=h+4|0;if((m|0)==(j|0)){w=17;break b}l=lb[c[(c[t>>2]|0)+52>>2]&31](t,c[m>>2]|0,0)|0;switch(l<<24>>24){case 48:case 69:{h=h+8|0;if((h|0)==(j|0)){w=22;break b}b=l;l=lb[c[(c[t>>2]|0)+52>>2]&31](t,c[h>>2]|0,0)|0;h=m;break}default:b=0}q=c[(c[a>>2]|0)+36>>2]|0;c[u>>2]=n;c[v>>2]=k;c[r>>2]=c[u>>2];c[s>>2]=c[v>>2];h=h+8|0;b=vb[q&15](a,r,s,e,f,g,l,b)|0}else{if(!(lb[c[(c[t>>2]|0)+12>>2]&31](t,8192,c[h>>2]|0)|0)){l=b+12|0;k=c[l>>2]|0;m=b+16|0;if((k|0)==(c[m>>2]|0))k=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else k=c[k>>2]|0;q=yb[c[(c[t>>2]|0)+28>>2]&15](t,k)|0;if((q|0)!=(yb[c[(c[t>>2]|0)+28>>2]&15](t,c[h>>2]|0)|0)){w=55;break b}k=c[l>>2]|0;if((k|0)==(c[m>>2]|0))sb[c[(c[b>>2]|0)+40>>2]&63](b)|0;else c[l>>2]=k+4;h=h+4|0;break}do{h=h+4|0;if((h|0)==(j|0)){h=j;break}}while(lb[c[(c[t>>2]|0)+12>>2]&31](t,8192,c[h>>2]|0)|0);n=b;k=d;q=d;l=d;while(1){if(!n){m=1;n=0}else{d=c[n+12>>2]|0;if((d|0)==(c[n+16>>2]|0))d=sb[c[(c[n>>2]|0)+36>>2]&63](n)|0;else d=c[d>>2]|0;p=(d|0)==-1;m=p;n=p?0:n;b=p?0:b}if(l){d=c[l+12>>2]|0;if((d|0)==(c[l+16>>2]|0))d=sb[c[(c[l>>2]|0)+36>>2]&63](l)|0;else d=c[d>>2]|0;if((d|0)!=-1)if((k|0)==0^m){o=k;d=q;p=k}else{d=q;break c}else{k=0;d=0;w=37}}else{d=q;w=37}if((w|0)==37){w=0;if(m)break c;else{o=k;p=0}}l=n+12|0;k=c[l>>2]|0;m=n+16|0;if((k|0)==(c[m>>2]|0))k=sb[c[(c[n>>2]|0)+36>>2]&63](n)|0;else k=c[k>>2]|0;if(!(lb[c[(c[t>>2]|0)+12>>2]&31](t,8192,k)|0))break c;k=c[l>>2]|0;if((k|0)==(c[m>>2]|0)){sb[c[(c[n>>2]|0)+40>>2]&63](n)|0;k=o;q=d;l=p;continue}else{c[l>>2]=k+4;k=o;q=d;l=p;continue}}}while(0);if(!((h|0)!=(j|0)&(c[f>>2]|0)==0)){w=56;break a}}if((w|0)==14){c[f>>2]=4;w=56;break}else if((w|0)==17){c[f>>2]=4;w=56;break}else if((w|0)==22){c[f>>2]=4;w=56;break}else if((w|0)==55){c[f>>2]=4;h=b;b=d;w=57;break}}else w=56;while(0);if((w|0)==56)if(!b){k=0;h=1}else{h=b;b=d;w=57}if((w|0)==57){d=c[h+12>>2]|0;if((d|0)==(c[h+16>>2]|0))d=sb[c[(c[h>>2]|0)+36>>2]&63](h)|0;else d=c[d>>2]|0;v=(d|0)==-1;k=v?0:h;d=b;h=v}if(d){b=c[d+12>>2]|0;if((b|0)==(c[d+16>>2]|0))d=sb[c[(c[d>>2]|0)+36>>2]&63](d)|0;else d=c[b>>2]|0;if((d|0)!=-1){if(!h)w=68}else w=66}else w=66;if((w|0)==66?h:0)w=68;if((w|0)==68)c[f>>2]=c[f>>2]|2;i=x;return k|0}function xi(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;d=yi(b,d,e,f,4)|0;if(!(c[e>>2]&4)){if((d|0)<69)d=d+2e3|0;else d=(d|0)<100?d+1900|0:d;c[a>>2]=d+-1900}return}function yi(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;g=c[a>>2]|0;do if(g){h=c[g+12>>2]|0;if((h|0)==(c[g+16>>2]|0))g=sb[c[(c[g>>2]|0)+36>>2]&63](g)|0;else g=c[h>>2]|0;if((g|0)==-1){c[a>>2]=0;h=1;break}else{h=(c[a>>2]|0)==0;break}}else h=1;while(0);if(b){g=c[b+12>>2]|0;if((g|0)==(c[b+16>>2]|0))g=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else g=c[g>>2]|0;if((g|0)!=-1)if(h){j=b;o=16}else o=15;else o=13}else o=13;if((o|0)==13)if(h)o=15;else{j=0;o=16}a:do if((o|0)==15){c[d>>2]=c[d>>2]|6;g=0}else if((o|0)==16){g=c[a>>2]|0;h=c[g+12>>2]|0;if((h|0)==(c[g+16>>2]|0))g=sb[c[(c[g>>2]|0)+36>>2]&63](g)|0;else g=c[h>>2]|0;if(!(lb[c[(c[e>>2]|0)+12>>2]&31](e,2048,g)|0)){c[d>>2]=c[d>>2]|4;g=0;break}g=(lb[c[(c[e>>2]|0)+52>>2]&31](e,g,0)|0)<<24>>24;h=c[a>>2]|0;b=h+12|0;i=c[b>>2]|0;if((i|0)==(c[h+16>>2]|0)){sb[c[(c[h>>2]|0)+40>>2]&63](h)|0;k=j;i=j}else{c[b>>2]=i+4;k=j;i=j}while(1){g=g+-48|0;n=f+-1|0;h=c[a>>2]|0;do if(h){b=c[h+12>>2]|0;if((b|0)==(c[h+16>>2]|0))h=sb[c[(c[h>>2]|0)+36>>2]&63](h)|0;else h=c[b>>2]|0;if((h|0)==-1){c[a>>2]=0;j=1;break}else{j=(c[a>>2]|0)==0;break}}else j=1;while(0);if(!i){m=k;l=0;h=1}else{h=c[i+12>>2]|0;if((h|0)==(c[i+16>>2]|0))h=sb[c[(c[i>>2]|0)+36>>2]&63](i)|0;else h=c[h>>2]|0;h=(h|0)==-1;m=h?0:k;l=h?0:k;h=h|(k|0)==0}b=c[a>>2]|0;if(!((f|0)>1&(j^h)))break;h=c[b+12>>2]|0;if((h|0)==(c[b+16>>2]|0))h=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else h=c[h>>2]|0;if(!(lb[c[(c[e>>2]|0)+12>>2]&31](e,2048,h)|0))break a;g=((lb[c[(c[e>>2]|0)+52>>2]&31](e,h,0)|0)<<24>>24)+(g*10|0)|0;h=c[a>>2]|0;b=h+12|0;i=c[b>>2]|0;if((i|0)==(c[h+16>>2]|0)){sb[c[(c[h>>2]|0)+40>>2]&63](h)|0;f=n;k=m;i=l;continue}else{c[b>>2]=i+4;f=n;k=m;i=l;continue}}do if(b){h=c[b+12>>2]|0;if((h|0)==(c[b+16>>2]|0))h=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else h=c[h>>2]|0;if((h|0)==-1){c[a>>2]=0;b=1;break}else{b=(c[a>>2]|0)==0;break}}else b=1;while(0);if(m){h=c[m+12>>2]|0;if((h|0)==(c[m+16>>2]|0))h=sb[c[(c[m>>2]|0)+36>>2]&63](m)|0;else h=c[h>>2]|0;if((h|0)!=-1){if(b)break}else o=56}else o=56;if((o|0)==56?!b:0)break;c[d>>2]=c[d>>2]|2}while(0);return g|0}function zi(a){a=a|0;Di(a+8|0);return}function Ai(a){a=a|0;Di(a+8|0);wf(a);return}function Bi(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0;l=i;i=i+112|0;k=l+4|0;e=l;c[e>>2]=k+100;Ci(b+8|0,k,e,g,h,j);h=c[e>>2]|0;e=c[d>>2]|0;if((k|0)!=(h|0))do{f=a[k>>0]|0;do if(e){b=e+24|0;g=c[b>>2]|0;if((g|0)==(c[e+28>>2]|0)){d=(yb[c[(c[e>>2]|0)+52>>2]&15](e,f&255)|0)==-1;e=d?0:e;break}else{c[b>>2]=g+1;a[g>>0]=f;break}}else e=0;while(0);k=k+1|0}while((k|0)!=(h|0));i=l;return e|0}function Ci(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0;m=i;i=i+16|0;j=m;a[j>>0]=37;k=j+1|0;a[k>>0]=g;l=j+2|0;a[l>>0]=h;a[j+3>>0]=0;if(h<<24>>24){a[k>>0]=h;a[l>>0]=g}c[e>>2]=d+(Ja(d|0,(c[e>>2]|0)-d|0,j|0,f|0,c[b>>2]|0)|0);i=m;return}function Di(a){a=a|0;var b=0;b=c[a>>2]|0;if((b|0)!=(sg()|0))wf(c[a>>2]|0);return}function Ei(a){a=a|0;Di(a+8|0);return}function Fi(a){a=a|0;Di(a+8|0);wf(a);return}function Gi(a,b,d,e,f,g,h){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0;k=i;i=i+528|0;m=k+416|0;n=k+412|0;e=k;l=k+408|0;j=k+8|0;d=a+8|0;c[n>>2]=m+100;Ci(d,m,n,f,g,h);h=e;c[h>>2]=0;c[h+4>>2]=0;c[l>>2]=m;d=rf(c[d>>2]|0)|0;e=_e(j,l,100,e)|0;if(d|0)c[(en()|0)+184>>2]=d;h=j+(e<<2)|0;d=c[b>>2]|0;if(e){g=j;do{e=c[g>>2]|0;if(!d)d=0;else{a=d+24|0;f=c[a>>2]|0;if((f|0)==(c[d+28>>2]|0))e=yb[c[(c[d>>2]|0)+52>>2]&15](d,e)|0;else{c[a>>2]=f+4;c[f>>2]=e}d=(e|0)==-1?0:d}g=g+4|0}while((g|0)!=(h|0))}i=k;return d|0}function Hi(a){a=a|0;return}function Ii(a){a=a|0;wf(a);return}function Ji(a){a=a|0;return 127}function Ki(a){a=a|0;return 127}function Li(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;return}function Mi(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;return}function Ni(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;return}function Oi(b,d){b=b|0;d=d|0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;a[b+11>>0]=1;a[b>>0]=45;a[b+1>>0]=0;return}function Pi(a){a=a|0;return 0}function Qi(b,c){b=b|0;c=c|0;a[b>>0]=2;a[b+1>>0]=3;a[b+2>>0]=0;a[b+3>>0]=4;return}function Ri(b,c){b=b|0;c=c|0;a[b>>0]=2;a[b+1>>0]=3;a[b+2>>0]=0;a[b+3>>0]=4;return}function Si(a){a=a|0;return}function Ti(a){a=a|0;wf(a);return}function Ui(a){a=a|0;return 127}function Vi(a){a=a|0;return 127}function Wi(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;return}function Xi(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;return}function Yi(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;return}function Zi(b,d){b=b|0;d=d|0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;a[b+11>>0]=1;a[b>>0]=45;a[b+1>>0]=0;return}function _i(a){a=a|0;return 0}function $i(b,c){b=b|0;c=c|0;a[b>>0]=2;a[b+1>>0]=3;a[b+2>>0]=0;a[b+3>>0]=4;return}function aj(b,c){b=b|0;c=c|0;a[b>>0]=2;a[b+1>>0]=3;a[b+2>>0]=0;a[b+3>>0]=4;return}function bj(a){a=a|0;return}function cj(a){a=a|0;wf(a);return}function dj(a){a=a|0;return 2147483647}function ej(a){a=a|0;return 2147483647}function fj(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;return}function gj(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;return}function hj(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;return}function ij(b,d){b=b|0;d=d|0;d=b+4|0;c[d+4>>2]=0;a[b+8+3>>0]=1;c[b>>2]=45;c[d>>2]=0;return}function jj(a){a=a|0;return 0}function kj(b,c){b=b|0;c=c|0;a[b>>0]=2;a[b+1>>0]=3;a[b+2>>0]=0;a[b+3>>0]=4;return}function lj(b,c){b=b|0;c=c|0;a[b>>0]=2;a[b+1>>0]=3;a[b+2>>0]=0;a[b+3>>0]=4;return}function mj(a){a=a|0;return}function nj(a){a=a|0;wf(a);return}function oj(a){a=a|0;return 2147483647}function pj(a){a=a|0;return 2147483647}function qj(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;return}function rj(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;return}function sj(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;return}function tj(b,d){b=b|0;d=d|0;d=b+4|0;c[d+4>>2]=0;a[b+8+3>>0]=1;c[b>>2]=45;c[d>>2]=0;return}function uj(a){a=a|0;return 0}function vj(b,c){b=b|0;c=c|0;a[b>>0]=2;a[b+1>>0]=3;a[b+2>>0]=0;a[b+3>>0]=4;return}function wj(b,c){b=b|0;c=c|0;a[b>>0]=2;a[b+1>>0]=3;a[b+2>>0]=0;a[b+3>>0]=4;return}function xj(a){a=a|0;return}function yj(a){a=a|0;wf(a);return}function zj(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;w=i;i=i+240|0;r=w;n=w+128|0;v=w+8|0;p=w+4|0;k=w+126|0;o=w+116|0;q=w+16|0;c[v>>2]=n;u=v+4|0;c[u>>2]=110;s=c[g+28>>2]|0;b=s+4|0;c[b>>2]=(c[b>>2]|0)+1;b=qg(s,21996)|0;a[k>>0]=0;if(Cj(d,c[e>>2]|0,f,s,c[g+4>>2]|0,h,k,b,v,p,n+100|0)|0){wb[c[(c[b>>2]|0)+32>>2]&7](b,18675,18685,o)|0;f=c[p>>2]|0;g=c[v>>2]|0;b=f-g|0;if((b|0)>98){n=vf(b+2|0)|0;b=n}else{b=q;n=0}if(a[k>>0]|0){a[b>>0]=45;b=b+1|0}l=o+10|0;m=o;if(g>>>0<f>>>0){k=g;do{g=a[k>>0]|0;f=o;while(1){if((a[f>>0]|0)==g<<24>>24)break;f=f+1|0;if((f|0)==(l|0)){f=l;break}}a[b>>0]=a[18675+(f-m)>>0]|0;k=k+1|0;b=b+1|0}while(k>>>0<(c[p>>2]|0)>>>0)}a[b>>0]=0;c[r>>2]=j;qf(q,20022,r)|0;if(n|0)wf(n)}b=c[d>>2]|0;do if(b){if((c[b+12>>2]|0)==(c[b+16>>2]|0))if((sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1){c[d>>2]=0;b=0;break}else{b=c[d>>2]|0;break}}else b=0;while(0);b=(b|0)==0;f=c[e>>2]|0;do if(f){if((c[f+12>>2]|0)==(c[f+16>>2]|0)?(sb[c[(c[f>>2]|0)+36>>2]&63](f)|0)==-1:0){c[e>>2]=0;t=24;break}if(!b)t=25}else t=24;while(0);if((t|0)==24?b:0)t=25;if((t|0)==25)c[h>>2]=c[h>>2]|2;f=c[d>>2]|0;Fl(s);b=c[v>>2]|0;c[v>>2]=0;if(b|0)ob[c[u>>2]&127](b);i=w;return f|0}function Aj(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;w=i;i=i+128|0;p=w+20|0;v=w+8|0;l=w;b=w+16|0;c[v>>2]=p;u=v+4|0;c[u>>2]=110;s=c[g+28>>2]|0;k=s+4|0;c[k>>2]=(c[k>>2]|0)+1;k=qg(s,21996)|0;a[b>>0]=0;r=c[e>>2]|0;q=r;do if(Cj(d,q,f,s,c[g+4>>2]|0,h,b,k,v,l,p+100|0)|0){p=j+11|0;if((a[p>>0]|0)<0){a[c[j>>2]>>0]=0;c[j+4>>2]=0}else{a[j>>0]=0;a[p>>0]=0}if(a[b>>0]|0)Rl(j,yb[c[(c[k>>2]|0)+28>>2]&15](k,45)|0);f=yb[c[(c[k>>2]|0)+28>>2]&15](k,48)|0;b=c[v>>2]|0;o=c[l>>2]|0;k=o+-1|0;a:do if(b>>>0<k>>>0)do{if((a[b>>0]|0)!=f<<24>>24)break a;b=b+1|0}while(b>>>0<k>>>0);while(0);g=b;k=a[p>>0]|0;if(k<<24>>24<0){n=c[j+4>>2]|0;f=(c[j+8>>2]&2147483647)+-1|0}else{n=k&255;f=10}m=o-g|0;if(m|0){if((f-n|0)>>>0<m>>>0){Ql(j,f,n+m-f|0,n,n);k=a[p>>0]|0}l=k<<24>>24<0?c[j>>2]|0:j;f=o+(n-g)|0;if((b|0)!=(o|0)){k=l+n|0;while(1){a[k>>0]=a[b>>0]|0;b=b+1|0;if((b|0)==(o|0))break;else k=k+1|0}}a[l+f>>0]=0;b=n+m|0;if((a[p>>0]|0)<0){c[j+4>>2]=b;break}else{a[p>>0]=b;break}}}while(0);b=c[d>>2]|0;do if(b){if((c[b+12>>2]|0)==(c[b+16>>2]|0))if((sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1){c[d>>2]=0;b=0;break}else{b=c[d>>2]|0;break}}else b=0;while(0);b=(b|0)==0;do if(r){if((c[q+12>>2]|0)==(c[q+16>>2]|0)?(sb[c[(c[r>>2]|0)+36>>2]&63](q)|0)==-1:0){c[e>>2]=0;t=32;break}if(!b)t=33}else t=32;while(0);if((t|0)==32?b:0)t=33;if((t|0)==33)c[h>>2]=c[h>>2]|2;k=c[d>>2]|0;Fl(s);b=c[v>>2]|0;c[v>>2]=0;if(b|0)ob[c[u>>2]&127](b);i=w;return k|0}function Bj(a){a=a|0;return}function Cj(e,f,g,h,j,k,l,m,n,o,p){e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;var q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0;_=i;i=i+496|0;S=_+484|0;N=_+480|0;u=_+80|0;Z=_+72|0;O=_+68|0;P=_+64|0;Q=_+60|0;T=_+48|0;U=_+36|0;V=_+24|0;W=_+12|0;X=_;c[N>>2]=p;c[Z>>2]=u;Y=Z+4|0;c[Y>>2]=110;c[O>>2]=u;c[P>>2]=u+400;c[T>>2]=0;c[T+4>>2]=0;c[T+8>>2]=0;c[U>>2]=0;c[U+4>>2]=0;c[U+8>>2]=0;c[V>>2]=0;c[V+4>>2]=0;c[V+8>>2]=0;c[W>>2]=0;c[W+4>>2]=0;c[W+8>>2]=0;c[X>>2]=0;c[X+4>>2]=0;c[X+8>>2]=0;if(g){t=qg(h,23692)|0;pb[c[(c[t>>2]|0)+44>>2]&63](Q,t);pb[c[(c[t>>2]|0)+32>>2]&63](S,t);q=W+11|0;if((a[q>>0]|0)<0){a[c[W>>2]>>0]=0;c[W+4>>2]=0}else{a[W>>0]=0;a[q>>0]=0}Nl(W);c[W>>2]=c[S>>2];c[W+4>>2]=c[S+4>>2];c[W+8>>2]=c[S+8>>2];c[S>>2]=0;c[S+4>>2]=0;c[S+8>>2]=0;Ml(S);pb[c[(c[t>>2]|0)+28>>2]&63](S,t);g=V+11|0;if((a[g>>0]|0)<0){a[c[V>>2]>>0]=0;c[V+4>>2]=0}else{a[V>>0]=0;a[g>>0]=0}Nl(V);c[V>>2]=c[S>>2];c[V+4>>2]=c[S+4>>2];c[V+8>>2]=c[S+8>>2];c[S>>2]=0;c[S+4>>2]=0;c[S+8>>2]=0;Ml(S);h=sb[c[(c[t>>2]|0)+12>>2]&63](t)|0;p=sb[c[(c[t>>2]|0)+16>>2]&63](t)|0;pb[c[(c[t>>2]|0)+20>>2]&63](S,t);s=T+11|0;if((a[s>>0]|0)<0){a[c[T>>2]>>0]=0;c[T+4>>2]=0}else{a[T>>0]=0;a[s>>0]=0}Nl(T);c[T>>2]=c[S>>2];c[T+4>>2]=c[S+4>>2];c[T+8>>2]=c[S+8>>2];c[S>>2]=0;c[S+4>>2]=0;c[S+8>>2]=0;Ml(S);pb[c[(c[t>>2]|0)+24>>2]&63](S,t);r=U+11|0;if((a[r>>0]|0)<0){a[c[U>>2]>>0]=0;c[U+4>>2]=0}else{a[U>>0]=0;a[r>>0]=0}Nl(U);c[U>>2]=c[S>>2];c[U+4>>2]=c[S+4>>2];c[U+8>>2]=c[S+8>>2];c[S>>2]=0;c[S+4>>2]=0;c[S+8>>2]=0;Ml(S);t=sb[c[(c[t>>2]|0)+36>>2]&63](t)|0}else{t=qg(h,23684)|0;pb[c[(c[t>>2]|0)+44>>2]&63](S,t);c[Q>>2]=c[S>>2];pb[c[(c[t>>2]|0)+32>>2]&63](S,t);q=W+11|0;if((a[q>>0]|0)<0){a[c[W>>2]>>0]=0;c[W+4>>2]=0}else{a[W>>0]=0;a[q>>0]=0}Nl(W);c[W>>2]=c[S>>2];c[W+4>>2]=c[S+4>>2];c[W+8>>2]=c[S+8>>2];c[S>>2]=0;c[S+4>>2]=0;c[S+8>>2]=0;Ml(S);pb[c[(c[t>>2]|0)+28>>2]&63](S,t);g=V+11|0;if((a[g>>0]|0)<0){a[c[V>>2]>>0]=0;c[V+4>>2]=0}else{a[V>>0]=0;a[g>>0]=0}Nl(V);c[V>>2]=c[S>>2];c[V+4>>2]=c[S+4>>2];c[V+8>>2]=c[S+8>>2];c[S>>2]=0;c[S+4>>2]=0;c[S+8>>2]=0;Ml(S);h=sb[c[(c[t>>2]|0)+12>>2]&63](t)|0;p=sb[c[(c[t>>2]|0)+16>>2]&63](t)|0;pb[c[(c[t>>2]|0)+20>>2]&63](S,t);s=T+11|0;if((a[s>>0]|0)<0){a[c[T>>2]>>0]=0;c[T+4>>2]=0}else{a[T>>0]=0;a[s>>0]=0}Nl(T);c[T>>2]=c[S>>2];c[T+4>>2]=c[S+4>>2];c[T+8>>2]=c[S+8>>2];c[S>>2]=0;c[S+4>>2]=0;c[S+8>>2]=0;Ml(S);pb[c[(c[t>>2]|0)+24>>2]&63](S,t);r=U+11|0;if((a[r>>0]|0)<0){a[c[U>>2]>>0]=0;c[U+4>>2]=0}else{a[U>>0]=0;a[r>>0]=0}Nl(U);c[U>>2]=c[S>>2];c[U+4>>2]=c[S+4>>2];c[U+8>>2]=c[S+8>>2];c[S>>2]=0;c[S+4>>2]=0;c[S+8>>2]=0;Ml(S);t=sb[c[(c[t>>2]|0)+36>>2]&63](t)|0}c[o>>2]=c[n>>2];K=m+8|0;L=V+4|0;M=W+4|0;E=(j&512|0)!=0;F=U+4|0;G=X+11|0;H=X+4|0;I=Q+3|0;J=T+4|0;m=0;D=0;C=t;t=u;a:while(1){j=c[e>>2]|0;do if(j){if((c[j+12>>2]|0)==(c[j+16>>2]|0))if((sb[c[(c[j>>2]|0)+36>>2]&63](j)|0)==-1){c[e>>2]=0;j=0;break}else{j=c[e>>2]|0;break}}else j=0;while(0);j=(j|0)==0;do if(f){if((c[f+12>>2]|0)!=(c[f+16>>2]|0))if(j)break;else{R=221;break a}if((sb[c[(c[f>>2]|0)+36>>2]&63](f)|0)!=-1){if(!j){R=221;break a}}else R=38}else R=38;while(0);if((R|0)==38){R=0;if(j){f=0;R=221;break}else f=0}b:do switch(a[Q+D>>0]|0){case 1:{if((D|0)==3){R=221;break a}j=c[e>>2]|0;u=c[j+12>>2]|0;if((u|0)==(c[j+16>>2]|0))j=sb[c[(c[j>>2]|0)+36>>2]&63](j)|0;else j=d[u>>0]|0;if((j&255)<<24>>24<=-1){R=51;break a}if(!(b[(c[K>>2]|0)+(j<<24>>24<<1)>>1]&8192)){R=51;break a}j=c[e>>2]|0;u=j+12|0;v=c[u>>2]|0;if((v|0)==(c[j+16>>2]|0))j=sb[c[(c[j>>2]|0)+40>>2]&63](j)|0;else{c[u>>2]=v+1;j=d[v>>0]|0}Rl(X,j&255);x=f;j=f;w=f;R=53;break}case 0:{if((D|0)==3){R=221;break a}else{x=f;j=f;w=f;R=53}break}case 3:{j=a[g>>0]|0;u=j<<24>>24<0?c[L>>2]|0:j&255;w=a[q>>0]|0;w=w<<24>>24<0?c[M>>2]|0:w&255;if((u|0)==(0-w|0)){u=C;j=f}else{x=(u|0)==0;y=c[e>>2]|0;z=c[y+12>>2]|0;u=c[y+16>>2]|0;v=(z|0)==(u|0);if(x|(w|0)==0){if(v)j=sb[c[(c[y>>2]|0)+36>>2]&63](y)|0;else j=d[z>>0]|0;u=j&255;if(x){j=a[q>>0]|0;if(u<<24>>24!=(a[(j<<24>>24<0?c[W>>2]|0:W)>>0]|0)){u=C;j=f;break b}u=c[e>>2]|0;v=u+12|0;w=c[v>>2]|0;if((w|0)==(c[u+16>>2]|0)){sb[c[(c[u>>2]|0)+40>>2]&63](u)|0;j=a[q>>0]|0}else c[v>>2]=w+1;a[l>>0]=1;m=(j<<24>>24<0?c[M>>2]|0:j&255)>>>0>1?W:m;u=C;j=f;break b}j=a[g>>0]|0;if(u<<24>>24!=(a[(j<<24>>24<0?c[V>>2]|0:V)>>0]|0)){a[l>>0]=1;u=C;j=f;break b}u=c[e>>2]|0;v=u+12|0;w=c[v>>2]|0;if((w|0)==(c[u+16>>2]|0)){sb[c[(c[u>>2]|0)+40>>2]&63](u)|0;j=a[g>>0]|0}else c[v>>2]=w+1;m=(j<<24>>24<0?c[L>>2]|0:j&255)>>>0>1?V:m;u=C;j=f;break b}if(v){x=sb[c[(c[y>>2]|0)+36>>2]&63](y)|0;u=c[e>>2]|0;j=a[g>>0]|0;y=u;w=c[u+12>>2]|0;u=c[u+16>>2]|0}else{x=d[z>>0]|0;w=z}v=y+12|0;u=(w|0)==(u|0);if((x&255)<<24>>24==(a[(j<<24>>24<0?c[V>>2]|0:V)>>0]|0)){if(u){sb[c[(c[y>>2]|0)+40>>2]&63](y)|0;j=a[g>>0]|0}else c[v>>2]=w+1;m=(j<<24>>24<0?c[L>>2]|0:j&255)>>>0>1?V:m;u=C;j=f;break b}if(u)u=sb[c[(c[y>>2]|0)+36>>2]&63](y)|0;else u=d[w>>0]|0;j=a[q>>0]|0;if((u&255)<<24>>24!=(a[(j<<24>>24<0?c[W>>2]|0:W)>>0]|0)){R=106;break a}u=c[e>>2]|0;v=u+12|0;w=c[v>>2]|0;if((w|0)==(c[u+16>>2]|0)){sb[c[(c[u>>2]|0)+40>>2]&63](u)|0;j=a[q>>0]|0}else c[v>>2]=w+1;a[l>>0]=1;m=(j<<24>>24<0?c[M>>2]|0:j&255)>>>0>1?W:m;u=C;j=f}break}case 2:{if(!(D>>>0<2|(m|0)!=0)?!(E|(D|0)==2&(a[I>>0]|0)!=0):0){m=0;u=C;j=f;break b}z=a[r>>0]|0;A=z<<24>>24<0;B=A?c[U>>2]|0:U;y=B;c:do if((D|0)!=0?(d[Q+(D+-1)>>0]|0)<2:0){x=A?c[F>>2]|0:z&255;v=B+x|0;d:do if(!x)u=y;else{u=y;w=B;do{j=a[w>>0]|0;if(j<<24>>24<=-1)break d;if(!(b[(c[K>>2]|0)+(j<<24>>24<<1)>>1]&8192))break d;w=w+1|0;u=w}while((w|0)!=(v|0))}while(0);x=u-y|0;v=a[G>>0]|0;j=v<<24>>24<0;v=j?c[H>>2]|0:v&255;if(x>>>0<=v>>>0){w=(j?c[X>>2]|0:X)+v|0;if(x){v=B;j=w+(0-x)|0;while(1){if((a[j>>0]|0)!=(a[v>>0]|0)){u=y;break c}j=j+1|0;if((j|0)==(w|0))break;else v=v+1|0}}}else u=y}else u=y;while(0);j=B+(A?c[F>>2]|0:z&255)|0;e:do if((u|0)==(j|0)){u=j;j=f}else{y=f;j=f;w=f;A=u;while(1){u=c[e>>2]|0;do if(u){if((c[u+12>>2]|0)==(c[u+16>>2]|0))if((sb[c[(c[u>>2]|0)+36>>2]&63](u)|0)==-1){c[e>>2]=0;u=0;break}else{u=c[e>>2]|0;break}}else u=0;while(0);v=(u|0)==0;do if(w){if((c[w+12>>2]|0)!=(c[w+16>>2]|0))if(v){z=y;x=w;break}else{u=A;break e}if((sb[c[(c[w>>2]|0)+36>>2]&63](w)|0)!=-1)if((y|0)==0^v){z=y;x=y}else{u=A;break e}else{u=0;j=0;f=0;R=130}}else{u=y;R=130}while(0);if((R|0)==130){R=0;if(v){u=A;break e}else{z=u;x=0}}u=c[e>>2]|0;v=c[u+12>>2]|0;if((v|0)==(c[u+16>>2]|0))u=sb[c[(c[u>>2]|0)+36>>2]&63](u)|0;else u=d[v>>0]|0;if((u&255)<<24>>24!=(a[A>>0]|0)){u=A;break e}u=c[e>>2]|0;v=u+12|0;w=c[v>>2]|0;if((w|0)==(c[u+16>>2]|0))sb[c[(c[u>>2]|0)+40>>2]&63](u)|0;else c[v>>2]=w+1;u=A+1|0;B=a[r>>0]|0;A=B<<24>>24<0;if((u|0)==((A?c[U>>2]|0:U)+(A?c[F>>2]|0:B&255)|0))break;else{y=z;w=x;A=u}}}while(0);if(E?(B=a[r>>0]|0,A=B<<24>>24<0,(u|0)!=((A?c[U>>2]|0:U)+(A?c[F>>2]|0:B&255)|0)):0){R=142;break a}else u=C;break}case 4:{x=0;w=f;j=f;y=f;f:while(1){u=c[e>>2]|0;do if(u){if((c[u+12>>2]|0)==(c[u+16>>2]|0))if((sb[c[(c[u>>2]|0)+36>>2]&63](u)|0)==-1){c[e>>2]=0;u=0;break}else{u=c[e>>2]|0;break}}else u=0;while(0);v=(u|0)==0;do if(y){if((c[y+12>>2]|0)!=(c[y+16>>2]|0))if(v){z=w;break}else break f;if((sb[c[(c[y>>2]|0)+36>>2]&63](y)|0)!=-1)if((w|0)==0^v){z=w;y=w}else break f;else{u=0;j=0;f=0;R=152}}else{u=w;R=152}while(0);if((R|0)==152){R=0;if(v){w=u;break}else{z=u;y=0}}u=c[e>>2]|0;v=c[u+12>>2]|0;if((v|0)==(c[u+16>>2]|0))u=sb[c[(c[u>>2]|0)+36>>2]&63](u)|0;else u=d[v>>0]|0;v=u&255;if(v<<24>>24>-1?(b[(c[K>>2]|0)+(u<<24>>24<<1)>>1]&2048)!=0:0){u=c[o>>2]|0;if((u|0)==(c[N>>2]|0)){Dj(n,o,N);u=c[o>>2]|0}c[o>>2]=u+1;a[u>>0]=v;x=x+1|0}else{B=a[s>>0]|0;if(!(v<<24>>24==p<<24>>24&(x|0?((B<<24>>24<0?c[J>>2]|0:B&255)|0)!=0:0))){w=z;break}if((t|0)==(c[P>>2]|0)){Ej(Z,O,P);t=c[O>>2]|0}B=t+4|0;c[O>>2]=B;c[t>>2]=x;x=0;t=B}u=c[e>>2]|0;v=u+12|0;w=c[v>>2]|0;if((w|0)==(c[u+16>>2]|0)){sb[c[(c[u>>2]|0)+40>>2]&63](u)|0;w=z;continue}else{c[v>>2]=w+1;w=z;continue}}if(x|0?(c[Z>>2]|0)!=(t|0):0){if((t|0)==(c[P>>2]|0)){Ej(Z,O,P);t=c[O>>2]|0}B=t+4|0;c[O>>2]=B;c[t>>2]=x;t=B}if((C|0)>0){u=c[e>>2]|0;do if(u){if((c[u+12>>2]|0)==(c[u+16>>2]|0))if((sb[c[(c[u>>2]|0)+36>>2]&63](u)|0)==-1){c[e>>2]=0;u=0;break}else{u=c[e>>2]|0;break}}else u=0;while(0);u=(u|0)==0;do if(w){if((c[w+12>>2]|0)==(c[w+16>>2]|0)?(sb[c[(c[w>>2]|0)+36>>2]&63](w)|0)==-1:0){j=0;f=0;R=183;break}if(u)y=j;else{R=188;break a}}else R=183;while(0);if((R|0)==183){R=0;if(u){R=188;break a}else{y=j;w=0}}j=c[e>>2]|0;u=c[j+12>>2]|0;if((u|0)==(c[j+16>>2]|0))j=sb[c[(c[j>>2]|0)+36>>2]&63](j)|0;else j=d[u>>0]|0;if((j&255)<<24>>24!=h<<24>>24){R=188;break a}j=c[e>>2]|0;u=j+12|0;v=c[u>>2]|0;if((v|0)==(c[j+16>>2]|0)){sb[c[(c[j>>2]|0)+40>>2]&63](j)|0;A=C;x=w;j=y}else{c[u>>2]=v+1;A=C;x=w;j=y}while(1){u=c[e>>2]|0;do if(u){if((c[u+12>>2]|0)==(c[u+16>>2]|0))if((sb[c[(c[u>>2]|0)+36>>2]&63](u)|0)==-1){c[e>>2]=0;u=0;break}else{u=c[e>>2]|0;break}}else u=0;while(0);v=(u|0)==0;do if(w){if((c[w+12>>2]|0)!=(c[w+16>>2]|0))if(v){z=x;y=w;break}else{R=208;break a}if((sb[c[(c[w>>2]|0)+36>>2]&63](w)|0)!=-1)if((x|0)==0^v){z=x;y=x}else{R=208;break a}else{u=0;j=0;f=0;R=201}}else{u=x;R=201}while(0);if((R|0)==201){R=0;if(v){R=208;break a}else{z=u;y=0}}u=c[e>>2]|0;v=c[u+12>>2]|0;if((v|0)==(c[u+16>>2]|0))u=sb[c[(c[u>>2]|0)+36>>2]&63](u)|0;else u=d[v>>0]|0;if((u&255)<<24>>24<=-1){R=208;break a}if(!(b[(c[K>>2]|0)+(u<<24>>24<<1)>>1]&2048)){R=208;break a}if((c[o>>2]|0)==(c[N>>2]|0))Dj(n,o,N);u=c[e>>2]|0;v=c[u+12>>2]|0;if((v|0)==(c[u+16>>2]|0))u=sb[c[(c[u>>2]|0)+36>>2]&63](u)|0;else u=d[v>>0]|0;v=c[o>>2]|0;c[o>>2]=v+1;a[v>>0]=u;u=A+-1|0;v=c[e>>2]|0;w=v+12|0;x=c[w>>2]|0;if((x|0)==(c[v+16>>2]|0))sb[c[(c[v>>2]|0)+40>>2]&63](v)|0;else c[w>>2]=x+1;if((A|0)>1){A=u;x=z;w=y}else break}}else u=C;if((c[o>>2]|0)==(c[n>>2]|0)){R=219;break a}break}default:{u=C;j=f}}while(0);g:do if((R|0)==53)while(1){R=0;u=c[e>>2]|0;do if(u){if((c[u+12>>2]|0)==(c[u+16>>2]|0))if((sb[c[(c[u>>2]|0)+36>>2]&63](u)|0)==-1){c[e>>2]=0;u=0;break}else{u=c[e>>2]|0;break}}else u=0;while(0);v=(u|0)==0;do if(w){if((c[w+12>>2]|0)!=(c[w+16>>2]|0))if(v){u=x;z=j;y=w;break}else{u=C;break g}if((sb[c[(c[w>>2]|0)+36>>2]&63](w)|0)!=-1)if((x|0)==0^v){u=x;z=j;y=x}else{u=C;break g}else{u=0;j=0;f=0;R=62}}else{u=x;R=62}while(0);if((R|0)==62){R=0;if(v){u=C;break g}else{z=j;y=0}}j=c[e>>2]|0;v=c[j+12>>2]|0;if((v|0)==(c[j+16>>2]|0))j=sb[c[(c[j>>2]|0)+36>>2]&63](j)|0;else j=d[v>>0]|0;if((j&255)<<24>>24<=-1){u=C;j=z;break g}if(!(b[(c[K>>2]|0)+(j<<24>>24<<1)>>1]&8192)){u=C;j=z;break g}j=c[e>>2]|0;v=j+12|0;w=c[v>>2]|0;if((w|0)==(c[j+16>>2]|0))j=sb[c[(c[j>>2]|0)+40>>2]&63](j)|0;else{c[v>>2]=w+1;j=d[w>>0]|0}Rl(X,j&255);x=u;j=z;w=y;R=53}while(0);D=D+1|0;if(D>>>0>=4){R=221;break}else{C=u;f=j}}h:do if((R|0)==51){c[k>>2]=c[k>>2]|4;p=0}else if((R|0)==106){c[k>>2]=c[k>>2]|4;p=0}else if((R|0)==142){c[k>>2]=c[k>>2]|4;p=0}else if((R|0)==188){c[k>>2]=c[k>>2]|4;p=0}else if((R|0)==208){c[k>>2]=c[k>>2]|4;p=0}else if((R|0)==219){c[k>>2]=c[k>>2]|4;p=0}else if((R|0)==221){i:do if(m|0){r=m+11|0;s=m+4|0;g=1;j:while(1){p=a[r>>0]|0;if(p<<24>>24<0)p=c[s>>2]|0;else p=p&255;if(g>>>0>=p>>>0)break i;p=c[e>>2]|0;do if(p){if((c[p+12>>2]|0)==(c[p+16>>2]|0))if((sb[c[(c[p>>2]|0)+36>>2]&63](p)|0)==-1){c[e>>2]=0;p=0;break}else{p=c[e>>2]|0;break}}else p=0;while(0);p=(p|0)==0;do if(f){if((c[f+12>>2]|0)==(c[f+16>>2]|0)?(sb[c[(c[f>>2]|0)+36>>2]&63](f)|0)==-1:0){R=236;break}if(!p)break j}else R=236;while(0);if((R|0)==236){R=0;if(p)break;else f=0}p=c[e>>2]|0;h=c[p+12>>2]|0;if((h|0)==(c[p+16>>2]|0))p=sb[c[(c[p>>2]|0)+36>>2]&63](p)|0;else p=d[h>>0]|0;if((a[r>>0]|0)<0)h=c[m>>2]|0;else h=m;if((p&255)<<24>>24!=(a[h+g>>0]|0))break;p=g+1|0;h=c[e>>2]|0;g=h+12|0;q=c[g>>2]|0;if((q|0)==(c[h+16>>2]|0)){sb[c[(c[h>>2]|0)+40>>2]&63](h)|0;g=p;continue}else{c[g>>2]=q+1;g=p;continue}}c[k>>2]=c[k>>2]|4;p=0;break h}while(0);f=c[Z>>2]|0;if((f|0)!=(t|0)){c[S>>2]=0;zg(T,f,t,S);if(!(c[S>>2]|0)){p=1;break}else{c[k>>2]=c[k>>2]|4;p=0;break}}else p=1}while(0);Ml(X);Ml(W);Ml(V);Ml(U);Ml(T);f=c[Z>>2]|0;c[Z>>2]=0;if(f|0)ob[c[Y>>2]&127](f);i=_;return p|0}function Dj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=a+4|0;f=(c[i>>2]|0)!=110;e=c[a>>2]|0;g=(c[d>>2]|0)-e|0;g=g>>>0<2147483647?g<<1:-1;g=(g|0)==0?1:g;h=(c[b>>2]|0)-e|0;e=xf(f?e:0,g)|0;if(!f){f=c[a>>2]|0;c[a>>2]=e;if(f){ob[c[i>>2]&127](f);e=c[a>>2]|0}}else c[a>>2]=e;c[i>>2]=111;c[b>>2]=e+h;c[d>>2]=(c[a>>2]|0)+g;return}function Ej(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=a+4|0;f=(c[i>>2]|0)!=110;e=c[a>>2]|0;g=(c[d>>2]|0)-e|0;g=g>>>0<2147483647?g<<1:-1;g=(g|0)==0?4:g;h=(c[b>>2]|0)-e>>2;e=xf(f?e:0,g)|0;if(!f){f=c[a>>2]|0;c[a>>2]=e;if(f){ob[c[i>>2]&127](f);e=c[a>>2]|0}}else c[a>>2]=e;c[i>>2]=111;c[b>>2]=e+(h<<2);c[d>>2]=(c[a>>2]|0)+(g>>>2<<2);return}function Fj(a){a=a|0;return}function Gj(a){a=a|0;wf(a);return}function Hj(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;w=i;i=i+576|0;r=w;n=w+64|0;v=w+56|0;p=w+48|0;k=w+564|0;o=w+8|0;q=w+464|0;c[v>>2]=n;u=v+4|0;c[u>>2]=110;s=c[g+28>>2]|0;b=s+4|0;c[b>>2]=(c[b>>2]|0)+1;b=qg(s,22028)|0;a[k>>0]=0;if(Jj(d,c[e>>2]|0,f,s,c[g+4>>2]|0,h,k,b,v,p,n+400|0)|0){wb[c[(c[b>>2]|0)+48>>2]&7](b,18781,18791,o)|0;f=c[p>>2]|0;g=c[v>>2]|0;b=f-g|0;if((b|0)>392){n=vf((b>>2)+2|0)|0;b=n}else{b=q;n=0}if(a[k>>0]|0){a[b>>0]=45;b=b+1|0}l=o+40|0;m=o;if(g>>>0<f>>>0){k=g;do{g=c[k>>2]|0;f=o;while(1){if((c[f>>2]|0)==(g|0))break;f=f+4|0;if((f|0)==(l|0)){f=l;break}}a[b>>0]=a[18781+(f-m>>2)>>0]|0;k=k+4|0;b=b+1|0}while(k>>>0<(c[p>>2]|0)>>>0)}a[b>>0]=0;c[r>>2]=j;qf(q,20022,r)|0;if(n|0)wf(n)}b=c[d>>2]|0;do if(b){f=c[b+12>>2]|0;if((f|0)==(c[b+16>>2]|0))b=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else b=c[f>>2]|0;if((b|0)==-1){c[d>>2]=0;g=1;break}else{g=(c[d>>2]|0)==0;break}}else g=1;while(0);b=c[e>>2]|0;do if(b){f=c[b+12>>2]|0;if((f|0)==(c[b+16>>2]|0))b=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else b=c[f>>2]|0;if((b|0)!=-1)if(g)break;else{t=29;break}else{c[e>>2]=0;t=27;break}}else t=27;while(0);if((t|0)==27?g:0)t=29;if((t|0)==29)c[h>>2]=c[h>>2]|2;f=c[d>>2]|0;Fl(s);b=c[v>>2]|0;c[v>>2]=0;if(b|0)ob[c[u>>2]&127](b);i=w;return f|0}function Ij(b,d,e,f,g,h,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;x=i;i=i+432|0;q=x+16|0;w=x+8|0;l=x;b=x+416|0;c[w>>2]=q;v=w+4|0;c[v>>2]=110;t=c[g+28>>2]|0;k=t+4|0;c[k>>2]=(c[k>>2]|0)+1;k=qg(t,22028)|0;a[b>>0]=0;s=c[e>>2]|0;r=s;do if(Jj(d,r,f,t,c[g+4>>2]|0,h,b,k,w,l,q+400|0)|0){m=j+8|0;q=m+3|0;if((a[q>>0]|0)<0){c[c[j>>2]>>2]=0;c[j+4>>2]=0}else{c[j>>2]=0;a[q>>0]=0}if(a[b>>0]|0)Xl(j,yb[c[(c[k>>2]|0)+44>>2]&15](k,45)|0);g=yb[c[(c[k>>2]|0)+44>>2]&15](k,48)|0;b=c[w>>2]|0;p=c[l>>2]|0;f=p+-4|0;a:do if(b>>>0<f>>>0)do{if((c[b>>2]|0)!=(g|0))break a;b=b+4|0}while(b>>>0<f>>>0);while(0);f=a[q>>0]|0;if(f<<24>>24<0){o=c[j+4>>2]|0;g=(c[m>>2]&2147483647)+-1|0}else{o=f&255;g=1}k=p-b|0;n=k>>2;if(n|0){if((g-o|0)>>>0<n>>>0){Wl(j,g,o+n-g|0,o,o);f=a[q>>0]|0}m=f<<24>>24<0;l=m?c[j>>2]|0:j;g=o+(k>>>2)|0;if((b|0)!=(p|0)){f=l+(o<<2)|0;while(1){c[f>>2]=c[b>>2];b=b+4|0;if((b|0)==(p|0))break;else f=f+4|0}}c[l+(g<<2)>>2]=0;b=o+n|0;if(m){c[j+4>>2]=b;break}else{a[q>>0]=b;break}}}while(0);b=c[d>>2]|0;do if(b){f=c[b+12>>2]|0;if((f|0)==(c[b+16>>2]|0))b=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else b=c[f>>2]|0;if((b|0)==-1){c[d>>2]=0;f=1;break}else{f=(c[d>>2]|0)==0;break}}else f=1;while(0);do if(s){b=c[r+12>>2]|0;if((b|0)==(c[r+16>>2]|0))b=sb[c[(c[s>>2]|0)+36>>2]&63](r)|0;else b=c[b>>2]|0;if((b|0)!=-1)if(f)break;else{u=37;break}else{c[e>>2]=0;u=35;break}}else u=35;while(0);if((u|0)==35?f:0)u=37;if((u|0)==37)c[h>>2]=c[h>>2]|2;f=c[d>>2]|0;Fl(t);b=c[w>>2]|0;c[w>>2]=0;if(b|0)ob[c[v>>2]&127](b);i=x;return f|0}function Jj(b,e,f,g,h,j,k,l,m,n,o){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0;Z=i;i=i+496|0;R=Z+484|0;M=Z+480|0;t=Z+80|0;Y=Z+72|0;N=Z+68|0;O=Z+64|0;P=Z+60|0;S=Z+48|0;T=Z+36|0;U=Z+24|0;V=Z+12|0;W=Z;c[M>>2]=o;c[Y>>2]=t;X=Y+4|0;c[X>>2]=110;c[N>>2]=t;c[O>>2]=t+400;c[S>>2]=0;c[S+4>>2]=0;c[S+8>>2]=0;c[T>>2]=0;c[T+4>>2]=0;c[T+8>>2]=0;c[U>>2]=0;c[U+4>>2]=0;c[U+8>>2]=0;c[V>>2]=0;c[V+4>>2]=0;c[V+8>>2]=0;c[W>>2]=0;c[W+4>>2]=0;c[W+8>>2]=0;if(f){s=qg(g,23708)|0;pb[c[(c[s>>2]|0)+44>>2]&63](P,s);pb[c[(c[s>>2]|0)+32>>2]&63](R,s);p=V+8+3|0;if((a[p>>0]|0)<0){c[c[V>>2]>>2]=0;c[V+4>>2]=0}else{c[V>>2]=0;a[p>>0]=0}Ul(V);c[V>>2]=c[R>>2];c[V+4>>2]=c[R+4>>2];c[V+8>>2]=c[R+8>>2];c[R>>2]=0;c[R+4>>2]=0;c[R+8>>2]=0;Tl(R);pb[c[(c[s>>2]|0)+28>>2]&63](R,s);f=U+8+3|0;if((a[f>>0]|0)<0){c[c[U>>2]>>2]=0;c[U+4>>2]=0}else{c[U>>2]=0;a[f>>0]=0}Ul(U);c[U>>2]=c[R>>2];c[U+4>>2]=c[R+4>>2];c[U+8>>2]=c[R+8>>2];c[R>>2]=0;c[R+4>>2]=0;c[R+8>>2]=0;Tl(R);g=sb[c[(c[s>>2]|0)+12>>2]&63](s)|0;o=sb[c[(c[s>>2]|0)+16>>2]&63](s)|0;pb[c[(c[s>>2]|0)+20>>2]&63](R,s);r=S+11|0;if((a[r>>0]|0)<0){a[c[S>>2]>>0]=0;c[S+4>>2]=0}else{a[S>>0]=0;a[r>>0]=0}Nl(S);c[S>>2]=c[R>>2];c[S+4>>2]=c[R+4>>2];c[S+8>>2]=c[R+8>>2];c[R>>2]=0;c[R+4>>2]=0;c[R+8>>2]=0;Ml(R);pb[c[(c[s>>2]|0)+24>>2]&63](R,s);q=T+8+3|0;if((a[q>>0]|0)<0){c[c[T>>2]>>2]=0;c[T+4>>2]=0}else{c[T>>2]=0;a[q>>0]=0}Ul(T);c[T>>2]=c[R>>2];c[T+4>>2]=c[R+4>>2];c[T+8>>2]=c[R+8>>2];c[R>>2]=0;c[R+4>>2]=0;c[R+8>>2]=0;Tl(R);s=sb[c[(c[s>>2]|0)+36>>2]&63](s)|0}else{s=qg(g,23700)|0;pb[c[(c[s>>2]|0)+44>>2]&63](R,s);c[P>>2]=c[R>>2];pb[c[(c[s>>2]|0)+32>>2]&63](R,s);p=V+8+3|0;if((a[p>>0]|0)<0){c[c[V>>2]>>2]=0;c[V+4>>2]=0}else{c[V>>2]=0;a[p>>0]=0}Ul(V);c[V>>2]=c[R>>2];c[V+4>>2]=c[R+4>>2];c[V+8>>2]=c[R+8>>2];c[R>>2]=0;c[R+4>>2]=0;c[R+8>>2]=0;Tl(R);pb[c[(c[s>>2]|0)+28>>2]&63](R,s);f=U+8+3|0;if((a[f>>0]|0)<0){c[c[U>>2]>>2]=0;c[U+4>>2]=0}else{c[U>>2]=0;a[f>>0]=0}Ul(U);c[U>>2]=c[R>>2];c[U+4>>2]=c[R+4>>2];c[U+8>>2]=c[R+8>>2];c[R>>2]=0;c[R+4>>2]=0;c[R+8>>2]=0;Tl(R);g=sb[c[(c[s>>2]|0)+12>>2]&63](s)|0;o=sb[c[(c[s>>2]|0)+16>>2]&63](s)|0;pb[c[(c[s>>2]|0)+20>>2]&63](R,s);r=S+11|0;if((a[r>>0]|0)<0){a[c[S>>2]>>0]=0;c[S+4>>2]=0}else{a[S>>0]=0;a[r>>0]=0}Nl(S);c[S>>2]=c[R>>2];c[S+4>>2]=c[R+4>>2];c[S+8>>2]=c[R+8>>2];c[R>>2]=0;c[R+4>>2]=0;c[R+8>>2]=0;Ml(R);pb[c[(c[s>>2]|0)+24>>2]&63](R,s);q=T+8+3|0;if((a[q>>0]|0)<0){c[c[T>>2]>>2]=0;c[T+4>>2]=0}else{c[T>>2]=0;a[q>>0]=0}Ul(T);c[T>>2]=c[R>>2];c[T+4>>2]=c[R+4>>2];c[T+8>>2]=c[R+8>>2];c[R>>2]=0;c[R+4>>2]=0;c[R+8>>2]=0;Tl(R);s=sb[c[(c[s>>2]|0)+36>>2]&63](s)|0}c[n>>2]=c[m>>2];K=U+4|0;L=V+4|0;E=(h&512|0)!=0;F=T+4|0;G=W+8+3|0;H=W+4|0;I=P+3|0;J=S+4|0;C=0;D=0;B=t;a:while(1){h=c[b>>2]|0;do if(h){t=c[h+12>>2]|0;if((t|0)==(c[h+16>>2]|0))h=sb[c[(c[h>>2]|0)+36>>2]&63](h)|0;else h=c[t>>2]|0;if((h|0)==-1){c[b>>2]=0;t=1;break}else{t=(c[b>>2]|0)==0;break}}else t=1;while(0);if(e){h=c[e+12>>2]|0;if((h|0)==(c[e+16>>2]|0))h=sb[c[(c[e>>2]|0)+36>>2]&63](e)|0;else h=c[h>>2]|0;if((h|0)!=-1){if(!t){h=C;s=B;Q=236;break}}else Q=41}else Q=41;if((Q|0)==41){Q=0;if(t){h=C;s=B;e=0;Q=236;break}else e=0}b:do switch(a[P+D>>0]|0){case 1:{if((D|0)==3){h=C;s=B;Q=236;break a}h=c[b>>2]|0;t=c[h+12>>2]|0;if((t|0)==(c[h+16>>2]|0))h=sb[c[(c[h>>2]|0)+36>>2]&63](h)|0;else h=c[t>>2]|0;if(!(lb[c[(c[l>>2]|0)+12>>2]&31](l,8192,h)|0)){Q=53;break a}h=c[b>>2]|0;t=h+12|0;u=c[t>>2]|0;if((u|0)==(c[h+16>>2]|0))h=sb[c[(c[h>>2]|0)+40>>2]&63](h)|0;else{c[t>>2]=u+4;h=c[u>>2]|0}Xl(W,h);x=e;t=e;v=e;Q=55;break}case 0:{if((D|0)==3){h=C;s=B;Q=236;break a}else{x=e;t=e;v=e;Q=55}break}case 3:{h=a[f>>0]|0;t=h<<24>>24<0?c[K>>2]|0:h&255;v=a[p>>0]|0;v=v<<24>>24<0?c[L>>2]|0:v&255;if((t|0)==(0-v|0)){h=C;t=e;u=B}else{w=(t|0)==0;x=c[b>>2]|0;y=c[x+12>>2]|0;t=c[x+16>>2]|0;u=(y|0)==(t|0);if(w|(v|0)==0){if(u)t=sb[c[(c[x>>2]|0)+36>>2]&63](x)|0;else t=c[y>>2]|0;if(w){h=a[p>>0]|0;if((t|0)!=(c[(h<<24>>24<0?c[V>>2]|0:V)>>2]|0)){h=C;t=e;u=B;break b}t=c[b>>2]|0;u=t+12|0;v=c[u>>2]|0;if((v|0)==(c[t+16>>2]|0)){sb[c[(c[t>>2]|0)+40>>2]&63](t)|0;h=a[p>>0]|0}else c[u>>2]=v+4;a[k>>0]=1;h=(h<<24>>24<0?c[L>>2]|0:h&255)>>>0>1?V:C;t=e;u=B;break b}h=a[f>>0]|0;if((t|0)!=(c[(h<<24>>24<0?c[U>>2]|0:U)>>2]|0)){a[k>>0]=1;h=C;t=e;u=B;break b}t=c[b>>2]|0;u=t+12|0;v=c[u>>2]|0;if((v|0)==(c[t+16>>2]|0)){sb[c[(c[t>>2]|0)+40>>2]&63](t)|0;h=a[f>>0]|0}else c[u>>2]=v+4;h=(h<<24>>24<0?c[K>>2]|0:h&255)>>>0>1?U:C;t=e;u=B;break b}if(u){w=sb[c[(c[x>>2]|0)+36>>2]&63](x)|0;t=c[b>>2]|0;h=a[f>>0]|0;x=t;v=c[t+12>>2]|0;t=c[t+16>>2]|0}else{w=c[y>>2]|0;v=y}u=x+12|0;t=(v|0)==(t|0);if((w|0)==(c[(h<<24>>24<0?c[U>>2]|0:U)>>2]|0)){if(t){sb[c[(c[x>>2]|0)+40>>2]&63](x)|0;h=a[f>>0]|0}else c[u>>2]=v+4;h=(h<<24>>24<0?c[K>>2]|0:h&255)>>>0>1?U:C;t=e;u=B;break b}if(t)t=sb[c[(c[x>>2]|0)+36>>2]&63](x)|0;else t=c[v>>2]|0;h=a[p>>0]|0;if((t|0)!=(c[(h<<24>>24<0?c[V>>2]|0:V)>>2]|0)){Q=110;break a}t=c[b>>2]|0;u=t+12|0;v=c[u>>2]|0;if((v|0)==(c[t+16>>2]|0)){sb[c[(c[t>>2]|0)+40>>2]&63](t)|0;h=a[p>>0]|0}else c[u>>2]=v+4;a[k>>0]=1;h=(h<<24>>24<0?c[L>>2]|0:h&255)>>>0>1?V:C;t=e;u=B}break}case 2:{if(!(D>>>0<2|(C|0)!=0)?!(E|(D|0)==2&(a[I>>0]|0)!=0):0){h=0;t=e;u=B;break b}t=a[q>>0]|0;u=t<<24>>24<0;v=c[T>>2]|0;w=u?v:T;h=w;c:do if((D|0)!=0?(d[P+(D+-1)>>0]|0)<2:0){d:do if((u?c[F>>2]|0:t&255)|0){u=w;while(1){if(!(lb[c[(c[l>>2]|0)+12>>2]&31](l,8192,c[u>>2]|0)|0))break;u=u+4|0;h=u;t=a[q>>0]|0;v=c[T>>2]|0;A=t<<24>>24<0;if((u|0)==((A?v:T)+((A?c[F>>2]|0:t&255)<<2)|0))break d}t=a[q>>0]|0;v=c[T>>2]|0}while(0);w=t<<24>>24<0?v:T;z=w;y=h-z>>2;x=a[G>>0]|0;u=x<<24>>24<0;x=u?c[H>>2]|0:x&255;if(y>>>0<=x>>>0){x=(u?c[W>>2]|0:W)+(x<<2)|0;if(y){u=x+(0-y<<2)|0;while(1){if((c[u>>2]|0)!=(c[w>>2]|0)){h=z;break c}u=u+4|0;if((u|0)==(x|0))break;else w=w+4|0}}}else h=z}while(0);A=t<<24>>24<0;t=(A?v:T)+((A?c[F>>2]|0:t&255)<<2)|0;e:do if((h|0)==(t|0)){h=t;t=e}else{u=e;x=e;w=e;while(1){t=c[b>>2]|0;do if(t){v=c[t+12>>2]|0;if((v|0)==(c[t+16>>2]|0))t=sb[c[(c[t>>2]|0)+36>>2]&63](t)|0;else t=c[v>>2]|0;if((t|0)==-1){c[b>>2]=0;v=1;break}else{v=(c[b>>2]|0)==0;break}}else v=1;while(0);if(w){t=c[w+12>>2]|0;if((t|0)==(c[w+16>>2]|0))t=sb[c[(c[w>>2]|0)+36>>2]&63](w)|0;else t=c[t>>2]|0;if((t|0)!=-1)if((u|0)==0^v){y=u;w=u}else{t=x;break e}else{u=0;t=0;e=0;Q=137}}else{t=x;Q=137}if((Q|0)==137){Q=0;if(v)break e;else{y=u;x=t;w=0}}t=c[b>>2]|0;u=c[t+12>>2]|0;if((u|0)==(c[t+16>>2]|0))t=sb[c[(c[t>>2]|0)+36>>2]&63](t)|0;else t=c[u>>2]|0;if((t|0)!=(c[h>>2]|0)){t=x;break e}t=c[b>>2]|0;u=t+12|0;v=c[u>>2]|0;if((v|0)==(c[t+16>>2]|0))sb[c[(c[t>>2]|0)+40>>2]&63](t)|0;else c[u>>2]=v+4;h=h+4|0;A=a[q>>0]|0;z=A<<24>>24<0;if((h|0)==((z?c[T>>2]|0:T)+((z?c[F>>2]|0:A&255)<<2)|0)){t=x;break}else u=y}}while(0);if(E?(A=a[q>>0]|0,z=A<<24>>24<0,(h|0)!=((z?c[T>>2]|0:T)+((z?c[F>>2]|0:A&255)<<2)|0)):0){Q=149;break a}else{h=C;u=B}break}case 4:{x=0;y=e;A=e;w=e;h=B;while(1){t=c[b>>2]|0;do if(t){u=c[t+12>>2]|0;if((u|0)==(c[t+16>>2]|0))t=sb[c[(c[t>>2]|0)+36>>2]&63](t)|0;else t=c[u>>2]|0;if((t|0)==-1){c[b>>2]=0;v=1;break}else{v=(c[b>>2]|0)==0;break}}else v=1;while(0);if(w){t=c[w+12>>2]|0;if((t|0)==(c[w+16>>2]|0))t=sb[c[(c[w>>2]|0)+36>>2]&63](w)|0;else t=c[t>>2]|0;if((t|0)!=-1)if((y|0)==0^v){t=y;z=y}else{v=y;u=A;break}else{t=0;u=0;e=0;Q=162}}else{t=y;u=A;Q=162}if((Q|0)==162){Q=0;if(v){v=t;break}else{A=u;z=0}}u=c[b>>2]|0;v=c[u+12>>2]|0;if((v|0)==(c[u+16>>2]|0))v=sb[c[(c[u>>2]|0)+36>>2]&63](u)|0;else v=c[v>>2]|0;if(lb[c[(c[l>>2]|0)+12>>2]&31](l,2048,v)|0){u=c[n>>2]|0;if((u|0)==(c[M>>2]|0)){Kj(m,n,M);u=c[n>>2]|0}c[n>>2]=u+4;c[u>>2]=v;x=x+1|0}else{B=a[r>>0]|0;if(!((v|0)==(o|0)&(x|0?((B<<24>>24<0?c[J>>2]|0:B&255)|0)!=0:0))){v=t;u=A;break}if((h|0)==(c[O>>2]|0)){Ej(Y,N,O);h=c[N>>2]|0}B=h+4|0;c[N>>2]=B;c[h>>2]=x;x=0;h=B}u=c[b>>2]|0;v=u+12|0;w=c[v>>2]|0;if((w|0)==(c[u+16>>2]|0)){sb[c[(c[u>>2]|0)+40>>2]&63](u)|0;y=t;w=z;continue}else{c[v>>2]=w+4;y=t;w=z;continue}}if(x|0?(c[Y>>2]|0)!=(h|0):0){if((h|0)==(c[O>>2]|0)){Ej(Y,N,O);h=c[N>>2]|0}A=h+4|0;c[N>>2]=A;c[h>>2]=x}else A=h;if((s|0)>0){h=c[b>>2]|0;do if(h){t=c[h+12>>2]|0;if((t|0)==(c[h+16>>2]|0))h=sb[c[(c[h>>2]|0)+36>>2]&63](h)|0;else h=c[t>>2]|0;if((h|0)==-1){c[b>>2]=0;t=1;break}else{t=(c[b>>2]|0)==0;break}}else t=1;while(0);if(v){h=c[v+12>>2]|0;if((h|0)==(c[v+16>>2]|0))h=sb[c[(c[v>>2]|0)+36>>2]&63](v)|0;else h=c[h>>2]|0;if((h|0)!=-1)if(t)w=u;else{Q=201;break a}else{h=0;e=0;Q=195}}else{h=u;Q=195}if((Q|0)==195){Q=0;if(t){Q=201;break a}else{w=h;v=0}}h=c[b>>2]|0;t=c[h+12>>2]|0;if((t|0)==(c[h+16>>2]|0))h=sb[c[(c[h>>2]|0)+36>>2]&63](h)|0;else h=c[t>>2]|0;if((h|0)!=(g|0)){Q=201;break a}h=c[b>>2]|0;t=h+12|0;u=c[t>>2]|0;if((u|0)==(c[h+16>>2]|0)){sb[c[(c[h>>2]|0)+40>>2]&63](h)|0;y=v;t=w}else{c[t>>2]=u+4;y=v;t=w}while(1){h=c[b>>2]|0;do if(h){u=c[h+12>>2]|0;if((u|0)==(c[h+16>>2]|0))h=sb[c[(c[h>>2]|0)+36>>2]&63](h)|0;else h=c[u>>2]|0;if((h|0)==-1){c[b>>2]=0;u=1;break}else{u=(c[b>>2]|0)==0;break}}else u=1;while(0);if(v){h=c[v+12>>2]|0;if((h|0)==(c[v+16>>2]|0))h=sb[c[(c[v>>2]|0)+36>>2]&63](v)|0;else h=c[h>>2]|0;if((h|0)!=-1)if((y|0)==0^u){z=y;x=y}else{Q=223;break a}else{h=0;t=0;e=0;Q=217}}else{h=y;Q=217}if((Q|0)==217){Q=0;if(u){Q=223;break a}else{z=h;x=0}}h=c[b>>2]|0;u=c[h+12>>2]|0;if((u|0)==(c[h+16>>2]|0))h=sb[c[(c[h>>2]|0)+36>>2]&63](h)|0;else h=c[u>>2]|0;if(!(lb[c[(c[l>>2]|0)+12>>2]&31](l,2048,h)|0)){Q=223;break a}if((c[n>>2]|0)==(c[M>>2]|0))Kj(m,n,M);h=c[b>>2]|0;u=c[h+12>>2]|0;if((u|0)==(c[h+16>>2]|0))h=sb[c[(c[h>>2]|0)+36>>2]&63](h)|0;else h=c[u>>2]|0;u=c[n>>2]|0;c[n>>2]=u+4;c[u>>2]=h;h=s+-1|0;u=c[b>>2]|0;v=u+12|0;w=c[v>>2]|0;if((w|0)==(c[u+16>>2]|0))sb[c[(c[u>>2]|0)+40>>2]&63](u)|0;else c[v>>2]=w+4;if((s|0)>1){s=h;y=z;v=x}else{s=h;break}}}else t=u;if((c[n>>2]|0)==(c[m>>2]|0)){Q=234;break a}else{h=C;u=A}break}default:{h=C;t=e;u=B}}while(0);f:do if((Q|0)==55)while(1){Q=0;h=c[b>>2]|0;do if(h){u=c[h+12>>2]|0;if((u|0)==(c[h+16>>2]|0))h=sb[c[(c[h>>2]|0)+36>>2]&63](h)|0;else h=c[u>>2]|0;if((h|0)==-1){c[b>>2]=0;u=1;break}else{u=(c[b>>2]|0)==0;break}}else u=1;while(0);if(v){h=c[v+12>>2]|0;if((h|0)==(c[v+16>>2]|0))h=sb[c[(c[v>>2]|0)+36>>2]&63](v)|0;else h=c[h>>2]|0;if((h|0)!=-1)if((x|0)==0^u){y=x;w=x}else{h=C;u=B;break f}else{h=0;t=0;e=0;Q=67}}else{h=x;Q=67}if((Q|0)==67){Q=0;if(u){h=C;u=B;break f}else{y=h;w=0}}h=c[b>>2]|0;u=c[h+12>>2]|0;if((u|0)==(c[h+16>>2]|0))h=sb[c[(c[h>>2]|0)+36>>2]&63](h)|0;else h=c[u>>2]|0;if(!(lb[c[(c[l>>2]|0)+12>>2]&31](l,8192,h)|0)){h=C;u=B;break f}h=c[b>>2]|0;u=h+12|0;v=c[u>>2]|0;if((v|0)==(c[h+16>>2]|0))h=sb[c[(c[h>>2]|0)+40>>2]&63](h)|0;else{c[u>>2]=v+4;h=c[v>>2]|0}Xl(W,h);x=y;v=w;Q=55}while(0);D=D+1|0;if(D>>>0>=4){s=u;Q=236;break}else{C=h;e=t;B=u}}g:do if((Q|0)==53){c[j>>2]=c[j>>2]|4;o=0}else if((Q|0)==110){c[j>>2]=c[j>>2]|4;o=0}else if((Q|0)==149){c[j>>2]=c[j>>2]|4;o=0}else if((Q|0)==201){c[j>>2]=c[j>>2]|4;o=0}else if((Q|0)==223){c[j>>2]=c[j>>2]|4;o=0}else if((Q|0)==234){c[j>>2]=c[j>>2]|4;o=0}else if((Q|0)==236){h:do if(h|0){q=h+8+3|0;r=h+4|0;f=1;while(1){o=a[q>>0]|0;if(o<<24>>24<0)o=c[r>>2]|0;else o=o&255;if(f>>>0>=o>>>0)break h;o=c[b>>2]|0;do if(o){g=c[o+12>>2]|0;if((g|0)==(c[o+16>>2]|0))o=sb[c[(c[o>>2]|0)+36>>2]&63](o)|0;else o=c[g>>2]|0;if((o|0)==-1){c[b>>2]=0;g=1;break}else{g=(c[b>>2]|0)==0;break}}else g=1;while(0);if(e){o=c[e+12>>2]|0;if((o|0)==(c[e+16>>2]|0))o=sb[c[(c[e>>2]|0)+36>>2]&63](e)|0;else o=c[o>>2]|0;if((o|0)!=-1){if(!g)break}else Q=254}else Q=254;if((Q|0)==254){Q=0;if(g)break;else e=0}o=c[b>>2]|0;g=c[o+12>>2]|0;if((g|0)==(c[o+16>>2]|0))o=sb[c[(c[o>>2]|0)+36>>2]&63](o)|0;else o=c[g>>2]|0;if((a[q>>0]|0)<0)g=c[h>>2]|0;else g=h;if((o|0)!=(c[g+(f<<2)>>2]|0))break;o=f+1|0;g=c[b>>2]|0;f=g+12|0;p=c[f>>2]|0;if((p|0)==(c[g+16>>2]|0)){sb[c[(c[g>>2]|0)+40>>2]&63](g)|0;f=o;continue}else{c[f>>2]=p+4;f=o;continue}}c[j>>2]=c[j>>2]|4;o=0;break g}while(0);e=c[Y>>2]|0;if((e|0)!=(s|0)){c[R>>2]=0;zg(S,e,s,R);if(!(c[R>>2]|0)){o=1;break}else{c[j>>2]=c[j>>2]|4;o=0;break}}else o=1}while(0);Tl(W);Tl(V);Tl(U);Tl(T);Ml(S);e=c[Y>>2]|0;c[Y>>2]=0;if(e|0)ob[c[X>>2]&127](e);i=Z;return o|0}function Kj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=a+4|0;f=(c[i>>2]|0)!=110;e=c[a>>2]|0;g=(c[d>>2]|0)-e|0;g=g>>>0<2147483647?g<<1:-1;g=(g|0)==0?4:g;h=(c[b>>2]|0)-e>>2;e=xf(f?e:0,g)|0;if(!f){f=c[a>>2]|0;c[a>>2]=e;if(f){ob[c[i>>2]&127](f);e=c[a>>2]|0}}else c[a>>2]=e;c[i>>2]=111;c[b>>2]=e+(h<<2);c[d>>2]=(c[a>>2]|0)+(g>>>2<<2);return}function Lj(a){a=a|0;return}function Mj(a){a=a|0;wf(a);return}function Nj(b,d,e,f,g,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=+j;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;C=i;i=i+384|0;k=C+8|0;y=C;m=C+272|0;b=C+64|0;x=C+169|0;u=C+168|0;z=C+52|0;A=C+40|0;B=C+28|0;o=C+24|0;v=C+20|0;w=C+16|0;c[b>>2]=m;h[y>>3]=j;l=Oe(m,0,0,y)|0;if(l>>>0>99){l=sg()|0;h[k>>3]=j;l=oh(b,l,18887,k)|0;b=c[b>>2]|0;s=vf(l)|0;r=s;t=b}else{r=C+172|0;s=0;t=0;b=m}q=c[f+28>>2]|0;p=q+4|0;c[p>>2]=(c[p>>2]|0)+1;p=qg(q,21996)|0;wb[c[(c[p>>2]|0)+32>>2]&7](p,b,b+l|0,r)|0;if(!l)n=0;else n=(a[b>>0]|0)==45;c[z>>2]=0;c[z+4>>2]=0;c[z+8>>2]=0;c[A>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;c[B>>2]=0;c[B+4>>2]=0;c[B+8>>2]=0;Pj(e,n,q,y,x,u,z,A,B,o);m=c[o>>2]|0;if((l|0)>(m|0)){e=a[B+11>>0]|0;b=a[A+11>>0]|0;b=(e<<24>>24<0?c[B+4>>2]|0:e&255)+(l-m<<1|1)+(b<<24>>24<0?c[A+4>>2]|0:b&255)|0}else{e=a[B+11>>0]|0;b=a[A+11>>0]|0;b=(e<<24>>24<0?c[B+4>>2]|0:e&255)+2+(b<<24>>24<0?c[A+4>>2]|0:b&255)|0}b=b+m|0;if(b>>>0>100){k=vf(b)|0;b=k}else{b=C+68|0;k=0}Qj(b,v,w,c[f+4>>2]|0,r,r+l|0,p,n,y,a[x>>0]|0,a[u>>0]|0,z,A,B,m);b=ve(c[d>>2]|0,b,c[v>>2]|0,c[w>>2]|0,f,g)|0;if(k|0)wf(k);Ml(B);Ml(A);Ml(z);Fl(q);if(s|0)wf(s);if(t|0)wf(t);i=C;return b|0}function Oj(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;A=i;i=i+160|0;t=A+152|0;u=A+149|0;v=A+148|0;z=A+36|0;w=A+24|0;x=A+12|0;k=A+8|0;l=A+48|0;q=A+4|0;r=A;y=c[f+28>>2]|0;s=y+4|0;c[s>>2]=(c[s>>2]|0)+1;s=qg(y,21996)|0;n=h+11|0;p=a[n>>0]|0;b=p<<24>>24<0;o=h+4|0;if(!((b?c[o>>2]|0:p&255)|0))p=0;else{p=a[(b?c[h>>2]|0:h)>>0]|0;p=p<<24>>24==(yb[c[(c[s>>2]|0)+28>>2]&15](s,45)|0)<<24>>24};c[z>>2]=0;c[z+4>>2]=0;c[z+8>>2]=0;c[w>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;c[x>>2]=0;c[x+4>>2]=0;c[x+8>>2]=0;Pj(e,p,y,t,u,v,z,w,x,k);j=a[n>>0]|0;b=c[o>>2]|0;e=j<<24>>24<0?b:j&255;m=c[k>>2]|0;if((e|0)>(m|0)){B=a[x+11>>0]|0;k=a[w+11>>0]|0;e=(B<<24>>24<0?c[x+4>>2]|0:B&255)+(e-m<<1|1)+(k<<24>>24<0?c[w+4>>2]|0:k&255)|0}else{B=a[x+11>>0]|0;e=a[w+11>>0]|0;e=(B<<24>>24<0?c[x+4>>2]|0:B&255)+2+(e<<24>>24<0?c[w+4>>2]|0:e&255)|0}e=e+m|0;if(e>>>0>100){e=vf(e)|0;k=e;if(!e){e=0;j=a[n>>0]|0;b=c[o>>2]|0}}else{e=l;k=0}B=j<<24>>24<0;h=B?c[h>>2]|0:h;Qj(e,q,r,c[f+4>>2]|0,h,h+(B?b:j&255)|0,s,p,t,a[u>>0]|0,a[v>>0]|0,z,w,x,m);b=ve(c[d>>2]|0,e,c[q>>2]|0,c[r>>2]|0,f,g)|0;if(k|0)wf(k);Ml(x);Ml(w);Ml(z);Fl(y);i=A;return b|0}function Pj(b,d,e,f,g,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0;p=i;i=i+16|0;o=p;if(b){n=qg(e,23692)|0;if(d){pb[c[(c[n>>2]|0)+44>>2]&63](o,n);e=c[o>>2]|0;a[f>>0]=e;a[f+1>>0]=e>>8;a[f+2>>0]=e>>16;a[f+3>>0]=e>>24;pb[c[(c[n>>2]|0)+32>>2]&63](o,n);e=l+11|0;if((a[e>>0]|0)<0){a[c[l>>2]>>0]=0;c[l+4>>2]=0;e=l}else{a[l>>0]=0;a[e>>0]=0;e=l}Nl(l);c[e>>2]=c[o>>2];c[e+4>>2]=c[o+4>>2];c[e+8>>2]=c[o+8>>2];c[o>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;Ml(o);b=n}else{pb[c[(c[n>>2]|0)+40>>2]&63](o,n);e=c[o>>2]|0;a[f>>0]=e;a[f+1>>0]=e>>8;a[f+2>>0]=e>>16;a[f+3>>0]=e>>24;pb[c[(c[n>>2]|0)+28>>2]&63](o,n);e=l+11|0;if((a[e>>0]|0)<0){a[c[l>>2]>>0]=0;c[l+4>>2]=0;e=l}else{a[l>>0]=0;a[e>>0]=0;e=l}Nl(l);c[e>>2]=c[o>>2];c[e+4>>2]=c[o+4>>2];c[e+8>>2]=c[o+8>>2];c[o>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;Ml(o);b=n}a[g>>0]=sb[c[(c[n>>2]|0)+12>>2]&63](n)|0;a[h>>0]=sb[c[(c[n>>2]|0)+16>>2]&63](n)|0;pb[c[(c[b>>2]|0)+20>>2]&63](o,n);e=j+11|0;if((a[e>>0]|0)<0){a[c[j>>2]>>0]=0;c[j+4>>2]=0;e=j}else{a[j>>0]=0;a[e>>0]=0;e=j}Nl(j);c[e>>2]=c[o>>2];c[e+4>>2]=c[o+4>>2];c[e+8>>2]=c[o+8>>2];c[o>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;Ml(o);pb[c[(c[b>>2]|0)+24>>2]&63](o,n);e=k+11|0;if((a[e>>0]|0)<0){a[c[k>>2]>>0]=0;c[k+4>>2]=0;e=k}else{a[k>>0]=0;a[e>>0]=0;e=k}Nl(k);c[e>>2]=c[o>>2];c[e+4>>2]=c[o+4>>2];c[e+8>>2]=c[o+8>>2];c[o>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;Ml(o);e=sb[c[(c[n>>2]|0)+36>>2]&63](n)|0}else{n=qg(e,23684)|0;if(d){pb[c[(c[n>>2]|0)+44>>2]&63](o,n);e=c[o>>2]|0;a[f>>0]=e;a[f+1>>0]=e>>8;a[f+2>>0]=e>>16;a[f+3>>0]=e>>24;pb[c[(c[n>>2]|0)+32>>2]&63](o,n);e=l+11|0;if((a[e>>0]|0)<0){a[c[l>>2]>>0]=0;c[l+4>>2]=0;e=l}else{a[l>>0]=0;a[e>>0]=0;e=l}Nl(l);c[e>>2]=c[o>>2];c[e+4>>2]=c[o+4>>2];c[e+8>>2]=c[o+8>>2];c[o>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;Ml(o);b=n}else{pb[c[(c[n>>2]|0)+40>>2]&63](o,n);e=c[o>>2]|0;a[f>>0]=e;a[f+1>>0]=e>>8;a[f+2>>0]=e>>16;a[f+3>>0]=e>>24;pb[c[(c[n>>2]|0)+28>>2]&63](o,n);e=l+11|0;if((a[e>>0]|0)<0){a[c[l>>2]>>0]=0;c[l+4>>2]=0;e=l}else{a[l>>0]=0;a[e>>0]=0;e=l}Nl(l);c[e>>2]=c[o>>2];c[e+4>>2]=c[o+4>>2];c[e+8>>2]=c[o+8>>2];c[o>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;Ml(o);b=n}a[g>>0]=sb[c[(c[n>>2]|0)+12>>2]&63](n)|0;a[h>>0]=sb[c[(c[n>>2]|0)+16>>2]&63](n)|0;pb[c[(c[b>>2]|0)+20>>2]&63](o,n);e=j+11|0;if((a[e>>0]|0)<0){a[c[j>>2]>>0]=0;c[j+4>>2]=0;e=j}else{a[j>>0]=0;a[e>>0]=0;e=j}Nl(j);c[e>>2]=c[o>>2];c[e+4>>2]=c[o+4>>2];c[e+8>>2]=c[o+8>>2];c[o>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;Ml(o);pb[c[(c[b>>2]|0)+24>>2]&63](o,n);e=k+11|0;if((a[e>>0]|0)<0){a[c[k>>2]>>0]=0;c[k+4>>2]=0;e=k}else{a[k>>0]=0;a[e>>0]=0;e=k}Nl(k);c[e>>2]=c[o>>2];c[e+4>>2]=c[o+4>>2];c[e+8>>2]=c[o+8>>2];c[o>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;Ml(o);e=sb[c[(c[n>>2]|0)+36>>2]&63](n)|0}c[m>>2]=e;i=p;return}function Qj(d,e,f,g,h,i,j,k,l,m,n,o,p,q,r){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;q=q|0;r=r|0;var s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;c[f>>2]=d;y=q+11|0;K=q+4|0;A=p+11|0;B=p+4|0;C=(g&512|0)==0;D=j+8|0;E=(r|0)>0;F=o+11|0;G=o+4|0;H=r+-1|0;I=(r|0)>1;x=0;do{switch(a[l+x>>0]|0){case 0:{c[e>>2]=c[f>>2];break}case 1:{c[e>>2]=c[f>>2];v=yb[c[(c[j>>2]|0)+28>>2]&15](j,32)|0;w=c[f>>2]|0;c[f>>2]=w+1;a[w>>0]=v;break}case 3:{w=a[y>>0]|0;s=w<<24>>24<0;if((s?c[K>>2]|0:w&255)|0){v=a[(s?c[q>>2]|0:q)>>0]|0;w=c[f>>2]|0;c[f>>2]=w+1;a[w>>0]=v}break}case 2:{w=a[A>>0]|0;s=w<<24>>24<0;w=s?c[B>>2]|0:w&255;if(!(C|(w|0)==0)){t=s?c[p>>2]|0:p;u=t+w|0;v=c[f>>2]|0;s=v;while(1){a[s>>0]=a[t>>0]|0;t=t+1|0;if((t|0)==(u|0))break;else s=s+1|0}c[f>>2]=v+w}break}case 4:{s=c[f>>2]|0;h=k?h+1|0:h;a:do if(h>>>0<i>>>0){t=h;do{u=a[t>>0]|0;if(u<<24>>24<=-1)break a;if(!(b[(c[D>>2]|0)+(u<<24>>24<<1)>>1]&2048))break a;t=t+1|0}while(t>>>0<i>>>0)}else t=h;while(0);if(E){if(t>>>0>h>>>0){t=t+-1|0;w=a[t>>0]|0;c[f>>2]=s+1;a[s>>0]=w;if(t>>>0>h>>>0&I){u=H;while(1){v=c[f>>2]|0;t=t+-1|0;w=a[t>>0]|0;c[f>>2]=v+1;a[v>>0]=w;v=u+-1|0;u=(u|0)>1;if(t>>>0>h>>>0&u)u=v;else break}}else{u=I;v=H}if(u){u=v;J=21}else w=0}else{u=r;J=21}if((J|0)==21){J=0;v=u;w=yb[c[(c[j>>2]|0)+28>>2]&15](j,48)|0}u=c[f>>2]|0;c[f>>2]=u+1;if((v|0)>0)while(1){a[u>>0]=w;u=c[f>>2]|0;c[f>>2]=u+1;if((v|0)>1)v=v+-1|0;else break}a[u>>0]=m}if((t|0)==(h|0)){v=yb[c[(c[j>>2]|0)+28>>2]&15](j,48)|0;w=c[f>>2]|0;c[f>>2]=w+1;a[w>>0]=v}else{w=a[F>>0]|0;u=w<<24>>24<0;if(!((u?c[G>>2]|0:w&255)|0)){w=-1;v=0;u=0}else{w=a[(u?c[o>>2]|0:o)>>0]|0;v=0;u=0}while(1){if((u|0)==(w|0)){L=c[f>>2]|0;c[f>>2]=L+1;a[L>>0]=n;v=v+1|0;L=a[F>>0]|0;u=L<<24>>24<0;if(v>>>0<(u?c[G>>2]|0:L&255)>>>0){w=a[(u?c[o>>2]|0:o)+v>>0]|0;w=w<<24>>24==127?-1:w<<24>>24;u=0}else u=0}t=t+-1|0;M=a[t>>0]|0;L=c[f>>2]|0;c[f>>2]=L+1;a[L>>0]=M;if((t|0)==(h|0))break;else u=u+1|0}}t=c[f>>2]|0;if((s|0)!=(t|0)?(z=t+-1|0,s>>>0<z>>>0):0){t=z;do{M=a[s>>0]|0;a[s>>0]=a[t>>0]|0;a[t>>0]=M;s=s+1|0;t=t+-1|0}while(s>>>0<t>>>0)}break}default:{}}x=x+1|0}while((x|0)!=4);v=a[y>>0]|0;h=v<<24>>24<0;v=h?c[K>>2]|0:v&255;if(v>>>0>1){s=h?c[q>>2]|0:q;t=s+v|0;u=c[f>>2]|0;h=u;s=s+1|0;while(1){a[h>>0]=a[s>>0]|0;s=s+1|0;if((s|0)==(t|0))break;else h=h+1|0}c[f>>2]=u+(v+-1)}switch((g&176)<<24>>24){case 32:{c[e>>2]=c[f>>2];break}case 16:break;default:c[e>>2]=d}return}function Rj(a){a=a|0;return}function Sj(a){a=a|0;wf(a);return}function Tj(b,d,e,f,g,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=+j;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;C=i;i=i+976|0;k=C+8|0;y=C;m=C+876|0;b=C+872|0;x=C+468|0;u=C+464|0;z=C+452|0;A=C+440|0;B=C+428|0;o=C+424|0;v=C+20|0;w=C+16|0;c[b>>2]=m;h[y>>3]=j;l=Oe(m,0,0,y)|0;if(l>>>0>99){l=sg()|0;h[k>>3]=j;l=oh(b,l,18887,k)|0;b=c[b>>2]|0;s=vf(l<<2)|0;r=s;t=b}else{r=C+472|0;s=0;t=0;b=m}q=c[f+28>>2]|0;p=q+4|0;c[p>>2]=(c[p>>2]|0)+1;p=qg(q,22028)|0;wb[c[(c[p>>2]|0)+48>>2]&7](p,b,b+l|0,r)|0;if(!l)n=0;else n=(a[b>>0]|0)==45;c[z>>2]=0;c[z+4>>2]=0;c[z+8>>2]=0;c[A>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;c[B>>2]=0;c[B+4>>2]=0;c[B+8>>2]=0;Vj(e,n,q,y,x,u,z,A,B,o);m=c[o>>2]|0;if((l|0)>(m|0)){e=a[B+8+3>>0]|0;b=a[A+8+3>>0]|0;b=(e<<24>>24<0?c[B+4>>2]|0:e&255)+(l-m<<1|1)+(b<<24>>24<0?c[A+4>>2]|0:b&255)|0}else{e=a[B+8+3>>0]|0;b=a[A+8+3>>0]|0;b=(e<<24>>24<0?c[B+4>>2]|0:e&255)+2+(b<<24>>24<0?c[A+4>>2]|0:b&255)|0}b=b+m|0;if(b>>>0>100){k=vf(b<<2)|0;b=k}else{b=C+24|0;k=0}Wj(b,v,w,c[f+4>>2]|0,r,r+(l<<2)|0,p,n,y,c[x>>2]|0,c[u>>2]|0,z,A,B,m);b=Ch(c[d>>2]|0,b,c[v>>2]|0,c[w>>2]|0,f,g)|0;if(k|0)wf(k);Tl(B);Tl(A);Ml(z);Fl(q);if(s|0)wf(s);if(t|0)wf(t);i=C;return b|0}function Uj(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;A=i;i=i+464|0;t=A+456|0;u=A+452|0;v=A+448|0;z=A+436|0;w=A+424|0;x=A+412|0;k=A+408|0;l=A+8|0;q=A+4|0;r=A;y=c[f+28>>2]|0;s=y+4|0;c[s>>2]=(c[s>>2]|0)+1;s=qg(y,22028)|0;n=h+8+3|0;p=a[n>>0]|0;b=p<<24>>24<0;o=h+4|0;if(!((b?c[o>>2]|0:p&255)|0))p=0;else{p=c[(b?c[h>>2]|0:h)>>2]|0;p=(p|0)==(yb[c[(c[s>>2]|0)+44>>2]&15](s,45)|0)};c[z>>2]=0;c[z+4>>2]=0;c[z+8>>2]=0;c[w>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;c[x>>2]=0;c[x+4>>2]=0;c[x+8>>2]=0;Vj(e,p,y,t,u,v,z,w,x,k);j=a[n>>0]|0;b=c[o>>2]|0;e=j<<24>>24<0?b:j&255;m=c[k>>2]|0;if((e|0)>(m|0)){B=a[x+8+3>>0]|0;k=a[w+8+3>>0]|0;e=(B<<24>>24<0?c[x+4>>2]|0:B&255)+(e-m<<1|1)+(k<<24>>24<0?c[w+4>>2]|0:k&255)|0}else{B=a[x+8+3>>0]|0;e=a[w+8+3>>0]|0;e=(B<<24>>24<0?c[x+4>>2]|0:B&255)+2+(e<<24>>24<0?c[w+4>>2]|0:e&255)|0}e=e+m|0;if(e>>>0>100){e=vf(e<<2)|0;k=e;if(!e){e=0;j=a[n>>0]|0;b=c[o>>2]|0}}else{e=l;k=0}B=j<<24>>24<0;h=B?c[h>>2]|0:h;Wj(e,q,r,c[f+4>>2]|0,h,h+((B?b:j&255)<<2)|0,s,p,t,c[u>>2]|0,c[v>>2]|0,z,w,x,m);b=Ch(c[d>>2]|0,e,c[q>>2]|0,c[r>>2]|0,f,g)|0;if(k|0)wf(k);Tl(x);Tl(w);Ml(z);Fl(y);i=A;return b|0}function Vj(b,d,e,f,g,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0;o=i;i=i+16|0;n=o;if(b){b=qg(e,23708)|0;if(d){pb[c[(c[b>>2]|0)+44>>2]&63](n,b);e=c[n>>2]|0;a[f>>0]=e;a[f+1>>0]=e>>8;a[f+2>>0]=e>>16;a[f+3>>0]=e>>24;pb[c[(c[b>>2]|0)+32>>2]&63](n,b);e=l+8+3|0;if((a[e>>0]|0)<0){c[c[l>>2]>>2]=0;c[l+4>>2]=0}else{c[l>>2]=0;a[e>>0]=0}Ul(l);c[l>>2]=c[n>>2];c[l+4>>2]=c[n+4>>2];c[l+8>>2]=c[n+8>>2];c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;Tl(n)}else{pb[c[(c[b>>2]|0)+40>>2]&63](n,b);e=c[n>>2]|0;a[f>>0]=e;a[f+1>>0]=e>>8;a[f+2>>0]=e>>16;a[f+3>>0]=e>>24;pb[c[(c[b>>2]|0)+28>>2]&63](n,b);e=l+8+3|0;if((a[e>>0]|0)<0){c[c[l>>2]>>2]=0;c[l+4>>2]=0}else{c[l>>2]=0;a[e>>0]=0}Ul(l);c[l>>2]=c[n>>2];c[l+4>>2]=c[n+4>>2];c[l+8>>2]=c[n+8>>2];c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;Tl(n)}c[g>>2]=sb[c[(c[b>>2]|0)+12>>2]&63](b)|0;c[h>>2]=sb[c[(c[b>>2]|0)+16>>2]&63](b)|0;pb[c[(c[b>>2]|0)+20>>2]&63](n,b);e=j+11|0;if((a[e>>0]|0)<0){a[c[j>>2]>>0]=0;c[j+4>>2]=0;e=j}else{a[j>>0]=0;a[e>>0]=0;e=j}Nl(j);c[e>>2]=c[n>>2];c[e+4>>2]=c[n+4>>2];c[e+8>>2]=c[n+8>>2];c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;Ml(n);pb[c[(c[b>>2]|0)+24>>2]&63](n,b);e=k+8+3|0;if((a[e>>0]|0)<0){c[c[k>>2]>>2]=0;c[k+4>>2]=0}else{c[k>>2]=0;a[e>>0]=0}Ul(k);c[k>>2]=c[n>>2];c[k+4>>2]=c[n+4>>2];c[k+8>>2]=c[n+8>>2];c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;Tl(n);e=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0}else{b=qg(e,23700)|0;if(d){pb[c[(c[b>>2]|0)+44>>2]&63](n,b);e=c[n>>2]|0;a[f>>0]=e;a[f+1>>0]=e>>8;a[f+2>>0]=e>>16;a[f+3>>0]=e>>24;pb[c[(c[b>>2]|0)+32>>2]&63](n,b);e=l+8+3|0;if((a[e>>0]|0)<0){c[c[l>>2]>>2]=0;c[l+4>>2]=0}else{c[l>>2]=0;a[e>>0]=0}Ul(l);c[l>>2]=c[n>>2];c[l+4>>2]=c[n+4>>2];c[l+8>>2]=c[n+8>>2];c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;Tl(n)}else{pb[c[(c[b>>2]|0)+40>>2]&63](n,b);e=c[n>>2]|0;a[f>>0]=e;a[f+1>>0]=e>>8;a[f+2>>0]=e>>16;a[f+3>>0]=e>>24;pb[c[(c[b>>2]|0)+28>>2]&63](n,b);e=l+8+3|0;if((a[e>>0]|0)<0){c[c[l>>2]>>2]=0;c[l+4>>2]=0}else{c[l>>2]=0;a[e>>0]=0}Ul(l);c[l>>2]=c[n>>2];c[l+4>>2]=c[n+4>>2];c[l+8>>2]=c[n+8>>2];c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;Tl(n)}c[g>>2]=sb[c[(c[b>>2]|0)+12>>2]&63](b)|0;c[h>>2]=sb[c[(c[b>>2]|0)+16>>2]&63](b)|0;pb[c[(c[b>>2]|0)+20>>2]&63](n,b);e=j+11|0;if((a[e>>0]|0)<0){a[c[j>>2]>>0]=0;c[j+4>>2]=0;e=j}else{a[j>>0]=0;a[e>>0]=0;e=j}Nl(j);c[e>>2]=c[n>>2];c[e+4>>2]=c[n+4>>2];c[e+8>>2]=c[n+8>>2];c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;Ml(n);pb[c[(c[b>>2]|0)+24>>2]&63](n,b);e=k+8+3|0;if((a[e>>0]|0)<0){c[c[k>>2]>>2]=0;c[k+4>>2]=0}else{c[k>>2]=0;a[e>>0]=0}Ul(k);c[k>>2]=c[n>>2];c[k+4>>2]=c[n+4>>2];c[k+8>>2]=c[n+8>>2];c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;Tl(n);e=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0}c[m>>2]=e;i=o;return}function Wj(b,d,e,f,g,h,i,j,k,l,m,n,o,p,q){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;p=p|0;q=q|0;var r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;c[e>>2]=b;C=p+8+3|0;K=p+4|0;D=o+8+3|0;E=o+4|0;F=(f&512|0)==0;G=(q|0)>0;H=n+11|0;I=n+4|0;A=0;do{switch(a[k+A>>0]|0){case 0:{c[d>>2]=c[e>>2];break}case 1:{c[d>>2]=c[e>>2];y=yb[c[(c[i>>2]|0)+44>>2]&15](i,32)|0;z=c[e>>2]|0;c[e>>2]=z+4;c[z>>2]=y;break}case 3:{z=a[C>>0]|0;r=z<<24>>24<0;if((r?c[K>>2]|0:z&255)|0){y=c[(r?c[p>>2]|0:p)>>2]|0;z=c[e>>2]|0;c[e>>2]=z+4;c[z>>2]=y}break}case 2:{v=a[D>>0]|0;r=v<<24>>24<0;v=r?c[E>>2]|0:v&255;if(!(F|(v|0)==0)){u=r?c[o>>2]|0:o;s=u+(v<<2)|0;t=c[e>>2]|0;r=t;while(1){c[r>>2]=c[u>>2];u=u+4|0;if((u|0)==(s|0))break;else r=r+4|0}c[e>>2]=t+(v<<2)}break}case 4:{z=c[e>>2]|0;g=j?g+4|0:g;a:do if(g>>>0<h>>>0){r=g;do{if(!(lb[c[(c[i>>2]|0)+12>>2]&31](i,2048,c[r>>2]|0)|0))break a;r=r+4|0}while(r>>>0<h>>>0)}else r=g;while(0);if(G){if(r>>>0>g>>>0){u=q;s=c[e>>2]|0;do{r=r+-4|0;t=s;s=s+4|0;c[t>>2]=c[r>>2];t=u;u=u+-1|0;t=(t|0)>1}while(r>>>0>g>>>0&t);c[e>>2]=s;if(t){s=u;J=20}else w=0}else{s=q;J=20}if((J|0)==20){J=0;w=yb[c[(c[i>>2]|0)+44>>2]&15](i,48)|0;u=s;s=c[e>>2]|0}t=s+4|0;if((u|0)>0){v=t;while(1){c[s>>2]=w;t=v+4|0;if((u|0)>1){s=v;u=u+-1|0;v=t}else{s=v;break}}}c[e>>2]=t;c[s>>2]=l}if((r|0)==(g|0)){x=yb[c[(c[i>>2]|0)+44>>2]&15](i,48)|0;y=c[e>>2]|0;r=y+4|0;c[e>>2]=r;c[y>>2]=x}else{y=a[H>>0]|0;x=y<<24>>24<0;y=x?c[I>>2]|0:y&255;if(!y)s=-1;else s=a[(x?c[n>>2]|0:n)>>0]|0;t=0;u=0;v=c[e>>2]|0;while(1){if((u|0)==(s|0)){u=v+4|0;c[e>>2]=u;c[v>>2]=m;t=t+1|0;if(t>>>0<y>>>0){s=a[(x?c[n>>2]|0:n)+t>>0]|0;s=s<<24>>24==127?-1:s<<24>>24;w=0}else w=0}else{w=u;u=v}r=r+-4|0;L=c[r>>2]|0;v=u+4|0;c[e>>2]=v;c[u>>2]=L;if((r|0)==(g|0)){r=v;break}else u=w+1|0}}if((z|0)!=(r|0)?(B=r+-4|0,z>>>0<B>>>0):0){r=z;s=B;do{L=c[r>>2]|0;c[r>>2]=c[s>>2];c[s>>2]=L;r=r+4|0;s=s+-4|0}while(r>>>0<s>>>0)}break}default:{}}A=A+1|0}while((A|0)!=4);r=a[C>>0]|0;g=r<<24>>24<0;r=g?c[K>>2]|0:r&255;if(r>>>0>1){s=g?c[p>>2]|0:p;v=s+4|0;r=s+(r<<2)|0;s=c[e>>2]|0;t=r;g=s;u=v;while(1){c[g>>2]=c[u>>2];u=u+4|0;if((u|0)==(r|0))break;else g=g+4|0}c[e>>2]=s+((t-v|0)>>>2<<2)}switch((f&176)<<24>>24){case 32:{c[d>>2]=c[e>>2];break}case 16:break;default:c[d>>2]=b}return}function Xj(a){a=a|0;return}function Yj(a){a=a|0;wf(a);return}function Zj(a,b,c){a=a|0;b=b|0;c=c|0;return -1}function _j(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0;g=i;i=i+16|0;f=g;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;e=a[h+11>>0]|0;j=e<<24>>24<0;d=j?c[h>>2]|0:h;h=j?c[h+4>>2]|0:e&255;e=d+h|0;if((h|0)>0){do{Rl(f,a[d>>0]|0);d=d+1|0}while(d>>>0<e>>>0);d=(a[f+11>>0]|0)<0?c[f>>2]|0:f}else d=f;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;j=Le(d)|0;e=d+j|0;if((j|0)>0)do{Rl(b,a[d>>0]|0);d=d+1|0}while(d>>>0<e>>>0);Ml(f);i=g;return}function $j(a,b){a=a|0;b=b|0;return}function ak(a){a=a|0;return}function bk(a){a=a|0;wf(a);return}function ck(a,b,c){a=a|0;b=b|0;c=c|0;return -1}function dk(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;q=i;i=i+176|0;m=q+168|0;n=q+40|0;o=q+36|0;p=q+32|0;k=q;j=q+24|0;l=q+16|0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[j+4>>2]=0;c[j>>2]=7660;f=a[h+8+3>>0]|0;g=f<<24>>24<0;d=g?c[h>>2]|0:h;h=g?c[h+4>>2]|0:f&255;f=d+(h<<2)|0;g=n+32|0;if((h|0)>0){e=7660;while(1){c[p>>2]=d;e=vb[c[e+12>>2]&15](j,m,d,f,p,n,g,o)|0;if(n>>>0<(c[o>>2]|0)>>>0){d=n;do{Rl(k,a[d>>0]|0);d=d+1|0}while(d>>>0<(c[o>>2]|0)>>>0)}d=c[p>>2]|0;if(!((e|0)!=2&d>>>0<f>>>0))break;e=c[j>>2]|0}d=(a[k+11>>0]|0)<0?c[k>>2]|0:k}else d=k;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[l+4>>2]=0;c[l>>2]=7708;j=Le(d)|0;f=d+j|0;g=f;h=n+128|0;a:do if((j|0)>0){e=7708;while(1){c[p>>2]=d;e=vb[c[e+16>>2]&15](l,m,d,(g-d|0)>32?d+32|0:f,p,n,h,o)|0;if(n>>>0<(c[o>>2]|0)>>>0){d=n;do{Xl(b,c[d>>2]|0);d=d+4|0}while(d>>>0<(c[o>>2]|0)>>>0)}d=c[p>>2]|0;if(!((e|0)!=2&d>>>0<f>>>0))break a;e=c[l>>2]|0}}while(0);Ml(k);i=q;return}function ek(a,b){a=a|0;b=b|0;return}function fk(a){a=a|0;return}function gk(a){a=a|0;wf(a);return}function hk(b,d,e,f,g,h,i,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;var k=0;b=e;k=i;a:do if(e>>>0<f>>>0){d=e;while(1){e=c[d>>2]|0;if(e>>>0>1114111|(e&-2048|0)==55296){d=2;break a}do if(e>>>0>=128){if(e>>>0<2048){d=h;if((k-h|0)<2){d=1;break a}a[d>>0]=e>>>6|192;a[d+1>>0]=e&63|128;h=d+2|0;break}d=h;i=k-h|0;if(e>>>0<65536){if((i|0)<3){d=1;break a}a[d>>0]=e>>>12|224;a[d+1>>0]=e>>>6&63|128;a[d+2>>0]=e&63|128;h=d+3|0;break}else{if((i|0)<4){d=1;break a}a[d>>0]=e>>>18|240;a[d+1>>0]=e>>>12&63|128;a[d+2>>0]=e>>>6&63|128;a[d+3>>0]=e&63|128;h=d+4|0;break}}else{d=h;if((k-h|0)<1){d=1;break a}a[d>>0]=e;h=d+1|0}while(0);d=b+4|0;b=d;if(d>>>0>=f>>>0){d=0;break}}}else d=0;while(0);c[g>>2]=b;c[j>>2]=h;return d|0}function ik(b,e,f,g,h,i,j,k){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0;b=f;e=i;r=g;a:do if(f>>>0<g>>>0){q=i;while(1){if(q>>>0>=j>>>0){i=1;break a}n=a[f>>0]|0;p=n&255;do if(n<<24>>24>-1){c[q>>2]=p;i=f+1|0}else{if((n&255)<194){i=2;break a}if((n&255)<224){if((r-f|0)<2){i=1;break a}i=d[f+1>>0]|0;if((i&192|0)!=128){i=2;break a}c[q>>2]=i&63|p<<6&1984;i=f+2|0;break}if((n&255)<240){if((r-f|0)<3){i=1;break a}l=a[f+1>>0]|0;i=a[f+2>>0]|0;switch(n<<24>>24){case -32:{if((l&-32)<<24>>24!=-96){i=2;break a}break}case -19:{if((l&-32)<<24>>24!=-128){i=2;break a}break}default:if((l&-64)<<24>>24!=-128){i=2;break a}}i=i&255;if((i&192|0)!=128){i=2;break a}c[q>>2]=(l&255)<<6&4032|p<<12&61440|i&63;i=f+3|0;break}if((n&255)>=245){i=2;break a}if((r-f|0)<4){i=1;break a}o=a[f+1>>0]|0;i=a[f+2>>0]|0;m=a[f+3>>0]|0;switch(n<<24>>24){case -16:{if((o+112&255)>=48){i=2;break a}break}case -12:{if((o&-16)<<24>>24!=-128){i=2;break a}break}default:if((o&-64)<<24>>24!=-128){i=2;break a}}l=i&255;if((l&192|0)!=128){i=2;break a}i=m&255;if((i&192|0)!=128){i=2;break a}i=(o&255)<<12&258048|p<<18&1835008|l<<6&4032|i&63;if(i>>>0>1114111){i=2;break a}c[q>>2]=i;i=f+4|0}while(0);b=i;q=e+4|0;e=q;if(i>>>0>=g>>>0){i=0;break}else f=i}}else i=0;while(0);c[h>>2]=b;c[k>>2]=e;return i|0}function jk(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;c[f>>2]=d;return 3}function kk(a){a=a|0;return 0}function lk(a){a=a|0;return 0}function mk(b,c,d,e,f){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0;m=e;a:do if((f|0)!=0&d>>>0<e>>>0){l=0;b=d;b:while(1){k=a[b>>0]|0;i=k&255;do if(k<<24>>24<=-1){if((k&255)<194){c=32;break a}if((k&255)<224){if((m-b|0)<2){c=32;break a}if((a[b+1>>0]&-64)<<24>>24!=-128){c=32;break a}b=b+2|0;break}if((k&255)<240){h=b;if((m-h|0)<3){c=32;break a}c=a[b+1>>0]|0;g=a[b+2>>0]|0;switch(k<<24>>24){case -32:{if((c&-32)<<24>>24!=-96){c=13;break b}break}case -19:{if((c&-32)<<24>>24!=-128){c=15;break b}break}default:if((c&-64)<<24>>24!=-128){c=17;break b}}if((g&-64)<<24>>24!=-128){c=32;break a}b=b+3|0;break}if((k&255)>=245){c=32;break a}j=b;if((m-j|0)<4){c=32;break a}c=a[b+1>>0]|0;g=a[b+2>>0]|0;h=a[b+3>>0]|0;switch(k<<24>>24){case -16:{if((c+112&255)>=48){c=24;break b}break}case -12:{if((c&-16)<<24>>24!=-128){c=26;break b}break}default:if((c&-64)<<24>>24!=-128){c=28;break b}}if(!((g&-64)<<24>>24==-128&(h&-64)<<24>>24==-128)){c=32;break a}if(((c&255)<<12&196608|i<<18&1835008)>>>0>1114111){c=32;break a}else b=b+4|0}else b=b+1|0;while(0);l=l+1|0;if(!(l>>>0<f>>>0&b>>>0<e>>>0)){c=32;break a}}if((c|0)==13){b=h-d|0;break}else if((c|0)==15){b=h-d|0;break}else if((c|0)==17){b=h-d|0;break}else if((c|0)==24){b=j-d|0;break}else if((c|0)==26){b=j-d|0;break}else if((c|0)==28){b=j-d|0;break}}else{b=d;c=32}while(0);if((c|0)==32)b=b-d|0;return b|0}function nk(a){a=a|0;return 4}function ok(a){a=a|0;wf(a);return}function pk(a,b,d,e,f,g,h,i){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;c[f>>2]=d;c[i>>2]=g;return 3}function qk(a,b,d,e,f,g,h,i){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;c[f>>2]=d;c[i>>2]=g;return 3}function rk(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;c[f>>2]=d;return 3}function sk(a){a=a|0;return 1}function tk(a){a=a|0;return 1}function uk(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;d=d-c|0;return (d>>>0<e>>>0?d:e)|0}function vk(a){a=a|0;return 1}function wk(b,d,e,f,g,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;A=i;i=i+272|0;x=A+256|0;y=A;a:do if((e|0)!=(f|0)){d=e;while(1){if(!(c[d>>2]|0)){l=d;break}d=d+4|0;if((d|0)==(f|0)){l=f;break}}c[k>>2]=h;c[g>>2]=e;w=j;if((h|0)==(j|0))r=67;else{z=b+8|0;d=h;b:while(1){n=l-e>>2;u=rf(c[z>>2]|0)|0;b=c[g>>2]|0;v=(d|0)!=0;o=v?w-d|0:256;h=v?d:y;p=b;c:do if((o|0)!=0&(b|0)!=0){t=0;d:while(1){m=n>>>0>=o>>>0;if(!(n>>>0>32|m)){m=t;q=n;break c}m=m?o:n;q=n-m|0;e:do if(h){f:do if(m>>>0>3){n=h;p=m;s=b;r=b;while(1){b=c[r>>2]|0;if((b+-1|0)>>>0>126){if(!b)break;b=Xe(n,b)|0;if((b|0)==-1){b=s;r=35;break d}n=n+b|0;p=p-b|0;b=r}else{a[n>>0]=b;n=n+1|0;p=p+-1|0;b=s}r=b+4|0;b=r;if(p>>>0<=3)break f;else s=b}a[n>>0]=0;m=m-p|0;b=0;r=36;break e}else{n=h;p=m}while(0);if(p){s=b;r=b;while(1){b=c[r>>2]|0;if((b+-1|0)>>>0>126){if(!b){r=28;break}b=Xe(x,b)|0;if((b|0)==-1){b=s;r=35;break d}if(p>>>0<b>>>0){r=31;break}Xe(n,c[r>>2]|0)|0;n=n+b|0;p=p-b|0;b=r}else{a[n>>0]=b;n=n+1|0;p=p+-1|0;b=s}r=b+4|0;b=r;if(!p){r=36;break e}else s=b}if((r|0)==28){a[n>>0]=0;m=m-p|0;b=0;r=36;break}else if((r|0)==31){m=m-p|0;b=s;r=36;break}}else r=36}else{m=b;n=c[m>>2]|0;if(!n){m=0;break}else{p=m;m=0}while(1){if(n>>>0>127){n=Xe(x,n)|0;if((n|0)==-1){h=0;r=35;break d}}else n=1;m=n+m|0;p=p+4|0;n=c[p>>2]|0;if(!n){r=36;break}}}while(0);if((r|0)==36){r=0;if((m|0)==-1){n=b;break}}p=(h|0)==(y|0);o=o-(p?0:m)|0;h=p?h:h+m|0;m=m+t|0;p=b;if((o|0)!=0&(b|0)!=0){t=m;n=q}else break c}if((r|0)==35){r=0;n=b}m=-1;o=0;b=n;p=n}else{m=0;q=n}while(0);g:do if((p|0)!=0?(o|0)!=0&(q|0)!=0:0){while(1){n=Xe(h,c[p>>2]|0)|0;if((n+1|0)>>>0<2)break;p=p+4|0;q=q+-1|0;o=o-n|0;m=m+1|0;b=p;if(!((q|0)!=0&(o|0)!=0)){h=m;break g}else h=h+n|0}t=(n|0)==0;h=t?m:-1;b=t?0:b}else h=m;while(0);if(v)c[g>>2]=b;if(u|0)c[(en()|0)+184>>2]=u;switch(h|0){case 0:{e=1;break a}case -1:break b;default:{}}d=(c[k>>2]|0)+h|0;c[k>>2]=d;if((d|0)==(j|0)){r=66;break}if((l|0)==(f|0)){e=c[g>>2]|0;l=f}else{e=rf(c[z>>2]|0)|0;if(e|0)c[(en()|0)+184>>2]=e;v=c[k>>2]|0;e=v;if((w|0)==(v|0)){e=1;break a}c[k>>2]=e+1;a[e>>0]=0;e=(c[g>>2]|0)+4|0;c[g>>2]=e;h:do if((e|0)==(f|0))l=f;else{d=e;while(1){if(!(c[d>>2]|0)){l=d;break h}d=d+4|0;if((d|0)==(f|0)){l=f;break}}}while(0);d=c[k>>2]|0}if((d|0)==(j|0)|(e|0)==(f|0)){r=67;break a}}if((r|0)==66){e=c[g>>2]|0;r=67;break}c[k>>2]=d;i:do if((e|0)!=(c[g>>2]|0))do{f=c[e>>2]|0;l=rf(c[z>>2]|0)|0;d=Xe(d,f)|0;if(l|0)c[(en()|0)+184>>2]=l;if((d|0)==-1)break i;d=(c[k>>2]|0)+d|0;c[k>>2]=d;e=e+4|0}while((e|0)!=(c[g>>2]|0));while(0);c[g>>2]=e;e=2}}else{c[k>>2]=h;c[g>>2]=e;r=67}while(0);if((r|0)==67)e=(e|0)!=(f|0)&1;i=A;return e|0}function xk(b,d,e,f,g,h,j,k){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;C=i;i=i+1040|0;x=C+16|0;y=C+8|0;A=C;a:do if((e|0)!=(f|0)){l=e;while(1){if(!(a[l>>0]|0))break;l=l+1|0;if((l|0)==(f|0)){l=f;break}}c[k>>2]=h;c[g>>2]=e;w=j;if((h|0)==(j|0))B=46;else{z=b+8|0;while(1){t=d;o=c[t+4>>2]|0;v=A;c[v>>2]=c[t>>2];c[v+4>>2]=o;v=l;o=v-e|0;t=rf(c[z>>2]|0)|0;b=c[g>>2]|0;c[y>>2]=b;u=(h|0)!=0;q=u?w-h>>2:256;n=u?h:x;p=b;b:do if((q|0)!=0&(b|0)!=0){m=0;s=q;r=p;while(1){p=o>>>2;q=p>>>0>=s>>>0;if(!(o>>>0>131|q)){q=s;p=r;break b}b=q?s:p;o=o-b|0;b=_e(n,y,b,d)|0;if((b|0)==-1)break;p=(n|0)==(x|0);q=s-(p?0:b)|0;n=p?n:n+(b<<2)|0;m=b+m|0;p=c[y>>2]|0;b=p;if((q|0)!=0&(p|0)!=0){s=q;r=p}else break b}p=c[y>>2]|0;m=-1;q=0;b=p}else m=0;while(0);c:do if((p|0)!=0?(q|0)!=0&(o|0)!=0:0){r=n;while(1){n=$e(r,p,o,d)|0;if((n+2|0)>>>0<3)break;p=p+n|0;c[y>>2]=p;o=o-n|0;q=q+-1|0;m=m+1|0;b=p;if(!((q|0)!=0&(o|0)!=0))break c;else r=r+4|0}switch(n|0){case -1:{m=-1;break c}case 0:{c[y>>2]=0;b=0;break c}default:{c[d>>2]=0;break c}}}while(0);if(u)c[g>>2]=b;if(t|0)c[(en()|0)+184>>2]=t;if((m|0)==-1){B=24;break}h=(c[k>>2]|0)+(m<<2)|0;c[k>>2]=h;if((h|0)==(j|0)){B=43;break}e=c[g>>2]|0;if((l|0)==(f|0))l=f;else{l=rf(c[z>>2]|0)|0;e=$e(h,e,1,d)|0;if(l|0)c[(en()|0)+184>>2]=l;if(e|0){e=2;break}c[k>>2]=(c[k>>2]|0)+4;e=(c[g>>2]|0)+1|0;c[g>>2]=e;d:do if((e|0)==(f|0))l=f;else{l=e;while(1){if(!(a[l>>0]|0))break d;l=l+1|0;if((l|0)==(f|0)){l=f;break}}}while(0);h=c[k>>2]|0}if((h|0)==(j|0)|(e|0)==(f|0)){B=46;break a}}if((B|0)==43){e=c[g>>2]|0;B=46;break}e:do if((B|0)==24){c[k>>2]=h;f:do if((e|0)!=(c[g>>2]|0)){g:while(1){l=rf(c[z>>2]|0)|0;h=$e(h,e,v-e|0,A)|0;if(l|0)c[(en()|0)+184>>2]=l;switch(h|0){case -1:{B=29;break g}case -2:{B=30;break g}case 0:{e=e+1|0;break}default:e=e+h|0}h=(c[k>>2]|0)+4|0;c[k>>2]=h;if((e|0)==(c[g>>2]|0))break f}if((B|0)==29){c[g>>2]=e;e=2;break e}else if((B|0)==30){c[g>>2]=e;e=1;break e}}while(0);c[g>>2]=e;e=(e|0)!=(f|0)&1}while(0)}}else{c[k>>2]=h;c[g>>2]=e;B=46}while(0);if((B|0)==46)e=(e|0)!=(f|0)&1;i=C;return e|0}function yk(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;c[f>>2]=d;a=rf(c[a+8>>2]|0)|0;if(a|0)c[(en()|0)+184>>2]=a;return 0}function zk(a){a=a|0;var b=0,d=0;a=a+8|0;b=rf(c[a>>2]|0)|0;if(b|0)c[(en()|0)+184>>2]=b;d=c[a>>2]|0;if(d){a=(en()|0)+184|0;b=c[a>>2]|0;c[a>>2]=d;if(!b)a=0;else{c[a>>2]=b;a=0}}else a=1;return a|0}function Ak(a){a=a|0;return 0}function Bk(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0;k=e;a:do if((d|0)==(e|0)|(f|0)==0)a=0;else{j=a+8|0;i=0;a=0;g=d;while(1){h=rf(c[j>>2]|0)|0;d=$e(0,g,k-g|0,b)|0;if(h|0)c[(en()|0)+184>>2]=h;switch(d|0){case -2:case -1:break a;case 0:{g=g+1|0;d=1;break}default:g=g+d|0}a=d+a|0;i=i+1|0;if((g|0)==(e|0)|i>>>0>=f>>>0)break a}}while(0);return a|0}function Ck(a){a=a|0;var b=0,d=0;a=c[a+8>>2]|0;if(a){b=(en()|0)+184|0;d=c[b>>2]|0;c[b>>2]=a;if(!d)a=4;else{c[b>>2]=d;a=4}}else a=1;return a|0}function Dk(a){a=a|0;var b=0;c[a>>2]=7756;a=a+8|0;b=c[a>>2]|0;if((b|0)!=(sg()|0))wf(c[a>>2]|0);return}function Ek(a){a=a|0;Dk(a);wf(a);return}
function Jd(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0;P=i;i=i+48|0;O=P+16|0;N=P;J=P+32|0;c[J>>2]=d;p=d;q=c[p>>2]|0;p=c[p+4>>2]|0;o=d+32|0;m=c[o>>2]|0;o=c[o+4>>2]|0;D=(p|0)<(o|0)|(p|0)==(o|0)&q>>>0<m>>>0;n=D?q:m;l=D?p:o;k=D&1;q=D?m:q;p=D?o:p;D=d;while(1){f=c[D+104>>2]|0;if(!f){r=4;break}K=f+56|0;if((c[K>>2]|0)==0&(c[K+4>>2]|0)==0)D=f;else{K=0;break}}do if((r|0)==4){f=c[D+96>>2]|0;K=f+32|0;j=D+32|0;g=c[j>>2]|0;j=c[j+4>>2]|0;if((((c[K>>2]|0)==(g|0)?(c[K+4>>2]|0)==(j|0):0)?(C=f+40|0,K=D+40|0,(c[C>>2]|0)==(c[K>>2]|0)?(c[C+4>>2]|0)==(c[K+4>>2]|0):0):0)?(c[f+104>>2]|0)==0:0)r=10;else{f=c[D+100>>2]|0;K=f+32|0;if((((c[K>>2]|0)==(g|0)?(c[K+4>>2]|0)==(j|0):0)?(C=f+40|0,K=D+40|0,(c[C>>2]|0)==(c[K>>2]|0)?(c[C+4>>2]|0)==(c[K+4>>2]|0):0):0)?(c[f+104>>2]|0)==0:0)r=10;else f=0}if((r|0)==10){if((c[f+92>>2]|0)==-2){K=0;break}if((c[f+108>>2]|0)==(c[f+112>>2]|0)?(K=f+56|0,!((c[K>>2]|0)==0&(c[K+4>>2]|0)==0)):0){K=0;break}}K=f}while(0);y=O+8|0;z=O+8|0;C=K+92|0;r=n;g=o;a:while(1){x=(k|0)==1;A=d+108|0;B=d+112|0;f=c[(x?A:B)>>2]|0;o=(d|0)!=(D|0);j=(k|0)==0;s=d+32|0;u=d+104|0;w=d+92|0;v=d+80|0;t=d+24|0;k=(f|0)==0;b:do if(x){if(!k){if(o){k=g;while(1){l=f+16|0;g=l;j=c[g>>2]|0;g=c[g+4>>2]|0;if(((j|0)==(m|0)&(g|0)==(k|0)?(G=c[u>>2]|0,G|0):0)?+h[f+64>>3]<+h[G+64>>3]:0)break b;k=c[f+108>>2]|0;if((g|0)>(p|0)|(g|0)==(p|0)&j>>>0>q>>>0)break b;if((c[w>>2]|0)>-1?(c[v>>2]|0)!=0:0){de(b,d,e);g=l;j=c[g>>2]|0;g=c[g+4>>2]|0}o=t;n=c[o>>2]|0;o=c[o+4>>2]|0;r=O;c[r>>2]=j;c[r+4>>2]=g;r=y;c[r>>2]=n;c[r+4>>2]=o;Wd(b,d,f,O,1);Xd(b,d,f);if(!k)break b;r=s;f=k;m=c[r>>2]|0;k=c[r+4>>2]|0}}while(1){j=f+16|0;l=j;k=c[l>>2]|0;l=c[l+4>>2]|0;if(((k|0)==(m|0)&(l|0)==(g|0)?(H=c[u>>2]|0,H|0):0)?+h[f+64>>3]<+h[H+64>>3]:0)break b;g=c[f+108>>2]|0;if((l|0)>(p|0)|(l|0)==(p|0)&k>>>0>q>>>0)break b;if((c[w>>2]|0)>-1?c[v>>2]|0:0)de(b,D,e);if((f|0)==(K|0)){r=52;break a}l=j;m=c[l+4>>2]|0;o=t;n=c[o>>2]|0;o=c[o+4>>2]|0;r=O;c[r>>2]=c[l>>2];c[r+4>>2]=m;r=y;c[r>>2]=n;c[r+4>>2]=o;Wd(b,D,f,O,1);Xd(b,D,f);if(!g)break b;r=s;f=g;m=c[r>>2]|0;g=c[r+4>>2]|0}}}else if(!k){if(!j)if(o)while(1){t=f+16|0;if((((c[t>>2]|0)==(m|0)?(c[t+4>>2]|0)==(g|0):0)?(F=c[u>>2]|0,F|0):0)?+h[f+64>>3]<+h[F+64>>3]:0)break b;f=c[f+112>>2]|0;if(!f)break b}else while(1){t=f+16|0;if((((c[t>>2]|0)==(m|0)?(c[t+4>>2]|0)==(g|0):0)?(I=c[u>>2]|0,I|0):0)?+h[f+64>>3]<+h[I+64>>3]:0)break b;f=c[f+112>>2]|0;if(!f)break b}while(1){j=f+16|0;n=j;k=c[n>>2]|0;n=c[n+4>>2]|0;if(((k|0)==(m|0)&(n|0)==(g|0)?(E=c[u>>2]|0,E|0):0)?+h[f+64>>3]<+h[E+64>>3]:0)break b;g=c[f+112>>2]|0;if((n|0)<(l|0)|(n|0)==(l|0)&k>>>0<r>>>0)break b;if((c[w>>2]|0)>-1?c[v>>2]|0:0)de(b,d,e);if(!(o|(f|0)!=(K|0))){r=59;break a}k=j;m=c[k+4>>2]|0;p=t;n=c[p>>2]|0;p=c[p+4>>2]|0;q=O;c[q>>2]=c[k>>2];c[q+4>>2]=m;q=z;c[q>>2]=n;c[q+4>>2]=p;Wd(b,f,d,O,1);Xd(b,d,f);if(!g)break b;q=s;f=g;m=c[q>>2]|0;g=c[q+4>>2]|0}}while(0);if((c[w>>2]|0)>-1?c[v>>2]|0:0)de(b,d,e);f=c[u>>2]|0;if(!f){r=117;break}B=f+56|0;if(!((c[B>>2]|0)==0&(c[B+4>>2]|0)==0)){r=86;break}Pd(b,J);f=c[J>>2]|0;if((c[f+92>>2]|0)>-1)Qd(b,f,f)|0;p=f;q=c[p>>2]|0;p=c[p+4>>2]|0;x=f+32|0;B=c[x>>2]|0;x=c[x+4>>2]|0;A=(p|0)<(x|0)|(p|0)==(x|0)&q>>>0<B>>>0;k=A&1;d=f;l=A?p:x;r=A?q:B;m=B;g=x;p=A?x:p;q=A?B:q}if((r|0)==52){Wd(b,D,K,K+32|0,0);if((c[C>>2]|0)<=-1){i=P;return}}else if((r|0)==59){Wd(b,K,D,K+32|0,0);if((c[C>>2]|0)<=-1){i=P;return}}else if((r|0)==86){if((c[w>>2]|0)<=-1){Pd(b,J);i=P;return}d=Qd(b,d,d+32|0)|0;Pd(b,J);k=c[J>>2]|0;if(!(c[k+80>>2]|0)){i=P;return}f=c[k+112>>2]|0;j=c[k+108>>2]|0;if((((((f|0?(J=f+16|0,K=k,(c[J>>2]|0)==(c[K>>2]|0)?(c[J+4>>2]|0)==(c[K+4>>2]|0):0):0)?(M=f+24|0,L=c[M>>2]|0,M=c[M+4>>2]|0,K=k+8|0,(L|0)==(c[K>>2]|0)?(M|0)==(c[K+4>>2]|0):0):0)?c[f+80>>2]|0:0)?(c[f+92>>2]|0)>-1:0)?(K=f+40|0,J=c[K+4>>2]|0,(M|0)>(J|0)|((M|0)==(J|0)?L>>>0>(c[K>>2]|0)>>>0:0)):0)?Sd(k,f,(a[b+(c[(c[b>>2]|0)+-12>>2]|0)+12>>0]|0)!=0)|0:0){g=Qd(b,f,k)|0;f=k+32|0;c[N>>2]=c[f>>2];c[N+4>>2]=c[f+4>>2];c[N+8>>2]=c[f+8>>2];c[N+12>>2]=c[f+12>>2];f=vf(24)|0;c:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){j=0;break c}ub[f&3]();f=vf(24)|0;if(f|0){j=f;break}}else j=f;while(0);f=j+8|0;c[O>>2]=j;c[j>>2]=d;c[j+4>>2]=g;c[f>>2]=c[N>>2];c[f+4>>2]=c[N+4>>2];c[f+8>>2]=c[N+8>>2];c[f+12>>2]=c[N+12>>2];f=b+20|0;g=c[f>>2]|0;if((g|0)==(c[b+24>>2]|0))Rd(b+16|0,O);else{c[g>>2]=j;c[f>>2]=(c[f>>2]|0)+4}i=P;return}if(!j){i=P;return}L=j+16|0;M=k;if(!((c[L>>2]|0)==(c[M>>2]|0)?(c[L+4>>2]|0)==(c[M+4>>2]|0):0)){i=P;return}g=j+24|0;f=c[g>>2]|0;g=c[g+4>>2]|0;M=k+8|0;if(!((f|0)==(c[M>>2]|0)?(g|0)==(c[M+4>>2]|0):0)){i=P;return}if(!(c[j+80>>2]|0)){i=P;return}if((c[j+92>>2]|0)<=-1){i=P;return}M=j+40|0;L=c[M+4>>2]|0;if(!((g|0)>(L|0)|((g|0)==(L|0)?f>>>0>(c[M>>2]|0)>>>0:0))){i=P;return}if(!(Sd(k,j,(a[b+(c[(c[b>>2]|0)+-12>>2]|0)+12>>0]|0)!=0)|0)){i=P;return}g=Qd(b,j,k)|0;f=k+32|0;c[N>>2]=c[f>>2];c[N+4>>2]=c[f+4>>2];c[N+8>>2]=c[f+8>>2];c[N+12>>2]=c[f+12>>2];f=vf(24)|0;d:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){j=0;break d}ub[f&3]();f=vf(24)|0;if(f|0){j=f;break}}else j=f;while(0);f=j+8|0;c[O>>2]=j;c[j>>2]=d;c[j+4>>2]=g;c[f>>2]=c[N>>2];c[f+4>>2]=c[N+4>>2];c[f+8>>2]=c[N+8>>2];c[f+12>>2]=c[N+12>>2];f=b+20|0;g=c[f>>2]|0;if((g|0)==(c[b+24>>2]|0))Rd(b+16|0,O);else{c[g>>2]=j;c[f>>2]=(c[f>>2]|0)+4}i=P;return}else if((r|0)==117){if(!K){if((c[w>>2]|0)>-1)Qd(b,d,d+32|0)|0;f=c[B>>2]|0;g=c[A>>2]|0;j=(f|0)!=0;k=(g|0)!=0;if(!(j|k)?(c[b+68>>2]|0)!=(d|0):0){i=P;return}if(j)c[f+108>>2]=g;else c[b+68>>2]=g;if(k)c[g+112>>2]=f;c[A>>2]=0;c[B>>2]=0;i=P;return}if((c[C>>2]|0)<=-1){f=c[B>>2]|0;g=c[A>>2]|0;j=(f|0)!=0;k=(g|0)!=0;if(!(!(j|k)?(c[b+68>>2]|0)!=(d|0):0)){if(j)c[f+108>>2]=g;else c[b+68>>2]=g;if(k)c[g+112>>2]=f;c[A>>2]=0;c[B>>2]=0}f=K+112|0;g=c[f>>2]|0;j=K+108|0;k=c[j>>2]|0;d=(g|0)!=0;l=(k|0)!=0;if(!(d|l)?(c[b+68>>2]|0)!=(K|0):0){i=P;return}if(d)c[g+108>>2]=k;else c[b+68>>2]=k;if(l)c[k+112>>2]=g;c[j>>2]=0;c[f>>2]=0;i=P;return}f=d+32|0;if(x)Wd(b,d,K,f,0);else Wd(b,K,d,f,0);if((c[C>>2]|0)<=-1){i=P;return}l=Fa(16)|0;c[l>>2]=1712;d=l+4|0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;e:do if(!0){f=14328;r=126}else{f=14328;g=14328;while(1){if(!(a[f>>0]|0)){f=g;break e}f=f+1|0;g=f;if(!(g&3)){r=126;break}}}while(0);if((r|0)==126){while(1){g=c[f>>2]|0;if(!((g&-2139062144^-2139062144)&g+-16843009))f=f+4|0;else break}if((g&255)<<24>>24)do f=f+1|0;while((a[f>>0]|0)!=0)}k=f-14328|0;if(k>>>0>4294967279)Il();if(k>>>0<11){a[l+15>>0]=k;if(!k){P=d;P=P+k|0;a[P>>0]=0;$a(l|0,72,21)}else f=d}else{j=k+16&-16;g=(j|0)==0?1:j;f=vf(g)|0;f:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break f}ub[f&3]();f=vf(g)|0}while(!(f|0));while(0);c[d>>2]=f;c[l+12>>2]=j|-2147483648;c[l+8>>2]=k}Vm(f|0,14328,k|0)|0;P=f;P=P+k|0;a[P>>0]=0;$a(l|0,72,21)}l=Fa(16)|0;c[l>>2]=1712;d=l+4|0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;g:do if(!0){f=14328;r=63}else{f=14328;g=14328;while(1){if(!(a[f>>0]|0)){f=g;break g}f=f+1|0;g=f;if(!(g&3)){r=63;break}}}while(0);if((r|0)==63){while(1){g=c[f>>2]|0;if(!((g&-2139062144^-2139062144)&g+-16843009))f=f+4|0;else break}if((g&255)<<24>>24)do f=f+1|0;while((a[f>>0]|0)!=0)}k=f-14328|0;if(k>>>0>4294967279)Il();if(k>>>0<11){a[l+15>>0]=k;if(!k){P=d;P=P+k|0;a[P>>0]=0;$a(l|0,72,21)}else f=d}else{j=k+16&-16;g=(j|0)==0?1:j;f=vf(g)|0;h:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break h}ub[f&3]();f=vf(g)|0}while(!(f|0));while(0);c[d>>2]=f;c[l+12>>2]=j|-2147483648;c[l+8>>2]=k}Vm(f|0,14328,k|0)|0;P=f;P=P+k|0;a[P>>0]=0;$a(l|0,72,21)}function Kd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;i=a+4|0;j=c[a>>2]|0;k=(c[i>>2]|0)-j|0;h=k>>2;d=h+1|0;if(d>>>0>1073741823)Bl();l=a+8|0;f=(c[l>>2]|0)-j|0;g=f>>1;g=f>>2>>>0<536870911?(g>>>0<d>>>0?d:g):1073741823;if(!g)d=0;else{if(g>>>0>1073741823){l=Fa(4)|0;c[l>>2]=8316;$a(l|0,1336,91)}e=g<<2;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}f=d+(h<<2)|0;c[f>>2]=c[b>>2];e=f+(0-h<<2)|0;if((k|0)>0)Vm(e|0,j|0,k|0)|0;c[a>>2]=e;c[i>>2]=f+4;c[l>>2]=d+(g<<2);if(!j)return;wf(j);return}function Ld(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0.0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0;r=f;g=0;a:while(1){m=r;r=c[r+24>>2]|0;q=r+16|0;p=c[q>>2]|0;q=c[q+4>>2]|0;if((p|0)==(d|0)&(q|0)==(e|0)){j=r+8|0;i=c[j>>2]|0;j=c[j+4>>2]|0;if((i|0)==(a|0)&(j|0)==(b|0)){g=-1;s=17;break}k=m+16|0;l=c[k>>2]|0;k=c[k+4>>2]|0;if((l|0)==(d|0)&(k|0)==(e|0)){q=m+8|0;p=c[q+4>>2]|0;if(!(((j|0)>(b|0)|(j|0)==(b|0)&i>>>0>a>>>0)^((p|0)<(b|0)|((p|0)==(b|0)?(c[q>>2]|0)>>>0<a>>>0:0)))){g=-1;s=17;break}}else s=7}else{l=m+16|0;k=c[l+4>>2]|0;l=c[l>>2]|0;s=7}do if((s|0)==7){s=0;if(((q|0)<(e|0)|(q|0)==(e|0)&p>>>0<d>>>0)^((k|0)<(e|0)|(k|0)==(e|0)&l>>>0<d>>>0)){j=m+8|0;i=c[j>>2]|0;j=c[j+4>>2]|0;n=r+8|0;m=c[n>>2]|0;n=c[n+4>>2]|0;o=(n|0)>(b|0)|(n|0)==(b|0)&m>>>0>a>>>0;if((j|0)<(b|0)|(j|0)==(b|0)&i>>>0<a>>>0){if(!o)break;o=Km(i|0,j|0,a|0,b|0)|0;t=+(o>>>0)+4294967296.0*+(E|0);o=Km(p|0,q|0,d|0,e|0)|0;t=(+(o>>>0)+4294967296.0*+(E|0))*t;o=Km(m|0,n|0,a|0,b|0)|0;h=+(o>>>0)+4294967296.0*+(E|0);o=Km(l|0,k|0,d|0,e|0)|0;h=t-(+(o>>>0)+4294967296.0*+(E|0))*h;if(!(h!=0.0)){g=-1;s=17;break a}g=((q|0)>(k|0)|(q|0)==(k|0)&p>>>0>l>>>0)^h>0.0?g:1-g|0;break}if(o){g=1-g|0;break}o=Km(i|0,j|0,a|0,b|0)|0;t=+(o>>>0)+4294967296.0*+(E|0);o=Km(p|0,q|0,d|0,e|0)|0;t=(+(o>>>0)+4294967296.0*+(E|0))*t;o=Km(m|0,n|0,a|0,b|0)|0;h=+(o>>>0)+4294967296.0*+(E|0);o=Km(l|0,k|0,d|0,e|0)|0;h=t-(+(o>>>0)+4294967296.0*+(E|0))*h;if(!(h!=0.0)){g=-1;s=17;break a}g=((q|0)>(k|0)|(q|0)==(k|0)&p>>>0>l>>>0)^h>0.0?g:1-g|0}}while(0);if((r|0)==(f|0)){s=17;break}}if((s|0)==17)return g|0;return 0}function Md(a,b,c,d,e,f,g,h,i,j,k,l,m){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0;n=Km(c|0,d|0,g|0,h|0)|0;o=E;c=Km(e|0,f|0,i|0,j|0)|0;d=E;if(m){j=(o|0)<0;r=Tm(n|0,o|0,63)|0;i=(d|0)<0;p=Tm(c|0,d|0,63)|0;p=(r|0)==(p|0);r=Km(0,0,n|0,o|0)|0;r=j?r:n;j=j?E:o;q=Km(0,0,c|0,d|0)|0;c=i?q:c;i=i?E:d;q=Ym(i|0,0,j|0,0)|0;n=E;m=Ym(c|0,0,r|0,0)|0;o=E;j=Ym(c|0,0,j|0,0)|0;d=E;r=Ym(i|0,0,r|0,0)|0;r=Om(j|0,d|0,r|0,E|0)|0;n=Om(E|0,0,q|0,n|0)|0;q=E;r=Om(0,r|0,m|0,o|0)|0;d=E;m=Om(n|0,q|0,(d>>>0<o>>>0|(d|0)==(o|0)&r>>>0<m>>>0)&1|0,0)|0;o=E;q=Km(0,0,r|0,d|0)|0;n=E;j=Km(0,0,m|0,o|0)|0;i=(r|0)==0&(d|0)==0;o=p?o:i?E:~o;c=Km(a|0,b|0,e|0,f|0)|0;s=E;b=Km(g|0,h|0,k|0,l|0)|0;f=E;g=(s|0)<0;k=Tm(c|0,s|0,63)|0;a=(f|0)<0;e=Tm(b|0,f|0,63)|0;e=(k|0)==(e|0);k=Km(0,0,c|0,s|0)|0;c=g?k:c;g=g?E:s;k=Km(0,0,b|0,f|0)|0;b=a?k:b;f=a?E:f;a=Ym(f|0,0,g|0,0)|0;k=E;h=Ym(b|0,0,c|0,0)|0;l=E;g=Ym(b|0,0,g|0,0)|0;b=E;c=Ym(f|0,0,c|0,0)|0;c=Om(g|0,b|0,c|0,E|0)|0;k=Om(E|0,0,a|0,k|0)|0;a=E;c=Om(0,c|0,h|0,l|0)|0;b=E;h=Om(k|0,a|0,(b>>>0<l>>>0|(b|0)==(l|0)&c>>>0<h>>>0)&1|0,0)|0;l=E;a=Km(0,0,c|0,b|0)|0;k=E;g=Km(0,0,h|0,l|0)|0;f=(c|0)==0&(b|0)==0;return (((p?r:q)|0)==((e?c:a)|0)?((p?d:n)|0)==((e?b:k)|0):0)&((o|0)==((e?l:f?E:~l)|0)?((p?m:i?j:~m)|0)==((e?h:f?g:~h)|0):0)|0}else{q=Ym(c|0,d|0,n|0,o|0)|0;s=E;p=Km(a|0,b|0,e|0,f|0)|0;r=E;h=Km(g|0,h|0,k|0,l|0)|0;r=Ym(h|0,E|0,p|0,r|0)|0;return (q|0)==(r|0)&(s|0)==(E|0)|0}return 0}function Nd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;t=a+20|0;e=c[t>>2]|0;if(!e){d=c[a+16>>2]|0;e=c[d+24>>2]|0;a:do if((e|0)!=(d|0)){j=d+16|0;k=c[j+4>>2]|0;j=c[j>>2]|0;b:while(1){i=d+8|0;f=0;c:while(1){h=e;while(1){e=h+16|0;g=c[e>>2]|0;e=c[e+4>>2]|0;if((e|0)>(k|0)|(e|0)==(k|0)&g>>>0>j>>>0){f=e;break c}if((g|0)==(j|0)&(e|0)==(k|0)?(m=h+8|0,l=c[m>>2]|0,m=c[m+4>>2]|0,o=i,n=c[o>>2]|0,o=c[o+4>>2]|0,!((m|0)>(o|0)|(m|0)==(o|0)&l>>>0>n>>>0)):0){if((m|0)<(o|0)|(m|0)==(o|0)&l>>>0<n>>>0){g=j;f=k;break c}e=c[h+24>>2]|0;if((e|0)!=(d|0))break}e=c[h+24>>2]|0;if((e|0)==(d|0))break b;else h=e}f=(c[h+28>>2]|0)==(d|0)?f:h}e=c[h+24>>2]|0;if((e|0)==(h|0)){d=h;break a}else{d=h;k=f;j=g}}if(!((f|0)==0|(f|0)==(d|0))){e=d;do{h=Od(d,f)|0;e=h?e:f;h=e+8|0;g=c[h>>2]|0;h=c[h+4>>2]|0;j=e+16|0;i=c[j>>2]|0;j=c[j+4>>2]|0;while(1){f=c[f+24>>2]|0;o=f+8|0;if(!((c[o>>2]|0)==(g|0)?(c[o+4>>2]|0)==(h|0):0))continue;o=f+16|0;if((c[o>>2]|0)==(i|0)?(c[o+4>>2]|0)==(j|0):0)break}}while((f|0)!=(d|0));d=e}}while(0);c[t>>2]=d;e=d}l=b+20|0;d=c[l>>2]|0;if(!d){d=c[b+16>>2]|0;e=c[d+24>>2]|0;d:do if((e|0)!=(d|0)){j=d+16|0;k=c[j+4>>2]|0;j=c[j>>2]|0;e:while(1){i=d+8|0;f=0;f:while(1){h=e;while(1){e=h+16|0;g=c[e>>2]|0;e=c[e+4>>2]|0;if((e|0)>(k|0)|(e|0)==(k|0)&g>>>0>j>>>0){f=e;break f}if((g|0)==(j|0)&(e|0)==(k|0)?(q=h+8|0,p=c[q>>2]|0,q=c[q+4>>2]|0,s=i,r=c[s>>2]|0,s=c[s+4>>2]|0,!((q|0)>(s|0)|(q|0)==(s|0)&p>>>0>r>>>0)):0){if((q|0)<(s|0)|(q|0)==(s|0)&p>>>0<r>>>0){g=j;f=k;break f}e=c[h+24>>2]|0;if((e|0)!=(d|0))break}e=c[h+24>>2]|0;if((e|0)==(d|0))break e;else h=e}f=(c[h+28>>2]|0)==(d|0)?f:h}e=c[h+24>>2]|0;if((e|0)==(h|0)){d=h;break d}else{d=h;k=f;j=g}}if(!((f|0)==0|(f|0)==(d|0))){e=d;do{h=Od(d,f)|0;e=h?e:f;h=e+8|0;g=c[h>>2]|0;h=c[h+4>>2]|0;j=e+16|0;i=c[j>>2]|0;j=c[j+4>>2]|0;while(1){f=c[f+24>>2]|0;s=f+8|0;if(!((c[s>>2]|0)==(g|0)?(c[s+4>>2]|0)==(h|0):0))continue;s=f+16|0;if((c[s>>2]|0)==(i|0)?(c[s+4>>2]|0)==(j|0):0)break}}while((f|0)!=(d|0));d=e}}while(0);c[l>>2]=d;i=c[t>>2]|0}else i=e;f=i+16|0;e=c[f>>2]|0;f=c[f+4>>2]|0;h=d+16|0;g=c[h>>2]|0;h=c[h+4>>2]|0;if((f|0)>(h|0)|(f|0)==(h|0)&e>>>0>g>>>0){b=a;return b|0}if((f|0)<(h|0)|(f|0)==(h|0)&e>>>0<g>>>0)return b|0;f=i+8|0;e=c[f>>2]|0;f=c[f+4>>2]|0;h=d+8|0;g=c[h>>2]|0;h=c[h+4>>2]|0;if((f|0)<(h|0)|(f|0)==(h|0)&e>>>0<g>>>0){b=a;return b|0}if((f|0)>(h|0)|(f|0)==(h|0)&e>>>0>g>>>0)return b|0;if((c[i+24>>2]|0)==(i|0))return b|0;if((c[d+24>>2]|0)==(d|0)){b=a;return b|0}t=Od(i,d)|0;b=t?a:b;return b|0}function Od(a,b){a=a|0;b=b|0;var d=0.0,e=0,f=0,g=0,h=0,i=0,j=0,k=0.0,l=0,m=0,n=0.0,o=0,p=0,q=0.0;p=a+8|0;o=c[p>>2]|0;p=c[p+4>>2]|0;i=a+16|0;h=a;while(1){h=c[h+28>>2]|0;f=h+8|0;g=c[f>>2]|0;f=c[f+4>>2]|0;if(!((g|0)==(o|0)&(f|0)==(p|0))){l=3;break}g=h+16|0;e=c[g>>2]|0;g=c[g+4>>2]|0;j=i;f=c[j>>2]|0;j=c[j+4>>2]|0;if((h|0)==(a|0)|((e|0)!=(f|0)|(g|0)!=(j|0))){m=f;h=g;g=o;f=p;break}}if((l|0)==3){j=i;h=h+16|0;e=c[h>>2]|0;m=c[j>>2]|0;h=c[h+4>>2]|0;j=c[j+4>>2]|0}if((e|0)==(m|0)&(h|0)==(j|0))d=-1.e+40;else{g=Km(g|0,f|0,o|0,p|0)|0;i=E;l=Km(e|0,h|0,m|0,j|0)|0;d=(+(g>>>0)+4294967296.0*+(i|0))/(+(l>>>0)+4294967296.0*+(E|0))}q=+G(+d);g=a;while(1){g=c[g+24>>2]|0;e=g+8|0;f=c[e>>2]|0;e=c[e+4>>2]|0;i=g+16|0;h=c[i>>2]|0;i=c[i+4>>2]|0;if(!((f|0)==(o|0)&(e|0)==(p|0)))break;if((g|0)==(a|0)|((h|0)!=(m|0)|(i|0)!=(j|0))){f=o;e=p;break}}if((h|0)==(m|0)&(i|0)==(j|0))d=-1.e+40;else{a=Km(f|0,e|0,o|0,p|0)|0;o=E;p=Km(h|0,i|0,m|0,j|0)|0;d=(+(a>>>0)+4294967296.0*+(o|0))/(+(p>>>0)+4294967296.0*+(E|0))}n=+G(+d);l=b+8|0;j=c[l>>2]|0;l=c[l+4>>2]|0;a=b+16|0;m=c[a>>2]|0;a=c[a+4>>2]|0;f=b;while(1){f=c[f+28>>2]|0;e=f+8|0;g=c[e>>2]|0;e=c[e+4>>2]|0;i=f+16|0;h=c[i>>2]|0;i=c[i+4>>2]|0;if(!((g|0)==(j|0)&(e|0)==(l|0)))break;if((f|0)==(b|0)|((h|0)!=(m|0)|(i|0)!=(a|0))){g=j;e=l;break}}if((h|0)==(m|0)&(i|0)==(a|0))d=-1.e+40;else{g=Km(g|0,e|0,j|0,l|0)|0;o=E;p=Km(h|0,i|0,m|0,a|0)|0;d=(+(g>>>0)+4294967296.0*+(o|0))/(+(p>>>0)+4294967296.0*+(E|0))}k=+G(+d);g=b;while(1){g=c[g+24>>2]|0;e=g+8|0;f=c[e>>2]|0;e=c[e+4>>2]|0;i=g+16|0;h=c[i>>2]|0;i=c[i+4>>2]|0;if(!((f|0)==(j|0)&(e|0)==(l|0)))break;if((g|0)==(b|0)|((h|0)!=(m|0)|(i|0)!=(a|0))){f=j;e=l;break}}if((h|0)==(m|0)&(i|0)==(a|0))d=-1.e+40;else{o=Km(f|0,e|0,j|0,l|0)|0;p=E;b=Km(h|0,i|0,m|0,a|0)|0;d=(+(o>>>0)+4294967296.0*+(p|0))/(+(b>>>0)+4294967296.0*+(E|0))}d=+G(+d);if(!(!(q>=k)|!(q>=d))){b=1;return b|0}if(!(n>=k)){b=0;return b|0}b=n>=d;return b|0}function Pd(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;n=i;i=i+16|0;m=n;g=c[d>>2]|0;e=c[g+104>>2]|0;h=e;if(!e){j=Fa(16)|0;c[j>>2]=1712;h=j+4|0;c[h>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;a:do if(!1){e=14229;l=5}else{e=14229;f=14229;while(1){if(!(a[e>>0]|0)){e=f;break a}e=e+1|0;f=e;if(!(f&3)){l=5;break}}}while(0);if((l|0)==5){while(1){f=c[e>>2]|0;if(!((f&-2139062144^-2139062144)&f+-16843009))e=e+4|0;else break}if((f&255)<<24>>24)do e=e+1|0;while((a[e>>0]|0)!=0)}d=e-14229|0;if(d>>>0>4294967279)Il();if(d>>>0<11){a[j+15>>0]=d;if(!d){n=h;n=n+d|0;a[n>>0]=0;$a(j|0,72,21)}else e=h}else{g=d+16&-16;f=(g|0)==0?1:g;e=vf(f)|0;b:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break b}ub[e&3]();e=vf(f)|0}while(!(e|0));while(0);c[h>>2]=e;c[j+12>>2]=g|-2147483648;c[j+8>>2]=d}Vm(e|0,14229,d|0)|0;n=e;n=n+d|0;a[n>>0]=0;$a(j|0,72,21)}c[e+92>>2]=c[g+92>>2];f=c[g+112>>2]|0;e=c[g+108>>2]|0;if(!f)c[b+68>>2]=h;else c[f+108>>2]=h;if(e|0)c[e+112>>2]=c[(c[d>>2]|0)+104>>2];l=c[d>>2]|0;k=c[l+104>>2]|0;c[k+76>>2]=c[l+76>>2];c[k+80>>2]=c[l+80>>2];c[k+84>>2]=c[l+84>>2];c[k+88>>2]=c[l+88>>2];c[d>>2]=k;l=k+16|0;c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];c[l+8>>2]=c[k+8>>2];c[l+12>>2]=c[k+12>>2];c[(c[d>>2]|0)+112>>2]=f;c[(c[d>>2]|0)+108>>2]=e;e=c[d>>2]|0;l=e+56|0;if((c[l>>2]|0)==0&(c[l+4>>2]|0)==0){i=n;return}j=e+40|0;h=c[j>>2]|0;j=c[j+4>>2]|0;k=b+56|0;f=b+60|0;e=c[f>>2]|0;do if(e){while(1){g=e+16|0;f=c[g>>2]|0;g=c[g+4>>2]|0;if((g|0)<(j|0)|(g|0)==(j|0)&f>>>0<h>>>0){f=c[e>>2]|0;if(!f){l=29;break}else e=f}else{if(!((g|0)>(j|0)|(g|0)==(j|0)&f>>>0>h>>>0)){l=34;break}g=e+4|0;f=c[g>>2]|0;if(!f){l=33;break}else e=f}}if((l|0)==29){c[m>>2]=e;d=e;g=e;break}else if((l|0)==33){c[m>>2]=e;d=e;break}else if((l|0)==34){c[m>>2]=e;d=e;g=m;break}}else{c[m>>2]=f;d=f;g=f}while(0);if(!(c[g>>2]|0)){e=vf(24)|0;if(!e)do{e=c[5972]|0;c[5972]=e+0;ub[e&3]();e=vf(24)|0}while(!(e|0));f=e+16|0;c[f>>2]=h;c[f+4>>2]=j;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=d;c[g>>2]=e;f=c[c[k>>2]>>2]|0;if(f){c[k>>2]=f;e=c[g>>2]|0}Jc(c[b+60>>2]|0,e);b=b+64|0;c[b>>2]=(c[b>>2]|0)+1}i=n;return}function Qd(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;n=i;i=i+16|0;k=n;m=d+92|0;f=c[m>>2]|0;if((f|0)>=0){k=(c[d+76>>2]|0)==1;g=c[(c[b+4>>2]|0)+(f<<2)>>2]|0;h=g+16|0;j=c[h>>2]|0;if(k){l=e;m=j+8|0;if(((c[l>>2]|0)==(c[m>>2]|0)?(c[l+4>>2]|0)==(c[m+4>>2]|0):0)?(l=e+8|0,m=j+16|0,(c[l>>2]|0)==(c[m>>2]|0)?(c[l+4>>2]|0)==(c[m+4>>2]|0):0):0){m=j;i=n;return m|0}}else{f=c[j+28>>2]|0;l=e;m=f+8|0;if(((c[l>>2]|0)==(c[m>>2]|0)?(c[l+4>>2]|0)==(c[m+4>>2]|0):0)?(l=e+8|0,m=f+16|0,(c[l>>2]|0)==(c[m>>2]|0)?(c[l+4>>2]|0)==(c[m+4>>2]|0):0):0){m=f;i=n;return m|0}}f=vf(32)|0;a:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break a}ub[f&3]();f=vf(32)|0}while(!(f|0));while(0);m=f+8|0;c[m>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[f>>2]=c[g>>2];c[m>>2]=c[e>>2];c[m+4>>2]=c[e+4>>2];c[m+8>>2]=c[e+8>>2];c[m+12>>2]=c[e+12>>2];c[f+24>>2]=j;m=j+28|0;e=c[m>>2]|0;c[f+28>>2]=e;c[e+24>>2]=f;c[m>>2]=f;if(!k){m=f;i=n;return m|0}c[h>>2]=f;m=f;i=n;return m|0}f=vf(24)|0;b:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){l=0;break b}ub[f&3]();f=vf(24)|0;if(f|0){l=f;break}}else l=f;while(0);c[k>>2]=l;a[l+4>>0]=0;a[l+5>>0]=0;h=l+8|0;j=b+4|0;f=b+8|0;c[h>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;h=c[f>>2]|0;if((h|0)==(c[b+12>>2]|0)){Kd(j,k);f=c[f>>2]|0}else{c[h>>2]=l;b=(c[f>>2]|0)+4|0;c[f>>2]=b;f=b}h=c[j>>2]|0;c[l>>2]=(f-h>>2)+-1;j=l+5|0;a[j>>0]=(c[d+80>>2]|0)==0&1;f=vf(32)|0;c:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){b=0;break c}ub[f&3]();f=vf(32)|0;if(f|0){b=f;break}}else b=f;while(0);k=b+8|0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[l+16>>2]=b;c[b>>2]=c[l>>2];c[k>>2]=c[e>>2];c[k+4>>2]=c[e+4>>2];c[k+8>>2]=c[e+8>>2];c[k+12>>2]=c[e+12>>2];c[b+24>>2]=b;c[b+28>>2]=b;k=h;if((a[j>>0]|0)==0?(g=c[d+112>>2]|0,g|0):0){j=l+8|0;f=0;d:do{while(1){h=c[g+92>>2]|0;if((h|0)>-1?c[g+80>>2]|0:0)break;g=c[g+112>>2]|0;if(!g)break d}f=f^1;if(!(c[j>>2]|0))c[j>>2]=c[k+(h<<2)>>2];g=c[g+112>>2]|0}while((g|0)!=0);if(f)a[l+4>>0]=1}c[m>>2]=c[l>>2];m=b;i=n;return m|0}function Rd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;i=a+4|0;j=c[a>>2]|0;k=(c[i>>2]|0)-j|0;h=k>>2;d=h+1|0;if(d>>>0>1073741823)Bl();l=a+8|0;f=(c[l>>2]|0)-j|0;g=f>>1;g=f>>2>>>0<536870911?(g>>>0<d>>>0?d:g):1073741823;if(!g)d=0;else{if(g>>>0>1073741823){l=Fa(4)|0;c[l>>2]=8316;$a(l|0,1336,91)}e=g<<2;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}f=d+(h<<2)|0;c[f>>2]=c[b>>2];e=f+(0-h<<2)|0;if((k|0)>0)Vm(e|0,j|0,k|0)|0;c[a>>2]=e;c[i>>2]=f+4;c[l>>2]=d+(g<<2);if(!j)return;wf(j);return}function Sd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;h=a+48|0;a=a+56|0;g=c[a>>2]|0;a=c[a+4>>2]|0;f=b+48|0;e=c[f>>2]|0;f=c[f+4>>2]|0;if(d){o=(a|0)<0;s=Tm(g|0,a|0,63)|0;r=(f|0)<0;i=Tm(e|0,f|0,63)|0;i=(s|0)==(i|0);s=Km(0,0,g|0,a|0)|0;s=o?s:g;o=o?E:a;a=Km(0,0,e|0,f|0)|0;e=r?a:e;a=r?E:f;r=Ym(a|0,0,o|0,0)|0;n=E;f=Ym(e|0,0,s|0,0)|0;k=E;e=Ym(e|0,0,o|0,0)|0;o=E;s=Ym(a|0,0,s|0,0)|0;s=Om(e|0,o|0,s|0,E|0)|0;n=Om(E|0,0,r|0,n|0)|0;r=E;s=Om(0,s|0,f|0,k|0)|0;o=E;f=Om(n|0,r|0,(o>>>0<k>>>0|(o|0)==(k|0)&s>>>0<f>>>0)&1|0,0)|0;k=E;r=Km(0,0,s|0,o|0)|0;n=E;e=Km(0,0,f|0,k|0)|0;a=(s|0)==0&(o|0)==0;k=i?k:a?E:~k;d=h;q=c[d>>2]|0;d=c[d+4>>2]|0;b=b+56|0;m=c[b>>2]|0;b=c[b+4>>2]|0;l=(d|0)<0;h=Tm(q|0,d|0,63)|0;p=(b|0)<0;g=Tm(m|0,b|0,63)|0;g=(h|0)==(g|0);h=Km(0,0,q|0,d|0)|0;q=l?h:q;d=l?E:d;l=Km(0,0,m|0,b|0)|0;m=p?l:m;b=p?E:b;p=Ym(b|0,0,d|0,0)|0;l=E;h=Ym(m|0,0,q|0,0)|0;j=E;d=Ym(m|0,0,d|0,0)|0;m=E;q=Ym(b|0,0,q|0,0)|0;q=Om(d|0,m|0,q|0,E|0)|0;l=Om(E|0,0,p|0,l|0)|0;p=E;q=Om(0,q|0,h|0,j|0)|0;m=E;h=Om(l|0,p|0,(m>>>0<j>>>0|(m|0)==(j|0)&q>>>0<h>>>0)&1|0,0)|0;j=E;p=Km(0,0,q|0,m|0)|0;l=E;d=Km(0,0,h|0,j|0)|0;b=(q|0)==0&(m|0)==0;return (((i?s:r)|0)==((g?q:p)|0)?((i?o:n)|0)==((g?m:l)|0):0)&((k|0)==((g?j:b?E:~j)|0)?((i?f:a?e:~f)|0)==((g?h:b?d:~h)|0):0)|0}else{q=Ym(e|0,f|0,g|0,a|0)|0;s=E;r=h;p=b+56|0;r=Ym(c[p>>2]|0,c[p+4>>2]|0,c[r>>2]|0,c[r+4>>2]|0)|0;return (q|0)==(r|0)&(s|0)==(E|0)|0}return 0}function Td(b){b=b|0;c[b>>2]=1712;b=b+4|0;if((a[b+11>>0]|0)>=0)return;wf(c[b>>2]|0);return}function Ud(b){b=b|0;var d=0;c[b>>2]=1712;d=b+4|0;if((a[d+11>>0]|0)>=0){wf(b);return}wf(c[d>>2]|0);wf(b);return}function Vd(b){b=b|0;b=b+4|0;if((a[b+11>>0]|0)<0){b=c[b>>2]|0;return b|0}else return b|0;return 0}function Wd(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;if(!f){if((c[b+104>>2]|0)==0?(x=b+32|0,y=e,(c[x>>2]|0)==(c[y>>2]|0)?(c[x+4>>2]|0)==(c[y+4>>2]|0):0):0){y=b+40|0;f=e+8|0;f=(c[y>>2]|0)==(c[f>>2]|0)?(c[y+4>>2]|0)==(c[f+4>>2]|0):0}else f=0;if((c[d+104>>2]|0)==0?(x=d+32|0,y=e,(c[x>>2]|0)==(c[y>>2]|0)?(c[x+4>>2]|0)==(c[y+4>>2]|0):0):0){x=d+40|0;y=e+8|0;y=(c[x>>2]|0)==(c[y>>2]|0)?(c[x+4>>2]|0)==(c[y+4>>2]|0):0}else y=0}else{y=0;f=0}w=b+92|0;s=(c[w>>2]|0)>-1;x=d+92|0;r=c[x>>2]|0;t=c[b+72>>2]|0;n=c[d+72>>2]|0;u=(t|0)==(n|0);do if(u){i=a+84|0;j=a+80|0;g=c[((t|0)==0?i:j)>>2]|0;k=b+84|0;l=c[k>>2]|0;if(!g){g=d+84|0;c[k>>2]=c[g>>2];c[g>>2]=l;g=j;m=20;break}m=(c[d+80>>2]|0)+l|0;c[k>>2]=(m|0)==0?0-l|0:m;m=d+84|0;k=c[m>>2]|0;l=k-(c[b+80>>2]|0)|0;if(!l){c[m>>2]=0-k;m=21;break}else{c[m>>2]=l;m=21;break}}else{i=a+84|0;j=a+80|0;if(!(c[((n|0)==0?i:j)>>2]|0)){q=b+88|0;c[q>>2]=(c[q>>2]|0)==0&1}else{q=b+88|0;c[q>>2]=(c[q>>2]|0)+(c[d+80>>2]|0)}g=c[((t|0)==0?i:j)>>2]|0;if(!g){g=d+88|0;c[g>>2]=(c[g>>2]|0)==0&1;g=j;m=20;break}else{m=d+88|0;c[m>>2]=(c[m>>2]|0)-(c[b+80>>2]|0);m=21;break}}while(0);a:do if((m|0)==20){q=(t|0)==0;p=(n|0)==0;k=c[(p?g:i)>>2]|0;j=c[(q?g:i)>>2]|0;g=c[(p?i:g)>>2]|0;i=q;m=24}else if((m|0)==21){p=(t|0)==0;l=c[(p?j:i)>>2]|0;q=(n|0)==0;k=c[(q?j:i)>>2]|0;i=c[(q?i:j)>>2]|0;switch(g|0){case 2:{o=c[b+84>>2]|0;q=k;j=l;g=i;n=o;o=((o|0)<0)<<31>>31;break a}case 3:{o=0-(c[b+84>>2]|0)|0;q=k;j=l;g=i;n=o;o=((o|0)<0)<<31>>31;break a}default:{j=l;g=i;i=p;m=24;break a}}}while(0);if((m|0)==24){n=c[b+84>>2]|0;o=((n|0)<0)<<31>>31;p=(n|0)<0;m=Km(0,0,n|0,o|0)|0;q=k;n=p?m:n;o=p?E:o;p=i}switch(g|0){case 2:{l=c[d+84>>2]|0;k=l;l=((l|0)<0)<<31>>31;break}case 3:{l=0-(c[d+84>>2]|0)|0;k=l;l=((l|0)<0)<<31>>31;break}default:{k=c[d+84>>2]|0;l=((k|0)<0)<<31>>31;m=(k|0)<0;i=Km(0,0,k|0,l|0)|0;k=m?i:k;l=m?E:l}}i=(r|0)<0;b:do if(i|s^1){if(s){if(!((k|1|0)==1&(l|0)==0))break;Qd(a,b,e)|0;u=b+76|0;v=c[u>>2]|0;e=d+76|0;c[u>>2]=c[e>>2];c[e>>2]=v;e=c[w>>2]|0;c[w>>2]=c[x>>2];c[x>>2]=e;break}m=(n|0)==1&(o|0)==0;g=(n|1|0)==1&(o|0)==0;if(!i){if(!g)break;Qd(a,d,e)|0;u=b+76|0;v=c[u>>2]|0;e=d+76|0;c[u>>2]=c[e>>2];c[e>>2]=v;e=c[w>>2]|0;c[w>>2]=c[x>>2];c[x>>2]=e;break}if(g?(v=(k|0)==1&(l|0)==0,!(y|(f|((k|1|0)!=1|(l|0)!=0)))):0){switch(j|0){case 2:{k=c[b+88>>2]|0;j=((k|0)<0)<<31>>31;break}case 3:{k=0-(c[b+88>>2]|0)|0;j=((k|0)<0)<<31>>31;break}default:{k=c[b+88>>2]|0;j=((k|0)<0)<<31>>31;r=(k|0)<0;s=Km(0,0,k|0,j|0)|0;j=r?E:j;k=r?s:k}}switch(q|0){case 2:{i=c[d+88>>2]|0;g=((i|0)<0)<<31>>31;break}case 3:{i=0-(c[d+88>>2]|0)|0;g=((i|0)<0)<<31>>31;break}default:{i=c[d+88>>2]|0;g=((i|0)<0)<<31>>31;r=(i|0)<0;s=Km(0,0,i|0,g|0)|0;g=r?E:g;i=r?s:i}}if(!u){Zd(a,b,d,e)|0;break}if(!(m&v)){u=b+76|0;v=c[u>>2]|0;e=d+76|0;c[u>>2]=c[e>>2];c[e>>2]=v;break}switch(c[a+52>>2]|0){case 0:{if(!(((j|0)>0|(j|0)==0&k>>>0>0)&((g|0)>0|(g|0)==0&i>>>0>0)))break b;Zd(a,b,d,e)|0;break b}case 1:{if(!(((j|0)<0|(j|0)==0&k>>>0<1)&((g|0)<0|(g|0)==0&i>>>0<1)))break b;Zd(a,b,d,e)|0;break b}case 2:{if(!((t|0)==1&((j|0)>0|(j|0)==0&k>>>0>0)&((g|0)>0|(g|0)==0&i>>>0>0))?!(p&((j|0)<0|(j|0)==0&k>>>0<1)&((g|0)<0|(g|0)==0&i>>>0<1)):0)break b;Zd(a,b,d,e)|0;break b}case 3:{Zd(a,b,d,e)|0;break b}default:break b}}}else{v=l|o;do if(!(f|y|(v>>>0>0|(v|0)==0&(k|n)>>>0>1))){if(!u?(c[a+52>>2]|0)!=3:0)break;Qd(a,b,e)|0;Qd(a,d,e)|0;u=b+76|0;v=c[u>>2]|0;e=d+76|0;c[u>>2]=c[e>>2];c[e>>2]=v;e=c[w>>2]|0;c[w>>2]=c[x>>2];c[x>>2]=e;break b}while(0);Qd(a,b,e)|0;if(!(c[d+80>>2]|0))Qd(a,d,e)|0;g=c[w>>2]|0;i=c[x>>2]|0;if((g|0)==(i|0)){c[w>>2]=-1;c[x>>2]=-1;break}if((g|0)<(i|0)){Yd(a,b,d);break}else{Yd(a,d,b);break}}while(0);do if(f^y){if(f?(h=c[w>>2]|0,(h|0)>-1):0)g=c[x>>2]|0;else{if(!y)break;g=c[x>>2]|0;if((g|0)<=-1)break;h=c[w>>2]|0}u=b+76|0;v=c[u>>2]|0;e=d+76|0;c[u>>2]=c[e>>2];c[e>>2]=v;c[w>>2]=g;c[x>>2]=h}while(0);do if(f){f=b+112|0;g=c[f>>2]|0;h=b+108|0;i=c[h>>2]|0;j=(g|0)!=0;k=(i|0)!=0;if(!(j|k)?(c[a+68>>2]|0)!=(b|0):0)break;if(j)c[g+108>>2]=i;else c[a+68>>2]=i;if(k)c[i+112>>2]=g;c[h>>2]=0;c[f>>2]=0}while(0);if(!y)return;f=d+112|0;g=c[f>>2]|0;h=d+108|0;i=c[h>>2]|0;j=(g|0)!=0;k=(i|0)!=0;if(!(j|k)?(c[a+68>>2]|0)!=(d|0):0)return;if(j)c[g+108>>2]=i;else c[a+68>>2]=i;if(k)c[i+112>>2]=g;c[h>>2]=0;c[f>>2]=0;return}function Xd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;h=b+108|0;i=c[h>>2]|0;k=b+112|0;e=c[k>>2]|0;if((i|0)==(e|0))return;l=d+108|0;g=c[l>>2]|0;j=d+112|0;f=c[j>>2]|0;if((g|0)==(f|0))return;do if((i|0)!=(d|0)){if((g|0)==(b|0)){if(!i)e=f;else{c[i+112>>2]=d;e=c[j>>2]|0}if(e|0)c[e+108>>2]=b;c[k>>2]=e;c[h>>2]=d;c[j>>2]=b;c[l>>2]=i;break}c[h>>2]=g;if(g){c[g+112>>2]=b;f=c[j>>2]|0}c[k>>2]=f;if(f|0)c[f+108>>2]=b;c[l>>2]=i;if(i|0)c[i+112>>2]=d;c[j>>2]=e;if(e|0)c[e+108>>2]=d}else{if(g){c[g+112>>2]=b;e=c[k>>2]|0}if(e|0)c[e+108>>2]=d;c[j>>2]=e;c[l>>2]=b;c[k>>2]=d;c[h>>2]=g}while(0);if(!(c[k>>2]|0)){c[a+68>>2]=b;return}if(c[j>>2]|0)return;c[a+68>>2]=d;return}function Yd(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;o=d+92|0;q=c[b+4>>2]|0;r=c[q+(c[o>>2]<<2)>>2]|0;p=e+92|0;q=c[q+(c[p>>2]<<2)>>2]|0;f=r;while(1){f=c[f+8>>2]|0;if((f|0)==(q|0)){m=q;break}if(!f){f=q;s=4;break}}a:do if((s|0)==4){while(1){s=0;f=c[f+8>>2]|0;if((f|0)==(r|0)){m=r;break a}if(!f)break;else s=4}m=Nd(r,q)|0}while(0);h=r+16|0;i=c[h>>2]|0;j=i+28|0;k=c[j>>2]|0;n=q+16|0;f=c[n>>2]|0;g=f+28|0;l=c[g>>2]|0;e=c[e+76>>2]|0;do if((c[d+76>>2]|0)==1){if((e|0)==1){if(f|0){e=f;do{g=e+24|0;d=e;e=c[g>>2]|0;d=d+28|0;c[g>>2]=c[d>>2];c[d>>2]=e}while((e|0)!=(f|0))}c[f+24>>2]=i;c[j>>2]=f;c[k+24>>2]=l;c[l+28>>2]=k;f=l}else{c[l+24>>2]=i;c[j>>2]=l;c[g>>2]=k;c[k+24>>2]=f}c[h>>2]=f;h=1}else{if((e|0)!=2){c[k+24>>2]=f;c[g>>2]=k;c[j>>2]=l;c[l+24>>2]=i;h=2;break}if(f|0){e=f;do{d=e+24|0;h=e;e=c[d>>2]|0;h=h+28|0;c[d>>2]=c[h>>2];c[h>>2]=e}while((e|0)!=(f|0))}c[k+24>>2]=l;c[l+28>>2]=k;c[f+24>>2]=i;c[j>>2]=f;h=2}while(0);c[r+20>>2]=0;e=q+8|0;if((m|0)==(q|0)){f=c[e>>2]|0;if((f|0)!=(r|0))c[r+8>>2]=f;a[r+4>>0]=a[q+4>>0]|0}c[n>>2]=0;c[q+20>>2]=0;c[e>>2]=r;g=c[o>>2]|0;d=c[p>>2]|0;c[o>>2]=-1;c[p>>2]=-1;f=c[b+68>>2]|0;if(!f){s=c[r>>2]|0;c[q>>2]=s;return}while(1){e=f+92|0;if((c[e>>2]|0)==(d|0))break;f=c[f+108>>2]|0;if(!f){s=27;break}}if((s|0)==27){s=c[r>>2]|0;c[q>>2]=s;return}c[e>>2]=g;c[f+76>>2]=h;s=c[r>>2]|0;c[q>>2]=s;return}function Zd(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0.0,q=0,r=0,s=0;o=i;i=i+16|0;n=o;m=e+56|0;if(!((c[m>>2]|0)==0&(c[m+4>>2]|0)==0)?!(+h[d+64>>3]>+h[e+64>>3]):0){g=Qd(b,e,f)|0;c[d+92>>2]=c[e+92>>2];c[d+76>>2]=2;c[e+76>>2]=1;j=c[e+112>>2]|0;if((j|0)==(d|0)){m=g;j=c[d+112>>2]|0}else m=g}else{g=Qd(b,d,f)|0;c[e+92>>2]=c[d+92>>2];c[d+76>>2]=1;c[e+76>>2]=2;j=c[d+112>>2]|0;if((j|0)==(e|0)){m=g;j=c[e+112>>2]|0;e=d}else{m=g;e=d}}if(!j){i=o;return m|0}if((c[j+92>>2]|0)<=-1){i=o;return m|0}d=f+8|0;g=c[d>>2]|0;d=c[d+4>>2]|0;l=j+40|0;if((c[l>>2]|0)==(g|0)?(c[l+4>>2]|0)==(d|0):0){l=j+32|0;k=c[l>>2]|0;l=c[l+4>>2]|0}else{k=j;l=c[k>>2]|0;k=c[k+4>>2]|0;p=+h[j+64>>3];q=j+8|0;q=Km(g|0,d|0,c[q>>2]|0,c[q+4>>2]|0)|0;p=p*(+(q>>>0)+4294967296.0*+(E|0));p=p+(p<0.0?-.5:.5);k=Om(~~p>>>0|0,(+G(p)>=1.0?(p>0.0?~~+U(+F(p/4294967296.0),4294967295.0)>>>0:~~+S((p-+(~~p>>>0))/4294967296.0)>>>0):0)|0,l|0,k|0)|0;l=E}q=e+40|0;if((c[q>>2]|0)==(g|0)?(c[q+4>>2]|0)==(d|0):0){d=e+32|0;g=c[d>>2]|0;d=c[d+4>>2]|0}else{q=e;r=c[q>>2]|0;q=c[q+4>>2]|0;p=+h[e+64>>3];s=e+8|0;g=Km(g|0,d|0,c[s>>2]|0,c[s+4>>2]|0)|0;p=p*(+(g>>>0)+4294967296.0*+(E|0));p=p+(p<0.0?-.5:.5);g=Om(~~p>>>0|0,(+G(p)>=1.0?(p>0.0?~~+U(+F(p/4294967296.0),4294967295.0)>>>0:~~+S((p-+(~~p>>>0))/4294967296.0)>>>0):0)|0,r|0,q|0)|0;d=E}if(!((k|0)==(g|0)&(l|0)==(d|0))){i=o;return m|0}if(!(Sd(e,j,(a[b+(c[(c[b>>2]|0)+-12>>2]|0)+12>>0]|0)!=0)|0)){i=o;return m|0}if(!(c[e+80>>2]|0)){i=o;return m|0}if(!(c[j+80>>2]|0)){i=o;return m|0}d=Qd(b,j,f)|0;j=e+32|0;g=vf(24)|0;a:do if(!g)do{g=c[5972]|0;c[5972]=g+0;if(!g){g=0;break a}ub[g&3]();g=vf(24)|0}while(!(g|0));while(0);s=g+8|0;c[n>>2]=g;c[g>>2]=m;c[g+4>>2]=d;c[s>>2]=c[j>>2];c[s+4>>2]=c[j+4>>2];c[s+8>>2]=c[j+8>>2];c[s+12>>2]=c[j+12>>2];j=b+20|0;d=c[j>>2]|0;if((d|0)==(c[b+24>>2]|0))Rd(b+16|0,n);else{c[d>>2]=g;c[j>>2]=(c[j>>2]|0)+4}i=o;return m|0}function _d(a,b){a=a|0;b=b|0;var d=0,e=0;d=b+16|0;e=c[d+4>>2]|0;b=a+16|0;a=c[b+4>>2]|0;return (e|0)<(a|0)|((e|0)==(a|0)?(c[d>>2]|0)>>>0<(c[b>>2]|0)>>>0:0)|0}function $d(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0;a:while(1){k=b;m=b+-4|0;while(1){b:while(1){j=a;e=k-j|0;f=e>>2;switch(f|0){case 2:{l=5;break a}case 3:{l=7;break a}case 4:{l=15;break a}case 5:{l=16;break a}case 1:case 0:{l=82;break a}default:{}}if((e|0)<124){l=22;break a}i=a+(((f|0)/2|0)<<2)|0;do if((e|0)>3996){f=(f|0)/4|0;h=a+(f<<2)|0;f=i+(f<<2)|0;e=be(a,h,i,f,d)|0;if(yb[c[d>>2]&15](c[m>>2]|0,c[f>>2]|0)|0){g=c[f>>2]|0;c[f>>2]=c[m>>2];c[m>>2]=g;g=e+1|0;if(yb[c[d>>2]&15](c[f>>2]|0,c[i>>2]|0)|0){g=c[i>>2]|0;c[i>>2]=c[f>>2];c[f>>2]=g;f=e+2|0;if(yb[c[d>>2]&15](c[i>>2]|0,c[h>>2]|0)|0){g=c[h>>2]|0;c[h>>2]=c[i>>2];c[i>>2]=g;if(yb[c[d>>2]&15](c[h>>2]|0,c[a>>2]|0)|0){g=c[a>>2]|0;c[a>>2]=c[h>>2];c[h>>2]=g;e=e+4|0}else e=e+3|0}else e=f}else e=g}}else{h=yb[c[d>>2]&15](c[i>>2]|0,c[a>>2]|0)|0;e=yb[c[d>>2]&15](c[m>>2]|0,c[i>>2]|0)|0;if(!h){if(!e){e=0;break}h=c[i>>2]|0;c[i>>2]=c[m>>2];c[m>>2]=h;if(!(yb[c[d>>2]&15](c[i>>2]|0,c[a>>2]|0)|0)){e=1;break}e=c[a>>2]|0;c[a>>2]=c[i>>2];c[i>>2]=e;e=2;break}f=c[a>>2]|0;if(e){c[a>>2]=c[m>>2];c[m>>2]=f;e=1;break}c[a>>2]=c[i>>2];c[i>>2]=f;if(yb[c[d>>2]&15](c[m>>2]|0,f)|0){e=c[i>>2]|0;c[i>>2]=c[m>>2];c[m>>2]=e;e=2}else e=1}while(0);if(yb[c[d>>2]&15](c[a>>2]|0,c[i>>2]|0)|0){f=m;break}else f=m;while(1){f=f+-4|0;if((a|0)==(f|0))break;if(yb[c[d>>2]&15](c[f>>2]|0,c[i>>2]|0)|0){l=65;break b}}e=a+4|0;if(!(yb[c[d>>2]&15](c[a>>2]|0,c[m>>2]|0)|0)){if((e|0)==(m|0)){l=82;break a}while(1){if(yb[c[d>>2]&15](c[a>>2]|0,c[e>>2]|0)|0)break;e=e+4|0;if((e|0)==(m|0)){l=82;break a}}j=c[e>>2]|0;c[e>>2]=c[m>>2];c[m>>2]=j;e=e+4|0}if((e|0)==(m|0)){l=82;break a}else f=m;while(1){while(1){g=e+4|0;if(yb[c[d>>2]&15](c[a>>2]|0,c[e>>2]|0)|0)break;else e=g}do f=f+-4|0;while(yb[c[d>>2]&15](c[a>>2]|0,c[f>>2]|0)|0);if(e>>>0>=f>>>0){a=e;continue b}j=c[e>>2]|0;c[e>>2]=c[f>>2];c[f>>2]=j;e=g}}if((l|0)==65){l=0;h=c[a>>2]|0;c[a>>2]=c[f>>2];c[f>>2]=h;e=e+1|0}g=a+4|0;c:do if(g>>>0<f>>>0)while(1){while(1){h=g+4|0;if(yb[c[d>>2]&15](c[g>>2]|0,c[i>>2]|0)|0)g=h;else break}do f=f+-4|0;while(!(yb[c[d>>2]&15](c[f>>2]|0,c[i>>2]|0)|0));if(g>>>0>f>>>0){f=i;break c}n=c[g>>2]|0;c[g>>2]=c[f>>2];c[f>>2]=n;i=(i|0)==(g|0)?f:i;g=h;e=e+1|0}else f=i;while(0);if((g|0)!=(f|0)?yb[c[d>>2]&15](c[f>>2]|0,c[g>>2]|0)|0:0){n=c[g>>2]|0;c[g>>2]=c[f>>2];c[f>>2]=n;e=e+1|0}if(!e){e=ce(a,g,d)|0;f=g+4|0;if(ce(f,b,d)|0){l=81;break}if(e){a=f;continue}}n=g;if((n-j|0)>=(k-n|0)){l=80;break}$d(a,g,d);a=g+4|0}if((l|0)==80){l=0;$d(g+4|0,b,d);b=g;continue}else if((l|0)==81){l=0;if(e){l=82;break}else{b=g;continue}}}if((l|0)==5){if(!(yb[c[d>>2]&15](c[m>>2]|0,c[a>>2]|0)|0))return;n=c[a>>2]|0;c[a>>2]=c[m>>2];c[m>>2]=n;return}else if((l|0)==7){b=a+4|0;n=yb[c[d>>2]&15](c[b>>2]|0,c[a>>2]|0)|0;e=yb[c[d>>2]&15](c[m>>2]|0,c[b>>2]|0)|0;if(!n){if(!e)return;n=c[b>>2]|0;c[b>>2]=c[m>>2];c[m>>2]=n;if(!(yb[c[d>>2]&15](c[b>>2]|0,c[a>>2]|0)|0))return;n=c[a>>2]|0;c[a>>2]=c[b>>2];c[b>>2]=n;return}f=c[a>>2]|0;if(e){c[a>>2]=c[m>>2];c[m>>2]=f;return}c[a>>2]=c[b>>2];c[b>>2]=f;if(!(yb[c[d>>2]&15](c[m>>2]|0,f)|0))return;n=c[b>>2]|0;c[b>>2]=c[m>>2];c[m>>2]=n;return}else if((l|0)==15){be(a,a+4|0,a+8|0,m,d)|0;return}else if((l|0)==16){b=a+4|0;e=a+8|0;f=a+12|0;be(a,b,e,f,d)|0;if(!(yb[c[d>>2]&15](c[m>>2]|0,c[f>>2]|0)|0))return;n=c[f>>2]|0;c[f>>2]=c[m>>2];c[m>>2]=n;if(!(yb[c[d>>2]&15](c[f>>2]|0,c[e>>2]|0)|0))return;m=c[e>>2]|0;n=c[f>>2]|0;c[e>>2]=n;c[f>>2]=m;if(!(yb[c[d>>2]&15](n,c[b>>2]|0)|0))return;m=c[b>>2]|0;n=c[e>>2]|0;c[b>>2]=n;c[e>>2]=m;if(!(yb[c[d>>2]&15](n,c[a>>2]|0)|0))return;n=c[a>>2]|0;c[a>>2]=c[b>>2];c[b>>2]=n;return}else if((l|0)==22){h=a+8|0;e=a+4|0;n=yb[c[d>>2]&15](c[e>>2]|0,c[a>>2]|0)|0;f=yb[c[d>>2]&15](c[h>>2]|0,c[e>>2]|0)|0;do if(n){g=c[a>>2]|0;if(f){c[a>>2]=c[h>>2];c[h>>2]=g;break}c[a>>2]=c[e>>2];c[e>>2]=g;if(yb[c[d>>2]&15](c[h>>2]|0,g)|0){n=c[e>>2]|0;c[e>>2]=c[h>>2];c[h>>2]=n}}else if(f?(m=c[e>>2]|0,n=c[h>>2]|0,c[e>>2]=n,c[h>>2]=m,yb[c[d>>2]&15](n,c[a>>2]|0)|0):0){n=c[a>>2]|0;c[a>>2]=c[e>>2];c[e>>2]=n}while(0);e=a+12|0;if((e|0)==(b|0))return;else{i=e;e=h}while(1){if(yb[c[d>>2]&15](c[i>>2]|0,c[e>>2]|0)|0){g=c[i>>2]|0;h=g;f=i;while(1){c[f>>2]=c[e>>2];if((e|0)==(a|0))break;f=e+-4|0;if(yb[c[d>>2]&15](h,c[f>>2]|0)|0){n=e;e=f;f=n}else break}c[e>>2]=g}e=i+4|0;if((e|0)==(b|0))break;else{n=i;i=e;e=n}}return}else if((l|0)==82)return}function ae(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;j=b+116|0;k=c[j>>2]|0;i=(k|0)==0;if(i?(c[b+120>>2]|0)==0:0)return;l=d+116|0;g=c[l>>2]|0;f=(g|0)==0;if(f?(c[d+120>>2]|0)==0:0)return;do if((k|0)!=(d|0)){if((g|0)==(b|0)){if(!i)c[k+120>>2]=d;e=d+120|0;f=c[e>>2]|0;if(f|0)c[f+116>>2]=b;i=b+120|0;c[i>>2]=f;c[j>>2]=d;c[e>>2]=b;c[l>>2]=k;e=i;break}e=b+120|0;h=c[e>>2]|0;c[j>>2]=g;if(!f)c[g+120>>2]=b;f=d+120|0;g=c[f>>2]|0;c[e>>2]=g;if(g|0)c[g+116>>2]=b;c[l>>2]=k;if(!i)c[k+120>>2]=d;c[f>>2]=h;if(h)c[h+116>>2]=d}else{if(!f)c[g+120>>2]=b;e=b+120|0;f=c[e>>2]|0;if(f|0)c[f+116>>2]=d;c[d+120>>2]=f;c[l>>2]=b;c[e>>2]=d;c[j>>2]=g}while(0);if(!(c[e>>2]|0)){c[a+72>>2]=b;return}if(c[d+120>>2]|0)return;c[a+72>>2]=d;return}function be(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=yb[c[f>>2]&15](c[b>>2]|0,c[a>>2]|0)|0;g=yb[c[f>>2]&15](c[d>>2]|0,c[b>>2]|0)|0;do if(h){h=c[a>>2]|0;if(g){c[a>>2]=c[d>>2];c[d>>2]=h;g=1;break}c[a>>2]=c[b>>2];c[b>>2]=h;if(yb[c[f>>2]&15](c[d>>2]|0,h)|0){g=c[b>>2]|0;c[b>>2]=c[d>>2];c[d>>2]=g;g=2}else g=1}else if(g){h=c[b>>2]|0;c[b>>2]=c[d>>2];c[d>>2]=h;if(yb[c[f>>2]&15](c[b>>2]|0,c[a>>2]|0)|0){g=c[a>>2]|0;c[a>>2]=c[b>>2];c[b>>2]=g;g=2}else g=1}else g=0;while(0);if(!(yb[c[f>>2]&15](c[e>>2]|0,c[d>>2]|0)|0)){f=g;return f|0}h=c[d>>2]|0;c[d>>2]=c[e>>2];c[e>>2]=h;if(!(yb[c[f>>2]&15](c[d>>2]|0,c[b>>2]|0)|0)){f=g+1|0;return f|0}e=c[b>>2]|0;c[b>>2]=c[d>>2];c[d>>2]=e;if(!(yb[c[f>>2]&15](c[b>>2]|0,c[a>>2]|0)|0)){f=g+2|0;return f|0}f=c[a>>2]|0;c[a>>2]=c[b>>2];c[b>>2]=f;f=g+3|0;return f|0}function ce(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;switch(b-a>>2|0){case 2:{e=b+-4|0;if(!(yb[c[d>>2]&15](c[e>>2]|0,c[a>>2]|0)|0)){d=1;return d|0}d=c[a>>2]|0;c[a>>2]=c[e>>2];c[e>>2]=d;d=1;return d|0}case 3:{h=a+4|0;e=b+-4|0;b=yb[c[d>>2]&15](c[h>>2]|0,c[a>>2]|0)|0;f=yb[c[d>>2]&15](c[e>>2]|0,c[h>>2]|0)|0;if(!b){if(!f){d=1;return d|0}b=c[h>>2]|0;c[h>>2]=c[e>>2];c[e>>2]=b;if(!(yb[c[d>>2]&15](c[h>>2]|0,c[a>>2]|0)|0)){d=1;return d|0}d=c[a>>2]|0;c[a>>2]=c[h>>2];c[h>>2]=d;d=1;return d|0}g=c[a>>2]|0;if(f){c[a>>2]=c[e>>2];c[e>>2]=g;d=1;return d|0}c[a>>2]=c[h>>2];c[h>>2]=g;if(!(yb[c[d>>2]&15](c[e>>2]|0,g)|0)){d=1;return d|0}d=c[h>>2]|0;c[h>>2]=c[e>>2];c[e>>2]=d;d=1;return d|0}case 4:{be(a,a+4|0,a+8|0,b+-4|0,d)|0;d=1;return d|0}case 5:{f=a+4|0;g=a+8|0;h=a+12|0;e=b+-4|0;be(a,f,g,h,d)|0;if(!(yb[c[d>>2]&15](c[e>>2]|0,c[h>>2]|0)|0)){d=1;return d|0}b=c[h>>2]|0;c[h>>2]=c[e>>2];c[e>>2]=b;if(!(yb[c[d>>2]&15](c[h>>2]|0,c[g>>2]|0)|0)){d=1;return d|0}j=c[g>>2]|0;b=c[h>>2]|0;c[g>>2]=b;c[h>>2]=j;if(!(yb[c[d>>2]&15](b,c[f>>2]|0)|0)){d=1;return d|0}j=c[f>>2]|0;b=c[g>>2]|0;c[f>>2]=b;c[g>>2]=j;if(!(yb[c[d>>2]&15](b,c[a>>2]|0)|0)){d=1;return d|0}d=c[a>>2]|0;c[a>>2]=c[f>>2];c[f>>2]=d;d=1;return d|0}case 1:case 0:{d=1;return d|0}default:{h=a+8|0;e=a+4|0;j=yb[c[d>>2]&15](c[e>>2]|0,c[a>>2]|0)|0;f=yb[c[d>>2]&15](c[h>>2]|0,c[e>>2]|0)|0;do if(j){g=c[a>>2]|0;if(f){c[a>>2]=c[h>>2];c[h>>2]=g;break}c[a>>2]=c[e>>2];c[e>>2]=g;if(yb[c[d>>2]&15](c[h>>2]|0,g)|0){j=c[e>>2]|0;c[e>>2]=c[h>>2];c[h>>2]=j}}else if(f?(i=c[e>>2]|0,j=c[h>>2]|0,c[e>>2]=j,c[h>>2]=i,yb[c[d>>2]&15](j,c[a>>2]|0)|0):0){j=c[a>>2]|0;c[a>>2]=c[e>>2];c[e>>2]=j}while(0);e=a+12|0;a:do if((e|0)==(b|0)){f=1;e=0}else{g=0;f=h;while(1){if(yb[c[d>>2]&15](c[e>>2]|0,c[f>>2]|0)|0){i=c[e>>2]|0;j=i;h=e;while(1){c[h>>2]=c[f>>2];if((f|0)==(a|0))break;h=f+-4|0;if(yb[c[d>>2]&15](j,c[h>>2]|0)|0){k=f;f=h;h=k}else break}c[f>>2]=i;f=g+1|0;h=e+4|0;if((f|0)==8){f=0;e=(h|0)==(b|0);break a}else{g=f;f=h}}else f=e+4|0;if((f|0)==(b|0)){f=1;e=0;break}else{k=e;e=f;f=k}}}while(0);k=e|f;return k|0}}return 0}function de(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;h=i;i=i+16|0;g=h;e=c[(c[(c[a+4>>2]|0)+(c[b+92>>2]<<2)>>2]|0)+16>>2]|0;if((c[b+76>>2]|0)!=1)e=c[e+28>>2]|0;if(!d){i=h;return}f=b+32|0;j=e+8|0;d=f;if(((c[j>>2]|0)==(c[d>>2]|0)?(c[j+4>>2]|0)==(c[d+4>>2]|0):0)?(d=e+16|0,j=b+40|0,(c[d>>2]|0)==(c[j>>2]|0)?(c[d+4>>2]|0)==(c[j+4>>2]|0):0):0){d=vf(24)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(24)|0}while(!(d|0));while(0);f=d+8|0;c[g>>2]=d;c[d>>2]=e;c[d+4>>2]=0;c[f>>2]=c[b>>2];c[f+4>>2]=c[b+4>>2];c[f+8>>2]=c[b+8>>2];c[f+12>>2]=c[b+12>>2];e=a+32|0;f=c[e>>2]|0;if((f|0)==(c[a+36>>2]|0))Rd(a+28|0,g);else{c[f>>2]=d;c[e>>2]=(c[e>>2]|0)+4}i=h;return}d=vf(24)|0;b:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break b}ub[d&3]();d=vf(24)|0}while(!(d|0));while(0);j=d+8|0;c[g>>2]=d;c[d>>2]=e;c[d+4>>2]=0;c[j>>2]=c[f>>2];c[j+4>>2]=c[f+4>>2];c[j+8>>2]=c[f+8>>2];c[j+12>>2]=c[f+12>>2];e=a+32|0;f=c[e>>2]|0;if((f|0)==(c[a+36>>2]|0))Rd(a+28|0,g);else{c[f>>2]=d;c[e>>2]=(c[e>>2]|0)+4}i=h;return}function ee(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0;l=a+68|0;e=c[l>>2]|0;m=e;if(!e){c[b+112>>2]=0;c[b+108>>2]=0;c[l>>2]=b;return}r=b+16|0;q=c[r>>2]|0;r=c[r+4>>2]|0;d=e+16|0;a=c[d>>2]|0;d=c[d+4>>2]|0;do if((q|0)==(a|0)&(r|0)==(d|0)){i=b+40|0;d=i;a=c[d>>2]|0;d=c[d+4>>2]|0;g=e+40|0;f=c[g>>2]|0;g=c[g+4>>2]|0;if((d|0)>(g|0)|(d|0)==(g|0)&a>>>0>f>>>0){j=b+32|0;o=c[j>>2]|0;j=c[j+4>>2]|0;p=e;k=c[p>>2]|0;p=c[p+4>>2]|0;s=+h[e+64>>3];g=e+8|0;g=Km(a|0,d|0,c[g>>2]|0,c[g+4>>2]|0)|0;s=s*(+(g>>>0)+4294967296.0*+(E|0));s=s+(s<0.0?-.5:.5);p=Om(~~s>>>0|0,(+G(s)>=1.0?(s>0.0?~~+U(+F(s/4294967296.0),4294967295.0)>>>0:~~+S((s-+(~~s>>>0))/4294967296.0)>>>0):0)|0,k|0,p|0)|0;k=E;if((j|0)<(k|0)|(j|0)==(k|0)&o>>>0<p>>>0){n=12;break}else{p=i;break}}k=e+32|0;j=c[k>>2]|0;k=c[k+4>>2]|0;if((a|0)==(f|0)&(d|0)==(g|0)){d=b+32|0;a=c[d+4>>2]|0;d=c[d>>2]|0}else{d=b;a=c[d>>2]|0;d=c[d+4>>2]|0;s=+h[b+64>>3];p=b+8|0;p=Km(f|0,g|0,c[p>>2]|0,c[p+4>>2]|0)|0;s=s*(+(p>>>0)+4294967296.0*+(E|0));s=s+(s<0.0?-.5:.5);d=Om(~~s>>>0|0,(+G(s)>=1.0?(s>0.0?~~+U(+F(s/4294967296.0),4294967295.0)>>>0:~~+S((s-+(~~s>>>0))/4294967296.0)>>>0):0)|0,a|0,d|0)|0;a=E}if((k|0)>(a|0)|(k|0)==(a|0)&j>>>0>d>>>0)n=12;else p=i}else if((r|0)<(d|0)|(r|0)==(d|0)&q>>>0<a>>>0)n=12;else p=b+40|0;while(0);if((n|0)==12){c[b+112>>2]=0;c[b+108>>2]=m;c[e+112>>2]=b;c[l>>2]=b;return}m=b+32|0;n=b+64|0;o=b+8|0;d=e+108|0;a=c[d>>2]|0;a:do if(!a)a=0;else while(1){g=a+16|0;f=c[g>>2]|0;g=c[g+4>>2]|0;do if((q|0)==(f|0)&(r|0)==(g|0)){g=p;f=c[g>>2]|0;g=c[g+4>>2]|0;j=a+40|0;i=c[j>>2]|0;j=c[j+4>>2]|0;if((g|0)>(j|0)|(g|0)==(j|0)&f>>>0>i>>>0){i=m;k=c[i>>2]|0;i=c[i+4>>2]|0;l=a;j=c[l>>2]|0;l=c[l+4>>2]|0;s=+h[a+64>>3];t=a+8|0;g=Km(f|0,g|0,c[t>>2]|0,c[t+4>>2]|0)|0;s=s*(+(g>>>0)+4294967296.0*+(E|0));s=s+(s<0.0?-.5:.5);l=Om(~~s>>>0|0,(+G(s)>=1.0?(s>0.0?~~+U(+F(s/4294967296.0),4294967295.0)>>>0:~~+S((s-+(~~s>>>0))/4294967296.0)>>>0):0)|0,j|0,l|0)|0;j=E;if((i|0)<(j|0)|(i|0)==(j|0)&k>>>0<l>>>0)break a;else break}l=a+32|0;k=c[l>>2]|0;l=c[l+4>>2]|0;if((f|0)==(i|0)&(g|0)==(j|0)){g=m;f=c[g+4>>2]|0;g=c[g>>2]|0}else{g=b;f=c[g>>2]|0;g=c[g+4>>2]|0;s=+h[n>>3];t=o;t=Km(i|0,j|0,c[t>>2]|0,c[t+4>>2]|0)|0;s=s*(+(t>>>0)+4294967296.0*+(E|0));s=s+(s<0.0?-.5:.5);g=Om(~~s>>>0|0,(+G(s)>=1.0?(s>0.0?~~+U(+F(s/4294967296.0),4294967295.0)>>>0:~~+S((s-+(~~s>>>0))/4294967296.0)>>>0):0)|0,f|0,g|0)|0;f=E}if((l|0)>(f|0)|(l|0)==(f|0)&k>>>0>g>>>0)break a}else if((r|0)<(g|0)|(r|0)==(g|0)&q>>>0<f>>>0)break a;while(0);d=a+108|0;e=c[d>>2]|0;if(!e){e=a;a=0;break}else{t=a;a=e;e=t}}while(0);c[b+108>>2]=a;a=c[d>>2]|0;if(a|0)c[a+112>>2]=b;c[b+112>>2]=e;c[d>>2]=b;return}function fe(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;d=c[b+112>>2]|0;j=c[b+72>>2]|0;a:do if(!d)i=5;else{while(1){if((c[d+72>>2]|0)==(j|0)?(h=c[d+80>>2]|0,h|0):0)break;d=c[d+112>>2]|0;if(!d){i=5;break a}}e=c[b+80>>2]|0;f=(e|0)==0;if(f?(c[a+52>>2]|0)!=1:0){c[b+84>>2]=1;h=c[d+88>>2]|0;c[b+88>>2]=h;e=d+108|0;d=h;break}if(!(c[((j|0)==0?a+84|0:a+80|0)>>2]|0)){if(f){f=1;e=d;b:while(1){do{e=c[e+112>>2]|0;if(!e)break b}while((c[e+72>>2]|0)!=(j|0));f=f^(c[e+80>>2]|0)!=0}c[b+84>>2]=f&1^1}else c[b+84>>2]=e;h=c[d+88>>2]|0;c[b+88>>2]=h;e=d+108|0;d=h;break}g=c[d+84>>2]|0;do if((T(g,h)|0)<0){m=((g|0)<0)<<31>>31;l=(g|0)<0;k=Km(0,0,g|0,m|0)|0;m=l?E:m;if(!((m|0)>0|(m|0)==0&(l?k:g)>>>0>1)){c[b+84>>2]=f?1:e;break}if((T(e,h)|0)<0){c[b+84>>2]=g;break}else{c[b+84>>2]=g+e;break}}else{if(f){c[b+84>>2]=(g>>31|1)+g;break}if((T(e,h)|0)<0){c[b+84>>2]=g;break}else{c[b+84>>2]=g+e;break}}while(0);m=c[d+88>>2]|0;c[b+88>>2]=m;e=d+108|0;d=m}while(0);if((i|0)==5){e=c[b+80>>2]|0;c[b+84>>2]=(e|0)==0?1:e;c[b+88>>2]=0;e=a+68|0;d=0}e=c[e>>2]|0;f=(e|0)==(b|0);if(c[((j|0)==0?a+80|0:a+84|0)>>2]|0){if(f)return;do{d=(c[e+80>>2]|0)+d|0;e=c[e+108>>2]|0}while((e|0)!=(b|0));c[b+88>>2]=d;return}if(f)return;f=b+88|0;do{if(c[e+80>>2]|0){d=(d|0)==0&1;c[f>>2]=d}e=c[e+108>>2]|0}while((e|0)!=(b|0));return}function ge(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;e=(c[b+72>>2]|0)==0;g=a+84|0;f=a+80|0;d=c[(e?f:g)>>2]|0;switch(c[(e?g:f)>>2]|0){case 0:{if((c[b+80>>2]|0)==0?(c[b+84>>2]|0)!=1:0){g=0;return g|0}break}case 1:{h=c[b+84>>2]|0;g=((h|0)<0)<<31>>31;f=(h|0)<0;i=Km(0,0,h|0,g|0)|0;if(!(((f?i:h)|0)==1&((f?E:g)|0)==0)){i=0;return i|0}break}case 2:{if((c[b+84>>2]|0)!=1){i=0;return i|0}break}default:if((c[b+84>>2]|0)!=-1){i=0;return i|0}}switch(c[a+52>>2]|0){case 0:switch(d|0){case 1:case 0:{i=(c[b+88>>2]|0)!=0;return i|0}case 2:{i=(c[b+88>>2]|0)>0;return i|0}default:{i=(c[b+88>>2]|0)<0;return i|0}}case 1:switch(d|0){case 1:case 0:{i=(c[b+88>>2]|0)==0;return i|0}case 2:{i=(c[b+88>>2]|0)<1;return i|0}default:{i=(c[b+88>>2]|0)>-1;return i|0}}case 2:if(e)switch(d|0){case 1:case 0:{i=(c[b+88>>2]|0)==0;return i|0}case 2:{i=(c[b+88>>2]|0)<1;return i|0}default:{i=(c[b+88>>2]|0)>-1;return i|0}}else switch(d|0){case 1:case 0:{i=(c[b+88>>2]|0)!=0;return i|0}case 2:{i=(c[b+88>>2]|0)>0;return i|0}default:{i=(c[b+88>>2]|0)<0;return i|0}}case 3:{if(c[b+80>>2]|0){i=1;return i|0}switch(d|0){case 1:case 0:{i=(c[b+88>>2]|0)==0;return i|0}case 2:{i=(c[b+88>>2]|0)<1;return i|0}default:{i=(c[b+88>>2]|0)>-1;return i|0}}}default:{i=1;return i|0}}return 0}function he(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0;i=a+44|0;j=a+48|0;b=c[j>>2]|0;d=c[i>>2]|0;if((b|0)!=(d|0)){h=0;do{g=c[d+(h<<2)>>2]|0;if(g){b=c[g+12>>2]|0;d=b;if(b|0){e=g+16|0;f=c[e>>2]|0;if((f|0)!=(b|0))c[e>>2]=f+(~((f+-4-d|0)>>>2)<<2);wf(b)}b=c[g>>2]|0;d=b;if(b|0){e=g+4|0;f=c[e>>2]|0;if((f|0)!=(b|0))c[e>>2]=f+(~((f+-16-d|0)>>>4)<<4);wf(b)}wf(g);d=c[i>>2]|0;b=c[j>>2]|0}h=h+1|0;e=b-d>>2}while(h>>>0<e>>>0);if(!((b|0)==(d|0)|(e|0)==0))c[j>>2]=b+(~((b+-4-d|0)>>>2)<<2)}e=a+16|0;j=c[e>>2]|0;b=c[a+12>>2]|0;d=j;if((j|0)==(b|0)|(d|0)==(b|0))return;c[e>>2]=d+(~((d+-4-b|0)>>>2)<<2);return}function ie(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;i=a+4|0;j=c[a>>2]|0;k=(c[i>>2]|0)-j|0;h=k>>2;d=h+1|0;if(d>>>0>1073741823)Bl();l=a+8|0;f=(c[l>>2]|0)-j|0;g=f>>1;g=f>>2>>>0<536870911?(g>>>0<d>>>0?d:g):1073741823;if(!g)d=0;else{if(g>>>0>1073741823){l=Fa(4)|0;c[l>>2]=8316;$a(l|0,1336,91)}e=g<<2;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}f=d+(h<<2)|0;c[f>>2]=c[b>>2];e=f+(0-h<<2)|0;if((k|0)>0)Vm(e|0,j|0,k|0)|0;c[a>>2]=e;c[i>>2]=f+4;c[l>>2]=d+(g<<2);if(!j)return;wf(j);return}function je(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;e=b+56|0;g=c[e>>2]|0;e=c[e+4>>2]|0;if((g|0)==0&(e|0)==0?(l=c[(d?b+100|0:b+96|0)>>2]|0,h=b,f=c[h>>2]|0,h=c[h+4>>2]|0,!((f|0)==(c[l>>2]|0)?(h|0)==(c[l+4>>2]|0):0)):0){l=b+32|0;k=l;j=c[k>>2]|0;k=c[k+4>>2]|0;c[l>>2]=f;c[l+4>>2]=h;l=b;c[l>>2]=j;c[l+4>>2]=k}do if((c[b+92>>2]|0)!=-2)if(d){i=b;while(1){s=i+40|0;f=c[i+96>>2]|0;t=f+8|0;if(!((c[s>>2]|0)==(c[t>>2]|0)?(c[s+4>>2]|0)==(c[t+4>>2]|0):0))break;if((c[f+92>>2]|0)==-2)break;else i=f}t=i+56|0;if((c[t>>2]|0)==0&(c[t+4>>2]|0)==0?(c[f+92>>2]|0)!=-2:0){j=i;do{j=c[j+100>>2]|0;t=j+56|0}while((c[t>>2]|0)==0&(c[t+4>>2]|0)==0);k=j+32|0;l=c[k>>2]|0;k=c[k+4>>2]|0;h=f+32|0;f=c[h>>2]|0;h=c[h+4>>2]|0;if(!((l|0)==(f|0)&(k|0)==(h|0)))i=(k|0)>(h|0)|(k|0)==(h|0)&l>>>0>f>>>0?j:i}if((i|0)!=(b|0)){h=b;while(1){f=c[h+96>>2]|0;c[h+104>>2]=f;if(!((g|0)!=0|(e|0)!=0|(h|0)==(b|0))?(n=h,m=c[n>>2]|0,n=c[n+4>>2]|0,t=(c[h+100>>2]|0)+32|0,!((m|0)==(c[t>>2]|0)?(n|0)==(c[t+4>>2]|0):0)):0){t=h+32|0;s=t;r=c[s>>2]|0;s=c[s+4>>2]|0;c[t>>2]=m;c[t+4>>2]=n;t=h;c[t>>2]=r;c[t+4>>2]=s}if((f|0)==(i|0))break;e=f+56|0;h=f;g=c[e>>2]|0;e=c[e+4>>2]|0}t=i+56|0;if((c[t>>2]|0)==0&(c[t+4>>2]|0)==0?(p=i,o=c[p>>2]|0,p=c[p+4>>2]|0,t=(c[i+100>>2]|0)+32|0,!((o|0)==(c[t>>2]|0)?(p|0)==(c[t+4>>2]|0):0)):0){t=i+32|0;s=t;r=c[s>>2]|0;s=c[s+4>>2]|0;c[t>>2]=o;c[t+4>>2]=p;t=i;c[t>>2]=r;c[t+4>>2]=s}}b=c[i+96>>2]|0;break}else{j=b;while(1){o=j+40|0;f=c[j+100>>2]|0;p=f+8|0;if(!((c[o>>2]|0)==(c[p>>2]|0)?(c[o+4>>2]|0)==(c[p+4>>2]|0):0))break;if((c[f+92>>2]|0)==-2)break;else j=f}p=j+56|0;if((c[p>>2]|0)==0&(c[p+4>>2]|0)==0?(c[f+92>>2]|0)!=-2:0){i=j;do{i=c[i+96>>2]|0;p=i+56|0}while((c[p>>2]|0)==0&(c[p+4>>2]|0)==0);l=i+32|0;k=c[l>>2]|0;l=c[l+4>>2]|0;h=f+32|0;f=c[h>>2]|0;h=c[h+4>>2]|0;if(!((k|0)==(f|0)&(l|0)==(h|0)))i=(l|0)>(h|0)|(l|0)==(h|0)&k>>>0>f>>>0?i:j}else i=j;if((i|0)!=(b|0)){h=b;while(1){f=c[h+100>>2]|0;c[h+104>>2]=f;if(!((g|0)!=0|(e|0)!=0|(h|0)==(b|0))?(r=h,q=c[r>>2]|0,r=c[r+4>>2]|0,p=(c[h+96>>2]|0)+32|0,!((q|0)==(c[p>>2]|0)?(r|0)==(c[p+4>>2]|0):0)):0){p=h+32|0;o=p;n=c[o>>2]|0;o=c[o+4>>2]|0;c[p>>2]=q;c[p+4>>2]=r;p=h;c[p>>2]=n;c[p+4>>2]=o}if((f|0)==(i|0))break;e=f+56|0;h=f;g=c[e>>2]|0;e=c[e+4>>2]|0}r=i+56|0;if((c[r>>2]|0)==0&(c[r+4>>2]|0)==0?(t=i,s=c[t>>2]|0,t=c[t+4>>2]|0,r=(c[i+96>>2]|0)+32|0,!((s|0)==(c[r>>2]|0)?(t|0)==(c[r+4>>2]|0):0)):0){p=i+32|0;r=p;q=c[r>>2]|0;r=c[r+4>>2]|0;c[p>>2]=s;c[p+4>>2]=t;t=i;c[t>>2]=q;c[t+4>>2]=r}}b=c[i+100>>2]|0;break}while(0);if((c[b+92>>2]|0)!=-2){a=b;return a|0}a:do if(d){e=b;while(1){s=e+40|0;f=c[e+96>>2]|0;t=f+8|0;if((c[s>>2]|0)==(c[t>>2]|0)?(c[s+4>>2]|0)==(c[t+4>>2]|0):0)e=f;else break}if((e|0)!=(b|0))do{t=e+56|0;if(!((c[t>>2]|0)==0&(c[t+4>>2]|0)==0)){u=e;v=50;break a}e=c[e+100>>2]|0}while((e|0)!=(b|0))}else{e=b;while(1){s=e+40|0;f=c[e+100>>2]|0;t=f+8|0;if((c[s>>2]|0)==(c[t>>2]|0)?(c[s+4>>2]|0)==(c[t+4>>2]|0):0)e=f;else break}if((e|0)!=(b|0))do{t=e+56|0;if(!((c[t>>2]|0)==0&(c[t+4>>2]|0)==0)){u=e;v=50;break a}e=c[e+96>>2]|0}while((e|0)!=(b|0))}while(0);if((v|0)==50?(u|0)!=(b|0):0){f=c[(d?b+96|0:b+100|0)>>2]|0;e=vf(24)|0;b:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break b}ub[e&3]();e=vf(24)|0}while(!(e|0));while(0);j=e+16|0;c[j>>2]=0;i=f+8|0;h=c[i>>2]|0;i=c[i+4>>2]|0;g=e;c[g>>2]=h;c[g+4>>2]=i;c[e+8>>2]=0;c[e+12>>2]=f;c[f+80>>2]=0;g=je(a,f,d)|0;b=a+8|0;f=c[b>>2]|0;if(!f){c[b>>2]=e;a=g;return a|0}a=f;d=c[a+4>>2]|0;if(!((i|0)<(d|0)|((i|0)==(d|0)?h>>>0<(c[a>>2]|0)>>>0:0))){c[j>>2]=f;c[b>>2]=e;a=g;return a|0}do{b=f+16|0;f=c[b>>2]|0;if(!f){f=0;break}a=f;d=c[a+4>>2]|0}while((i|0)<(d|0)|((i|0)==(d|0)?h>>>0<(c[a>>2]|0)>>>0:0));c[j>>2]=f;c[b>>2]=e;a=g;return a|0}if(d){a=c[b+96>>2]|0;return a|0}else{a=c[b+100>>2]|0;return a|0}return 0}function ke(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,i=0,j=0,k=0,l=0.0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,F=0,G=0;p=c[d>>2]|0;F=(c[d+4>>2]|0)-p|0;f=(F>>4)+-1|0;n=p;a:do if((F|0)>16){j=n;i=c[j>>2]|0;j=c[j+4>>2]|0;k=n+8|0;while(1){F=n+(f<<4)|0;if(!((c[F>>2]|0)==(i|0)?(c[F+4>>2]|0)==(j|0):0))break a;D=n+(f<<4)+8|0;F=k;if(!((c[D>>2]|0)==(c[F>>2]|0)?(c[D+4>>2]|0)==(c[F+4>>2]|0):0))break a;g=f+-1|0;if((f|0)>1)f=g;else{f=g;break}}}while(0);while(1){if((f|0)<=0){G=127;break}o=f+-1|0;D=n+(f<<4)|0;F=n+(o<<4)|0;if(!((c[D>>2]|0)==(c[F>>2]|0)?(c[D+4>>2]|0)==(c[F+4>>2]|0):0))break;D=n+(f<<4)+8|0;F=n+(o<<4)+8|0;if((c[D>>2]|0)==(c[F>>2]|0)?(c[D+4>>2]|0)==(c[F+4>>2]|0):0)f=o;else break}if((G|0)==127)return;if((f|0)<2)return;m=f+1|0;i=m>>>0>33554431?-1:m<<7;i=(i|0)==0?1:i;g=vf(i)|0;if(!g){do{g=c[5972]|0;c[5972]=g+0;if(!g){g=0;break}ub[g&3]();g=vf(i)|0}while(!(g|0));if(!m){j=g;m=n;k=g}else{j=g;k=g;G=16}}else{j=g;k=g;G=16}if((G|0)==16){g=k+(m<<7)|0;i=k;do{q=i;r=q+64|0;do{c[q>>2]=0;q=q+4|0}while((q|0)<(r|0));i=i+128|0}while((i|0)!=(g|0));p=c[d>>2]|0;m=p}F=j;D=j+144|0;i=m+16|0;c[D>>2]=c[i>>2];c[D+4>>2]=c[i+4>>2];c[D+8>>2]=c[i+8>>2];c[D+12>>2]=c[i+12>>2];D=b+12|0;i=m;g=c[i>>2]|0;i=c[i+4>>2]|0;do if(!(a[D>>0]|0)){C=m+8|0;C=Om(c[C>>2]|0,c[C+4>>2]|0,1073741823,0)|0;B=E;if(B>>>0>0|(B|0)==0&C>>>0>2147483646){a[D>>0]=1;G=23;break}C=Om(g|0,i|0,1073741823,0)|0;B=E;if(B>>>0>0|(B|0)==0&C>>>0>2147483646){a[D>>0]=1;G=23;break}g=m+(f<<4)|0;i=c[g>>2]|0;g=c[g+4>>2]|0;C=m+(f<<4)+8|0;C=Om(c[C>>2]|0,c[C+4>>2]|0,1073741823,0)|0;B=E;if(B>>>0>0|(B|0)==0&C>>>0>2147483646){a[D>>0]=1;G=31;break}C=Om(i|0,g|0,1073741823,0)|0;B=E;if(B>>>0>0|(B|0)==0&C>>>0>2147483646){a[D>>0]=1;G=31}else n=0}else G=23;while(0);do if((G|0)==23){if((i|0)>1073741823|(i|0)==1073741823&g>>>0>4294967295){G=Fa(4)|0;c[G>>2]=14375;$a(G|0,1440,0)}G=m+8|0;G=Om(c[G>>2]|0,c[G+4>>2]|0,-1,1073741823)|0;C=E;if((i|0)<-1073741824|(i|0)==-1073741824&g>>>0<1|(C>>>0>2147483647|(C|0)==2147483647&G>>>0>4294967294)){G=Fa(4)|0;c[G>>2]=14375;$a(G|0,1440,0)}else{i=m+(f<<4)|0;g=c[i+4>>2]|0;i=c[i>>2]|0;G=31;break}}while(0);if((G|0)==31){if((g|0)>1073741823|(g|0)==1073741823&i>>>0>4294967295){G=Fa(4)|0;c[G>>2]=14375;$a(G|0,1440,0)}C=m+(f<<4)+8|0;C=Om(c[C>>2]|0,c[C+4>>2]|0,-1,1073741823)|0;B=E;if((g|0)<-1073741824|(g|0)==-1073741824&i>>>0<1|(B>>>0>2147483647|(B|0)==2147483647&C>>>0>4294967294)){G=Fa(4)|0;c[G>>2]=14375;$a(G|0,1440,0)}else n=1}g=j+128|0;m=k+(f<<7)|0;q=j;r=q+128|0;do{c[q>>2]=0;q=q+4|0}while((q|0)<(r|0));c[j+96>>2]=g;c[j+100>>2]=m;i=j+16|0;c[i>>2]=c[p>>2];c[i+4>>2]=c[p+4>>2];c[i+8>>2]=c[p+8>>2];c[i+12>>2]=c[p+12>>2];c[j+92>>2]=-1;i=k+(o<<7)|0;p=c[d>>2]|0;g=p+(f<<4)|0;q=m;r=q+128|0;do{c[q>>2]=0;q=q+4|0}while((q|0)<(r|0));c[k+(f<<7)+96>>2]=j;c[k+(f<<7)+100>>2]=i;C=k+(f<<7)+16|0;c[C>>2]=c[g>>2];c[C+4>>2]=c[g+4>>2];c[C+8>>2]=c[g+8>>2];c[C+12>>2]=c[g+12>>2];c[k+(f<<7)+92>>2]=-1;b:do if((f|0)>1){f=n;while(1){i=p+(o<<4)|0;g=c[i>>2]|0;i=c[i+4>>2]|0;do if(!(f<<24>>24)){C=p+(o<<4)+8|0;C=Om(c[C>>2]|0,c[C+4>>2]|0,1073741823,0)|0;B=E;if(B>>>0>0|(B|0)==0&C>>>0>2147483646){a[D>>0]=1;f=1;G=41;break}C=Om(g|0,i|0,1073741823,0)|0;B=E;if(B>>>0>0|(B|0)==0&C>>>0>2147483646){a[D>>0]=1;f=1;G=41}else f=0}else G=41;while(0);if((G|0)==41){G=0;if((i|0)>1073741823|(i|0)==1073741823&g>>>0>4294967295){G=43;break}C=p+(o<<4)+8|0;C=Om(c[C>>2]|0,c[C+4>>2]|0,-1,1073741823)|0;B=E;if((i|0)<-1073741824|(i|0)==-1073741824&g>>>0<1|(B>>>0>2147483647|(B|0)==2147483647&C>>>0>4294967294)){G=43;break}}i=k+(o+1<<7)|0;g=o;o=o+-1|0;m=k+(o<<7)|0;n=p+(g<<4)|0;q=k+(g<<7)|0;r=q+128|0;do{c[q>>2]=0;q=q+4|0}while((q|0)<(r|0));c[k+(g<<7)+96>>2]=i;c[k+(g<<7)+100>>2]=m;C=k+(g<<7)+16|0;c[C>>2]=c[n>>2];c[C+4>>2]=c[n+4>>2];c[C+8>>2]=c[n+8>>2];c[C+12>>2]=c[n+12>>2];c[k+(g<<7)+92>>2]=-1;if((g|0)<=1)break b}if((G|0)==43){G=Fa(4)|0;c[G>>2]=14375;$a(G|0,1440,0)}}while(0);B=b+28|0;C=k;f=k;c:while(1){A=C;d:while(1){i=A+96|0;g=c[i>>2]|0;m=A+16|0;k=c[m>>2]|0;m=c[m+4>>2]|0;o=g+16|0;n=c[o>>2]|0;o=c[o+4>>2]|0;p=(k|0)==(n|0)&(m|0)==(o|0);if(p?(y=A+24|0,z=g+24|0,(c[y>>2]|0)==(c[z>>2]|0)?(c[y+4>>2]|0)==(c[z+4>>2]|0):0):0)break;q=A+100|0;r=c[q>>2]|0;if((r|0)==(g|0)){i=A;break c}s=r+16|0;d=c[s>>2]|0;s=c[s+4>>2]|0;u=r+24|0;t=c[u>>2]|0;u=c[u+4>>2]|0;w=A+24|0;v=c[w>>2]|0;w=c[w+4>>2]|0;y=g+24|0;x=c[y>>2]|0;y=c[y+4>>2]|0;do if(Md(d,s,t,u,k,m,v,w,n,o,x,y,(a[D>>0]|0)!=0)|0){if(!(a[B>>0]|0)){G=59;break d}z=(d|0)==(n|0)&(s|0)==(o|0);if(z&((t|0)==(x|0)&(u|0)==(y|0))){G=59;break d}if((d|0)==(k|0)&(s|0)==(m|0)&((t|0)==(v|0)&(u|0)==(w|0))|p&((x|0)==(v|0)&(y|0)==(w|0))){G=59;break d}if(z)if(((w|0)>(u|0)|(w|0)==(u|0)&v>>>0>t>>>0)^((w|0)<(y|0)|(w|0)==(y|0)&v>>>0<x>>>0)){G=59;break d}else break;else if(((m|0)<(o|0)|(m|0)==(o|0)&k>>>0<n>>>0)^((m|0)>(s|0)|(m|0)==(s|0)&k>>>0>d>>>0)){G=59;break d}else break}while(0);if((g|0)==(C|0)){G=61;break c}else A=g}if((G|0)==59){G=0;c[r+96>>2]=g;C=(c[i>>2]|0)+100|0;c[C>>2]=r;c[q>>2]=0;C=c[C>>2]|0;f=(A|0)==(f|0)?g:f;continue}if((A|0)==(g|0)){i=A;g=A;break}z=A+100|0;y=c[z>>2]|0;c[y+96>>2]=g;C=c[i>>2]|0;c[C+100>>2]=y;c[z>>2]=0;f=(A|0)==(f|0)?g:f}if((G|0)==61){i=C;g=c[C+96>>2]|0}if((c[i+100>>2]|0)==(g|0)){wf(j);return}r=f+24|0;g=1;q=f;do{i=q+16|0;C=q+24|0;A=c[C+4>>2]|0;o=q;q=c[q+96>>2]|0;p=q+24|0;D=p;B=c[D+4>>2]|0;if((A|0)<(B|0)|((A|0)==(B|0)?(c[C>>2]|0)>>>0<(c[D>>2]|0)>>>0:0)){D=o+32|0;c[D>>2]=c[i>>2];c[D+4>>2]=c[i+4>>2];c[D+8>>2]=c[i+8>>2];c[D+12>>2]=c[i+12>>2];D=q+16|0;c[o>>2]=c[D>>2];c[o+4>>2]=c[D+4>>2];c[o+8>>2]=c[D+8>>2];c[o+12>>2]=c[D+12>>2]}else{c[o>>2]=c[i>>2];c[o+4>>2]=c[i+4>>2];c[o+8>>2]=c[i+8>>2];c[o+12>>2]=c[i+12>>2];D=o+32|0;C=q+16|0;c[D>>2]=c[C>>2];c[D+4>>2]=c[C+4>>2];c[D+8>>2]=c[C+8>>2];c[D+12>>2]=c[C+12>>2]}k=o+32|0;i=o;i=Km(c[k>>2]|0,c[k+4>>2]|0,c[i>>2]|0,c[i+4>>2]|0)|0;k=E;n=o+48|0;c[n>>2]=i;c[n+4>>2]=k;n=o+40|0;m=o+8|0;m=Km(c[n>>2]|0,c[n+4>>2]|0,c[m>>2]|0,c[m+4>>2]|0)|0;n=E;D=o+56|0;c[D>>2]=m;c[D+4>>2]=n;if((m|0)==0&(n|0)==0)l=-1.e+40;else l=(+(i>>>0)+4294967296.0*+(k|0))/(+(m>>>0)+4294967296.0*+(n|0));h[o+64>>3]=l;c[o+72>>2]=e;if(g){D=p;g=r;g=(c[D>>2]|0)==(c[g>>2]|0)?(c[D+4>>2]|0)==(c[g+4>>2]|0):0}else g=0}while((q|0)!=(f|0));if(g){wf(j);return}o=b+20|0;g=c[o>>2]|0;p=b+24|0;e=c[p>>2]|0;i=e;if((g|0)==(e|0)){q=b+16|0;r=c[q>>2]|0;n=g-r|0;m=n>>2;g=m+1|0;if(g>>>0>1073741823)Bl();e=i-r|0;k=e>>1;k=e>>2>>>0<536870911?(k>>>0<g>>>0?g:k):1073741823;if(!k)g=0;else{if(k>>>0>1073741823){G=Fa(4)|0;c[G>>2]=8316;$a(G|0,1336,91)}i=k<<2;i=(i|0)==0?1:i;g=vf(i)|0;e:do if(!g)do{g=c[5972]|0;c[5972]=g+0;if(!g){g=0;break e}ub[g&3]();g=vf(i)|0}while(!(g|0));while(0)}j=g+(m<<2)|0;c[j>>2]=F;i=j+(0-m<<2)|0;if((n|0)>0)Vm(i|0,r|0,n|0)|0;c[q>>2]=i;c[o>>2]=j+4;c[p>>2]=g+(k<<2);if(r|0)wf(r)}else{c[g>>2]=F;c[o>>2]=(c[o>>2]|0)+4}d=b+8|0;m=0;while(1){while(1){while(1){i=c[f+100>>2]|0;F=f;e=i;if(((c[F>>2]|0)==(c[e>>2]|0)?(c[F+4>>2]|0)==(c[e+4>>2]|0):0)?(F=f+8|0,e=i+8|0,(c[F>>2]|0)==(c[e>>2]|0)?(c[F+4>>2]|0)==(c[e+4>>2]|0):0):0){F=f+16|0;e=f+32|0;if(!((c[F>>2]|0)==(c[e>>2]|0)?(c[F+4>>2]|0)==(c[e+4>>2]|0):0))break;F=f+24|0;e=f+40|0;if(!((c[F>>2]|0)==(c[e>>2]|0)?(c[F+4>>2]|0)==(c[e+4>>2]|0):0))break}f=c[f+96>>2]|0}e=f+56|0;g=i+56|0;g=(c[g>>2]|0)==0&(c[g+4>>2]|0)==0;if((c[e>>2]|0)==0&(c[e+4>>2]|0)==0)if(g){g=i;G=101}else G=103;else if(g){g=i;G=101}else break;if((G|0)==101){while(1){G=0;j=c[g+100>>2]|0;e=j+56|0;if((c[e>>2]|0)==0&(c[e+4>>2]|0)==0){g=j;G=101}else break}e=g+56|0;if((c[e>>2]|0)==0&(c[e+4>>2]|0)==0){f=g;i=j;G=103}else{f=g;k=g;i=j;g=j}}if((G|0)==103){G=0;g=f;do{g=c[g+96>>2]|0;e=g+56|0}while((c[e>>2]|0)==0&(c[e+4>>2]|0)==0);k=g;g=c[g+100>>2]|0}F=k+40|0;e=g+8|0;if((c[F>>2]|0)==(c[e>>2]|0)?(c[F+4>>2]|0)==(c[e+4>>2]|0):0)f=k;else{G=107;break}}if((G|0)==107){G=0;F=i;C=c[F+4>>2]|0;e=k;D=c[e+4>>2]|0;f=(C|0)<(D|0)|((C|0)==(D|0)?(c[F>>2]|0)>>>0<(c[e>>2]|0)>>>0:0)?f:k}if((f|0)==(m|0))break;r=(m|0)==0?f:m;g=vf(24)|0;f:do if(!g)do{g=c[5972]|0;c[5972]=g+0;if(!g){g=0;break f}ub[g&3]();g=vf(24)|0}while(!(g|0));while(0);p=g+16|0;c[p>>2]=0;e=f+8|0;m=c[e+4>>2]|0;i=g;c[i>>2]=c[e>>2];c[i+4>>2]=m;i=c[f+100>>2]|0;m=g+8|0;if(+h[f+64>>3]<+h[i+64>>3]){c[m>>2]=i;k=g+12|0;c[k>>2]=f;q=0;j=i}else{c[m>>2]=f;k=g+12|0;c[k>>2]=i;q=1;j=f;f=i}c[j+76>>2]=1;c[f+76>>2]=2;n=(c[j+96>>2]|0)==(f|0)?-1:1;c[j+80>>2]=n;c[f+80>>2]=0-n;n=je(b,j,q)|0;o=je(b,c[k>>2]|0,q^1)|0;if((c[(c[m>>2]|0)+92>>2]|0)!=-2){if((c[(c[k>>2]|0)+92>>2]|0)==-2)c[k>>2]=0}else c[m>>2]=0;f=c[d>>2]|0;do if(!f)c[d>>2]=g;else{k=g;j=c[k>>2]|0;k=c[k+4>>2]|0;e=f;F=c[e+4>>2]|0;if(!((k|0)<(F|0)|((k|0)==(F|0)?j>>>0<(c[e>>2]|0)>>>0:0))){c[p>>2]=f;c[d>>2]=g;break}do{i=f+16|0;f=c[i>>2]|0;if(!f){f=0;break}e=f;F=c[e+4>>2]|0}while((k|0)<(F|0)|((k|0)==(F|0)?j>>>0<(c[e>>2]|0)>>>0:0));c[p>>2]=f;c[i>>2]=g}while(0);m=r;f=q?n:o}return}function le(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;z=i;i=i+16|0;v=z;y=b+76|0;if(a[y>>0]|0){i=z;return}j=c[b>>2]|0;if(a[b+(c[j+-12>>2]|0)+29>>0]|0){n=Fa(16)|0;c[n>>2]=1712;m=n+4|0;c[m>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;a:do if(!0){h=14408;p=6}else{h=14408;j=14408;while(1){if(!(a[h>>0]|0)){h=j;break a}h=h+1|0;j=h;if(!(j&3)){p=6;break}}}while(0);if((p|0)==6){while(1){j=c[h>>2]|0;if(!((j&-2139062144^-2139062144)&j+-16843009))h=h+4|0;else break}if((j&255)<<24>>24)do h=h+1|0;while((a[h>>0]|0)!=0)}l=h-14408|0;if(l>>>0>4294967279)Il();if(l>>>0<11){a[n+15>>0]=l;if(!l){z=m;z=z+l|0;a[z>>0]=0;$a(n|0,72,21)}else h=m}else{k=l+16&-16;j=(k|0)==0?1:k;h=vf(j)|0;b:do if(!h)do{h=c[5972]|0;c[5972]=h+0;if(!h){h=0;break b}ub[h&3]();h=vf(j)|0}while(!(h|0));while(0);c[m>>2]=h;c[n+12>>2]=k|-2147483648;c[n+8>>2]=l}Vm(h|0,14408,l|0)|0;z=h;z=z+l|0;a[z>>0]=0;$a(n|0,72,21)}a[y>>0]=1;w=e+4|0;t=c[w>>2]|0;u=c[e>>2]|0;o=u;l=t;if(!((t|0)==(u|0)|(l|0)==(o|0))){while(1){j=l+-12|0;c[w>>2]=j;m=c[j>>2]|0;n=m;if(m){j=l+-8|0;l=c[j>>2]|0;if((l|0)!=(m|0))c[j>>2]=l+(~((l+-16-n|0)>>>4)<<4);wf(m);j=c[w>>2]|0}if((j|0)==(o|0))break;else l=j}j=c[b>>2]|0}c[b+84>>2]=f;c[b+80>>2]=g;c[b+52>>2]=d;a[b+89>>0]=0;c:do if(sb[c[j+12>>2]&63](b)|0){o=b+4|0;u=b+8|0;me(e,(c[u>>2]|0)-(c[o>>2]|0)>>2);j=c[u>>2]|0;m=c[o>>2]|0;if((j|0)==(m|0)){h=j;x=u;k=j;break}q=v+4|0;r=v+8|0;s=e+8|0;t=v+8|0;p=0;d:while(1){l=m+(p<<2)|0;if(c[(c[l>>2]|0)+16>>2]|0){c[v>>2]=0;c[q>>2]=0;c[r>>2]=0;n=c[(c[(c[l>>2]|0)+16>>2]|0)+28>>2]|0;if(n|0){j=n;f=0;while(1){m=f+1|0;j=c[j+24>>2]|0;if((j|0)==(n|0))break;else f=m}if((m|0)>=2){if(m>>>0>268435455){p=38;break}l=m<<4;l=(l|0)==0?1:l;j=vf(l)|0;e:do if(!j)do{j=c[5972]|0;c[5972]=j+0;if(!j){j=0;break e}ub[j&3]();j=vf(l)|0}while(!(j|0));while(0);g=j;m=j+(m<<4)|0;c[v>>2]=g;c[q>>2]=g;c[t>>2]=m;f:do if((f|0)>=0){d=0;while(1){l=n+8|0;if((j|0)==(m|0))Tb(v,l);else{c[j>>2]=c[l>>2];c[j+4>>2]=c[l+4>>2];c[j+8>>2]=c[l+8>>2];c[j+12>>2]=c[l+12>>2];c[q>>2]=j+16}if((d|0)>=(f|0))break f;n=c[n+28>>2]|0;d=d+1|0;j=c[q>>2]|0;m=c[t>>2]|0}}while(0);d=c[w>>2]|0;if((d|0)==(c[s>>2]|0)){Ob(e,v);j=c[v>>2]|0}else{c[d>>2]=0;g=d+4|0;c[g>>2]=0;c[d+8>>2]=0;n=c[q>>2]|0;j=c[v>>2]|0;l=n-j|0;f=l>>4;do if(f){if(f>>>0>268435455){p=46;break d}m=(l|0)==0?1:l;l=vf(m)|0;if(!l){do{j=c[5972]|0;c[5972]=j+0;if(!j){j=0;break}ub[j&3]();j=vf(m)|0}while(!(j|0));m=j;j=c[v>>2]|0;l=c[q>>2]|0}else{m=l;l=n}c[g>>2]=m;c[d>>2]=m;c[d+8>>2]=m+(f<<4);l=l-j|0;if((l|0)<=0)break;Vm(m|0,j|0,l|0)|0;c[g>>2]=m+(l>>4<<4)}while(0);c[w>>2]=(c[w>>2]|0)+12}l=j;if(j|0){m=c[q>>2]|0;if((m|0)!=(j|0))c[q>>2]=m+(~((m+-16-l|0)>>>4)<<4);wf(j)}}}m=c[o>>2]|0;j=c[u>>2]|0}p=p+1|0;if(p>>>0>=j-m>>2>>>0){f=u;d=u;h=m;p=66;break c}}if((p|0)==38){z=Fa(4)|0;c[z>>2]=8316;$a(z|0,1336,91)}else if((p|0)==46)Bl()}else{j=b+8|0;h=b+4|0;f=j;d=j;o=h;j=c[j>>2]|0;h=c[h>>2]|0;p=66}while(0);if((p|0)==66){k=h;if((j|0)==(h|0))x=f;else{n=b+4|0;m=0;h=k;while(1){k=c[h+(m<<2)>>2]|0;l=k+16|0;j=c[l>>2]|0;if(!j){if(k)p=75}else{c[(c[j+28>>2]|0)+24>>2]=0;h=c[l>>2]|0;if(!h)p=75;else{do{c[l>>2]=c[h+24>>2];wf(h);h=c[l>>2]|0}while((h|0)!=0);p=75}}if((p|0)==75){p=0;wf(k);h=c[n>>2]|0}c[h+(m<<2)>>2]=0;m=m+1|0;h=c[d>>2]|0;b=c[o>>2]|0;j=b;if(m>>>0>=h-b>>2>>>0){x=f;k=j;break}else h=j}}}if((h|0)!=(k|0))c[x>>2]=h+(~((h+-4-k|0)>>>2)<<2);a[y>>0]=0;i=z;return}function me(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;k=a+8|0;i=c[a>>2]|0;f=i;if((((c[k>>2]|0)-i|0)/12|0)>>>0>=b>>>0)return;l=a+4|0;e=c[l>>2]|0;h=(e-i|0)/12|0;if(!b)d=0;else{if(b>>>0>357913941){l=Fa(4)|0;c[l>>2]=8316;$a(l|0,1336,91)}g=b*12|0;g=(g|0)==0?1:g;d=vf(g)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(g)|0}while(!(d|0));while(0)}h=d+(h*12|0)|0;j=h;b=d+(b*12|0)|0;if((e|0)==(f|0))g=j;else{g=j;d=h;do{i=d+-12|0;h=e;e=e+-12|0;c[i>>2]=0;m=d+-8|0;c[m>>2]=0;c[d+-4>>2]=0;c[i>>2]=c[e>>2];i=h+-8|0;c[m>>2]=c[i>>2];h=h+-4|0;c[d+-4>>2]=c[h>>2];c[h>>2]=0;c[i>>2]=0;c[e>>2]=0;d=g+-12|0;g=d}while((e|0)!=(f|0));i=c[a>>2]|0;f=c[l>>2]|0}c[a>>2]=g;c[l>>2]=j;c[k>>2]=b;b=i;if((f|0)!=(b|0))do{d=f;f=f+-12|0;g=c[f>>2]|0;h=g;if(g|0){d=d+-8|0;e=c[d>>2]|0;if((e|0)!=(g|0))c[d>>2]=e+(~((e+-16-h|0)>>>4)<<4);wf(g)}}while((f|0)!=(b|0));if(!i)return;wf(i);return}function ne(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;i=a+8|0;j=c[a>>2]|0;if((c[i>>2]|0)-j>>4>>>0>=b>>>0)return;k=a+4|0;h=(c[k>>2]|0)-j|0;g=h>>4;if(!b)d=0;else{if(b>>>0>268435455){k=Fa(4)|0;c[k>>2]=8316;$a(k|0,1336,91)}e=b<<4;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}f=d+(g<<4)|0;e=f+(0-g<<4)|0;if((h|0)>0)Vm(e|0,j|0,h|0)|0;c[a>>2]=e;c[k>>2]=f;c[i>>2]=d+(b<<4);if(!j)return;wf(j);return}function oe(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;C=i;i=i+16|0;z=C;B=b+76|0;if(a[B>>0]|0){i=C;return}a[B>>0]=1;c[b+84>>2]=e;c[b+80>>2]=f;c[b+52>>2]=1;a[b+89>>0]=1;do if(sb[c[(c[b>>2]|0)+12>>2]&63](b)|0){he(d);t=d+44|0;m=b+4|0;y=b+8|0;pe(t,(c[y>>2]|0)-(c[m>>2]|0)>>2);e=c[y>>2]|0;f=c[m>>2]|0;a:do if((e|0)!=(f|0)){u=d+48|0;v=d+52|0;s=0;while(1){q=c[f+(s<<2)>>2]|0;r=q+16|0;j=c[r>>2]|0;if(!j)g=0;else{h=j;g=0;do{g=g+1|0;h=c[h+24>>2]|0}while((h|0)!=(j|0))}p=(a[q+5>>0]|0)!=0;if(!((g|0)<2&p)?!((g|0)<3&(p^1)):0){j=q+8|0;e=c[j>>2]|0;do if(e|0){h=a[q+4>>0]|0;f=a[e+4>>0]|0;if(h<<24>>24!=f<<24>>24?(c[e+16>>2]|0)!=0:0)break;while(1){if(f<<24>>24!=h<<24>>24?c[e+16>>2]|0:0)break;f=c[e+8>>2]|0;if(!f){e=0;break}e=f;f=a[f+4>>0]|0}c[j>>2]=e}while(0);e=vf(44)|0;b:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break b}ub[e&3]();e=vf(44)|0}while(!(e|0));while(0);c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;c[e+24>>2]=0;c[e+28>>2]=0;a[e+32>>0]=0;o=e;f=c[u>>2]|0;p=c[v>>2]|0;h=p;if((f|0)==(p|0)){p=c[t>>2]|0;n=f-p|0;l=n>>2;f=l+1|0;if(f>>>0>1073741823){A=27;break}j=h-p|0;k=j>>1;k=j>>2>>>0<536870911?(k>>>0<f>>>0?f:k):1073741823;if(!k)f=0;else{if(k>>>0>1073741823){A=30;break}h=k<<2;h=(h|0)==0?1:h;f=vf(h)|0;c:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break c}ub[f&3]();f=vf(h)|0}while(!(f|0));while(0)}j=f+(l<<2)|0;c[j>>2]=o;h=j+(0-l<<2)|0;if((n|0)>0)Vm(h|0,p|0,n|0)|0;c[t>>2]=h;c[u>>2]=j+4;c[v>>2]=f+(k<<2);if(p|0)wf(p)}else{c[f>>2]=o;c[u>>2]=(c[u>>2]|0)+4}c[q+12>>2]=o;c[e+24>>2]=0;c[e+28>>2]=0;ne(e,g);if((g|0)>0){l=e+4|0;n=e+8|0;k=0;f=c[r>>2]|0;do{f=c[f+28>>2]|0;h=f+8|0;j=c[l>>2]|0;if((j|0)==(c[n>>2]|0))Tb(e,h);else{c[j>>2]=c[h>>2];c[j+4>>2]=c[h+4>>2];c[j+8>>2]=c[h+8>>2];c[j+12>>2]=c[h+12>>2];c[l>>2]=(c[l>>2]|0)+16}k=k+1|0}while((k|0)!=(g|0))}g=c[m>>2]|0;e=c[y>>2]|0}else g=f;s=s+1|0;f=e-g>>2;if(s>>>0>=f>>>0){w=f;break a}else f=g}if((A|0)==27)Bl();else if((A|0)==30){C=Fa(4)|0;c[C>>2]=8316;$a(C|0,1336,91)}}else w=0;while(0);o=d+12|0;pe(o,w);f=c[y>>2]|0;e=c[m>>2]|0;if((f|0)==(e|0)){e=f;g=y;break}l=d+16|0;n=d+20|0;k=0;do{e=c[e+(k<<2)>>2]|0;j=c[e+12>>2]|0;do if(j|0){if(a[e+5>>0]|0){a[j+32>>0]=1;e=c[l>>2]|0;f=e-(c[o>>2]|0)>>2;c[z>>2]=j;if(e>>>0<(c[n>>2]|0)>>>0){c[e>>2]=j;c[l>>2]=(c[l>>2]|0)+4}else ie(o,z);c[j+24>>2]=d;c[j+28>>2]=f;break}e=c[e+8>>2]|0;if(e|0?(x=c[e+12>>2]|0,x|0):0){e=x+12|0;f=x+16|0;g=c[f>>2]|0;h=g-(c[e>>2]|0)>>2;c[z>>2]=j;if(g>>>0<(c[x+20>>2]|0)>>>0){c[g>>2]=j;c[f>>2]=(c[f>>2]|0)+4}else ie(e,z);c[j+24>>2]=x;c[j+28>>2]=h;break}e=c[l>>2]|0;f=e-(c[o>>2]|0)>>2;c[z>>2]=j;if(e>>>0<(c[n>>2]|0)>>>0){c[e>>2]=j;c[l>>2]=(c[l>>2]|0)+4}else ie(o,z);c[j+24>>2]=d;c[j+28>>2]=f}while(0);k=k+1|0;h=c[y>>2]|0;e=c[m>>2]|0}while(k>>>0<h-e>>2>>>0);g=y;n=y;A=64}else{h=b+8|0;e=b+4|0;g=h;n=h;m=e;h=c[h>>2]|0;e=c[e>>2]|0;A=64}while(0);if((A|0)==64){f=e;if((h|0)!=(e|0)){l=b+4|0;k=0;do{h=c[f+(k<<2)>>2]|0;j=h+16|0;e=c[j>>2]|0;if(!e){if(h)A=73}else{c[(c[e+28>>2]|0)+24>>2]=0;e=c[j>>2]|0;if(!e)A=73;else{do{c[j>>2]=c[e+24>>2];wf(e);e=c[j>>2]|0}while((e|0)!=0);A=73}}if((A|0)==73){A=0;wf(h);f=c[l>>2]|0}c[f+(k<<2)>>2]=0;k=k+1|0;e=c[n>>2]|0;b=c[m>>2]|0;f=b}while(k>>>0<e-b>>2>>>0)}}if((e|0)!=(f|0))c[g>>2]=e+(~((e+-4-f|0)>>>2)<<2);a[B>>0]=0;i=C;return}function pe(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;i=a+8|0;j=c[a>>2]|0;if((c[i>>2]|0)-j>>2>>>0>=b>>>0)return;k=a+4|0;h=(c[k>>2]|0)-j|0;g=h>>2;if(!b)d=0;else{if(b>>>0>1073741823){k=Fa(4)|0;c[k>>2]=8316;$a(k|0,1336,91)}e=b<<2;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}f=d+(g<<2)|0;e=f+(0-g<<2)|0;if((h|0)>0)Vm(e|0,j|0,h|0)|0;c[a>>2]=e;c[k>>2]=f;c[i>>2]=d+(b<<2);if(!j)return;wf(j);return}function qe(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;k=a+140|0;l=a+144|0;h=c[l>>2]|0;g=c[k>>2]|0;b=g;i=h;if((h-g|0)>0){j=0;e=b;d=i;f=b;b=i;do{i=c[e+(j<<2)>>2]|0;if(i){b=c[i+12>>2]|0;d=b;if(b|0){e=i+16|0;f=c[e>>2]|0;if((f|0)!=(b|0))c[e>>2]=f+(~((f+-4-d|0)>>>2)<<2);wf(b)}b=c[i>>2]|0;d=b;if(b|0){e=i+4|0;f=c[e>>2]|0;if((f|0)!=(b|0))c[e>>2]=f+(~((f+-16-d|0)>>>4)<<4);wf(b)}wf(i);h=c[l>>2]|0;g=c[k>>2]|0;b=h;d=b;f=g}j=j+1|0;e=g}while((j|0)<(h-g>>2|0))}else{e=b;d=i;f=b;b=i}if((b|0)!=(e|0)){d=b+(~((b+-4-g|0)>>>2)<<2)|0;c[l>>2]=d}b=a+112|0;c[b>>2]=-1;c[b+4>>2]=-1;b=f;if(f|0){if((d|0)!=(f|0))c[l>>2]=d+(~((d+-4-b|0)>>>2)<<2);wf(f)}b=c[a+128>>2]|0;d=b;if(b|0){e=a+132|0;f=c[e>>2]|0;if((f|0)!=(b|0))c[e>>2]=f+(~((f+-16-d|0)>>>4)<<4);wf(b)}b=c[a+52>>2]|0;d=b;if(b|0){e=a+56|0;f=c[e>>2]|0;if((f|0)!=(b|0))c[e>>2]=f+(~((f+-16-d|0)>>>4)<<4);wf(b)}b=c[a+40>>2]|0;d=b;if(b|0){e=a+44|0;f=c[e>>2]|0;if((f|0)!=(b|0))c[e>>2]=f+(~((f+-16-d|0)>>>4)<<4);wf(b)}b=c[a+28>>2]|0;d=b;if(b|0){e=a+32|0;f=c[e>>2]|0;if((f|0)!=(b|0))c[e>>2]=f+(~((f+-16-d|0)>>>4)<<4);wf(b)}i=a+16|0;b=c[i>>2]|0;if(!b)return;h=a+20|0;d=c[h>>2]|0;if((d|0)!=(b|0)){do{e=d+-12|0;c[h>>2]=e;f=c[e>>2]|0;g=f;if(!f)d=e;else{d=d+-8|0;e=c[d>>2]|0;if((e|0)!=(f|0))c[d>>2]=e+(~((e+-16-g|0)>>>4)<<4);wf(f);d=c[h>>2]|0}}while((d|0)!=(b|0));b=c[i>>2]|0}wf(b);return}function re(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;i=a+4|0;j=c[a>>2]|0;k=(c[i>>2]|0)-j|0;h=k>>4;d=h+1|0;if(d>>>0>268435455)Bl();l=a+8|0;f=(c[l>>2]|0)-j|0;g=f>>3;g=f>>4>>>0<134217727?(g>>>0<d>>>0?d:g):268435455;if(!g)d=0;else{if(g>>>0>268435455){l=Fa(4)|0;c[l>>2]=8316;$a(l|0,1336,91)}e=g<<4;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}f=d+(h<<4)|0;c[f>>2]=c[b>>2];c[f+4>>2]=c[b+4>>2];c[f+8>>2]=c[b+8>>2];c[f+12>>2]=c[b+12>>2];e=f+(0-h<<4)|0;if((k|0)>0)Vm(e|0,j|0,k|0)|0;c[a>>2]=e;c[i>>2]=f+16;c[l>>2]=d+(g<<4);if(!j)return;wf(j);return}function se(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0.0,j=0,k=0,l=0.0,m=0.0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0,t=0,u=0,v=0,w=0.0;v=i;i=i+16|0;u=v;j=c[d>>2]|0;t=a+52|0;f=c[t>>2]|0;r=+h[f+(j<<4)>>3];l=+h[f+(b<<4)+8>>3];m=+h[f+(b<<4)>>3];p=+h[f+(j<<4)+8>>3];g=r*l-m*p;f=a+72|0;h[f>>3]=g;s=a+64|0;q=+h[s>>3];w=g*q;if(w<1.0&w>-1.0){i=v;return}if(!(g>1.0)){if(g<-1.0){h[f>>3]=-1.0;g=-1.0}}else{h[f>>3]=1.0;g=1.0}a:do if(q*g<0.0){n=a+40|0;o=a+28|0;f=c[o>>2]|0;j=f+(b<<4)|0;r=r*q+(+((c[j>>2]|0)>>>0)+4294967296.0*+(c[j+4>>2]|0));r=r+(r<0.0?-.5:.5);j=+G(r)>=1.0?(r>0.0?~~+U(+F(r/4294967296.0),4294967295.0)>>>0:~~+S((r-+(~~r>>>0))/4294967296.0)>>>0):0;f=f+(b<<4)+8|0;w=p*q+(+((c[f>>2]|0)>>>0)+4294967296.0*+(c[f+4>>2]|0));w=w+(w<0.0?-.5:.5);f=+G(w)>=1.0?(w>0.0?~~+U(+F(w/4294967296.0),4294967295.0)>>>0:~~+S((w-+(~~w>>>0))/4294967296.0)>>>0):0;k=u;c[k>>2]=~~r>>>0;c[k+4>>2]=j;k=u+8|0;c[k>>2]=~~w>>>0;c[k+4>>2]=f;k=a+44|0;f=c[k>>2]|0;j=a+48|0;if(f>>>0<(c[j>>2]|0)>>>0){c[f>>2]=c[u>>2];c[f+4>>2]=c[u+4>>2];c[f+8>>2]=c[u+8>>2];c[f+12>>2]=c[u+12>>2];e=(c[k>>2]|0)+16|0;c[k>>2]=e}else{Ub(n,u);e=c[k>>2]|0}f=(c[o>>2]|0)+(b<<4)|0;if((e|0)==(c[j>>2]|0)){Tb(n,f);f=c[k>>2]|0}else{c[e>>2]=c[f>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];f=(c[k>>2]|0)+16|0;c[k>>2]=f}o=c[o>>2]|0;a=o+(b<<4)|0;t=c[t>>2]|0;w=+h[s>>3];r=+((c[a>>2]|0)>>>0)+4294967296.0*+(c[a+4>>2]|0)+ +h[t+(b<<4)>>3]*w;r=r+(r<0.0?-.5:.5);a=+G(r)>=1.0?(r>0.0?~~+U(+F(r/4294967296.0),4294967295.0)>>>0:~~+S((r-+(~~r>>>0))/4294967296.0)>>>0):0;s=o+(b<<4)+8|0;w=+((c[s>>2]|0)>>>0)+4294967296.0*+(c[s+4>>2]|0)+w*+h[t+(b<<4)+8>>3];w=w+(w<0.0?-.5:.5);s=+G(w)>=1.0?(w>0.0?~~+U(+F(w/4294967296.0),4294967295.0)>>>0:~~+S((w-+(~~w>>>0))/4294967296.0)>>>0):0;t=u;c[t>>2]=~~r>>>0;c[t+4>>2]=a;t=u+8|0;c[t>>2]=~~w>>>0;c[t+4>>2]=s;if(f>>>0<(c[j>>2]|0)>>>0){c[f>>2]=c[u>>2];c[f+4>>2]=c[u+4>>2];c[f+8>>2]=c[u+8>>2];c[f+12>>2]=c[u+12>>2];c[k>>2]=(c[k>>2]|0)+16}else Ub(n,u)}else switch(e|0){case 2:{g=r*m+l*p+1.0;if(!(g>=+h[a+96>>3])){te(a,b,j);break a}w=q/g;e=c[a+28>>2]|0;t=e+(b<<4)|0;r=(r+m)*w+(+((c[t>>2]|0)>>>0)+4294967296.0*+(c[t+4>>2]|0));r=r+(r<0.0?-.5:.5);t=+G(r)>=1.0?(r>0.0?~~+U(+F(r/4294967296.0),4294967295.0)>>>0:~~+S((r-+(~~r>>>0))/4294967296.0)>>>0):0;e=e+(b<<4)+8|0;w=(l+p)*w+(+((c[e>>2]|0)>>>0)+4294967296.0*+(c[e+4>>2]|0));w=w+(w<0.0?-.5:.5);e=+G(w)>=1.0?(w>0.0?~~+U(+F(w/4294967296.0),4294967295.0)>>>0:~~+S((w-+(~~w>>>0))/4294967296.0)>>>0):0;f=u;c[f>>2]=~~r>>>0;c[f+4>>2]=t;f=u+8|0;c[f>>2]=~~w>>>0;c[f+4>>2]=e;f=a+44|0;e=c[f>>2]|0;if(e>>>0<(c[a+48>>2]|0)>>>0){c[e>>2]=c[u>>2];c[e+4>>2]=c[u+4>>2];c[e+8>>2]=c[u+8>>2];c[e+12>>2]=c[u+12>>2];c[f>>2]=(c[f>>2]|0)+16}else Ub(a+40|0,u);break a}case 0:{te(a,b,j);break a}case 1:{ue(a,b,j);break a}default:break a}while(0);c[d>>2]=b;i=v;return}function te(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0.0,p=0,q=0.0,r=0.0,s=0.0;n=i;i=i+16|0;l=n;m=a+52|0;f=c[m>>2]|0;r=+h[f+(d<<4)>>3];s=+h[f+(d<<4)+8>>3];e=+L(+(+P(+(+h[a+72>>3]),+(r*+h[f+(b<<4)>>3]+s*+h[f+(b<<4)+8>>3]))*.25));f=a+40|0;g=a+28|0;d=c[g>>2]|0;p=d+(b<<4)|0;j=a+64|0;o=+h[j>>3];q=+((c[p>>2]|0)>>>0)+4294967296.0*+(c[p+4>>2]|0)+(r-s*e)*o;q=q+(q<0.0?-.5:.5);p=+G(q)>=1.0?(q>0.0?~~+U(+F(q/4294967296.0),4294967295.0)>>>0:~~+S((q-+(~~q>>>0))/4294967296.0)>>>0):0;d=d+(b<<4)+8|0;o=(s+r*e)*o+(+((c[d>>2]|0)>>>0)+4294967296.0*+(c[d+4>>2]|0));o=o+(o<0.0?-.5:.5);d=+G(o)>=1.0?(o>0.0?~~+U(+F(o/4294967296.0),4294967295.0)>>>0:~~+S((o-+(~~o>>>0))/4294967296.0)>>>0):0;k=l;c[k>>2]=~~q>>>0;c[k+4>>2]=p;k=l+8|0;c[k>>2]=~~o>>>0;c[k+4>>2]=d;k=a+44|0;d=c[k>>2]|0;a=a+48|0;if(d>>>0<(c[a>>2]|0)>>>0){c[d>>2]=c[l>>2];c[d+4>>2]=c[l+4>>2];c[d+8>>2]=c[l+8>>2];c[d+12>>2]=c[l+12>>2];d=(c[k>>2]|0)+16|0;c[k>>2]=d}else{Ub(f,l);d=c[k>>2]|0}p=c[g>>2]|0;g=p+(b<<4)|0;o=+h[j>>3];j=c[m>>2]|0;s=+h[j+(b<<4)>>3];q=+h[j+(b<<4)+8>>3];r=+((c[g>>2]|0)>>>0)+4294967296.0*+(c[g+4>>2]|0)+o*(s+e*q);r=r+(r<0.0?-.5:.5);j=+G(r)>=1.0?(r>0.0?~~+U(+F(r/4294967296.0),4294967295.0)>>>0:~~+S((r-+(~~r>>>0))/4294967296.0)>>>0):0;m=p+(b<<4)+8|0;s=+((c[m>>2]|0)>>>0)+4294967296.0*+(c[m+4>>2]|0)+o*(q-e*s);s=s+(s<0.0?-.5:.5);m=+G(s)>=1.0?(s>0.0?~~+U(+F(s/4294967296.0),4294967295.0)>>>0:~~+S((s-+(~~s>>>0))/4294967296.0)>>>0):0;p=l;c[p>>2]=~~r>>>0;c[p+4>>2]=j;p=l+8|0;c[p>>2]=~~s>>>0;c[p+4>>2]=m;if(d>>>0<(c[a>>2]|0)>>>0){c[d>>2]=c[l>>2];c[d+4>>2]=c[l+4>>2];c[d+8>>2]=c[l+8>>2];c[d+12>>2]=c[l+12>>2];c[k>>2]=(c[k>>2]|0)+16;i=n;return}else{Ub(f,l);i=n;return}}function ue(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0.0,g=0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;w=i;i=i+16|0;v=w;t=a+52|0;s=c[t>>2]|0;m=+h[s+(d<<4)>>3];f=+h[s+(b<<4)>>3];l=+h[s+(d<<4)+8>>3];e=+h[s+(b<<4)+8>>3];n=+P(+(+h[a+72>>3]),+(m*f+l*e));n=+h[a+104>>3]*+G(+n);s=~~(n+(n<0.0?-.5:.5))>>>0;u=a+40|0;if((s|0)>0){d=a+28|0;j=a+64|0;q=v+8|0;k=a+44|0;g=a+48|0;r=a+88|0;p=a+80|0;n=l;o=0;while(1){x=c[d>>2]|0;y=x+(b<<4)|0;l=+h[j>>3];f=+((c[y>>2]|0)>>>0)+4294967296.0*+(c[y+4>>2]|0)+m*l;f=f+(f<0.0?-.5:.5);y=+G(f)>=1.0?(f>0.0?~~+U(+F(f/4294967296.0),4294967295.0)>>>0:~~+S((f-+(~~f>>>0))/4294967296.0)>>>0):0;x=x+(b<<4)+8|0;l=n*l+(+((c[x>>2]|0)>>>0)+4294967296.0*+(c[x+4>>2]|0));l=l+(l<0.0?-.5:.5);x=+G(l)>=1.0?(l>0.0?~~+U(+F(l/4294967296.0),4294967295.0)>>>0:~~+S((l-+(~~l>>>0))/4294967296.0)>>>0):0;a=v;c[a>>2]=~~f>>>0;c[a+4>>2]=y;a=q;c[a>>2]=~~l>>>0;c[a+4>>2]=x;a=c[k>>2]|0;if(a>>>0<(c[g>>2]|0)>>>0){c[a>>2]=c[v>>2];c[a+4>>2]=c[v+4>>2];c[a+8>>2]=c[v+8>>2];c[a+12>>2]=c[v+12>>2];c[k>>2]=(c[k>>2]|0)+16}else Ub(u,v);e=+h[r>>3];f=+h[p>>3];l=n*e+m*f;o=o+1|0;if((o|0)==(s|0))break;else{m=m*e-n*f;n=l}}y=c[t>>2]|0;f=+h[y+(b<<4)>>3];e=+h[y+(b<<4)+8>>3]}else{j=a+64|0;k=a+44|0;g=a+48|0;d=a+28|0}y=c[d>>2]|0;x=y+(b<<4)|0;n=+h[j>>3];m=+((c[x>>2]|0)>>>0)+4294967296.0*+(c[x+4>>2]|0)+f*n;m=m+(m<0.0?-.5:.5);x=+G(m)>=1.0?(m>0.0?~~+U(+F(m/4294967296.0),4294967295.0)>>>0:~~+S((m-+(~~m>>>0))/4294967296.0)>>>0):0;y=y+(b<<4)+8|0;n=e*n+(+((c[y>>2]|0)>>>0)+4294967296.0*+(c[y+4>>2]|0));n=n+(n<0.0?-.5:.5);y=+G(n)>=1.0?(n>0.0?~~+U(+F(n/4294967296.0),4294967295.0)>>>0:~~+S((n-+(~~n>>>0))/4294967296.0)>>>0):0;d=v;c[d>>2]=~~m>>>0;c[d+4>>2]=x;d=v+8|0;c[d>>2]=~~n>>>0;c[d+4>>2]=y;d=c[k>>2]|0;if(d>>>0<(c[g>>2]|0)>>>0){c[d>>2]=c[v>>2];c[d+4>>2]=c[v+4>>2];c[d+8>>2]=c[v+8>>2];c[d+12>>2]=c[v+12>>2];c[k>>2]=(c[k>>2]|0)+16;i=w;return}else{Ub(u,v);i=w;return}}function ve(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0;o=i;i=i+16|0;n=o;if(!b){e=0;i=o;return e|0}j=d;k=f-j|0;m=g+12|0;l=c[m>>2]|0;k=(l|0)>(k|0)?l-k|0:0;l=e;g=l-j|0;if((g|0)>0?(lb[c[(c[b>>2]|0)+48>>2]&31](b,d,g)|0)!=(g|0):0){e=0;i=o;return e|0}do if((k|0)>0){c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;if(k>>>0<11){d=n+11|0;a[d>>0]=k;g=n;j=n}else{j=k+16&-16;d=(j|0)==0?1:j;g=vf(d)|0;a:do if(!g)do{g=c[5972]|0;c[5972]=g+0;if(!g){g=0;break a}ub[g&3]();g=vf(d)|0}while(!(g|0));while(0);c[n>>2]=g;c[n+8>>2]=j|-2147483648;c[n+4>>2]=k;d=n+11|0;j=n}Mm(g|0,h|0,k|0)|0;a[g+k>>0]=0;n=(lb[c[(c[b>>2]|0)+48>>2]&31](b,(a[d>>0]|0)<0?c[j>>2]|0:n,k)|0)==(k|0);g=(a[d>>0]|0)<0;if(n){if(g)wf(c[j>>2]|0);break}if(g)wf(c[j>>2]|0);e=0;i=o;return e|0}while(0);f=f-l|0;if((f|0)>0?(lb[c[(c[b>>2]|0)+48>>2]&31](b,e,f)|0)!=(f|0):0){e=0;i=o;return e|0}c[m>>2]=0;e=b;i=o;return e|0}function we(a){a=a|0;var b=0,d=0;d=i;i=i+16|0;b=d;c[b>>2]=c[a+60>>2];a=bb(6,b|0)|0;if(a>>>0>4294963200){if(!(c[5356]|0))b=21468;else b=c[(en()|0)+64>>2]|0;c[b>>2]=0-a;a=-1}i=d;return a|0}function xe(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;n=i;i=i+48|0;h=n+16|0;g=n;f=n+32|0;c[f>>2]=d;j=f+4|0;m=b+48|0;k=c[m>>2]|0;c[j>>2]=e-((k|0)!=0&1);l=b+44|0;c[f+8>>2]=c[l>>2];c[f+12>>2]=k;if(!(c[5356]|0)){c[h>>2]=c[b+60>>2];c[h+4>>2]=f;c[h+8>>2]=2;f=hb(145,h|0)|0;if(f>>>0>4294963200){if(!(c[5356]|0))g=21468;else g=c[(en()|0)+64>>2]|0;c[g>>2]=0-f;f=-1;k=12}else k=11}else{Aa(100,b|0);c[g>>2]=c[b+60>>2];c[g+4>>2]=f;c[g+8>>2]=2;f=hb(145,g|0)|0;if(f>>>0>4294963200){if(!(c[5356]|0))g=21468;else g=c[(en()|0)+64>>2]|0;c[g>>2]=0-f;f=-1}ra(0);k=11}if((k|0)==11)if((f|0)>=1){j=c[j>>2]|0;if(f>>>0>j>>>0){g=c[l>>2]|0;h=b+4|0;c[h>>2]=g;c[b+8>>2]=g+(f-j);if(!(c[m>>2]|0))f=e;else{c[h>>2]=g+1;a[d+(e+-1)>>0]=a[g>>0]|0;f=e}}}else k=12;if((k|0)==12){c[b>>2]=f&48^16|c[b>>2];c[b+8>>2]=0;c[b+4>>2]=0}i=n;return f|0}function ye(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;g=i;i=i+32|0;h=g;e=g+20|0;c[h>>2]=c[a+60>>2];c[h+4>>2]=0;c[h+8>>2]=b;c[h+12>>2]=e;c[h+16>>2]=d;b=fb(140,h|0)|0;if(b>>>0<=4294963200)if((b|0)<0)f=7;else a=c[e>>2]|0;else{if(!(c[5356]|0))a=21468;else a=c[(en()|0)+64>>2]|0;c[a>>2]=0-b;f=7}if((f|0)==7){c[e>>2]=-1;a=-1}i=g;return a|0}function ze(){var a=0;if(!(c[5356]|0))a=21468;else a=c[(en()|0)+64>>2]|0;return a|0}function Ae(a){a=a|0;return}function Be(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;q=i;i=i+48|0;n=q+16|0;m=q;j=q+32|0;o=a+28|0;h=c[o>>2]|0;c[j>>2]=h;p=a+20|0;h=(c[p>>2]|0)-h|0;c[j+4>>2]=h;c[j+8>>2]=b;c[j+12>>2]=d;k=a+60|0;l=a+44|0;f=2;h=h+d|0;while(1){if(!(c[5356]|0)){c[n>>2]=c[k>>2];c[n+4>>2]=j;c[n+8>>2]=f;b=ib(146,n|0)|0;if(b>>>0>4294963200){if(!(c[5356]|0))e=21468;else e=c[(en()|0)+64>>2]|0;c[e>>2]=0-b;b=-1}}else{Aa(101,a|0);c[m>>2]=c[k>>2];c[m+4>>2]=j;c[m+8>>2]=f;b=ib(146,m|0)|0;if(b>>>0>4294963200){if(!(c[5356]|0))e=21468;else e=c[(en()|0)+64>>2]|0;c[e>>2]=0-b;b=-1}ra(0)}if((h|0)==(b|0)){b=13;break}if((b|0)<0){b=15;break}h=h-b|0;e=c[j+4>>2]|0;if(b>>>0<=e>>>0)if((f|0)==2){c[o>>2]=(c[o>>2]|0)+b;f=2;g=j}else g=j;else{g=c[l>>2]|0;c[o>>2]=g;c[p>>2]=g;b=b-e|0;f=f+-1|0;g=j+8|0;e=c[j+12>>2]|0}c[g>>2]=(c[g>>2]|0)+b;c[g+4>>2]=e-b;j=g}if((b|0)==13){n=c[l>>2]|0;c[a+16>>2]=n+(c[a+48>>2]|0);a=n;c[o>>2]=a;c[p>>2]=a}else if((b|0)==15){c[a+16>>2]=0;c[o>>2]=0;c[p>>2]=0;c[a>>2]=c[a>>2]|32;if((f|0)==2)d=0;else d=d-(c[j+4>>2]|0)|0}i=q;return d|0}function Ce(a){a=a|0;return}function De(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;g=i;i=i+80|0;f=g;c[b+36>>2]=4;if((c[b>>2]&64|0)==0?(c[f>>2]=c[b+60>>2],c[f+4>>2]=21505,c[f+8>>2]=g+12,Wa(54,f|0)|0):0)a[b+75>>0]=-1;f=Be(b,d,e)|0;i=g;return f|0}function Ee(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;p=i;i=i+192|0;n=p;h=T(d,b)|0;if(h|0){c[n+4>>2]=d;c[n>>2]=d;f=2;b=d;g=d;while(1){b=g+d+b|0;c[n+(f<<2)>>2]=b;if(b>>>0<h>>>0){m=g;f=f+1|0;g=b;b=m}else break}m=0-d|0;k=a+h+m|0;if(k>>>0>a>>>0){l=k;j=1;f=1;g=0;while(1){do if((f&3|0)!=3){b=j+-1|0;if((c[n+(b<<2)>>2]|0)>>>0<(l-a|0)>>>0)Ie(a,d,e,j,n);else Je(a,d,e,f,g,j,0,n);if((j|0)==1){j=0;h=f>>>31|g<<1;b=f<<1;break}else{h=b>>>0>31;q=h?0:f;b=h?j+-33|0:b;j=1;h=q>>>(32-b|0)|(h?f:g)<<b;b=q<<b;break}}else{Ie(a,d,e,j,n);j=j+2|0;h=g>>>2;b=f>>>2|g<<30}while(0);f=b|1;b=a+d|0;if(b>>>0<k>>>0){a=b;g=h}else break}}else{j=1;b=a;f=1;h=0}Je(b,d,e,f,h,j,0,n);g=(h|0)==0;if(!(g&((f|0)==1&(j|0)==1))){k=b;while(1){if((j|0)>=2){q=f>>>30;g=j+-2|0;l=(f<<1&2147483646|q<<31)^3;a=(q|h<<2)>>>1;Je(k+(0-(c[n+(g<<2)>>2]|0))+m|0,d,e,l,a,j+-1|0,1,n);q=a<<1|q&1;l=l<<1|1;a=k+m|0;Je(a,d,e,l,q,g,1,n);k=a;j=g;g=(q|0)==0;f=l;h=q;continue}b=f+-1|0;do if(b){if(!(b&1)){g=b;b=0;do{b=b+1|0;g=g>>>1}while(!(g&1|0))}else{if(g)b=32;else{if(!(h&1)){g=h;b=0}else{g=0;a=h;b=0;break}do{b=b+1|0;g=g>>>1}while(!(g&1|0))}b=b+32|0}if(b>>>0>31)o=25;else{g=b;a=h}}else{b=32;o=25}while(0);if((o|0)==25){o=0;g=b+-32|0;a=0;f=h}f=a<<32-g|f>>>g;h=a>>>g;j=b+j|0;g=(h|0)==0;if(g&((j|0)==1&(f|0)==1))break;else k=k+m|0}}}i=p;return}function Fe(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;k=i;i=i+112|0;l=k;c[l>>2]=0;j=l+4|0;c[j>>2]=a;c[l+44>>2]=a;m=(a|0)<0?-1:a+2147483647|0;g=l+8|0;c[g>>2]=m;c[l+76>>2]=-1;c[l+104>>2]=0;h=l+108|0;c[h>>2]=m-a;c[l+100>>2]=m;d=Ge(l,d,1,e,f)|0;if(b|0)c[b>>2]=a+((c[j>>2]|0)+(c[h>>2]|0)-(c[g>>2]|0));i=k;return d|0}function Ge(b,e,f,g,h){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;var i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;a:do if(e>>>0>36){if(!(c[5356]|0))g=21468;else g=c[(en()|0)+64>>2]|0;c[g>>2]=22;i=0;g=0}else{q=b+4|0;r=b+100|0;b:while(1){i=c[q>>2]|0;if(i>>>0<(c[r>>2]|0)>>>0){c[q>>2]=i+1;i=d[i>>0]|0}else i=He(b)|0;switch(i|0){case 9:case 10:case 11:case 12:case 13:case 32:break;default:break b}}c:do switch(i|0){case 43:case 45:{i=((i|0)==45)<<31>>31;j=c[q>>2]|0;if(j>>>0<(c[r>>2]|0)>>>0){c[q>>2]=j+1;p=i;i=d[j>>0]|0;break c}else{p=i;i=He(b)|0;break c}}default:p=0}while(0);j=(e|0)==0;do if((e|16|0)==16&(i|0)==48){i=c[q>>2]|0;if(i>>>0<(c[r>>2]|0)>>>0){c[q>>2]=i+1;i=d[i>>0]|0}else i=He(b)|0;if((i|32|0)!=120)if(j){e=8;n=51;break}else{n=37;break}i=c[q>>2]|0;if(i>>>0<(c[r>>2]|0)>>>0){c[q>>2]=i+1;i=d[i>>0]|0}else i=He(b)|0;if((d[14464+i>>0]|0)>15){g=(c[r>>2]|0)==0;if(!g)c[q>>2]=(c[q>>2]|0)+-1;if(!f){c[b+104>>2]=0;i=c[b+8>>2]|0;c[b+108>>2]=i-(c[q>>2]|0);c[r>>2]=i;i=0;g=0;break a}if(g){i=0;g=0;break a}c[q>>2]=(c[q>>2]|0)+-1;i=0;g=0;break a}else{e=16;n=51}}else{e=j?10:e;if((d[14464+i>>0]|0)>>>0<e>>>0)n=37;else{if(!(c[r>>2]|0))g=c[q>>2]|0;else{g=(c[q>>2]|0)+-1|0;c[q>>2]=g}c[b+104>>2]=0;h=c[b+8>>2]|0;c[b+108>>2]=h-g;c[r>>2]=h;if(!(c[5356]|0))g=21468;else g=c[(en()|0)+64>>2]|0;c[g>>2]=22;i=0;g=0;break a}}while(0);if((n|0)==37)if((e|0)==10){e=i+-48|0;if(e>>>0<10){i=0;j=e;do{i=(i*10|0)+j|0;e=c[q>>2]|0;if(e>>>0<(c[r>>2]|0)>>>0){c[q>>2]=e+1;e=d[e>>0]|0}else e=He(b)|0;j=e+-48|0}while(i>>>0<429496729&j>>>0<10);f=0}else{e=i;i=0;f=0}j=e+-48|0;if(j>>>0<10){m=j;while(1){j=Ym(i|0,f|0,10,0)|0;k=E;l=((m|0)<0)<<31>>31;o=~l;if(k>>>0>o>>>0|(k|0)==(o|0)&j>>>0>~m>>>0){j=e;e=m;break}i=Om(j|0,k|0,m|0,l|0)|0;f=E;e=c[q>>2]|0;if(e>>>0<(c[r>>2]|0)>>>0){c[q>>2]=e+1;e=d[e>>0]|0}else e=He(b)|0;m=e+-48|0;if(!((f>>>0<429496729|(f|0)==429496729&i>>>0<2576980378)&m>>>0<10)){j=e;e=m;break}}if(e>>>0>9){j=p;e=f}else{e=10;n=77}}else{j=p;e=f}}else n=51;d:do if((n|0)==51){if(!(e+-1&e)){n=a[14720+((e*23|0)>>>5&7)>>0]|0;f=a[14464+i>>0]|0;j=f&255;if(j>>>0<e>>>0){i=0;k=j;do{i=i<<n|k;j=c[q>>2]|0;if(j>>>0<(c[r>>2]|0)>>>0){c[q>>2]=j+1;j=d[j>>0]|0}else j=He(b)|0;f=a[14464+j>>0]|0;k=f&255}while(i>>>0<134217728&k>>>0<e>>>0);k=0}else{j=i;k=0;i=0}l=Tm(-1,-1,n|0)|0;m=E;if((f&255)>>>0>=e>>>0|(k>>>0>m>>>0|(k|0)==(m|0)&i>>>0>l>>>0)){f=k;n=77;break}else j=k;while(1){i=_m(i|0,j|0,n|0)|0;k=E;i=i|f&255;j=c[q>>2]|0;if(j>>>0<(c[r>>2]|0)>>>0){c[q>>2]=j+1;j=d[j>>0]|0}else j=He(b)|0;f=a[14464+j>>0]|0;if(k>>>0>m>>>0|(k|0)==(m|0)&i>>>0>l>>>0|(f&255)>>>0>=e>>>0){f=k;n=77;break d}else j=k}}f=a[14464+i>>0]|0;j=f&255;if(j>>>0<e>>>0){i=0;k=j;do{i=(T(i,e)|0)+k|0;j=c[q>>2]|0;if(j>>>0<(c[r>>2]|0)>>>0){c[q>>2]=j+1;j=d[j>>0]|0}else j=He(b)|0;f=a[14464+j>>0]|0;k=f&255}while(i>>>0<119304647&k>>>0<e>>>0);k=0}else{j=i;i=0;k=0}if((f&255)>>>0<e>>>0){n=Wm(-1,-1,e|0,0)|0;o=E;m=k;while(1){if(m>>>0>o>>>0|(m|0)==(o|0)&i>>>0>n>>>0){f=m;n=77;break d}k=Ym(i|0,m|0,e|0,0)|0;l=E;f=f&255;if(l>>>0>4294967295|(l|0)==-1&k>>>0>~f>>>0){f=m;n=77;break d}i=Om(k|0,l|0,f|0,0)|0;k=E;j=c[q>>2]|0;if(j>>>0<(c[r>>2]|0)>>>0){c[q>>2]=j+1;j=d[j>>0]|0}else j=He(b)|0;f=a[14464+j>>0]|0;if((f&255)>>>0>=e>>>0){f=k;n=77;break}else m=k}}else{f=k;n=77}}while(0);if((n|0)==77)if((d[14464+j>>0]|0)>>>0<e>>>0){do{i=c[q>>2]|0;if(i>>>0<(c[r>>2]|0)>>>0){c[q>>2]=i+1;i=d[i>>0]|0}else i=He(b)|0}while((d[14464+i>>0]|0)>>>0<e>>>0);if(!(c[5356]|0))i=21468;else i=c[(en()|0)+64>>2]|0;c[i>>2]=34;j=(g&1|0)==0&0==0?p:0;e=h;i=g}else{j=p;e=f}if(c[r>>2]|0)c[q>>2]=(c[q>>2]|0)+-1;if(!(e>>>0<h>>>0|(e|0)==(h|0)&i>>>0<g>>>0)){if(!((g&1|0)!=0|0!=0|(j|0)!=0)){if(!(c[5356]|0))i=21468;else i=c[(en()|0)+64>>2]|0;c[i>>2]=34;g=Om(g|0,h|0,-1,-1)|0;i=E;break}if(e>>>0>h>>>0|(e|0)==(h|0)&i>>>0>g>>>0){if(!(c[5356]|0))i=21468;else i=c[(en()|0)+64>>2]|0;c[i>>2]=34;i=h;break}}g=((j|0)<0)<<31>>31;g=Km(i^j|0,e^g|0,j|0,g|0)|0;i=E}while(0);E=i;return g|0}function He(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;m=i;i=i+16|0;e=m;g=b+104|0;l=c[g>>2]|0;if((l|0)!=0?(c[b+108>>2]|0)>=(l|0):0)l=13;else l=3;do if((l|0)==3){h=b+8|0;do if(!(c[h>>2]|0)){d=b+74|0;f=a[d>>0]|0;a[d>>0]=f+255|f;d=b+20|0;f=b+44|0;if((c[d>>2]|0)>>>0>(c[f>>2]|0)>>>0)lb[c[b+36>>2]&31](b,0,0)|0;c[b+16>>2]=0;c[b+28>>2]=0;c[d>>2]=0;d=c[b>>2]|0;if(!(d&20)){l=c[f>>2]|0;c[h>>2]=l;c[b+4>>2]=l;l=10;break}if(d&4|0)c[b>>2]=d|32}else l=10;while(0);if((l|0)==10?(lb[c[b+32>>2]&31](b,e,1)|0)==1:0){k=a[e>>0]|0;d=k&255;e=c[g>>2]|0;j=c[h>>2]|0;if(e){f=b+4|0;h=c[f>>2]|0;g=e-(c[b+108>>2]|0)|0;e=j;if((j-h|0)<(g|0))l=17;else c[b+100>>2]=h+(g+-1)}else{f=b+4|0;e=j;l=17}if((l|0)==17)c[b+100>>2]=j;if(!e)e=c[f>>2]|0;else{j=c[f>>2]|0;b=b+108|0;c[b>>2]=e+1-j+(c[b>>2]|0);e=j}e=e+-1|0;if((a[e>>0]|0)==k<<24>>24)break;a[e>>0]=k;break}l=13}while(0);if((l|0)==13){c[b+100>>2]=0;d=-1}i=m;return d|0}function Ie(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;n=i;i=i+240|0;m=n;c[m>>2]=a;a:do if((e|0)>1){l=0-b|0;g=a;k=e;e=1;while(1){h=g+l|0;j=k+-2|0;g=h+(0-(c[f+(j<<2)>>2]|0))|0;if((yb[d&15](a,g)|0)>-1?(yb[d&15](a,h)|0)>-1:0)break a;a=e+1|0;e=m+(e<<2)|0;if((yb[d&15](g,h)|0)>-1){c[e>>2]=g;e=k+-1|0}else{c[e>>2]=h;g=h;e=j}if((e|0)<=1){e=a;break a}k=e;e=a;a=c[m>>2]|0}}else e=1;while(0);Ke(b,m,e);i=n;return}function Je(a,b,d,e,f,g,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+240|0;p=r;c[p>>2]=a;o=0-b|0;a:do if((e|0)!=1|(f|0)!=0?(l=a+(0-(c[j+(g<<2)>>2]|0))|0,(yb[d&15](l,a)|0)>=1):0){k=1;h=(h|0)==0;n=e;while(1){if(h&(g|0)>1){h=a+o|0;e=c[j+(g+-2<<2)>>2]|0;if((yb[d&15](h,l)|0)>-1){q=19;break a}if((yb[d&15](h+(0-e)|0,l)|0)>-1){q=19;break a}}m=k+1|0;c[p+(k<<2)>>2]=l;k=n+-1|0;do if(k){if(!(k&1)){a=0;do{a=a+1|0;k=k>>>1}while(!(k&1|0))}else{if(!f)k=32;else{if(!(f&1)){a=f;k=0}else{k=0;h=n;e=f;a=0;break}do{k=k+1|0;a=a>>>1}while(!(a&1|0))}a=k+32|0}if(a>>>0>31){k=a+-32|0;q=15}else{k=a;h=n;e=f}}else{k=0;a=32;q=15}while(0);if((q|0)==15){q=0;h=f;e=0}n=e<<32-k|h>>>k;f=e>>>k;g=a+g|0;if(!((f|0)!=0|(n|0)!=1)){a=l;k=m;q=19;break a}a=l+(0-(c[j+(g<<2)>>2]|0))|0;if((yb[d&15](a,c[p>>2]|0)|0)<1){a=l;k=m;q=19;break}else{e=l;k=m;h=1;l=a;a=e}}}else q=18;while(0);if((q|0)==18?(h|0)==0:0){k=1;q=19}if((q|0)==19){Ke(b,p,k);Ie(a,b,d,g,j)}i=r;return}function Ke(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;h=i;i=i+256|0;e=h;a:do if((d|0)>=2?(g=b+(d<<2)|0,c[g>>2]=e,a|0):0)while(1){f=a>>>0>256?256:a;Vm(e|0,c[b>>2]|0,f|0)|0;e=0;do{j=b+(e<<2)|0;e=e+1|0;Vm(c[j>>2]|0,c[b+(e<<2)>>2]|0,f|0)|0;c[j>>2]=(c[j>>2]|0)+f}while((e|0)!=(d|0));a=a-f|0;if(!a)break a;e=c[g>>2]|0}while(0);i=h;return}function Le(b){b=b|0;var d=0,e=0,f=0;f=b;a:do if(!(f&3))e=4;else{d=f;while(1){if(!(a[b>>0]|0)){b=d;break a}b=b+1|0;d=b;if(!(d&3)){e=4;break}}}while(0);if((e|0)==4){while(1){d=c[b>>2]|0;if(!((d&-2139062144^-2139062144)&d+-16843009))b=b+4|0;else break}if((d&255)<<24>>24)do b=b+1|0;while((a[b>>0]|0)!=0)}return b-f|0}function Me(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;h=d&255;f=(e|0)!=0;a:do if(f&(b&3|0)!=0){g=d&255;while(1){if((a[b>>0]|0)==g<<24>>24)break a;b=b+1|0;e=e+-1|0;f=(e|0)!=0;if(!(f&(b&3|0)!=0)){i=5;break}}}else i=5;while(0);b:do if((i|0)==5)if(f){g=d&255;if((a[b>>0]|0)!=g<<24>>24){f=T(h,16843009)|0;c:do if(e>>>0>3)while(1){h=c[b>>2]^f;if((h&-2139062144^-2139062144)&h+-16843009|0)break;b=b+4|0;e=e+-4|0;if(e>>>0<=3){i=11;break c}}else i=11;while(0);if((i|0)==11)if(!e){e=0;break}while(1){if((a[b>>0]|0)==g<<24>>24)break b;b=b+1|0;e=e+-1|0;if(!e){e=0;break}}}}else e=0;while(0);return (e|0?b:0)|0}function Ne(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;f=d&255;a:do if(!f)b=b+(Le(b)|0)|0;else{if(b&3){e=d&255;do{g=a[b>>0]|0;if(g<<24>>24==0?1:g<<24>>24==e<<24>>24)break a;b=b+1|0}while((b&3|0)!=0)}f=T(f,16843009)|0;e=c[b>>2]|0;b:do if(!((e&-2139062144^-2139062144)&e+-16843009))do{g=e^f;if((g&-2139062144^-2139062144)&g+-16843009|0)break b;b=b+4|0;e=c[b>>2]|0}while(!((e&-2139062144^-2139062144)&e+-16843009|0));while(0);e=d&255;while(1){g=a[b>>0]|0;if(g<<24>>24==0?1:g<<24>>24==e<<24>>24)break;else b=b+1|0}}while(0);return b|0}function Oe(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;d=i;i=i+16|0;b=d;c[b>>2]=e;e=Pe(a,100,18887,b)|0;i=d;return e|0}function Pe(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;n=i;i=i+128|0;g=n+112|0;l=n;h=l;j=2156;k=h+112|0;do{c[h>>2]=c[j>>2];h=h+4|0;j=j+4|0}while((h|0)<(k|0));if((d+-1|0)>>>0>2147483646)if(!d){b=g;d=1;m=6}else{if(!(c[5356]|0))d=21468;else d=c[(en()|0)+64>>2]|0;c[d>>2]=75;d=-1}else m=6;if((m|0)==6){m=-2-b|0;m=d>>>0>m>>>0?m:d;c[l+48>>2]=m;g=l+20|0;c[g>>2]=b;c[l+44>>2]=b;d=b+m|0;b=l+16|0;c[b>>2]=d;c[l+28>>2]=d;d=Qe(l,e,f)|0;if(m){m=c[g>>2]|0;a[m+(((m|0)==(c[b>>2]|0))<<31>>31)>>0]=0}}i=n;return d|0}function Qe(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+224|0;n=r+120|0;o=r+80|0;p=r;q=r+136|0;f=o;g=f+40|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));c[n>>2]=c[e>>2];if((Re(0,d,n,p,o)|0)<0)e=-1;else{e=c[b>>2]|0;m=e&32;if((a[b+74>>0]|0)<1)c[b>>2]=e&-33;f=b+48|0;if(!(c[f>>2]|0)){g=b+44|0;h=c[g>>2]|0;c[g>>2]=q;j=b+28|0;c[j>>2]=q;k=b+20|0;c[k>>2]=q;c[f>>2]=80;l=b+16|0;c[l>>2]=q+80;e=Re(b,d,n,p,o)|0;if(h){lb[c[b+36>>2]&31](b,0,0)|0;e=(c[k>>2]|0)==0?-1:e;c[g>>2]=h;c[f>>2]=0;c[l>>2]=0;c[j>>2]=0;c[k>>2]=0}}else e=Re(b,d,n,p,o)|0;q=c[b>>2]|0;c[b>>2]=q|m;e=(q&32|0)==0?e:-1}i=r;return e|0}function Re(e,f,g,j,k){e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;var m=0,n=0,o=0,p=0,q=0.0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0;ja=i;i=i+624|0;fa=ja+24|0;ga=ja+16|0;ha=ja+588|0;Y=ja+576|0;ia=ja;S=ja+536|0;N=ja+8|0;O=ja+528|0;P=(e|0)!=0;Q=S+40|0;R=Q;S=S+39|0;U=N+4|0;V=ha;W=0-V|0;X=Y+12|0;Y=Y+11|0;Z=X;_=Z-V|0;$=-2-V|0;aa=Z+2|0;ba=fa+288|0;ca=ha+9|0;da=ca;ea=ha+8|0;n=0;m=0;s=0;a:while(1){do if((m|0)>-1){if((n|0)<=(2147483647-m|0)){m=n+m|0;break}if(!(c[5356]|0))m=21468;else m=c[(en()|0)+64>>2]|0;c[m>>2]=75;m=-1}while(0);n=a[f>>0]|0;if(!(n<<24>>24)){M=253;break}else o=f;b:while(1){switch(n<<24>>24){case 37:{n=o;M=11;break b}case 0:{n=o;break b}default:{}}n=o+1|0;o=n;n=a[n>>0]|0}c:do if((M|0)==11)while(1){M=0;if((a[o+1>>0]|0)!=37)break c;n=n+1|0;o=o+2|0;if((a[o>>0]|0)==37)M=11;else break}while(0);n=n-f|0;if(P?(c[e>>2]&32|0)==0:0)Se(f,n,e);if(n|0){f=o;continue}r=o+1|0;p=a[r>>0]|0;n=(p<<24>>24)+-48|0;if(n>>>0<10){u=(a[o+2>>0]|0)==36;r=u?o+3|0:r;x=u?n:-1;u=u?1:s;n=a[r>>0]|0}else{x=-1;u=s;n=p}o=(n<<24>>24)+-32|0;d:do if(o>>>0<32){p=0;do{if(!(1<<o&75913))break d;p=1<<(n<<24>>24)+-32|p;r=r+1|0;n=a[r>>0]|0;o=(n<<24>>24)+-32|0}while(o>>>0<32)}else p=0;while(0);do if(n<<24>>24!=42){o=(n<<24>>24)+-48|0;if(o>>>0<10){s=0;do{s=(s*10|0)+o|0;r=r+1|0;n=a[r>>0]|0;o=(n<<24>>24)+-48|0}while(o>>>0<10);if((s|0)<0){m=-1;break a}else L=u}else{s=0;L=u}}else{t=r+1|0;n=a[t>>0]|0;o=(n<<24>>24)+-48|0;if(o>>>0<10?(a[r+2>>0]|0)==36:0){c[k+(o<<2)>>2]=10;n=c[j+((a[t>>0]|0)+-48<<3)>>2]|0;o=1;t=r+3|0}else{if(u|0){m=-1;break a}if(!P){s=0;L=0;r=t;break}o=(c[g>>2]|0)+(4-1)&~(4-1);n=c[o>>2]|0;c[g>>2]=o+4;o=0}L=(n|0)<0;s=L?0-n|0:n;p=L?p|8192:p;L=o;r=t;n=a[t>>0]|0}while(0);e:do if(n<<24>>24==46){n=r+1|0;o=a[n>>0]|0;if(o<<24>>24!=42){r=(o<<24>>24)+-48|0;if(r>>>0<10)o=0;else{u=0;break}while(1){o=(o*10|0)+r|0;n=n+1|0;r=(a[n>>0]|0)+-48|0;if(r>>>0>=10){u=o;break e}}}n=r+2|0;o=(a[n>>0]|0)+-48|0;if(o>>>0<10?(a[r+3>>0]|0)==36:0){c[k+(o<<2)>>2]=10;u=c[j+((a[n>>0]|0)+-48<<3)>>2]|0;n=r+4|0;break}if(L|0){m=-1;break a}if(P){K=(c[g>>2]|0)+(4-1)&~(4-1);u=c[K>>2]|0;c[g>>2]=K+4}else u=0}else{u=-1;n=r}while(0);v=0;while(1){o=(a[n>>0]|0)+-65|0;if(o>>>0>57){m=-1;break a}K=n+1|0;o=a[14729+(v*58|0)+o>>0]|0;r=o&255;if((r+-1|0)>>>0<8){v=r;n=K}else break}if(!(o<<24>>24)){m=-1;break}t=(x|0)>-1;do if(o<<24>>24==19)if(t){m=-1;break a}else M=53;else{if(t){c[k+(x<<2)>>2]=r;I=j+(x<<3)|0;J=c[I+4>>2]|0;M=ia;c[M>>2]=c[I>>2];c[M+4>>2]=J;M=53;break}if(!P){m=0;break a}Te(ia,r,g)}while(0);if((M|0)==53?(M=0,!P):0){n=0;s=L;f=K;continue}F=a[n>>0]|0;F=(v|0)!=0&(F&15|0)==3?F&-33:F;t=p&-65537;J=(p&8192|0)==0?p:t;f:do switch(F|0){case 110:switch((v&255)<<24>>24){case 0:{c[c[ia>>2]>>2]=m;n=0;s=L;f=K;continue a}case 1:{c[c[ia>>2]>>2]=m;n=0;s=L;f=K;continue a}case 2:{n=c[ia>>2]|0;c[n>>2]=m;c[n+4>>2]=((m|0)<0)<<31>>31;n=0;s=L;f=K;continue a}case 3:{b[c[ia>>2]>>1]=m;n=0;s=L;f=K;continue a}case 4:{a[c[ia>>2]>>0]=m;n=0;s=L;f=K;continue a}case 6:{c[c[ia>>2]>>2]=m;n=0;s=L;f=K;continue a}case 7:{n=c[ia>>2]|0;c[n>>2]=m;c[n+4>>2]=((m|0)<0)<<31>>31;n=0;s=L;f=K;continue a}default:{n=0;s=L;f=K;continue a}}case 112:{t=120;u=u>>>0>8?u:8;n=J|8;M=65;break}case 88:case 120:{t=F;n=J;M=65;break}case 111:{o=ia;n=c[o>>2]|0;o=c[o+4>>2]|0;if((n|0)==0&(o|0)==0)f=Q;else{f=Q;do{f=f+-1|0;a[f>>0]=n&7|48;n=Tm(n|0,o|0,3)|0;o=E}while(!((n|0)==0&(o|0)==0))}if(!(J&8)){p=0;r=15209;n=J;M=78}else{n=R-f|0;p=0;r=15209;u=(u|0)>(n|0)?u:n+1|0;n=J;M=78}break}case 105:case 100:{o=ia;f=c[o>>2]|0;o=c[o+4>>2]|0;if((o|0)<0){f=Km(0,0,f|0,o|0)|0;n=E;p=ia;c[p>>2]=f;c[p+4>>2]=n;p=1;r=15209;M=77;break f}n=J&1;if(!(J&2048)){p=n;r=(n|0)==0?15209:15211;n=o;M=77}else{p=1;r=15210;n=o;M=77}break}case 117:{n=ia;p=0;r=15209;f=c[n>>2]|0;n=c[n+4>>2]|0;M=77;break}case 99:{a[S>>0]=c[ia>>2];f=S;x=0;v=15209;o=Q;n=1;break}case 109:{if(!(c[5356]|0))n=21468;else n=c[(en()|0)+64>>2]|0;o=c[n>>2]|0;f=0;while(1){if((d[15257+f>>0]|0)==(o|0)){M=84;break}n=f+1|0;if((n|0)==87){n=15345;f=87;break}else f=n}if((M|0)==84)if(!f){n=15345;M=91;break f}else n=15345;do{do{M=n;n=n+1|0}while((a[M>>0]|0)!=0);f=f+-1|0}while((f|0)!=0);M=91;break}case 115:{n=c[ia>>2]|0;n=n|0?n:15219;M=91;break}case 67:{c[N>>2]=c[ia>>2];c[U>>2]=0;c[ia>>2]=N;t=-1;o=N;M=95;break}case 83:{n=c[ia>>2]|0;if(!u){Ve(e,32,s,0,J);n=0;M=106}else{t=u;o=n;M=95}break}case 65:case 71:case 70:case 69:case 97:case 103:case 102:case 101:{q=+h[ia>>3];c[ga>>2]=0;h[l>>3]=q;if((c[l+4>>2]|0)>=0){n=J&1;if(!(J&2048)){H=n;I=(n|0)==0?15227:15232}else{H=1;I=15229}}else{q=-q;H=1;I=15226}h[l>>3]=q;G=c[l+4>>2]&2146435072;do if(G>>>0<2146435072|(G|0)==2146435072&0<0){w=+We(q,ga)*2.0;f=w!=0.0;if(f)c[ga>>2]=(c[ga>>2]|0)+-1;z=F|32;if((z|0)==97){r=F&32;x=(r|0)==0?I:I+9|0;v=H|2;n=12-u|0;do if(!(u>>>0>11|(n|0)==0)){q=8.0;do{n=n+-1|0;q=q*16.0}while((n|0)!=0);if((a[x>>0]|0)==45){q=-(q+(-w-q));break}else{q=w+q-q;break}}else q=w;while(0);f=c[ga>>2]|0;n=(f|0)<0?0-f|0:f;n=Ue(n,((n|0)<0)<<31>>31,X)|0;if((n|0)==(X|0)){a[Y>>0]=48;n=Y}a[n+-1>>0]=(f>>31&2)+43;t=n+-2|0;a[t>>0]=F+15;p=(u|0)<1;o=(J&8|0)==0;n=ha;do{I=~~q;f=n+1|0;a[n>>0]=d[15193+I>>0]|r;q=(q-+(I|0))*16.0;do if((f-V|0)==1){if(o&(p&q==0.0)){n=f;break}a[f>>0]=46;n=n+2|0}else n=f;while(0)}while(q!=0.0);p=t;o=(u|0)!=0&($+n|0)<(u|0)?aa+u-p|0:_-p+n|0;r=o+v|0;Ve(e,32,s,r,J);if(!(c[e>>2]&32))Se(x,v,e);Ve(e,48,s,r,J^65536);f=n-V|0;if(!(c[e>>2]&32))Se(ha,f,e);n=Z-p|0;Ve(e,48,o-(f+n)|0,0,0);if(!(c[e>>2]&32))Se(t,n,e);Ve(e,32,s,r,J^8192);n=(r|0)<(s|0)?s:r;break}n=(u|0)<0?6:u;if(f){f=(c[ga>>2]|0)+-28|0;c[ga>>2]=f;q=w*268435456.0}else{q=w;f=c[ga>>2]|0}G=(f|0)<0?fa:ba;o=G;do{D=~~q>>>0;c[o>>2]=D;o=o+4|0;q=(q-+(D>>>0))*1.0e9}while(q!=0.0);if((f|0)>0){p=G;t=o;while(1){r=(f|0)>29?29:f;f=t+-4|0;do if(f>>>0>=p>>>0){o=0;do{C=_m(c[f>>2]|0,0,r|0)|0;C=Om(C|0,E|0,o|0,0)|0;D=E;B=an(C|0,D|0,1e9,0)|0;c[f>>2]=B;o=Wm(C|0,D|0,1e9,0)|0;f=f+-4|0}while(f>>>0>=p>>>0);if(!o)break;p=p+-4|0;c[p>>2]=o}while(0);o=t;while(1){if(o>>>0<=p>>>0)break;f=o+-4|0;if(!(c[f>>2]|0))o=f;else break}f=(c[ga>>2]|0)-r|0;c[ga>>2]=f;if((f|0)>0)t=o;else break}}else p=G;if((f|0)<0){x=((n+25|0)/9|0)+1|0;y=(z|0)==102;do{v=0-f|0;v=(v|0)>9?9:v;do if(p>>>0<o>>>0){r=(1<<v)+-1|0;t=1e9>>>v;u=0;f=p;do{D=c[f>>2]|0;c[f>>2]=(D>>>v)+u;u=T(D&r,t)|0;f=f+4|0}while(f>>>0<o>>>0);f=(c[p>>2]|0)==0?p+4|0:p;if(!u){p=f;f=o;break}c[o>>2]=u;p=f;f=o+4|0}else{p=(c[p>>2]|0)==0?p+4|0:p;f=o}while(0);o=y?G:p;o=(f-o>>2|0)>(x|0)?o+(x<<2)|0:f;f=(c[ga>>2]|0)+v|0;c[ga>>2]=f}while((f|0)<0)}D=G;do if(p>>>0<o>>>0){f=(D-p>>2)*9|0;t=c[p>>2]|0;if(t>>>0<10)break;else r=10;do{r=r*10|0;f=f+1|0}while(t>>>0>=r>>>0)}else f=0;while(0);A=(z|0)==103;B=(n|0)!=0;r=n-((z|0)!=102?f:0)+((B&A)<<31>>31)|0;if((r|0)<(((o-D>>2)*9|0)+-9|0)){r=r+9216|0;u=G+4+(((r|0)/9|0)+-1024<<2)|0;r=((r|0)%9|0)+1|0;if((r|0)<9){t=10;do{t=t*10|0;r=r+1|0}while((r|0)!=9)}else t=10;x=c[u>>2]|0;y=(x>>>0)%(t>>>0)|0;r=(u+4|0)==(o|0);do if(r&(y|0)==0)r=u;else{w=(((x>>>0)/(t>>>0)|0)&1|0)==0?9007199254740992.0:9007199254740994.0;v=(t|0)/2|0;if(y>>>0<v>>>0)q=.5;else q=r&(y|0)==(v|0)?1.0:1.5;do if(H){if((a[I>>0]|0)!=45)break;q=-q;w=-w}while(0);r=x-y|0;c[u>>2]=r;if(!(w+q!=w)){r=u;break}C=r+t|0;c[u>>2]=C;if(C>>>0>999999999){r=u;while(1){f=r+-4|0;c[r>>2]=0;if(f>>>0<p>>>0){p=p+-4|0;c[p>>2]=0}C=(c[f>>2]|0)+1|0;c[f>>2]=C;if(C>>>0>999999999)r=f;else{u=f;break}}}f=(D-p>>2)*9|0;t=c[p>>2]|0;if(t>>>0<10){r=u;break}else r=10;do{r=r*10|0;f=f+1|0}while(t>>>0>=r>>>0);r=u}while(0);C=r+4|0;o=o>>>0>C>>>0?C:o}y=0-f|0;C=o;while(1){if(C>>>0<=p>>>0){z=0;break}o=C+-4|0;if(!(c[o>>2]|0))C=o;else{z=1;break}}do if(A){n=(B&1^1)+n|0;if((n|0)>(f|0)&(f|0)>-5){u=F+-1|0;n=n+-1-f|0}else{u=F+-2|0;n=n+-1|0}o=J&8;if(o|0){v=o;break}do if(z){t=c[C+-4>>2]|0;if(!t){r=9;break}if(!((t>>>0)%10|0)){r=0;o=10}else{r=0;break}do{o=o*10|0;r=r+1|0}while(!((t>>>0)%(o>>>0)|0|0))}else r=9;while(0);o=((C-D>>2)*9|0)+-9|0;if((u|32|0)==102){v=o-r|0;v=(v|0)<0?0:v;n=(n|0)<(v|0)?n:v;v=0;break}else{v=o+f-r|0;v=(v|0)<0?0:v;n=(n|0)<(v|0)?n:v;v=0;break}}else{u=F;v=J&8}while(0);x=n|v;r=(x|0)!=0&1;t=(u|32|0)==102;if(t){y=0;f=(f|0)>0?f:0}else{o=(f|0)<0?y:f;o=Ue(o,((o|0)<0)<<31>>31,X)|0;if((Z-o|0)<2)do{o=o+-1|0;a[o>>0]=48}while((Z-o|0)<2);a[o+-1>>0]=(f>>31&2)+43;f=o+-2|0;a[f>>0]=u;y=f;f=Z-f|0}A=H+1+n+r+f|0;Ve(e,32,s,A,J);if(!(c[e>>2]&32))Se(I,H,e);Ve(e,48,s,A,J^65536);do if(t){p=p>>>0>G>>>0?G:p;o=p;do{f=Ue(c[o>>2]|0,0,ca)|0;do if((o|0)==(p|0)){if((f|0)!=(ca|0))break;a[ea>>0]=48;f=ea}else{if(f>>>0<=ha>>>0)break;Mm(ha|0,48,f-V|0)|0;do f=f+-1|0;while(f>>>0>ha>>>0)}while(0);if(!(c[e>>2]&32))Se(f,da-f|0,e);o=o+4|0}while(o>>>0<=G>>>0);do if(x|0){if(c[e>>2]&32|0)break;Se(20714,1,e)}while(0);if((n|0)>0&o>>>0<C>>>0)while(1){f=Ue(c[o>>2]|0,0,ca)|0;if(f>>>0>ha>>>0){Mm(ha|0,48,f-V|0)|0;do f=f+-1|0;while(f>>>0>ha>>>0)}if(!(c[e>>2]&32))Se(f,(n|0)>9?9:n,e);o=o+4|0;f=n+-9|0;if(!((n|0)>9&o>>>0<C>>>0)){n=f;break}else n=f}Ve(e,48,n+9|0,9,0)}else{u=z?C:p+4|0;if((n|0)>-1){t=(v|0)==0;r=p;do{f=Ue(c[r>>2]|0,0,ca)|0;if((f|0)==(ca|0)){a[ea>>0]=48;f=ea}do if((r|0)==(p|0)){o=f+1|0;if(!(c[e>>2]&32))Se(f,1,e);if(t&(n|0)<1){f=o;break}if(c[e>>2]&32|0){f=o;break}Se(20714,1,e);f=o}else{if(f>>>0<=ha>>>0)break;Mm(ha|0,48,f+W|0)|0;do f=f+-1|0;while(f>>>0>ha>>>0)}while(0);o=da-f|0;if(!(c[e>>2]&32))Se(f,(n|0)>(o|0)?o:n,e);n=n-o|0;r=r+4|0}while(r>>>0<u>>>0&(n|0)>-1)}Ve(e,48,n+18|0,18,0);if(c[e>>2]&32|0)break;Se(y,Z-y|0,e)}while(0);Ve(e,32,s,A,J^8192);n=(A|0)<(s|0)?s:A}else{r=(F&32|0)!=0;p=q!=q|0.0!=0.0;f=p?0:H;o=f+3|0;Ve(e,32,s,o,t);n=c[e>>2]|0;if(!(n&32)){Se(I,f,e);n=c[e>>2]|0}if(!(n&32))Se(p?(r?17158:15253):r?15245:15249,3,e);Ve(e,32,s,o,J^8192);n=(o|0)<(s|0)?s:o}while(0);s=L;f=K;continue a}default:{x=0;v=15209;o=Q;n=u;t=J}}while(0);g:do if((M|0)==65){p=ia;o=c[p>>2]|0;p=c[p+4>>2]|0;r=t&32;if((o|0)==0&(p|0)==0){f=Q;o=0;p=0}else{f=Q;do{f=f+-1|0;a[f>>0]=d[15193+(o&15)>>0]|r;o=Tm(o|0,p|0,4)|0;p=E}while(!((o|0)==0&(p|0)==0));p=ia;o=c[p>>2]|0;p=c[p+4>>2]|0}r=(n&8|0)==0|(o|0)==0&(p|0)==0;p=r?0:2;r=r?15209:15209+(t>>4)|0;M=78}else if((M|0)==77){f=Ue(f,n,Q)|0;n=J;M=78}else if((M|0)==91){M=0;J=Me(n,0,u)|0;I=(J|0)==0;f=n;x=0;v=15209;o=I?n+u|0:J;n=I?u:J-n|0}else if((M|0)==95){M=0;r=o;n=0;f=0;while(1){p=c[r>>2]|0;if(!p)break;f=Xe(O,p)|0;if((f|0)<0|f>>>0>(t-n|0)>>>0)break;n=f+n|0;if(t>>>0>n>>>0)r=r+4|0;else break}if((f|0)<0){m=-1;break a}Ve(e,32,s,n,J);if(!n){n=0;M=106}else{p=0;while(1){f=c[o>>2]|0;if(!f){M=106;break g}f=Xe(O,f)|0;p=f+p|0;if((p|0)>(n|0)){M=106;break g}if(!(c[e>>2]&32))Se(O,f,e);if(p>>>0>=n>>>0){M=106;break}else o=o+4|0}}}while(0);if((M|0)==106){M=0;Ve(e,32,s,n,J^8192);n=(s|0)>(n|0)?s:n;s=L;f=K;continue}if((M|0)==78){M=0;t=(u|0)>-1?n&-65537:n;n=ia;n=(c[n>>2]|0)!=0|(c[n+4>>2]|0)!=0;if((u|0)!=0|n){n=(n&1^1)+(R-f)|0;x=p;v=r;o=Q;n=(u|0)>(n|0)?u:n}else{f=Q;x=p;v=r;o=Q;n=0}}r=o-f|0;o=(n|0)<(r|0)?r:n;p=o+x|0;n=(s|0)<(p|0)?p:s;Ve(e,32,n,p,t);if(!(c[e>>2]&32))Se(v,x,e);Ve(e,48,n,p,t^65536);Ve(e,48,o,r,0);if(!(c[e>>2]&32))Se(f,r,e);Ve(e,32,n,p,t^8192);s=L;f=K}h:do if((M|0)==253)if(!e)if(!s)m=0;else{m=1;while(1){n=c[k+(m<<2)>>2]|0;if(!n)break;Te(j+(m<<3)|0,n,g);m=m+1|0;if((m|0)>=10){m=1;break h}}while(1){m=m+1|0;if((m|0)>=10){m=1;break h}if(c[k+(m<<2)>>2]|0){m=-1;break}}}while(0);i=ja;return m|0}function Se(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=e+16|0;g=c[f>>2]|0;if(!g){if(!(Ye(e)|0)){g=c[f>>2]|0;h=5}}else h=5;a:do if((h|0)==5){i=e+20|0;h=c[i>>2]|0;f=h;if((g-h|0)>>>0<d>>>0){lb[c[e+36>>2]&31](e,b,d)|0;break}b:do if((a[e+75>>0]|0)>-1){h=d;while(1){if(!h){g=d;break b}g=h+-1|0;if((a[b+g>>0]|0)==10)break;else h=g}if((lb[c[e+36>>2]&31](e,b,h)|0)>>>0<h>>>0)break a;g=d-h|0;b=b+h|0;f=c[i>>2]|0}else g=d;while(0);Vm(f|0,b|0,g|0)|0;c[i>>2]=(c[i>>2]|0)+g}while(0);return}function Te(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0.0;a:do if(b>>>0<=20)do switch(b|0){case 9:{e=(c[d>>2]|0)+(4-1)&~(4-1);b=c[e>>2]|0;c[d>>2]=e+4;c[a>>2]=b;break a}case 10:{e=(c[d>>2]|0)+(4-1)&~(4-1);b=c[e>>2]|0;c[d>>2]=e+4;e=a;c[e>>2]=b;c[e+4>>2]=((b|0)<0)<<31>>31;break a}case 11:{e=(c[d>>2]|0)+(4-1)&~(4-1);b=c[e>>2]|0;c[d>>2]=e+4;e=a;c[e>>2]=b;c[e+4>>2]=0;break a}case 12:{e=(c[d>>2]|0)+(8-1)&~(8-1);b=e;f=c[b>>2]|0;b=c[b+4>>2]|0;c[d>>2]=e+8;e=a;c[e>>2]=f;c[e+4>>2]=b;break a}case 13:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;e=(e&65535)<<16>>16;f=a;c[f>>2]=e;c[f+4>>2]=((e|0)<0)<<31>>31;break a}case 14:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;f=a;c[f>>2]=e&65535;c[f+4>>2]=0;break a}case 15:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;e=(e&255)<<24>>24;f=a;c[f>>2]=e;c[f+4>>2]=((e|0)<0)<<31>>31;break a}case 16:{f=(c[d>>2]|0)+(4-1)&~(4-1);e=c[f>>2]|0;c[d>>2]=f+4;f=a;c[f>>2]=e&255;c[f+4>>2]=0;break a}case 17:{f=(c[d>>2]|0)+(8-1)&~(8-1);g=+h[f>>3];c[d>>2]=f+8;h[a>>3]=g;break a}case 18:{f=(c[d>>2]|0)+(8-1)&~(8-1);g=+h[f>>3];c[d>>2]=f+8;h[a>>3]=g;break a}default:break a}while(0);while(0);return}function Ue(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if(c>>>0>0|(c|0)==0&b>>>0>4294967295){while(1){e=an(b|0,c|0,10,0)|0;d=d+-1|0;a[d>>0]=e|48;e=b;b=Wm(b|0,c|0,10,0)|0;if(!(c>>>0>9|(c|0)==9&e>>>0>4294967295))break;else c=E}c=b}else c=b;if(c)while(1){d=d+-1|0;a[d>>0]=(c>>>0)%10|0|48;if(c>>>0<10)break;else c=(c>>>0)/10|0}return d|0}function Ve(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=i;i=i+256|0;g=h;do if((d|0)>(e|0)&(f&73728|0)==0){d=d-e|0;Mm(g|0,b|0,(d>>>0>256?256:d)|0)|0;e=c[a>>2]|0;f=(e&32|0)==0;if(d>>>0>255){b=d;do{if(f){Se(g,256,a);e=c[a>>2]|0}b=b+-256|0;f=(e&32|0)==0}while(b>>>0>255);if(f)d=d&255;else break}else if(!f)break;Se(g,d,a)}while(0);i=h;return}function We(a,b){a=+a;b=b|0;var d=0,e=0,f=0;h[l>>3]=a;d=c[l>>2]|0;e=c[l+4>>2]|0;f=Tm(d|0,e|0,52)|0;switch(f&2047){case 0:{if(a!=0.0){a=+We(a*18446744073709551616.0,b);d=(c[b>>2]|0)+-64|0}else d=0;c[b>>2]=d;break}case 2047:break;default:{c[b>>2]=(f&2047)+-1022;c[l>>2]=d;c[l+4>>2]=e&-2146435073|1071644672;a=+h[l>>3]}}return +a}function Xe(b,d){b=b|0;d=d|0;do if(!b)b=1;else{if(d>>>0<128){a[b>>0]=d;b=1;break}if(d>>>0<2048){a[b>>0]=d>>>6|192;a[b+1>>0]=d&63|128;b=2;break}if(d>>>0<55296|(d&-8192|0)==57344){a[b>>0]=d>>>12|224;a[b+1>>0]=d>>>6&63|128;a[b+2>>0]=d&63|128;b=3;break}if((d+-65536|0)>>>0<1048576){a[b>>0]=d>>>18|240;a[b+1>>0]=d>>>12&63|128;a[b+2>>0]=d>>>6&63|128;a[b+3>>0]=d&63|128;b=4;break}if(!(c[5356]|0))b=21468;else b=c[(en()|0)+64>>2]|0;c[b>>2]=84;b=-1}while(0);return b|0}function Ye(b){b=b|0;var d=0,e=0;d=b+74|0;e=a[d>>0]|0;a[d>>0]=e+255|e;d=c[b>>2]|0;if(!(d&8)){c[b+8>>2]=0;c[b+4>>2]=0;e=c[b+44>>2]|0;c[b+28>>2]=e;c[b+20>>2]=e;c[b+16>>2]=e+(c[b+48>>2]|0);b=0}else{c[b>>2]=d|32;b=-1}return b|0}function Ze(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=a+20|0;f=c[e>>2]|0;a=(c[a+16>>2]|0)-f|0;a=a>>>0>d>>>0?d:a;Vm(f|0,b|0,a|0)|0;c[e>>2]=(c[e>>2]|0)+a;return d|0}function _e(b,e,f,g){b=b|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0;h=c[e>>2]|0;if((g|0)!=0?(i=c[g>>2]|0,(i|0)!=0):0)if(!b){g=f;j=h;k=17}else{c[g>>2]=0;g=f;k=38}else if(!b){g=f;k=7}else{g=f;k=6}a:while(1)if((k|0)==6){if(!g){k=27;break}while(1){i=a[h>>0]|0;do if(((i&255)+-1|0)>>>0<127?g>>>0>4&(h&3|0)==0:0){while(1){i=c[h>>2]|0;if((i+-16843009|i)&-2139062144|0){k=33;break}c[b>>2]=i&255;c[b+4>>2]=d[h+1>>0];c[b+8>>2]=d[h+2>>0];j=h+4|0;i=b+16|0;c[b+12>>2]=d[h+3>>0];g=g+-4|0;if(g>>>0>4){b=i;h=j}else{k=32;break}}if((k|0)==32){b=i;h=j;i=a[j>>0]|0;break}else if((k|0)==33){i=i&255;break}}while(0);j=i&255;if((j+-1|0)>>>0>=127)break;h=h+1|0;c[b>>2]=j;g=g+-1|0;if(!g){k=27;break a}else b=b+4|0}j=j+-194|0;if(j>>>0>50){k=50;break}i=c[1724+(j<<2)>>2]|0;h=h+1|0;k=38;continue}else if((k|0)==7){while(1){i=a[h>>0]|0;if(((i&255)+-1|0)>>>0<127?(h&3|0)==0:0){k=c[h>>2]|0;i=k&255;if(!((k+-16843009|k)&-2139062144)){do{h=h+4|0;g=g+-4|0;i=c[h>>2]|0}while(!((i+-16843009|i)&-2139062144|0));i=i&255}}j=i&255;if((j+-1|0)>>>0>=127)break;h=h+1|0;g=g+-1|0}j=j+-194|0;if(j>>>0>50){k=50;break}i=c[1724+(j<<2)>>2]|0;j=h+1|0;k=17;continue}else if((k|0)==17){k=(d[j>>0]|0)>>>3;if((k+-16|k+(i>>26))>>>0>7){k=18;break}h=j+1|0;if(i&33554432){if((a[h>>0]&-64)<<24>>24!=-128){k=21;break}h=j+2|0;if(i&524288){if((a[h>>0]&-64)<<24>>24!=-128){k=24;break}h=j+3|0}}g=g+-1|0;k=7;continue}else if((k|0)==38){j=d[h>>0]|0;k=j>>>3;if((k+-16|k+(i>>26))>>>0>7){k=39;break}k=h+1|0;j=j+-128|i<<6;if((j|0)<0){i=(d[k>>0]|0)+-128|0;if(i>>>0>63){k=42;break}k=h+2|0;j=i|j<<6;if((j|0)<0){i=(d[k>>0]|0)+-128|0;if(i>>>0>63){k=45;break}j=i|j<<6;h=h+3|0}else h=k}else h=k;c[b>>2]=j;b=b+4|0;g=g+-1|0;k=6;continue}if((k|0)==18){j=j+-1|0;k=48}else if((k|0)==21){j=j+-1|0;k=48}else if((k|0)==24){j=j+-1|0;k=48}else if((k|0)==27)c[e>>2]=h;else if((k|0)==39){j=h+-1|0;k=48}else if((k|0)==42){h=h+-1|0;k=54}else if((k|0)==45){h=h+-1|0;k=54}if((k|0)==48)if(!i){h=j;i=a[j>>0]|0;k=50}else{h=j;k=54}if((k|0)==50)if(!(i<<24>>24)){if(b|0){c[b>>2]=0;c[e>>2]=0}f=f-g|0}else k=54;if((k|0)==54){if(!(c[5356]|0))f=21468;else f=c[(en()|0)+64>>2]|0;c[f>>2]=84;if(!b)f=-1;else{c[e>>2]=h;f=-1}}return f|0}function $e(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;l=i;i=i+16|0;g=l;j=(f|0)==0?21472:f;f=c[j>>2]|0;a:do if(!d)if(!f)f=0;else k=15;else{h=(b|0)==0?g:b;if(!e)f=-2;else{if(!f){f=a[d>>0]|0;b=f&255;if(f<<24>>24>-1){c[h>>2]=b;f=f<<24>>24!=0&1;break}f=b+-194|0;if(f>>>0>50){k=15;break}f=c[1724+(f<<2)>>2]|0;g=e+-1|0;if(g){d=d+1|0;k=9}}else{g=e;k=9}b:do if((k|0)==9){b=a[d>>0]|0;m=(b&255)>>>3;if((m+-16|m+(f>>26))>>>0>7){k=15;break a}while(1){d=d+1|0;f=f<<6|(b&255)+-128;g=g+-1|0;if((f|0)>=0)break;if(!g)break b;b=a[d>>0]|0;if((b&-64)<<24>>24!=-128){k=15;break a}}c[j>>2]=0;c[h>>2]=f;f=e-g|0;break a}while(0);c[j>>2]=f;f=-2}}while(0);if((k|0)==15){c[j>>2]=0;if(!(c[5356]|0))f=21468;else f=c[(en()|0)+64>>2]|0;c[f>>2]=84;f=-1}i=l;return f|0}
function Bb(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+15&-16;return b|0}function Cb(){return i|0}function Db(a){a=a|0;i=a}function Eb(a,b){a=a|0;b=b|0;i=a;j=b}function Fb(a,b){a=a|0;b=b|0;if(!p){p=a;q=b}}function Gb(a){a=a|0;E=a}function Hb(){return E|0}function Ib(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;C=i;i=i+16|0;A=C;y=a;c[y>>2]=0;c[y+4>>2]=-2147483648;y=a+8|0;w=y;c[w>>2]=0;c[w+4>>2]=-2147483648;w=a+16|0;x=w;c[x>>2]=0;c[x+4>>2]=-2147483648;x=a+24|0;B=x;c[B>>2]=0;c[B+4>>2]=-2147483648;c[A>>2]=0;B=A+4|0;c[B>>2]=0;c[A+8>>2]=0;if((A|0)==(b|0)){B=a;c[B>>2]=-1;c[B+4>>2]=2147483647;B=y;c[B>>2]=-1;c[B+4>>2]=2147483647;B=w;c[B>>2]=0;c[B+4>>2]=-2147483648;B=x;c[B>>2]=0;c[B+4>>2]=-2147483648;i=C;return}Mb(A,c[b>>2]|0,c[b+4>>2]|0);e=c[B>>2]|0;b=c[A>>2]|0;z=b;d=e;v=a;c[v>>2]=-1;c[v+4>>2]=2147483647;v=y;c[v>>2]=-1;c[v+4>>2]=2147483647;v=w;c[v>>2]=0;c[v+4>>2]=-2147483648;v=x;c[v>>2]=0;c[v+4>>2]=-2147483648;if((e|0)!=(b|0)){v=(e-b|0)/12|0;u=0;o=0;n=-2147483648;m=0;l=-2147483648;k=-1;j=2147483647;h=-1;g=2147483647;while(1){e=c[z+(u*12|0)+4>>2]|0;f=c[z+(u*12|0)>>2]|0;t=f;if((e|0)==(f|0)){e=o;f=n}else{s=e-f>>4;r=0;q=n;p=o;while(1){n=t+(r<<4)|0;f=n;e=c[f>>2]|0;f=c[f+4>>2]|0;if((g|0)>(f|0)|(g|0)==(f|0)&h>>>0>e>>>0){h=a;c[h>>2]=e;c[h+4>>2]=f;h=e;g=f}o=t+(r<<4)+8|0;f=o;e=c[f>>2]|0;f=c[f+4>>2]|0;if((j|0)>(f|0)|(j|0)==(f|0)&k>>>0>e>>>0){k=y;c[k>>2]=e;c[k+4>>2]=f;k=e;j=f}f=n;e=c[f>>2]|0;f=c[f+4>>2]|0;if((l|0)<(f|0)|(l|0)==(f|0)&m>>>0<e>>>0){m=w;c[m>>2]=e;c[m+4>>2]=f;m=e;l=f}f=o;e=c[f>>2]|0;f=c[f+4>>2]|0;if((q|0)<(f|0)|(q|0)==(f|0)&p>>>0<e>>>0){q=x;c[q>>2]=e;c[q+4>>2]=f}else{e=p;f=q}r=r+1|0;if(r>>>0>=s>>>0)break;else{q=f;p=e}}}u=u+1|0;if(u>>>0>=v>>>0)break;else{o=e;n=f}}}if(!b){i=C;return}if((d|0)!=(z|0)){while(1){b=d+-12|0;c[B>>2]=b;e=c[b>>2]|0;f=e;if(e){b=d+-8|0;d=c[b>>2]|0;if((d|0)!=(e|0))c[b>>2]=d+(~((d+-16-f|0)>>>4)<<4);wf(e);b=c[B>>2]|0}if((b|0)==(z|0))break;else d=b}b=c[A>>2]|0}wf(b);i=C;return}function Jb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;c[a>>2]=c[b>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];c[a+12>>2]=c[b+12>>2];c[a+16>>2]=c[b+16>>2];c[a+20>>2]=c[b+20>>2];c[a+24>>2]=c[b+24>>2];c[a+28>>2]=c[b+28>>2];d=a+32|0;c[d>>2]=0;c[a+36>>2]=0;c[a+40>>2]=0;k=(a|0)==(b|0);if(!k)Mb(d,c[b+32>>2]|0,c[b+36>>2]|0);d=a+44|0;c[d>>2]=0;c[a+48>>2]=0;c[a+52>>2]=0;if(!k)Mb(d,c[b+44>>2]|0,c[b+48>>2]|0);f=a+56|0;g=b+56|0;c[f>>2]=0;j=a+60|0;c[j>>2]=0;c[a+64>>2]=0;i=b+60|0;e=(c[i>>2]|0)-(c[g>>2]|0)|0;h=(e|0)/12|0;if(e|0){if(h>>>0>357913941)Bl();d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0);c[j>>2]=d;c[f>>2]=d;c[a+64>>2]=d+(h*12|0);e=c[g>>2]|0;f=c[i>>2]|0;if((e|0)!=(f|0))do{c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;if((d|0)!=(e|0))Mb(d,c[e>>2]|0,c[e+4>>2]|0);e=e+12|0;d=(c[j>>2]|0)+12|0;c[j>>2]=d}while((e|0)!=(f|0))}d=a+68|0;c[d>>2]=0;c[a+72>>2]=0;c[a+76>>2]=0;if(!k)Mb(d,c[b+68>>2]|0,c[b+72>>2]|0);d=a+80|0;c[d>>2]=0;c[a+84>>2]=0;c[a+88>>2]=0;if(k)return;Mb(d,c[b+80>>2]|0,c[b+84>>2]|0);return}function Kb(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+128|0;n=r;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;k=n+92|0;c[n+108>>2]=0;q=n+112|0;c[q>>2]=0;c[n+116>>2]=0;l=n+100|0;c[l>>2]=0;m=n+96|0;c[m>>2]=0;c[n>>2]=1652;c[k>>2]=1688;f=n+56|0;c[n+60>>2]=0;c[n+64>>2]=0;g=n+60|0;h=n+4|0;j=h+48|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(j|0));c[f>>2]=g;c[n+68>>2]=0;c[n+72>>2]=0;a[n+76>>0]=0;o=n+104|0;a[o>>0]=0;a[n+88>>0]=0;a[n+90>>0]=0;a[n+120>>0]=0;p=n+121|0;a[p>>0]=0;h=n+92|0;j=d+4|0;f=c[d>>2]|0;if((c[j>>2]|0)==(f|0))f=1652;else{g=0;do{ke(h,f+(g*12|0)|0,0);g=g+1|0;f=c[d>>2]|0}while(g>>>0<(((c[j>>2]|0)-f|0)/12|0)>>>0);f=c[n>>2]|0}h=n+(c[f+-12>>2]|0)|0;j=e+4|0;f=c[e>>2]|0;if((c[j>>2]|0)!=(f|0)){g=0;do{ke(h,f+(g*12|0)|0,1);g=g+1|0;f=c[e>>2]|0}while(g>>>0<(((c[j>>2]|0)-f|0)/12|0)>>>0)}le(n,0,b,0,0);Gd(n);c[k>>2]=1624;f=c[l>>2]|0;if(f|0)do{k=f;f=c[f+16>>2]|0;wf(k);c[l>>2]=f}while((f|0)!=0);c[m>>2]=0;l=n+108|0;d=c[q>>2]|0;b=c[l>>2]|0;h=b;e=d;if((d|0)==(b|0)){g=h;j=e;f=e}else{k=0;g=h;f=e;j=e;do{g=c[g+(k<<2)>>2]|0;if(g){wf(g);d=c[q>>2]|0;h=c[l>>2]|0;j=d;b=h;f=j}k=k+1|0;g=b}while(k>>>0<d-b>>2>>>0);d=b}if((j|0)!=(g|0)){f=j+(~((j+-4-d|0)>>>2)<<2)|0;c[q>>2]=f}a[o>>0]=0;a[p>>0]=0;if(!h){i=r;return}if((f|0)!=(h|0))c[q>>2]=f+(~((f+-4-h|0)>>>2)<<2);wf(h);i=r;return}function Lb(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;h=a+80|0;b=c[h>>2]|0;if(b|0){i=a+84|0;d=c[i>>2]|0;if((d|0)!=(b|0)){e=d;while(1){d=e+-12|0;c[i>>2]=d;g=c[d>>2]|0;f=g;if(g){d=e+-8|0;e=c[d>>2]|0;if((e|0)!=(g|0))c[d>>2]=e+(~((e+-16-f|0)>>>4)<<4);wf(g);d=c[i>>2]|0}if((d|0)==(b|0))break;else e=d}b=c[h>>2]|0}wf(b)}h=a+68|0;b=c[h>>2]|0;if(b|0){i=a+72|0;d=c[i>>2]|0;if((d|0)!=(b|0)){do{e=d+-12|0;c[i>>2]=e;f=c[e>>2]|0;g=f;if(!f)d=e;else{d=d+-8|0;e=c[d>>2]|0;if((e|0)!=(f|0))c[d>>2]=e+(~((e+-16-g|0)>>>4)<<4);wf(f);d=c[i>>2]|0}}while((d|0)!=(b|0));b=c[h>>2]|0}wf(b)}k=a+56|0;b=c[k>>2]|0;if(b|0){l=a+60|0;d=c[l>>2]|0;if((d|0)!=(b|0)){do{i=d+-12|0;c[l>>2]=i;j=c[i>>2]|0;if(!j)d=i;else{h=d+-8|0;d=c[h>>2]|0;if((d|0)==(j|0))d=j;else{do{e=d+-12|0;c[h>>2]=e;f=c[e>>2]|0;g=f;if(!f)d=e;else{d=d+-8|0;e=c[d>>2]|0;if((e|0)!=(f|0))c[d>>2]=e+(~((e+-16-g|0)>>>4)<<4);wf(f);d=c[h>>2]|0}}while((d|0)!=(j|0));d=c[i>>2]|0}wf(d);d=c[l>>2]|0}}while((d|0)!=(b|0));b=c[k>>2]|0}wf(b)}h=a+44|0;b=c[h>>2]|0;if(b|0){i=a+48|0;d=c[i>>2]|0;if((d|0)!=(b|0)){do{e=d+-12|0;c[i>>2]=e;f=c[e>>2]|0;g=f;if(!f)d=e;else{d=d+-8|0;e=c[d>>2]|0;if((e|0)!=(f|0))c[d>>2]=e+(~((e+-16-g|0)>>>4)<<4);wf(f);d=c[i>>2]|0}}while((d|0)!=(b|0));b=c[h>>2]|0}wf(b)}i=a+32|0;b=c[i>>2]|0;if(!b)return;h=a+36|0;d=c[h>>2]|0;if((d|0)!=(b|0)){e=d;while(1){d=e+-12|0;c[h>>2]=d;f=c[d>>2]|0;g=f;if(f){d=e+-8|0;e=c[d>>2]|0;if((e|0)!=(f|0))c[d>>2]=e+(~((e+-16-g|0)>>>4)<<4);wf(f);d=c[h>>2]|0}if((d|0)==(b|0))break;else e=d}b=c[i>>2]|0}wf(b);return}function Mb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;q=(d-b|0)/12|0;r=a+8|0;e=c[r>>2]|0;n=c[a>>2]|0;p=n;if(q>>>0<=((e-n|0)/12|0)>>>0){o=a+4|0;j=((c[o>>2]|0)-n|0)/12|0;i=q>>>0>j>>>0;j=b+(j*12|0)|0;h=i?j:d;if((h|0)==(b|0))k=p;else{g=b;f=p;do{if((f|0)!=(g|0))Nb(f,c[g>>2]|0,c[g+4>>2]|0);g=g+12|0;f=f+12|0}while((g|0)!=(h|0));k=f}if(!i){e=c[o>>2]|0;if((e|0)==(k|0))return;do{f=e+-12|0;c[o>>2]=f;g=c[f>>2]|0;h=g;if(!g)e=f;else{e=e+-8|0;f=c[e>>2]|0;if((f|0)!=(g|0))c[e>>2]=f+(~((f+-16-h|0)>>>4)<<4);wf(g);e=c[o>>2]|0}}while((e|0)!=(k|0));return}if((h|0)==(d|0))return;i=c[o>>2]|0;while(1){c[i>>2]=0;m=i+4|0;c[m>>2]=0;c[i+8>>2]=0;l=j+4|0;f=(c[l>>2]|0)-(c[j>>2]|0)|0;k=f>>4;if(k|0){if(k>>>0>268435455){f=11;break}g=(f|0)==0?1:f;f=vf(g)|0;a:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){h=0;break a}ub[f&3]();f=vf(g)|0;if(f|0){h=f;break}}else h=f;while(0);c[m>>2]=h;c[i>>2]=h;c[i+8>>2]=h+(k<<4);g=c[j>>2]|0;f=(c[l>>2]|0)-g|0;if((f|0)>0){Vm(h|0,g|0,f|0)|0;c[m>>2]=h+(f>>4<<4)}}j=j+12|0;i=(c[o>>2]|0)+12|0;c[o>>2]=i;if((j|0)==(d|0)){f=50;break}}if((f|0)==11)Bl();else if((f|0)==50)return}if(n){i=a+4|0;e=c[i>>2]|0;if((e|0)==(p|0))e=n;else{f=e;while(1){e=f+-12|0;c[i>>2]=e;g=c[e>>2]|0;h=g;if(g){e=f+-8|0;f=c[e>>2]|0;if((f|0)!=(g|0))c[e>>2]=f+(~((f+-16-h|0)>>>4)<<4);wf(g);e=c[i>>2]|0}if((e|0)==(p|0))break;else f=e}e=c[a>>2]|0}wf(e);c[r>>2]=0;c[i>>2]=0;c[a>>2]=0;e=0}if(q>>>0>357913941)Bl();p=(e|0)/12|0;g=p<<1;g=p>>>0<178956970?(g>>>0<q>>>0?q:g):357913941;if(g>>>0>357913941)Bl();f=g*12|0;f=(f|0)==0?1:f;e=vf(f)|0;b:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break b}ub[e&3]();e=vf(f)|0}while(!(e|0));while(0);k=a+4|0;c[k>>2]=e;c[a>>2]=e;c[r>>2]=e+(g*12|0);if((b|0)==(d|0))return;while(1){c[e>>2]=0;j=e+4|0;c[j>>2]=0;c[e+8>>2]=0;i=b+4|0;f=(c[i>>2]|0)-(c[b>>2]|0)|0;h=f>>4;if(h|0){if(h>>>0>268435455){f=43;break}g=(f|0)==0?1:f;f=vf(g)|0;c:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){g=0;break c}ub[f&3]();f=vf(g)|0;if(f|0){g=f;break}}else g=f;while(0);c[j>>2]=g;c[e>>2]=g;c[e+8>>2]=g+(h<<4);f=c[b>>2]|0;e=(c[i>>2]|0)-f|0;if((e|0)>0){Vm(g|0,f|0,e|0)|0;c[j>>2]=g+(e>>4<<4)}}b=b+12|0;e=(c[k>>2]|0)+12|0;c[k>>2]=e;if((b|0)==(d|0)){f=50;break}}if((f|0)==43)Bl();else if((f|0)==50)return}function Nb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;j=d;h=b;g=j-h|0;m=g>>4;i=a+8|0;e=c[i>>2]|0;l=c[a>>2]|0;k=l;if(m>>>0<=e-l>>4>>>0){i=a+4|0;a=(c[i>>2]|0)-l>>4;g=m>>>0>a>>>0;a=g?b+(a<<4)|0:d;f=a;e=f-h|0;d=e>>4;if(d|0)$m(l|0,b|0,e|0)|0;d=k+(d<<4)|0;if(g){e=j-f|0;if((e|0)<=0)return;Vm(c[i>>2]|0,a|0,e|0)|0;c[i>>2]=(c[i>>2]|0)+(e>>4<<4);return}else{e=c[i>>2]|0;if((e|0)==(d|0))return;c[i>>2]=e+(~((e+-16-d|0)>>>4)<<4);return}}f=l;if(l){e=a+4|0;d=c[e>>2]|0;if((d|0)!=(k|0))c[e>>2]=d+(~((d+-16-l|0)>>>4)<<4);wf(f);c[i>>2]=0;c[e>>2]=0;c[a>>2]=0;e=0}if(m>>>0>268435455)Bl();f=e>>3;f=e>>4>>>0<134217727?(f>>>0<m>>>0?m:f):268435455;if(f>>>0>268435455)Bl();d=f<<4;d=(d|0)==0?1:d;e=vf(d)|0;a:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break a}ub[e&3]();e=vf(d)|0}while(!(e|0));while(0);d=a+4|0;c[d>>2]=e;c[a>>2]=e;c[i>>2]=e+(f<<4);if((g|0)<=0)return;Vm(e|0,b|0,g|0)|0;c[d>>2]=e+(m<<4);return}function Ob(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;n=a+4|0;d=c[a>>2]|0;l=((c[n>>2]|0)-d|0)/12|0;e=l+1|0;if(e>>>0>357913941)Bl();o=a+8|0;m=((c[o>>2]|0)-d|0)/12|0;g=m<<1;g=m>>>0<178956970?(g>>>0<e>>>0?e:g):357913941;if(!g)d=0;else{if(g>>>0>357913941){o=Fa(4)|0;c[o>>2]=8316;$a(o|0,1336,91)}e=g*12|0;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}e=d+(l*12|0)|0;f=e;m=d+(g*12|0)|0;c[e>>2]=0;k=d+(l*12|0)+4|0;c[k>>2]=0;c[d+(l*12|0)+8>>2]=0;j=b+4|0;g=(c[j>>2]|0)-(c[b>>2]|0)|0;i=g>>4;if(i|0){if(i>>>0>268435455)Bl();h=(g|0)==0?1:g;g=vf(h)|0;b:do if(!g)while(1){g=c[5972]|0;c[5972]=g+0;if(!g){h=0;break b}ub[g&3]();g=vf(h)|0;if(g|0){h=g;break}}else h=g;while(0);c[k>>2]=h;c[e>>2]=h;c[d+(l*12|0)+8>>2]=h+(i<<4);g=c[b>>2]|0;d=(c[j>>2]|0)-g|0;if((d|0)>0){Vm(h|0,g|0,d|0)|0;c[k>>2]=h+(d>>4<<4)}}h=e+12|0;g=c[a>>2]|0;d=c[n>>2]|0;if((d|0)==(g|0)){d=f;j=g;f=g}else{do{l=e+-12|0;b=d;d=d+-12|0;c[l>>2]=0;k=e+-8|0;c[k>>2]=0;c[e+-4>>2]=0;c[l>>2]=c[d>>2];l=b+-8|0;c[k>>2]=c[l>>2];b=b+-4|0;c[e+-4>>2]=c[b>>2];c[b>>2]=0;c[l>>2]=0;c[d>>2]=0;e=f+-12|0;f=e}while((d|0)!=(g|0));d=f;j=c[a>>2]|0;f=c[n>>2]|0}c[a>>2]=d;c[n>>2]=h;c[o>>2]=m;i=j;if((f|0)!=(i|0))do{d=f;f=f+-12|0;g=c[f>>2]|0;h=g;if(g|0){d=d+-8|0;e=c[d>>2]|0;if((e|0)!=(g|0))c[d>>2]=e+(~((e+-16-h|0)>>>4)<<4);wf(g)}}while((f|0)!=(i|0));if(!j)return;wf(j);return}function Pb(a,b,d,e,f,g,i,j,k){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;i=i|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0,C=0.0,D=0.0,I=0.0,J=0,K=0,L=0;u=Km(g|0,i|0,b|0,d|0)|0;t=E;s=Km(j|0,k|0,e|0,f|0)|0;w=+(u>>>0)+4294967296.0*+(t|0);y=+(s>>>0)+4294967296.0*+(E|0);x=+H(+(w*w+y*y));w=w/x;x=y/x;y=-x;h[a+24>>3]=w;h[a+32>>3]=x;h[a+40>>3]=y;h[a+48>>3]=w;C=+(b>>>0)+4294967296.0*+(d|0);D=+(e>>>0)+4294967296.0*+(f|0);I=C*w+D*x;s=~~I>>>0;t=+G(I)>=1.0?(I>0.0?~~+U(+F(I/4294967296.0),4294967295.0)>>>0:~~+S((I-+(~~I>>>0))/4294967296.0)>>>0):0;C=D*w+C*y;u=~~C>>>0;v=+G(C)>=1.0?(C>0.0?~~+U(+F(C/4294967296.0),4294967295.0)>>>0:~~+S((C-+(~~C>>>0))/4294967296.0)>>>0):0;q=a+56|0;c[q>>2]=s;c[q+4>>2]=t;q=a+64|0;c[q>>2]=u;c[q+4>>2]=v;C=+(g>>>0)+4294967296.0*+(i|0);D=+(j>>>0)+4294967296.0*+(k|0);I=C*w+D*x;q=~~I>>>0;r=+G(I)>=1.0?(I>0.0?~~+U(+F(I/4294967296.0),4294967295.0)>>>0:~~+S((I-+(~~I>>>0))/4294967296.0)>>>0):0;C=D*w+C*y;b=+G(C)>=1.0?(C>0.0?~~+U(+F(C/4294967296.0),4294967295.0)>>>0:~~+S((C-+(~~C>>>0))/4294967296.0)>>>0):0;d=a+72|0;c[d>>2]=q;c[d+4>>2]=r;d=a+80|0;c[d>>2]=~~C>>>0;c[d+4>>2]=b;d=c[a>>2]|0;b=c[d+4>>2]|0;d=c[d>>2]|0;p=d;if((b|0)==(d|0)){B=0;return B|0}m=(b-d|0)/12|0;l=0;a:while(1){b=c[p+(l*12|0)+4>>2]|0;d=c[p+(l*12|0)>>2]|0;n=b-d>>4;o=d;if(n|0?(a=n+-1|0,k=o+(a<<4)|0,a=o+(a<<4)+8|0,z=+((c[k>>2]|0)>>>0)+4294967296.0*+(c[k+4>>2]|0),A=+((c[a>>2]|0)>>>0)+4294967296.0*+(c[a+4>>2]|0),(b|0)!=(d|0)):0){D=z*y+w*A;d=+G(D)>=1.0?(D>0.0?~~+U(+F(D/4294967296.0),4294967295.0)>>>0:~~+S((D-+(~~D>>>0))/4294967296.0)>>>0):0;I=w*z+x*A;b=0;f=~~D>>>0;i=~~I>>>0;k=+G(I)>=1.0?(I>0.0?~~+U(+F(I/4294967296.0),4294967295.0)>>>0:~~+S((I-+(~~I>>>0))/4294967296.0)>>>0):0;do{a=o+(b<<4)|0;j=o+(b<<4)+8|0;D=+((c[a>>2]|0)>>>0)+4294967296.0*+(c[a+4>>2]|0);I=+((c[j>>2]|0)>>>0)+4294967296.0*+(c[j+4>>2]|0);C=w*D+x*I;j=i;i=~~C>>>0;a=k;k=+G(C)>=1.0?(C>0.0?~~+U(+F(C/4294967296.0),4294967295.0)>>>0:~~+S((C-+(~~C>>>0))/4294967296.0)>>>0):0;I=D*y+w*I;g=f;f=~~I>>>0;e=d;d=+G(I)>=1.0?(I>0.0?~~+U(+F(I/4294967296.0),4294967295.0)>>>0:~~+S((I-+(~~I>>>0))/4294967296.0)>>>0):0;if(!(!(((v|0)<(e|0)|(v|0)==(e|0)&u>>>0<g>>>0)&((d|0)<(v|0)|(d|0)==(v|0)&f>>>0<u>>>0))?!(((v|0)>(e|0)|(v|0)==(e|0)&u>>>0>g>>>0)&((d|0)>(v|0)|(d|0)==(v|0)&f>>>0>u>>>0)):0))B=8;if((B|0)==8?(B=0,L=Km(i|0,k|0,j|0,a|0)|0,J=E,K=Km(u|0,v|0,g|0,e|0)|0,K=Ym(L|0,J|0,K|0,E|0)|0,J=E,g=Km(f|0,d|0,g|0,e|0)|0,g=Rm(K|0,J|0,g|0,E|0)|0,a=Om(g|0,E|0,j|0,a|0)|0,j=E,((j|0)>(t|0)|(j|0)==(t|0)&a>>>0>s>>>0)&((j|0)<(r|0)|(j|0)==(r|0)&a>>>0<q>>>0)):0){b=1;B=11;break a}b=b+1|0}while(b>>>0<n>>>0)}l=l+1|0;if(l>>>0>=m>>>0){b=0;B=11;break}}if((B|0)==11)return b|0;return 0}function Qb(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0.0;f=b+(d*12|0)|0;if(!e){b=c[b+(d*12|0)+4>>2]|0;g=c[f>>2]|0;f=b-g>>4;h=g}else{g=c[f>>2]|0;f=e;h=g;b=c[b+(d*12|0)+4>>2]|0}d=f+-1|0;f=h+(d<<4)|0;d=h+(d<<4)+8|0;o=c[d>>2]|0;d=c[d+4>>2]|0;r=h+(e<<4)|0;q=c[r>>2]|0;r=c[r+4>>2]|0;t=h+(e<<4)+8|0;s=c[t>>2]|0;t=c[t+4>>2]|0;l=((b-g>>4)+-1|0)>>>0>e>>>0?e+1|0:0;j=h+(l<<4)|0;i=c[j>>2]|0;j=c[j+4>>2]|0;l=h+(l<<4)+8|0;k=c[l>>2]|0;l=c[l+4>>2]|0;f=Km(q|0,r|0,c[f>>2]|0,c[f+4>>2]|0)|0;b=E;d=Km(s|0,t|0,o|0,d|0)|0;g=E;o=Ym(f|0,b|0,f|0,b|0)|0;p=E;e=Ym(d|0,g|0,d|0,g|0)|0;p=Om(e|0,E|0,o|0,p|0)|0;u=+H(+(+(p>>>0)+4294967296.0*+(E|0)));p=~~u>>>0;o=+G(u)>=1.0?(u>0.0?~~+U(+F(u/4294967296.0),4294967295.0)>>>0:~~+S((u-+(~~u>>>0))/4294967296.0)>>>0):0;e=Sm(0,p|0,32)|0;h=E;if((o|0)<0|(o|0)==0&p>>>0<1){m=0;n=0;o=1e3;p=0}else{p=Ym(f|0,b|0,1e3,0)|0;o=E;n=Ym(d|0,g|0,1e3,0)|0;m=E;o=Rm(p|0,o|0,e|0,h|0)|0;p=E;m=Rm(n|0,m|0,e|0,h|0)|0;n=E}e=Km(i|0,j|0,q|0,r|0)|0;h=E;d=Km(k|0,l|0,s|0,t|0)|0;g=E;k=Ym(e|0,h|0,e|0,h|0)|0;l=E;f=Ym(d|0,g|0,d|0,g|0)|0;l=Om(f|0,E|0,k|0,l|0)|0;u=+H(+(+(l>>>0)+4294967296.0*+(E|0)));l=~~u>>>0;k=+G(u)>=1.0?(u>0.0?~~+U(+F(u/4294967296.0),4294967295.0)>>>0:~~+S((u-+(~~u>>>0))/4294967296.0)>>>0):0;f=Sm(0,l|0,32)|0;b=E;if((k|0)<0|(k|0)==0&l>>>0<1){f=0;b=0;d=1e3;g=0}else{i=Ym(e|0,h|0,1e3,0)|0;j=E;k=Ym(d|0,g|0,1e3,0)|0;l=E;d=Rm(i|0,j|0,f|0,b|0)|0;g=E;f=Rm(k|0,l|0,f|0,b|0)|0;b=E}e=Om(f|0,b|0,m|0,n|0)|0;h=E;f=Om(d|0,g|0,o|0,p|0)|0;b=E;d=Ym(e|0,h|0,e|0,h|0)|0;o=E;p=Ym(f|0,b|0,f|0,b|0)|0;p=Om(d|0,o|0,p|0,E|0)|0;u=+H(+(+(p>>>0)+4294967296.0*+(E|0)));p=~~u>>>0;o=+G(u)>=1.0?(u>0.0?~~+U(+F(u/4294967296.0),4294967295.0)>>>0:~~+S((u-+(~~u>>>0))/4294967296.0)>>>0):0;d=Sm(0,p|0,32)|0;g=E;if((o|0)<0|(o|0)==0&p>>>0<1){m=200;o=0;n=0;p=0;o=Om(m|0,o|0,q|0,r|0)|0;q=E;r=Om(n|0,p|0,s|0,t|0)|0;t=E;s=a;p=s;c[p>>2]=o;s=s+4|0;c[s>>2]=q;a=a+8|0;s=a;c[s>>2]=r;a=a+4|0;c[a>>2]=t;return}o=Ym(e|0,h|0,-200,-1)|0;m=E;p=Ym(f|0,b|0,200,0)|0;n=E;m=Rm(o|0,m|0,d|0,g|0)|0;o=E;n=Rm(p|0,n|0,d|0,g|0)|0;p=E;o=Om(m|0,o|0,q|0,r|0)|0;q=E;r=Om(n|0,p|0,s|0,t|0)|0;t=E;s=a;p=s;c[p>>2]=o;s=s+4|0;c[s>>2]=q;a=a+8|0;s=a;c[s>>2]=r;a=a+4|0;c[a>>2]=t;return}function Rb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,T=0,V=0,W=0.0;R=b;Q=c[R>>2]|0;R=c[R+4>>2]|0;M=b+8|0;O=M;N=c[O>>2]|0;O=c[O+4>>2]|0;e=c[a+4>>2]|0;a=c[a>>2]|0;L=a;if((e|0)==(a|0)){R=0;return R|0}J=(e-a|0)/12|0;K=((d|0)<0)<<31>>31;I=0;a=4e6;e=0;j=N;k=O;i=Q;h=R;while(1){f=c[L+(I*12|0)+4>>2]|0;g=c[L+(I*12|0)>>2]|0;C=f-g>>4;D=g;if((C|0)!=0?(P=C+-1|0,(f|0)!=(g|0)):0){A=D+(P<<4)+8|0;y=D+(P<<4)|0;B=0;g=j;f=k;x=c[y>>2]|0;y=c[y+4>>2]|0;z=c[A>>2]|0;A=c[A+4>>2]|0;do{l=D+(B<<4)|0;s=x;x=c[l>>2]|0;r=y;y=c[l+4>>2]|0;l=D+(B<<4)+8|0;u=z;z=c[l>>2]|0;t=A;A=c[l+4>>2]|0;l=Km(x|0,y|0,s|0,r|0)|0;m=E;n=Km(z|0,A|0,u|0,t|0)|0;o=E;q=Ym(l|0,m|0,l|0,m|0)|0;p=E;w=Ym(n|0,o|0,n|0,o|0)|0;p=Om(w|0,E|0,q|0,p|0)|0;W=+H(+(+(p>>>0)+4294967296.0*+(E|0)));p=~~W>>>0;q=+G(W)>=1.0?(W>0.0?~~+U(+F(W/4294967296.0),4294967295.0)>>>0:~~+S((W-+(~~W>>>0))/4294967296.0)>>>0):0;w=Km(Q|0,R|0,s|0,r|0)|0;v=E;V=Km(N|0,O|0,u|0,t|0)|0;j=E;v=Ym(l|0,m|0,w|0,v|0)|0;w=E;j=Ym(n|0,o|0,V|0,j|0)|0;w=Om(j|0,E|0,v|0,w|0)|0;w=Rm(w|0,E|0,p|0,q|0)|0;v=E;j=(v|0)<0|(v|0)==0&w>>>0<10;w=j?10:w;v=j?0:v;j=Om(p|0,q|0,-10,-1)|0;V=E;T=(v|0)>(V|0)|(v|0)==(V|0)&w>>>0>j>>>0;w=T?j:w;w=Sm(0,w|0,32)|0;v=E;V=Ym(w|0,v|0,l|0,m|0)|0;T=E;v=Ym(w|0,v|0,n|0,o|0)|0;w=E;j=Sm(0,p|0,32)|0;k=E;T=Rm(V|0,T|0,j|0,k|0)|0;V=E;w=Rm(v|0,w|0,j|0,k|0)|0;v=E;r=Om(T|0,V|0,s|0,r|0)|0;s=E;t=Om(w|0,v|0,u|0,t|0)|0;u=E;v=Km(r|0,s|0,Q|0,R|0)|0;w=E;V=Km(t|0,u|0,N|0,O|0)|0;T=E;w=Ym(v|0,w|0,v|0,w|0)|0;v=E;T=Ym(V|0,T|0,V|0,T|0)|0;v=Om(T|0,E|0,w|0,v|0)|0;w=E;if((w|0)<(e|0)|(w|0)==(e|0)&v>>>0<a>>>0){if((q|0)<0|(q|0)==0&p>>>0<1){a=0;e=0;f=d;g=K}else{g=Ym(l|0,m|0,d|0,K|0)|0;f=E;e=Ym(n|0,o|0,d|0,K|0)|0;a=E;f=Rm(g|0,f|0,j|0,k|0)|0;g=E;a=Rm(e|0,a|0,j|0,k|0)|0;e=E}i=Km(r|0,s|0,a|0,e|0)|0;h=E;g=Om(f|0,g|0,t|0,u|0)|0;f=E;a=v;e=w}B=B+1|0}while((B|0)!=(C|0))}else{g=j;f=k}I=I+1|0;if(I>>>0>=J>>>0)break;else{j=g;k=f}}if(!((e|0)<0|(e|0)==0&a>>>0<4e6)){V=0;return V|0}V=b;c[V>>2]=i;c[V+4>>2]=h;V=M;c[V>>2]=g;c[V+4>>2]=f;V=1;return V|0}function Sb(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;s=c[a+4>>2]|0;r=c[a>>2]|0;t=r;if((s|0)==(r|0)){f=0;return f|0}a=c[t+4>>2]|0;g=c[r>>2]|0;p=a-g>>4;q=g;if(!p){f=0;return f|0}h=p+-1|0;if((a|0)==(g|0)){f=0;return f|0}m=q+(h<<4)+8|0;o=q+(h<<4)|0;a=0;k=0;l=c[m+4>>2]|0;m=c[m>>2]|0;n=c[o>>2]|0;o=c[o+4>>2]|0;do{v=q+(k<<4)|0;i=n;n=c[v>>2]|0;j=o;o=c[v+4>>2]|0;v=q+(k<<4)+8|0;h=m;m=c[v>>2]|0;g=l;l=c[v+4>>2]|0;if(!(!(((g|0)>(f|0)|(g|0)==(f|0)&h>>>0>=e>>>0)&((l|0)<(f|0)|(l|0)==(f|0)&m>>>0<e>>>0))?(g|0)>(f|0)|(g|0)==(f|0)&h>>>0>e>>>0|((l|0)<(f|0)|(l|0)==(f|0)&m>>>0<=e>>>0):0)){v=Km(n|0,o|0,i|0,j|0)|0;w=E;x=Km(e|0,f|0,h|0,g|0)|0;x=Ym(v|0,w|0,x|0,E|0)|0;w=E;v=Km(m|0,l|0,h|0,g|0)|0;v=Rm(x|0,w|0,v|0,E|0)|0;v=Om(v|0,E|0,i|0,j|0)|0;j=E;a=(((j|0)>(d|0)|(j|0)==(d|0)&v>>>0>=b>>>0)&1)+a|0}k=k+1|0}while((k|0)!=(p|0));if(((a|0)%2|0|0)!=1){x=0;return x|0}q=(s-r|0)/12|0;if(q>>>0>1)p=1;else{x=1;return x|0}while(1){a=c[t+(p*12|0)+4>>2]|0;g=c[t+(p*12|0)>>2]|0;r=a-g>>4;s=g;if(r|0?(u=r+-1|0,(a|0)!=(g|0)):0){m=s+(u<<4)+8|0;o=s+(u<<4)|0;a=0;k=0;l=c[m+4>>2]|0;m=c[m>>2]|0;n=c[o>>2]|0;o=c[o+4>>2]|0;do{x=s+(k<<4)|0;i=n;n=c[x>>2]|0;j=o;o=c[x+4>>2]|0;x=s+(k<<4)+8|0;h=m;m=c[x>>2]|0;g=l;l=c[x+4>>2]|0;if(!(!(((g|0)>(f|0)|(g|0)==(f|0)&h>>>0>=e>>>0)&((l|0)<(f|0)|(l|0)==(f|0)&m>>>0<e>>>0))?(g|0)>(f|0)|(g|0)==(f|0)&h>>>0>e>>>0|((l|0)<(f|0)|(l|0)==(f|0)&m>>>0<=e>>>0):0)){x=Km(n|0,o|0,i|0,j|0)|0;w=E;v=Km(e|0,f|0,h|0,g|0)|0;v=Ym(x|0,w|0,v|0,E|0)|0;w=E;x=Km(m|0,l|0,h|0,g|0)|0;x=Rm(v|0,w|0,x|0,E|0)|0;x=Om(x|0,E|0,i|0,j|0)|0;w=E;a=(((w|0)>(d|0)|(w|0)==(d|0)&x>>>0>=b>>>0)&1)+a|0}k=k+1|0}while((k|0)!=(r|0));if(((a|0)%2|0|0)==1){a=0;g=20;break}}p=p+1|0;if(p>>>0>=q>>>0){a=1;g=20;break}}if((g|0)==20)return a|0;return 0}function Tb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;i=a+4|0;j=c[a>>2]|0;k=(c[i>>2]|0)-j|0;h=k>>4;d=h+1|0;if(d>>>0>268435455)Bl();l=a+8|0;f=(c[l>>2]|0)-j|0;g=f>>3;g=f>>4>>>0<134217727?(g>>>0<d>>>0?d:g):268435455;if(!g)d=0;else{if(g>>>0>268435455){l=Fa(4)|0;c[l>>2]=8316;$a(l|0,1336,91)}e=g<<4;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}f=d+(h<<4)|0;c[f>>2]=c[b>>2];c[f+4>>2]=c[b+4>>2];c[f+8>>2]=c[b+8>>2];c[f+12>>2]=c[b+12>>2];e=f+(0-h<<4)|0;if((k|0)>0)Vm(e|0,j|0,k|0)|0;c[a>>2]=e;c[i>>2]=f+16;c[l>>2]=d+(g<<4);if(!j)return;wf(j);return}function Ub(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;i=a+4|0;j=c[a>>2]|0;k=(c[i>>2]|0)-j|0;h=k>>4;d=h+1|0;if(d>>>0>268435455)Bl();l=a+8|0;f=(c[l>>2]|0)-j|0;g=f>>3;g=f>>4>>>0<134217727?(g>>>0<d>>>0?d:g):268435455;if(!g)d=0;else{if(g>>>0>268435455){l=Fa(4)|0;c[l>>2]=8316;$a(l|0,1336,91)}e=g<<4;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}f=d+(h<<4)|0;c[f>>2]=c[b>>2];c[f+4>>2]=c[b+4>>2];c[f+8>>2]=c[b+8>>2];c[f+12>>2]=c[b+12>>2];e=f+(0-h<<4)|0;if((k|0)>0)Vm(e|0,j|0,k|0)|0;c[a>>2]=e;c[i>>2]=f+16;c[l>>2]=d+(g<<4);if(!j)return;wf(j);return}function Vb(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;C=i;i=i+2096|0;f=C;w=C+1032|0;x=C+8|0;z=C+1064|0;g=c[b>>2]|0;if((g|0)==2040){c[f>>2]=d;c[f+4>>2]=e;sd(9212,f);i=C;return}if(!(c[g>>2]&128))f=1;else f=(c[g+20>>2]|0)>>>0>(c[g+28>>2]|0)>>>0?2:1;f=lb[c[g+40>>2]&31](g,0,f)|0;if((f|0)<0)A=f;else A=f-(c[g+8>>2]|0)+(c[g+4>>2]|0)+(c[g+20>>2]|0)-(c[g+28>>2]|0)|0;f=c[b>>2]|0;g=f+20|0;h=f+28|0;if(!((c[g>>2]|0)>>>0>(c[h>>2]|0)>>>0?(lb[c[f+36>>2]&31](f,0,0)|0,!(c[g>>2]|0)):0))B=9;if((B|0)==9?(c[f+16>>2]=0,c[h>>2]=0,c[g>>2]=0,(lb[c[f+40>>2]&31](f,0,0)|0)>=0):0){c[f+8>>2]=0;c[f+4>>2]=0;c[f>>2]=c[f>>2]&-17}p=c[b>>2]|0;q=p+74|0;r=a[q>>0]|0;a[q>>0]=r+255|r;r=p+8|0;s=p+4|0;g=c[s>>2]|0;f=(c[r>>2]|0)-g|0;if((f|0)>0){h=f>>>0<1024?f:1024;Vm(z|0,g|0,h|0)|0;c[s>>2]=g+h;f=1024-h|0;if(f|0){g=z+h|0;B=13}}else{f=1024;g=z;B=13}a:do if((B|0)==13){j=p+32|0;k=p+20|0;l=p+44|0;m=p+36|0;n=p+16|0;o=p+28|0;while(1){y=a[q>>0]|0;a[q>>0]=y+255|y;if((c[k>>2]|0)>>>0>(c[l>>2]|0)>>>0)lb[c[m>>2]&31](p,0,0)|0;c[n>>2]=0;c[o>>2]=0;c[k>>2]=0;h=c[p>>2]|0;if(h&20|0)break;h=c[l>>2]|0;c[r>>2]=h;c[s>>2]=h;h=lb[c[j>>2]&31](p,g,f)|0;if((h+1|0)>>>0<2)break a;f=f-h|0;if(!f)break a;else g=g+h|0}if(h&4|0)c[p>>2]=h|32}while(0);y=a[d>>0]|0;do if(y<<24>>24){f=Ne(z,y<<24>>24)|0;if(!((f|0)==0?1:(a[f>>0]|0)!=y<<24>>24)){j=a[d+1>>0]|0;if(j<<24>>24){g=f+1|0;n=a[g>>0]|0;if(n<<24>>24){k=a[d+2>>0]|0;if(!(k<<24>>24)){h=(y&255)<<8;j=j&255|h;h=h|n&255;f=n;while(1){h=h&65535;if((h|0)==(j|0))break;g=g+1|0;f=a[g>>0]|0;if(!(f<<24>>24)){f=0;break}else h=f&255|h<<8}f=f<<24>>24?g+-1|0:0;break}g=f+2|0;m=a[g>>0]|0;if(m<<24>>24){h=a[d+3>>0]|0;if(!(h<<24>>24)){h=(y&255)<<24;j=(j&255)<<16|h|(k&255)<<8;h=(m&255)<<8|(n&255)<<16|h;if((h|0)==(j|0))f=m;else do{g=g+1|0;f=a[g>>0]|0;h=(f&255|h)<<8}while(!(f<<24>>24==0|(h|0)==(j|0)));f=f<<24>>24?g+-2|0:0;break}g=f+3|0;l=a[g>>0]|0;if(l<<24>>24){if(!(a[d+4>>0]|0)){x=(y&255)<<24;j=(j&255)<<16|x|(k&255)<<8|h&255;h=(m&255)<<8|(n&255)<<16|l&255|x;if((h|0)==(j|0))f=l;else do{g=g+1|0;f=a[g>>0]|0;h=f&255|h<<8}while(!(f<<24>>24==0|(h|0)==(j|0)));f=f<<24>>24?g+-3|0:0;break};c[w>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;c[w+12>>2]=0;c[w+16>>2]=0;c[w+20>>2]=0;c[w+24>>2]=0;c[w+28>>2]=0;u=0;g=y;while(1){v=w+(((g&255)>>>5&255)<<2)|0;c[v>>2]=c[v>>2]|1<<(g&31);v=u+1|0;c[x+((g&255)<<2)>>2]=v;g=a[d+v>>0]|0;if(!(g<<24>>24)){B=43;break}if(!(a[f+v>>0]|0)){f=0;break}else u=v}b:do if((B|0)==43){c:do if(v>>>0>1){h=0;n=-1;j=1;d:while(1){k=1;g=h;while(1){h=j;e:while(1){m=1;while(1){j=a[d+(m+n)>>0]|0;l=a[d+h>>0]|0;if(j<<24>>24!=l<<24>>24)break e;if((m|0)==(k|0))break;m=m+1|0;h=m+g|0;if(h>>>0>=v>>>0){o=k;g=n;break d}}g=g+k|0;h=g+1|0;if(h>>>0>=v>>>0){o=k;g=n;break d}}k=h-n|0;if((j&255)<=(l&255))break;j=h+1|0;if(j>>>0>=v>>>0){o=k;g=n;break d}else g=h}j=g+2|0;if(j>>>0>=v>>>0){o=1;break}else{h=g+1|0;n=g}}k=0;p=-1;l=1;while(1){j=1;h=k;while(1){k=l;f:while(1){n=1;while(1){l=a[d+(n+p)>>0]|0;m=a[d+k>>0]|0;if(l<<24>>24!=m<<24>>24)break f;if((n|0)==(j|0))break;n=n+1|0;k=n+h|0;if(k>>>0>=v>>>0){k=o;h=p;break c}}h=h+j|0;k=h+1|0;if(k>>>0>=v>>>0){k=o;h=p;break c}}j=k-p|0;if((l&255)>=(m&255))break;l=k+1|0;if(l>>>0>=v>>>0){k=o;h=p;break c}else h=k}l=h+2|0;if(l>>>0>=v>>>0){k=o;j=1;break}else{k=h+1|0;p=h}}}else{k=1;g=-1;j=1;h=-1}while(0);s=(h+1|0)>>>0>(g+1|0)>>>0;k=s?j:k;s=s?h:g;t=s+1|0;g:do if(!t)B=70;else{g=d+k|0;if(y<<24>>24==(a[g>>0]|0)){h=d;j=t;do{j=j+-1|0;h=h+1|0;if(!j){B=70;break g}g=g+1|0}while((a[h>>0]|0)==(a[g>>0]|0))}k=v-s+-1|0;r=0;k=(s>>>0>k>>>0?s:k)+1|0}while(0);if((B|0)==70)r=v-k|0;o=v|63;p=(r|0)!=0;q=v-k|0;m=f;n=0;j=f;h:while(1){f=j;l=m;do if((f-l|0)>>>0<v>>>0){i:do if(f&3){g=j;f=o;do{if(!(a[g>>0]|0))break i;g=g+1|0;f=f+-1|0;h=(f|0)!=0}while(h&(g&3|0)!=0);if(h)B=77;else f=0}else{g=j;f=o;B=77}while(0);j:do if((B|0)==77){B=0;if(!(a[g>>0]|0))break;k:do if(f>>>0>3)while(1){h=c[g>>2]|0;if((h&-2139062144^-2139062144)&h+-16843009|0)break;g=g+4|0;f=f+-4|0;if(f>>>0<=3){B=82;break k}}else B=82;while(0);if((B|0)==82){B=0;if(!f){f=0;break}}while(1){if(!(a[g>>0]|0))break j;g=g+1|0;f=f+-1|0;if(!f){f=0;break}}}while(0);f=f|0?g:0;if(f)if((f-l|0)>>>0<v>>>0){f=0;break b}else{h=f;break}else{h=j+o|0;break}}else h=j;while(0);f=a[m+u>>0]|0;if(!(1<<(f&31)&c[w+(((f&255)>>>5&255)<<2)>>2])){m=m+v|0;n=0;j=h;continue}f=v-(c[x+((f&255)<<2)>>2]|0)|0;if(f|0){m=m+(p&(n|0)!=0&f>>>0<k>>>0?q:f)|0;n=0;j=h;continue}f=t>>>0>n>>>0?t:n;g=a[d+f>>0]|0;l:do if(!(g<<24>>24))f=t;else{while(1){if(g<<24>>24!=(a[m+f>>0]|0))break;f=f+1|0;g=a[d+f>>0]|0;if(!(g<<24>>24)){f=t;break l}}m=m+(f-s)|0;n=0;j=h;continue h}while(0);do{if(f>>>0<=n>>>0){f=m;break b}f=f+-1|0}while((a[d+f>>0]|0)==(a[m+f>>0]|0));m=m+k|0;n=r;j=h}}while(0)}else f=0}else f=0}else f=0}}else f=0}else f=z;while(0);j=d;m:do if(!(j&3))B=104;else{h=d;g=y;d=j;while(1){if(!(g<<24>>24))break m;g=h+1|0;d=g;if(!(d&3)){d=g;B=104;break m}h=g;g=a[g>>0]|0}}while(0);if((B|0)==104){while(1){g=c[d>>2]|0;if(!((g&-2139062144^-2139062144)&g+-16843009))d=d+4|0;else break}if((g&255)<<24>>24)do d=d+1|0;while((a[d>>0]|0)!=0)}Mm(f|0,32,d-j|0)|0;if(f|0){h=e;n:do if(!(h&3)){d=e;B=113}else{g=e;d=h;while(1){if(!(a[g>>0]|0))break n;g=g+1|0;d=g;if(!(d&3)){d=g;B=113;break}}}while(0);if((B|0)==113){while(1){g=c[d>>2]|0;if(!((g&-2139062144^-2139062144)&g+-16843009))d=d+4|0;else break}if((g&255)<<24>>24)do d=d+1|0;while((a[d>>0]|0)!=0)}Vm(f|0,e|0,d-h|0)|0}d=c[b>>2]|0;f=d+20|0;g=d+28|0;if(!((c[f>>2]|0)>>>0>(c[g>>2]|0)>>>0?(lb[c[d+36>>2]&31](d,0,0)|0,!(c[f>>2]|0)):0))B=121;if((B|0)==121?(c[d+16>>2]=0,c[g>>2]=0,c[f>>2]=0,(lb[c[d+40>>2]&31](d,0,0)|0)>=0):0){c[d+8>>2]=0;c[d+4>>2]=0;c[d>>2]=c[d>>2]&-17}g=c[b>>2]|0;f=g+16|0;d=c[f>>2]|0;do if(!d){d=g+74|0;e=a[d>>0]|0;a[d>>0]=e+255|e;d=c[g>>2]|0;if(!(d&8)){c[g+8>>2]=0;c[g+4>>2]=0;B=c[g+44>>2]|0;c[g+28>>2]=B;j=g+20|0;c[j>>2]=B;d=B+(c[g+48>>2]|0)|0;c[f>>2]=d;f=B;B=128;break}else{c[g>>2]=d|32;break}}else{f=g+20|0;j=f;f=c[f>>2]|0;B=128}while(0);o:do if((B|0)==128){h=f;if((d-f|0)>>>0<1024){lb[c[g+36>>2]&31](g,z,1024)|0;break}p:do if((a[g+75>>0]|0)>-1){f=1024;while(1){if(!f){g=1024;f=z;d=h;break p}d=f+-1|0;if((a[z+d>>0]|0)==10)break;else f=d}if((lb[c[g+36>>2]&31](g,z,f)|0)>>>0<f>>>0)break o;g=1024-f|0;f=z+f|0;d=c[j>>2]|0}else{g=1024;f=z;d=h}while(0);Vm(d|0,f|0,g|0)|0;c[j>>2]=(c[j>>2]|0)+g}while(0);d=c[b>>2]|0;f=d+20|0;g=d+28|0;if(!((c[f>>2]|0)>>>0>(c[g>>2]|0)>>>0?(lb[c[d+36>>2]&31](d,0,0)|0,!(c[f>>2]|0)):0))B=138;if((B|0)==138?(c[d+16>>2]=0,c[g>>2]=0,c[f>>2]=0,(lb[c[d+40>>2]&31](d,A,0)|0)>=0):0){c[d+8>>2]=0;c[d+4>>2]=0;c[d>>2]=c[d>>2]&-17}i=C;return}function Wb(d,e,f){d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;q=i;i=i+32|0;o=q+16|0;n=q;c[n>>2]=f;m=c[d>>2]|0;l=a[m+75>>0]|0;f=l<<24>>24==59;do if((c[m+76>>2]|0)<0){if(!f){f=m+20|0;g=c[f>>2]|0;h=m+16|0;j=c[h>>2]|0;if(g>>>0<j>>>0){c[f>>2]=g+1;a[g>>0]=59;break}else f=j}else{f=m+16|0;h=f;f=c[f>>2]|0}a[o>>0]=59;do if(!f){f=m+74|0;g=b[f>>1]|0;l=(g&65535)<<24>>24;a[f>>0]=l+255|l;f=c[m>>2]|0;if(!(f&8)){c[m+8>>2]=0;c[m+4>>2]=0;k=c[m+44>>2]|0;c[m+28>>2]=k;j=m+20|0;c[j>>2]=k;f=k+(c[m+48>>2]|0)|0;c[h>>2]=f;h=f;f=(g&65535)>>>8&255;p=11;break}else{c[m>>2]=f|32;break}}else{k=m+20|0;j=k;k=c[k>>2]|0;h=f;f=l;p=11}while(0);do if((p|0)==11)if(k>>>0>=h>>>0|f<<24>>24==59){lb[c[m+36>>2]&31](m,o,1)|0;break}else{c[j>>2]=k+1;a[k>>0]=59;break}while(0)}else{if(!f){f=m+20|0;g=c[f>>2]|0;h=m+16|0;j=c[h>>2]|0;if(g>>>0<j>>>0){c[f>>2]=g+1;a[g>>0]=59;break}else f=j}else{f=m+16|0;h=f;f=c[f>>2]|0}a[o>>0]=59;do if(!f){f=m+74|0;g=b[f>>1]|0;l=(g&65535)<<24>>24;a[f>>0]=l+255|l;f=c[m>>2]|0;if(!(f&8)){c[m+8>>2]=0;c[m+4>>2]=0;k=c[m+44>>2]|0;c[m+28>>2]=k;j=m+20|0;c[j>>2]=k;f=k+(c[m+48>>2]|0)|0;c[h>>2]=f;h=f;f=(g&65535)>>>8&255;p=24;break}else{c[m>>2]=f|32;break}}else{k=m+20|0;j=k;k=c[k>>2]|0;h=f;f=l;p=24}while(0);do if((p|0)==24)if(k>>>0>=h>>>0|f<<24>>24==59){lb[c[m+36>>2]&31](m,o,1)|0;break}else{c[j>>2]=k+1;a[k>>0]=59;break}while(0)}while(0);Qe(c[d>>2]|0,e,n)|0;m=c[d>>2]|0;l=a[m+75>>0]|0;f=l<<24>>24==10;if((c[m+76>>2]|0)<0){if(!f){g=m+20|0;h=c[g>>2]|0;j=m+16|0;f=c[j>>2]|0;if(h>>>0<f>>>0){c[g>>2]=h+1;a[h>>0]=10;i=q;return}}else{f=m+16|0;j=f;f=c[f>>2]|0}a[o>>0]=10;do if(!f){f=m+74|0;g=b[f>>1]|0;n=(g&65535)<<24>>24;a[f>>0]=n+255|n;f=c[m>>2]|0;if(!(f&8)){c[m+8>>2]=0;c[m+4>>2]=0;k=c[m+44>>2]|0;c[m+28>>2]=k;f=m+20|0;c[f>>2]=k;h=k+(c[m+48>>2]|0)|0;c[j>>2]=h;j=f;f=(g&65535)>>>8&255;p=38;break}else{c[m>>2]=f|32;break}}else{k=m+20|0;j=k;k=c[k>>2]|0;h=f;f=l;p=38}while(0);do if((p|0)==38)if(k>>>0>=h>>>0|f<<24>>24==10){lb[c[m+36>>2]&31](m,o,1)|0;break}else{c[j>>2]=k+1;a[k>>0]=10;break}while(0);i=q;return}else{if(!f){f=m+20|0;g=c[f>>2]|0;h=m+16|0;j=c[h>>2]|0;if(g>>>0<j>>>0){c[f>>2]=g+1;a[g>>0]=10;i=q;return}else f=j}else{f=m+16|0;h=f;f=c[f>>2]|0}a[o>>0]=10;do if(!f){f=m+74|0;g=b[f>>1]|0;n=(g&65535)<<24>>24;a[f>>0]=n+255|n;f=c[m>>2]|0;if(!(f&8)){c[m+8>>2]=0;c[m+4>>2]=0;k=c[m+44>>2]|0;c[m+28>>2]=k;j=m+20|0;c[j>>2]=k;f=k+(c[m+48>>2]|0)|0;c[h>>2]=f;h=f;f=(g&65535)>>>8&255;p=51;break}else{c[m>>2]=f|32;break}}else{k=m+20|0;j=k;k=c[k>>2]|0;h=f;f=l;p=51}while(0);do if((p|0)==51)if(k>>>0>=h>>>0|f<<24>>24==10){lb[c[m+36>>2]&31](m,o,1)|0;break}else{c[j>>2]=k+1;a[k>>0]=10;break}while(0);i=q;return}}function Xb(d,e,f){d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;m=i;i=i+32|0;l=m+16|0;k=m;c[k>>2]=f;Qe(c[d>>2]|0,10828,k)|0;k=c[d>>2]|0;j=a[k+75>>0]|0;e=j<<24>>24==10;if((c[k+76>>2]|0)<0){if(!e){e=k+20|0;d=c[e>>2]|0;f=k+16|0;g=c[f>>2]|0;if(d>>>0<g>>>0){c[e>>2]=d+1;a[d>>0]=10;i=m;return}else e=g}else{e=k+16|0;f=e;e=c[e>>2]|0}a[l>>0]=10;do if(!e){e=k+74|0;d=b[e>>1]|0;j=(d&65535)<<24>>24;a[e>>0]=j+255|j;e=c[k>>2]|0;if(!(e&8)){c[k+8>>2]=0;c[k+4>>2]=0;h=c[k+44>>2]|0;c[k+28>>2]=h;g=k+20|0;c[g>>2]=h;e=h+(c[k+48>>2]|0)|0;c[f>>2]=e;f=e;e=(d&65535)>>>8&255;n=11;break}else{c[k>>2]=e|32;break}}else{h=k+20|0;g=h;h=c[h>>2]|0;f=e;e=j;n=11}while(0);do if((n|0)==11)if(h>>>0>=f>>>0|e<<24>>24==10){lb[c[k+36>>2]&31](k,l,1)|0;break}else{c[g>>2]=h+1;a[h>>0]=10;break}while(0);i=m;return}else{if(!e){e=k+20|0;d=c[e>>2]|0;f=k+16|0;g=c[f>>2]|0;if(d>>>0<g>>>0){c[e>>2]=d+1;a[d>>0]=10;i=m;return}else e=g}else{e=k+16|0;f=e;e=c[e>>2]|0}a[l>>0]=10;do if(!e){e=k+74|0;d=b[e>>1]|0;j=(d&65535)<<24>>24;a[e>>0]=j+255|j;e=c[k>>2]|0;if(!(e&8)){c[k+8>>2]=0;c[k+4>>2]=0;h=c[k+44>>2]|0;c[k+28>>2]=h;g=k+20|0;c[g>>2]=h;e=h+(c[k+48>>2]|0)|0;c[f>>2]=e;f=e;e=(d&65535)>>>8&255;n=24;break}else{c[k>>2]=e|32;break}}else{h=k+20|0;g=h;h=c[h>>2]|0;f=e;e=j;n=24}while(0);do if((n|0)==24)if(h>>>0>=f>>>0|e<<24>>24==10){lb[c[k+36>>2]&31](k,l,1)|0;break}else{c[g>>2]=h+1;a[h>>0]=10;break}while(0);i=m;return}}function Yb(d,e,f,g,j,k,l){d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;l=l|0;var m=0,n=0.0,o=0.0,p=0,q=0,r=0.0,s=0,t=0,u=0,v=0,w=0.0,x=0.0,y=0,z=0,A=0,B=0,C=0,D=0,F=0,G=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0.0;Q=i;i=i+224|0;N=Q+192|0;L=Q+176|0;K=Q+168|0;J=Q+152|0;G=Q+144|0;F=Q+136|0;v=Q+120|0;t=Q+112|0;A=Q+80|0;z=Q+72|0;y=Q+32|0;u=Q+40|0;O=Q;P=d+72|0;m=c[P>>2]|0;p=((m|0)<0)<<31>>31;if(((m|0)==(e|0)&(p|0)==(f|0)?(I=c[d+76>>2]|0,(I|0)==(g|0)&(((I|0)<0)<<31>>31|0)==(j|0)):0)?(c[d+80>>2]|0)==(c[d+368>>2]|0):0){i=Q;return}D=d+384|0;s=c[D>>2]|0;if((s|0)==3){o=+(k*60|0);q=d+16|0;r=+h[q>>3];x=+(l|0);n=+(k|0);w=n*(x*r/1.0e3)*60.0*.25;t=d+372|0;p=(a[t>>0]|0)!=0;if(!(w>0.0)){if(!p){q=c[d>>2]|0;p=q+16|0;m=c[p>>2]|0;do if(!m){m=q+74|0;k=a[m>>0]|0;a[m>>0]=k+255|k;m=c[q>>2]|0;if(!(m&8)){c[q+8>>2]=0;c[q+4>>2]=0;m=c[q+44>>2]|0;c[q+28>>2]=m;s=q+20|0;c[s>>2]=m;M=m+(c[q+48>>2]|0)|0;c[p>>2]=M;p=M;M=17;break}else{c[q>>2]=m|32;break}}else{M=q+20|0;p=m;s=M;m=c[M>>2]|0;M=17}while(0);do if((M|0)==17){if((p-m|0)>>>0<5){lb[c[q+36>>2]&31](q,9264,5)|0;break}if((a[q+75>>0]|0)>-1){if((lb[c[q+36>>2]&31](q,9264,5)|0)>>>0<5)break;p=0;q=9269;m=c[s>>2]|0}else{p=5;q=9264}Vm(m|0,q|0,p|0)|0;c[s>>2]=(c[s>>2]|0)+p}while(0);a[t>>0]=1}}else{if(p){m=d+360|0;p=~~(w*10.0);if((c[m>>2]|0)!=(p|0)){M=c[d>>2]|0;h[y>>3]=w;lf(M,9244,y);c[m>>2]=p}m=c[d>>2]|0;c[z>>2]=c[d+376>>2];lf(m,9257,z);a[t>>0]=0;m=c[P>>2]|0;r=+h[q>>3]}o=o*(w/(+Lm(+(w*100.0))/100.0));M=c[d+76>>2]|0;L=Km(e|0,f|0,m|0,((m|0)<0)<<31>>31|0)|0;k=E;M=Km(g|0,j|0,M|0,((M|0)<0)<<31>>31|0)|0;R=(+(L>>>0)+4294967296.0*+(k|0))/1.0e3;w=(+(M>>>0)+4294967296.0*+(E|0))/1.0e3;x=x/1.0e3*r*+H(+(R*R+w*w));M=d+8|0;h[M>>3]=+h[M>>3]+x}m=c[d>>2]|0;M=c[d+376>>2]|0;p=d+88+(M<<4)|0;p=Km(e|0,f|0,c[p>>2]|0,c[p+4>>2]|0)|0;x=(+(p>>>0)+4294967296.0*+(E|0))/1.0e3;M=d+88+(M<<4)+8|0;M=Km(g|0,j|0,c[M>>2]|0,c[M+4>>2]|0)|0;p=d+368|0;R=+(c[p>>2]|0)/1.0e3;h[A>>3]=x;h[A+8>>3]=(+(M>>>0)+4294967296.0*+(E|0))/1.0e3;h[A+16>>3]=R;h[A+24>>3]=o;lf(m,9270,A);m=d+80|0}else{I=(l|0)!=0;a:do if(I){q=d+76|0;B=c[q>>2]|0;z=Km(e|0,f|0,m|0,p|0)|0;A=E;B=Km(g|0,j|0,B|0,((B|0)<0)<<31>>31|0)|0;C=E;y=d+372|0;if(!(a[y>>0]|0)){F=d+8|0;m=F;n=+h[F>>3]}else{if((c[d+40>>2]|0)>0){m=c[d>>2]|0;h[t>>3]=+(c[d+80>>2]|0)/1.0e3;lf(m,9302,t);m=c[D>>2]|0}else m=s;switch(m|0){case 5:case 1:{q=c[d>>2]|0;p=q+16|0;m=c[p>>2]|0;do if(!m){m=q+74|0;v=a[m>>0]|0;a[m>>0]=v+255|v;m=c[q>>2]|0;if(!(m&8)){c[q+8>>2]=0;c[q+4>>2]=0;M=c[q+44>>2]|0;c[q+28>>2]=M;s=q+20|0;c[s>>2]=M;m=M+(c[q+48>>2]|0)|0;c[p>>2]=m;p=M;M=36;break}else{c[q>>2]=m|32;break}}else{p=q+20|0;s=p;p=c[p>>2]|0;M=36}while(0);do if((M|0)==36){if((m-p|0)>>>0<4){lb[c[q+36>>2]&31](q,9313,4)|0;break}if((a[q+75>>0]|0)>-1){if((lb[c[q+36>>2]&31](q,9313,4)|0)>>>0<4)break;m=0;q=9317;p=c[s>>2]|0}else{m=4;q=9313}Vm(p|0,q|0,m|0)|0;c[s>>2]=(c[s>>2]|0)+m}while(0);m=d+8|0;break}default:{m=d+8|0;w=+h[d+32>>3]+ +h[m>>3];h[m>>3]=w;s=c[d>>2]|0;t=d+364|0;p=a[(c[d+376>>2]|0)+(d+344)>>0]|0;c[v>>2]=(c[t>>2]|0)*60;c[v+4>>2]=p;h[v+8>>3]=w;lf(s,9318,v);v=c[t>>2]|0;c[d+360>>2]=v;w=+(c[q>>2]|0)/1.0e3;x=+(c[d+80>>2]|0)/1.0e3;R=+h[m>>3];h[u>>3]=+(c[P>>2]|0)/1.0e3;h[u+8>>3]=w;h[u+16>>3]=x;h[u+24>>3]=R;c[N>>2]=c[u>>2];c[N+4>>2]=c[u+4>>2];c[N+8>>2]=c[u+8>>2];c[N+12>>2]=c[u+12>>2];c[N+16>>2]=c[u+16>>2];c[N+20>>2]=c[u+20>>2];c[N+24>>2]=c[u+24>>2];c[N+28>>2]=c[u+28>>2];pd(d+552|0,N,+(v|0))}}n=+h[m>>3];if(n>1.0e4&n!=0.0?(c[D>>2]&-2|0)!=2:0){v=c[d>>2]|0;D=d+376|0;c[F>>2]=a[(c[D>>2]|0)+(d+344)>>0];lf(v,9227,F);F=d+416+(c[D>>2]<<3)|0;h[F>>3]=+h[m>>3]+ +h[F>>3];F=d+64|0;h[F>>3]=+h[F>>3]-+h[m>>3];h[m>>3]=0.0;n=0.0}a[y>>0]=0}x=(+(z>>>0)+4294967296.0*+(A|0))/1.0e3;R=(+(B>>>0)+4294967296.0*+(C|0))/1.0e3;h[m>>3]=n+ +(l|0)/1.0e3*+h[d+16>>3]*+H(+(x*x+R*R));s=c[d>>2]|0;p=s+16|0;m=c[p>>2]|0;do if(!m){m=s+74|0;l=a[m>>0]|0;a[m>>0]=l+255|l;m=c[s>>2]|0;if(!(m&8)){c[s+8>>2]=0;c[s+4>>2]=0;q=c[s+44>>2]|0;c[s+28>>2]=q;l=s+20|0;c[l>>2]=q;m=q+(c[s+48>>2]|0)|0;c[p>>2]=m;p=l;break}else{c[s>>2]=m|32;break a}}else{q=s+20|0;p=q;q=c[q>>2]|0}while(0);if((m-q|0)>>>0<2){lb[c[s+36>>2]&31](s,9334,2)|0;break}else{l=q;a[l>>0]=71;a[l+1>>0]=49;c[p>>2]=(c[p>>2]|0)+2;break}}else{s=c[d>>2]|0;p=s+16|0;m=c[p>>2]|0;do if(!m){m=s+74|0;l=a[m>>0]|0;a[m>>0]=l+255|l;m=c[s>>2]|0;if(!(m&8)){c[s+8>>2]=0;c[s+4>>2]=0;q=c[s+44>>2]|0;c[s+28>>2]=q;l=s+20|0;c[l>>2]=q;m=q+(c[s+48>>2]|0)|0;c[p>>2]=m;p=l;break}else{c[s>>2]=m|32;break a}}else{q=s+20|0;p=q;q=c[q>>2]|0}while(0);if((m-q|0)>>>0<2){lb[c[s+36>>2]&31](s,9337,2)|0;break}else{l=q;a[l>>0]=71;a[l+1>>0]=48;c[p>>2]=(c[p>>2]|0)+2;break}}while(0);m=d+360|0;if((c[m>>2]|0)==(k|0))s=d;else{s=c[d>>2]|0;c[G>>2]=k*60;lf(s,9340,G);c[m>>2]=k;s=d}p=c[s>>2]|0;t=d+376|0;q=c[t>>2]|0;m=d+88+(q<<4)|0;m=Km(e|0,f|0,c[m>>2]|0,c[m+4>>2]|0)|0;R=(+(m>>>0)+4294967296.0*+(E|0))/1.0e3;q=d+88+(q<<4)+8|0;q=Km(g|0,j|0,c[q>>2]|0,c[q+4>>2]|0)|0;h[J>>3]=R;h[J+8>>3]=(+(q>>>0)+4294967296.0*+(E|0))/1.0e3;lf(p,9345,J);p=d+368|0;q=c[p>>2]|0;m=d+80|0;if((q|0)!=(c[m>>2]|0)){j=c[s>>2]|0;h[K>>3]=+(q|0)/1.0e3;lf(j,9360,K)}if(I){j=c[s>>2]|0;R=+h[d+8>>3];c[L>>2]=a[(c[t>>2]|0)+(d+344)>>0];h[L+8>>3]=R;lf(j,9368,L)}z=c[s>>2]|0;y=a[z+75>>0]|0;q=y<<24>>24==10;do if((c[z+76>>2]|0)<0){if(!q){q=z+20|0;s=c[q>>2]|0;t=z+16|0;u=c[t>>2]|0;if(s>>>0<u>>>0){c[q>>2]=s+1;a[s>>0]=10;break}else q=u}else{q=z+16|0;t=q;q=c[q>>2]|0}a[N>>0]=10;do if(!q){q=z+74|0;s=b[q>>1]|0;j=(s&65535)<<24>>24;a[q>>0]=j+255|j;q=c[z>>2]|0;if(!(q&8)){c[z+8>>2]=0;c[z+4>>2]=0;v=c[z+44>>2]|0;c[z+28>>2]=v;u=z+20|0;c[u>>2]=v;q=v+(c[z+48>>2]|0)|0;c[t>>2]=q;t=q;q=(s&65535)>>>8&255;M=81;break}else{c[z>>2]=q|32;break}}else{v=z+20|0;u=v;v=c[v>>2]|0;t=q;q=y;M=81}while(0);do if((M|0)==81)if(v>>>0>=t>>>0|q<<24>>24==10){lb[c[z+36>>2]&31](z,N,1)|0;break}else{c[u>>2]=v+1;a[v>>0]=10;break}while(0)}else{if(!q){q=z+20|0;s=c[q>>2]|0;t=z+16|0;u=c[t>>2]|0;if(s>>>0<u>>>0){c[q>>2]=s+1;a[s>>0]=10;break}else q=u}else{q=z+16|0;t=q;q=c[q>>2]|0}a[N>>0]=10;do if(!q){q=z+74|0;s=b[q>>1]|0;j=(s&65535)<<24>>24;a[q>>0]=j+255|j;q=c[z>>2]|0;if(!(q&8)){c[z+8>>2]=0;c[z+4>>2]=0;v=c[z+44>>2]|0;c[z+28>>2]=v;u=z+20|0;c[u>>2]=v;q=v+(c[z+48>>2]|0)|0;c[t>>2]=q;t=q;q=(s&65535)>>>8&255;M=94;break}else{c[z>>2]=q|32;break}}else{v=z+20|0;u=v;v=c[v>>2]|0;t=q;q=y;M=94}while(0);do if((M|0)==94)if(v>>>0>=t>>>0|q<<24>>24==10){lb[c[z+36>>2]&31](z,N,1)|0;break}else{c[u>>2]=v+1;a[v>>0]=10;break}while(0)}while(0);n=+(k|0)}M=c[p>>2]|0;c[P>>2]=e;c[d+76>>2]=g;c[m>>2]=M;R=+h[d+8>>3];h[O>>3]=+(e|0)/1.0e3;h[O+8>>3]=+(g|0)/1.0e3;h[O+16>>3]=+(M|0)/1.0e3;h[O+24>>3]=R;c[N>>2]=c[O>>2];c[N+4>>2]=c[O+4>>2];c[N+8>>2]=c[O+8>>2];c[N+12>>2]=c[O+12>>2];c[N+16>>2]=c[O+16>>2];c[N+20>>2]=c[O+20>>2];c[N+24>>2]=c[O+24>>2];c[N+28>>2]=c[O+28>>2];pd(d+552|0,N,n);i=Q;return}function Zb(b,d){b=b|0;d=d|0;var e=0,f=0,g=0.0,j=0,k=0,l=0.0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0;q=i;i=i+80|0;e=q+40|0;p=q+32|0;f=q;j=c[b+384>>2]|0;if((j|0)==3){i=q;return}k=b+24|0;l=+h[k>>3];if(!(l>0.0)){i=q;return}o=b+372|0;if(a[o>>0]|0){i=q;return}m=b+64|0;n=b+8|0;g=+h[n>>3];if(!(+h[m>>3]+ +h[b+56>>3]<g|d)){i=q;return}a:do switch(j|0){case 5:case 1:{f=c[b>>2]|0;d=f+16|0;e=c[d>>2]|0;do if(!e){e=f+74|0;k=a[e>>0]|0;a[e>>0]=k+255|k;e=c[f>>2]|0;if(!(e&8)){c[f+8>>2]=0;c[f+4>>2]=0;k=c[f+44>>2]|0;c[f+28>>2]=k;j=f+20|0;c[j>>2]=k;e=k+(c[f+48>>2]|0)|0;c[d>>2]=e;d=k;break}else{c[f>>2]=e|32;break a}}else{d=f+20|0;j=d;d=c[d>>2]|0}while(0);if((e-d|0)>>>0<4){lb[c[f+36>>2]&31](f,9377,4)|0;break a}if((a[f+75>>0]|0)>-1){if((lb[c[f+36>>2]&31](f,9377,4)|0)>>>0<4)break a;e=0;f=9381;d=c[j>>2]|0}else{e=4;f=9377}Vm(d|0,f|0,e|0)|0;c[j>>2]=(c[j>>2]|0)+e;break}default:{d=c[b>>2]|0;j=b+364|0;s=a[(c[b+376>>2]|0)+(b+344)>>0]|0;c[e>>2]=(c[j>>2]|0)*60;c[e+4>>2]=s;h[e+8>>3]=g-l;lf(d,9318,e);j=c[j>>2]|0;c[b+360>>2]=j;r=+(c[b+76>>2]|0)/1.0e3;g=+(c[b+80>>2]|0)/1.0e3;l=+h[n>>3]-+h[k>>3];h[f>>3]=+(c[b+72>>2]|0)/1.0e3;h[f+8>>3]=r;h[f+16>>3]=g;h[f+24>>3]=l;c[e>>2]=c[f>>2];c[e+4>>2]=c[f+4>>2];c[e+8>>2]=c[f+8>>2];c[e+12>>2]=c[f+12>>2];c[e+16>>2]=c[f+16>>2];c[e+20>>2]=c[f+20>>2];c[e+24>>2]=c[f+24>>2];c[e+28>>2]=c[f+28>>2];pd(b+552|0,e,+(j|0))}}while(0);e=c[b+40>>2]|0;if((e|0)>0){s=c[b>>2]|0;h[p>>3]=+((c[b+80>>2]|0)+e|0)/1.0e3;lf(s,9302,p)}h[m>>3]=+h[n>>3];a[o>>0]=1;i=q;return}function _b(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;k=i;i=i+16|0;f=k+8|0;e=k;j=b+380|0;if((c[j>>2]|0)==(d|0)){i=k;return}g=(c[b+384>>2]|0)==2;h=c[b>>2]|0;a:do if((d|0)>0){b=(d*255|0)/100|0;if(g){c[e>>2]=b;lf(h,9405,e);break}else{c[f>>2]=b;lf(h,9427,f);break}}else{f=h+16|0;b=c[f>>2]|0;e=(b|0)==0;if(g){do if(e){b=h+74|0;g=a[b>>0]|0;a[b>>0]=g+255|g;b=c[h>>2]|0;if(!(b&8)){c[h+8>>2]=0;c[h+4>>2]=0;e=c[h+44>>2]|0;c[h+28>>2]=e;g=h+20|0;c[g>>2]=e;b=e+(c[h+48>>2]|0)|0;c[f>>2]=b;break}else{c[h>>2]=b|32;break a}}else{e=h+20|0;g=e;e=c[e>>2]|0}while(0);if((b-e|0)>>>0<8){lb[c[h+36>>2]&31](h,9437,8)|0;break}if((a[h+75>>0]|0)>-1){if((lb[c[h+36>>2]&31](h,9437,8)|0)>>>0<8)break;b=0;f=9445;e=c[g>>2]|0}else{b=8;f=9437}Vm(e|0,f|0,b|0)|0;c[g>>2]=(c[g>>2]|0)+b;break}else{do if(e){b=h+74|0;g=a[b>>0]|0;a[b>>0]=g+255|g;b=c[h>>2]|0;if(!(b&8)){c[h+8>>2]=0;c[h+4>>2]=0;e=c[h+44>>2]|0;c[h+28>>2]=e;g=h+20|0;c[g>>2]=e;b=e+(c[h+48>>2]|0)|0;c[f>>2]=b;break}else{c[h>>2]=b|32;break a}}else{e=h+20|0;g=e;e=c[e>>2]|0}while(0);if((b-e|0)>>>0<5){lb[c[h+36>>2]&31](h,9446,5)|0;break}if((a[h+75>>0]|0)>-1){if((lb[c[h+36>>2]&31](h,9446,5)|0)>>>0<5)break;b=0;f=9451;e=c[g>>2]|0}else{b=5;f=9446}Vm(e|0,f|0,b|0)|0;c[g>>2]=(c[g>>2]|0)+b;break}}while(0);c[j>>2]=d;i=k;return}function $b(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;q=i;i=i+16|0;m=q;p=b+24|0;o=b+28|0;h=c[o>>2]|0;l=c[p>>2]|0;j=h-l|0;g=l;k=h;if((j|0?(e=((j|0)/28|0)+-1|0,f=g+(e*28|0)|0,(c[f>>2]|0)==(d|0)):0)?(a[g+(e*28|0)+24>>0]|0)==0:0){p=f;i=q;return p|0}n=b+32|0;c[m>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;g=c[n>>2]|0;f=g;if(k>>>0<g>>>0){e=h;c[e>>2]=c[m>>2];c[e+4>>2]=c[m+4>>2];c[e+8>>2]=c[m+8>>2];e=k+12|0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;a[e+12>>0]=0;e=(c[o>>2]|0)+28|0;c[o>>2]=e}else{j=(j|0)/28|0;e=j+1|0;if(e>>>0>153391689)Bl();l=(f-l|0)/28|0;h=l<<1;h=l>>>0<76695844?(h>>>0<e>>>0?e:h):153391689;if(!h)e=0;else{if(h>>>0>153391689){q=Fa(4)|0;c[q>>2]=8316;$a(q|0,1336,91)}f=h*28|0;f=(f|0)==0?1:f;e=vf(f)|0;a:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break a}ub[e&3]();e=vf(f)|0}while(!(e|0));while(0)}f=e+(j*28|0)|0;g=f;k=e+(h*28|0)|0;c[f>>2]=c[m>>2];c[f+4>>2]=c[m+4>>2];c[f+8>>2]=c[m+8>>2];h=e+(j*28|0)+12|0;j=f+28|0;c[h>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;a[h+12>>0]=0;h=c[p>>2]|0;e=c[o>>2]|0;if((e|0)==(h|0)){e=g;l=h;f=h}else{do{r=f+-28|0;m=e;e=e+-28|0;c[r>>2]=c[e>>2];c[r+4>>2]=c[e+4>>2];c[r+8>>2]=c[e+8>>2];r=f+-16|0;l=m+-16|0;c[r>>2]=0;s=f+-12|0;c[s>>2]=0;c[f+-8>>2]=0;c[r>>2]=c[l>>2];r=m+-12|0;c[s>>2]=c[r>>2];s=m+-8|0;c[f+-8>>2]=c[s>>2];c[s>>2]=0;c[r>>2]=0;c[l>>2]=0;a[f+-4>>0]=a[m+-4>>0]|0;f=g+-28|0;g=f}while((e|0)!=(h|0));e=g;l=c[p>>2]|0;f=c[o>>2]|0}c[p>>2]=e;c[o>>2]=j;c[n>>2]=k;k=l;if((f|0)!=(k|0))do{e=c[f+-16>>2]|0;g=e;if(e|0){h=f+-12|0;j=c[h>>2]|0;if((j|0)!=(e|0))c[h>>2]=j+(~((j+-16-g|0)>>>4)<<4);wf(e)}f=f+-28|0}while((f|0)!=(k|0));if(l|0)wf(l);e=c[o>>2]|0}p=c[p>>2]|0;r=((e-p|0)/28|0)+-1|0;s=p+(r*28|0)|0;a[p+(r*28|0)+4>>0]=0;c[s>>2]=d;c[p+(r*28|0)+8>>2]=c[b+64>>2];a[p+(r*28|0)+24>>0]=0;i=q;return s|0}function ac(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;d=c[a+36>>2]|0;if(d|0){b=c[d+4>>2]|0;if(b|0)wf(b);b=c[d+8>>2]|0;if(b|0)wf(b);b=c[d+12>>2]|0;if(b|0)wf(b);b=c[d+16>>2]|0;if(b|0)wf(b);wf(d)}h=a+24|0;b=c[h>>2]|0;if(!b)return;g=a+28|0;d=c[g>>2]|0;if((d|0)!=(b|0)){do{a=d+-28|0;c[g>>2]=a;e=c[d+-16>>2]|0;f=e;if(!e)d=a;else{d=d+-12|0;a=c[d>>2]|0;if((a|0)!=(e|0))c[d>>2]=a+(~((a+-16-f|0)>>>4)<<4);wf(e);d=c[g>>2]|0}}while((d|0)!=(b|0));b=c[h>>2]|0}wf(b);return}function bc(d,e,f,g,j){d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0.0,y=0,z=0,A=0,B=0,C=0,D=0,H=0,I=0.0,J=0.0,K=0.0,L=0.0,M=0,N=0,O=0,P=0,Q=0,R=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0.0,ia=0,ja=0;ga=i;i=i+96|0;fa=ga+48|0;V=fa;c[V>>2]=e;c[V+4>>2]=f;V=fa+8|0;c[V>>2]=g;c[V+4>>2]=j;V=ga+76|0;Z=ga+32|0;_=ga+16|0;W=ga;da=ga+64|0;ea=$b(d,d+40|0)|0;q=d+72|0;l=b[q>>1]|0;do if(!((l&255)<<24>>24)){X=c[d+36>>2]|0;if(!X){if((l&65535)<256)break;o=d+8|0;k=d+16|0;l=c[k>>2]|0;k=c[k+4>>2]|0;o=Km(c[o>>2]|0,c[o+4>>2]|0,e|0,f|0)|0;p=E;k=Km(l|0,k|0,g|0,j|0)|0;l=E;m=c[d+68>>2]|0;n=((m|0)<0)<<31>>31;if((!((n|0)<(p|0)|(n|0)==(p|0)&m>>>0<o>>>0)?(t=0-m|0,u=((t|0)<0)<<31>>31,!((u|0)>(p|0)|(u|0)==(p|0)&t>>>0>o>>>0)):0)?(da=T(m,m)|0,aa=Ym(k|0,l|0,k|0,l|0)|0,ba=E,ca=Ym(o|0,p|0,o|0,p|0)|0,ca=Om(aa|0,ba|0,ca|0,E|0)|0,ba=E,((u|0)<(l|0)|(u|0)==(l|0)&t>>>0<=k>>>0)&((n|0)>(l|0)|(n|0)==(l|0)&m>>>0>=k>>>0)&(ba>>>0<0|(ba|0)==0&ca>>>0<=da>>>0)):0)break;a[ea+4>>0]=1;break}c[da>>2]=0;ca=da+4|0;c[ca>>2]=0;c[da+8>>2]=0;Y=d+8|0;c[_>>2]=c[fa>>2];c[_+4>>2]=c[fa+4>>2];c[_+8>>2]=c[fa+8>>2];c[_+12>>2]=c[fa+12>>2];l=W;m=Y;n=l+16|0;do{a[l>>0]=a[m>>0]|0;l=l+1|0;m=m+1|0}while((l|0)<(n|0));t=_;s=c[t>>2]|0;t=c[t+4>>2]|0;q=_+8|0;v=q;u=c[v>>2]|0;v=c[v+4>>2]|0;m=W;l=c[m>>2]|0;m=c[m+4>>2]|0;r=W+8|0;o=r;n=c[o>>2]|0;o=c[o+4>>2]|0;H=Km(s|0,t|0,l|0,m|0)|0;$=E;R=Km(u|0,v|0,n|0,o|0)|0;M=E;O=Om(H|0,$|0,1500,0)|0;N=E;Q=Om(R|0,M|0,1500,0)|0;P=E;M=Ym(R|0,M|0,R|0,M|0)|0;R=E;$=Ym(H|0,$|0,H|0,$|0)|0;$=Om(M|0,R|0,$|0,E|0)|0;R=E;a:do if((N>>>0<0|(N|0)==0&O>>>0<3001)&(P>>>0<0|(P|0)==0&Q>>>0<3001)&(R>>>0<0|(R|0)==0&$>>>0<2250001)){k=0;$=79}else{p=c[X>>2]|0;if(!(Sb(p,l,m,n,o)|0))if(Rb(p,W,100)|0){Tb(da,W);$=13}else $=80;else $=13;do if(($|0)==13){l=c[X>>2]|0;if(Sb(l,s,t,u,v)|0){Q=W;R=r;if(!(Pb(X,c[Q>>2]|0,c[Q+4>>2]|0,c[R>>2]|0,c[R+4>>2]|0,s,t,u,v)|0)?(k=c[ca>>2]|0,(k|0)==(c[da>>2]|0)):0){$=79;break a}else R=0}else{if(!(Rb(l,_,100)|0)){$=80;break}O=W;P=r;Q=_;R=q;Pb(X,c[O>>2]|0,c[O+4>>2]|0,c[P>>2]|0,c[P+4>>2]|0,c[Q>>2]|0,c[Q+4>>2]|0,c[R>>2]|0,c[R+4>>2]|0)|0;R=1}Q=c[X>>2]|0;k=c[Q+4>>2]|0;if((k|0)==(c[Q>>2]|0)){l=X+56|0;m=k}else{M=X+64|0;l=X+56|0;N=X+72|0;O=X+12|0;P=X+16|0;D=c[X+4>>2]|0;H=c[X+8>>2]|0;I=+h[X+24>>3];J=+h[X+32>>3];K=+h[X+40>>3];L=+h[X+48>>3];C=0;do{A=D+(C<<3)|0;B=A;c[B>>2]=-1;c[B+4>>2]=2147483647;B=H+(C<<3)|0;k=B;c[k>>2]=0;c[k+4>>2]=-2147483648;k=c[X>>2]|0;m=c[k>>2]|0;z=c[m+(C*12|0)+4>>2]|0;Q=c[m+(C*12|0)>>2]|0;y=(z-Q>>4)+-1|0;u=Q;v=u+(y<<4)|0;y=u+(y<<4)+8|0;w=+((c[v>>2]|0)>>>0)+4294967296.0*+(c[v+4>>2]|0);x=+((c[y>>2]|0)>>>0)+4294967296.0*+(c[y+4>>2]|0);if((z|0)!=(Q|0)){ha=K*w+L*x;t=+G(ha)>=1.0?(ha>0.0?~~+U(+F(ha/4294967296.0),4294967295.0)>>>0:~~+S((ha-+(~~ha>>>0))/4294967296.0)>>>0):0;x=I*w+J*x;z=0;u=~~ha>>>0;v=~~x>>>0;y=+G(x)>=1.0?(x>0.0?~~+U(+F(x/4294967296.0),4294967295.0)>>>0:~~+S((x-+(~~x>>>0))/4294967296.0)>>>0):0;k=0;o=-2147483648;while(1){r=c[m+(C*12|0)>>2]|0;s=r+(z<<4)|0;r=r+(z<<4)+8|0;x=+((c[s>>2]|0)>>>0)+4294967296.0*+(c[s+4>>2]|0);ha=+((c[r>>2]|0)>>>0)+4294967296.0*+(c[r+4>>2]|0);w=I*x+J*ha;r=v;v=~~w>>>0;s=y;y=+G(w)>=1.0?(w>0.0?~~+U(+F(w/4294967296.0),4294967295.0)>>>0:~~+S((w-+(~~w>>>0))/4294967296.0)>>>0):0;ha=K*x+L*ha;q=u;u=~~ha>>>0;p=t;t=+G(ha)>=1.0?(ha>0.0?~~+U(+F(ha/4294967296.0),4294967295.0)>>>0:~~+S((ha-+(~~ha>>>0))/4294967296.0)>>>0):0;n=M;m=c[n>>2]|0;n=c[n+4>>2]|0;if(!(((n|0)<(p|0)|(n|0)==(p|0)&m>>>0<q>>>0)&((t|0)<(n|0)|(t|0)==(n|0)&u>>>0<m>>>0))?!(((n|0)>(p|0)|(n|0)==(p|0)&m>>>0>q>>>0)&((t|0)>(n|0)|(t|0)==(n|0)&u>>>0>m>>>0)):0){p=k;n=o}else{ja=Km(v|0,y|0,r|0,s|0)|0;ia=E;Q=Km(m|0,n|0,q|0,p|0)|0;Q=Ym(ja|0,ia|0,Q|0,E|0)|0;n=E;m=Km(u|0,t|0,q|0,p|0)|0;m=Rm(Q|0,n|0,m|0,E|0)|0;m=Om(m|0,E|0,r|0,s|0)|0;n=E;Q=l;s=c[Q+4>>2]|0;if(!((n|0)<(s|0)|((n|0)==(s|0)?m>>>0<(c[Q>>2]|0)>>>0:0))?(ja=N,ia=c[ja+4>>2]|0,!((n|0)>(ia|0)|((n|0)==(ia|0)?m>>>0>(c[ja>>2]|0)>>>0:0))):0){ja=A;ia=c[ja+4>>2]|0;if((n|0)<(ia|0)|((n|0)==(ia|0)?m>>>0<(c[ja>>2]|0)>>>0:0)){k=A;c[k>>2]=m;c[k+4>>2]=n;c[(c[O>>2]|0)+(C<<2)>>2]=z;k=B;o=c[k+4>>2]|0;k=c[k>>2]|0}if((n|0)>(o|0)|(n|0)==(o|0)&m>>>0>k>>>0){p=B;c[p>>2]=m;c[p+4>>2]=n;c[(c[P>>2]|0)+(C<<2)>>2]=z;p=m}else{p=k;n=o}}else{p=k;n=o}}z=z+1|0;k=c[X>>2]|0;m=c[k>>2]|0;if(z>>>0>=(c[m+(C*12|0)+4>>2]|0)-(c[m+(C*12|0)>>2]|0)>>4>>>0)break;else{k=p;o=n}}}C=C+1|0;m=c[k+4>>2]|0;k=c[k>>2]|0}while(C>>>0<((m-k|0)/12|0)>>>0)}n=c[l>>2]|0;l=c[l+4>>2]|0;c[V>>2]=0;Q=V+4|0;c[Q>>2]=0;c[V+8>>2]=0;if((m|0)!=(k|0)){v=X+4|0;y=X+64|0;z=X+24|0;A=X+40|0;B=X+32|0;C=X+48|0;D=Z+8|0;P=V+8|0;H=X+12|0;M=X+16|0;N=X+8|0;O=Z+8|0;t=l;while(1){s=c[v>>2]|0;l=(m-k|0)/12|0;u=-1;k=0;p=2147483647;q=-1;while(1){o=s+(k<<3)|0;m=c[o>>2]|0;o=c[o+4>>2]|0;r=((o|0)>(t|0)|(o|0)==(t|0)&m>>>0>n>>>0)&((o|0)<(p|0)|(o|0)==(p|0)&m>>>0<q>>>0);u=r?k:u;k=k+1|0;if(k>>>0>=l>>>0)break;else{p=r?o:p;q=r?m:q}}if((u|0)==-1)break;ja=s+(u<<3)|0;ja=Om(c[ja>>2]|0,c[ja+4>>2]|0,-200,-1)|0;ia=y;K=+(ja>>>0)+4294967296.0*+(E|0);ha=+((c[ia>>2]|0)>>>0)+4294967296.0*+(c[ia+4>>2]|0);L=K*+h[z>>3]+ha*+h[A>>3];ia=+G(L)>=1.0?(L>0.0?~~+U(+F(L/4294967296.0),4294967295.0)>>>0:~~+S((L-+(~~L>>>0))/4294967296.0)>>>0):0;ha=K*+h[B>>3]+ha*+h[C>>3];ja=+G(ha)>=1.0?(ha>0.0?~~+U(+F(ha/4294967296.0),4294967295.0)>>>0:~~+S((ha-+(~~ha>>>0))/4294967296.0)>>>0):0;k=Z;c[k>>2]=~~L>>>0;c[k+4>>2]=ia;k=D;c[k>>2]=~~ha>>>0;c[k+4>>2]=ja;k=c[Q>>2]|0;if(k>>>0<(c[P>>2]|0)>>>0){c[k>>2]=c[Z>>2];c[k+4>>2]=c[Z+4>>2];c[k+8>>2]=c[Z+8>>2];c[k+12>>2]=c[Z+12>>2];c[Q>>2]=k+16}else Ub(V,Z);o=(c[H>>2]|0)+(u<<2)|0;l=c[o>>2]|0;p=(c[M>>2]|0)+(u<<2)|0;m=c[p>>2]|0;k=c[c[X>>2]>>2]|0;n=(c[k+(u*12|0)+4>>2]|0)-(c[k+(u*12|0)>>2]|0)>>4;if((((l-m+n|0)>>>0)%(n>>>0)|0)>>>0>(((m-l+n|0)>>>0)%(n>>>0)|0)>>>0){if((l|0)!=(m|0))do{Qb(Z,k,u,l);k=c[Q>>2]|0;if(k>>>0<(c[P>>2]|0)>>>0){c[k>>2]=c[Z>>2];c[k+4>>2]=c[Z+4>>2];c[k+8>>2]=c[Z+8>>2];c[k+12>>2]=c[Z+12>>2];c[Q>>2]=k+16}else Ub(V,Z);k=c[c[X>>2]>>2]|0;l=l>>>0<(((c[k+(u*12|0)+4>>2]|0)-(c[k+(u*12|0)>>2]|0)>>4)+-1|0)>>>0?l+1|0:0}while((l|0)!=(c[(c[M>>2]|0)+(u<<2)>>2]|0))}else{c[o>>2]=((l|0)==0?n:l)+-1;k=c[p>>2]|0;if(!k){k=c[c[X>>2]>>2]|0;k=(c[k+(u*12|0)+4>>2]|0)-(c[k+(u*12|0)>>2]|0)>>4}ja=k+-1|0;c[p>>2]=ja;k=c[o>>2]|0;if((k|0)!=(ja|0))do{Qb(Z,c[c[X>>2]>>2]|0,u,k);l=c[Q>>2]|0;if(l>>>0<(c[P>>2]|0)>>>0){c[l>>2]=c[Z>>2];c[l+4>>2]=c[Z+4>>2];c[l+8>>2]=c[Z+8>>2];c[l+12>>2]=c[Z+12>>2];c[Q>>2]=l+16}else Ub(V,Z);if(!k){k=c[c[X>>2]>>2]|0;k=(c[k+(u*12|0)+4>>2]|0)-(c[k+(u*12|0)>>2]|0)>>4}k=k+-1|0}while((k|0)!=(c[(c[M>>2]|0)+(u<<2)>>2]|0))}ja=(c[N>>2]|0)+(u<<3)|0;ja=Om(c[ja>>2]|0,c[ja+4>>2]|0,200,0)|0;ia=y;K=+(ja>>>0)+4294967296.0*+(E|0);ha=+((c[ia>>2]|0)>>>0)+4294967296.0*+(c[ia+4>>2]|0);L=K*+h[z>>3]+ha*+h[A>>3];ia=+G(L)>=1.0?(L>0.0?~~+U(+F(L/4294967296.0),4294967295.0)>>>0:~~+S((L-+(~~L>>>0))/4294967296.0)>>>0):0;ha=K*+h[B>>3]+ha*+h[C>>3];ja=+G(ha)>=1.0?(ha>0.0?~~+U(+F(ha/4294967296.0),4294967295.0)>>>0:~~+S((ha-+(~~ha>>>0))/4294967296.0)>>>0):0;k=Z;c[k>>2]=~~L>>>0;c[k+4>>2]=ia;k=O;c[k>>2]=~~ha>>>0;c[k+4>>2]=ja;k=c[Q>>2]|0;if(k>>>0<(c[P>>2]|0)>>>0){c[k>>2]=c[Z>>2];c[k+4>>2]=c[Z+4>>2];c[k+8>>2]=c[Z+8>>2];c[k+12>>2]=c[Z+12>>2];c[Q>>2]=k+16}else Ub(V,Z);l=(c[N>>2]|0)+(u<<3)|0;k=c[X>>2]|0;m=c[k+4>>2]|0;k=c[k>>2]|0;if((m|0)==(k|0))break;else{t=c[l+4>>2]|0;n=c[l>>2]|0}}k=c[Q>>2]|0;if((k|0)!=(c[P>>2]|0)){c[k>>2]=c[_>>2];c[k+4>>2]=c[_+4>>2];c[k+8>>2]=c[_+8>>2];c[k+12>>2]=c[_+12>>2];v=k+16|0;c[Q>>2]=v;s=Q;k=v}else $=62}else $=62;if(($|0)==62){Tb(V,_);v=c[Q>>2]|0;s=Q;k=v};c[Z>>2]=c[W>>2];c[Z+4>>2]=c[W+4>>2];c[Z+8>>2]=c[W+8>>2];c[Z+12>>2]=c[W+12>>2];t=c[V>>2]|0;u=t;b:do if(k-t>>4>>>0>1){r=da+8|0;q=Z+8|0;p=1;while(1){l=Z;k=c[l>>2]|0;l=c[l+4>>2]|0;n=q;m=c[n>>2]|0;n=c[n+4>>2]|0;ia=u+(p<<4)|0;ja=u+(p<<4)+8|0;do if(Pb(X,k,l,m,n,c[ia>>2]|0,c[ia+4>>2]|0,c[ja>>2]|0,c[ja+4>>2]|0)|0){o=p+-1|0;ia=u+(o<<4)|0;ja=u+(o<<4)+8|0;if(Pb(X,k,l,m,n,c[ia>>2]|0,c[ia+4>>2]|0,c[ja>>2]|0,c[ja+4>>2]|0)|0){k=0;break b}k=u+(o<<4)|0;c[Z>>2]=c[k>>2];c[Z+4>>2]=c[k+4>>2];c[Z+8>>2]=c[k+8>>2];c[Z+12>>2]=c[k+12>>2];k=c[ca>>2]|0;if((k|0)==(c[r>>2]|0)){Tb(da,Z);break}else{c[k>>2]=c[Z>>2];c[k+4>>2]=c[Z+4>>2];c[k+8>>2]=c[Z+8>>2];c[k+12>>2]=c[Z+12>>2];c[ca>>2]=k+16;break}}while(0);p=p+1|0;if(p>>>0>=(c[s>>2]|0)-t>>4>>>0){$=71;break}}}else $=71;while(0);do if(($|0)==71)if(R){k=c[ca>>2]|0;if((k|0)==(c[da+8>>2]|0)){Tb(da,_);k=1;break}else{c[k>>2]=c[_>>2];c[k+4>>2]=c[_+4>>2];c[k+8>>2]=c[_+8>>2];c[k+12>>2]=c[_+12>>2];c[ca>>2]=k+16;k=1;break}}else k=1;while(0);l=t;if(t|0){if((v|0)!=(u|0))c[Q>>2]=v+(~((v+-16-t|0)>>>4)<<4);wf(l)}if(k){o=c[ca>>2]|0;k=c[da>>2]|0;if((o|0)==(k|0))break a;p=ea+16|0;q=ea+20|0;r=ea+12|0;n=0;do{l=k+(n<<4)|0;m=c[p>>2]|0;if((m|0)==(c[q>>2]|0)){Tb(r,l);k=c[da>>2]|0}else{c[m>>2]=c[l>>2];c[m+4>>2]=c[l+4>>2];c[m+8>>2]=c[l+8>>2];c[m+12>>2]=c[l+12>>2];c[p>>2]=(c[p>>2]|0)+16}n=n+1|0}while(n>>>0<o-k>>4>>>0)}else $=88}while(0);if(($|0)==80)$=88;do if(($|0)==88){o=Y;k=d+16|0;l=c[k>>2]|0;k=c[k+4>>2]|0;o=Km(c[o>>2]|0,c[o+4>>2]|0,e|0,f|0)|0;p=E;k=Km(l|0,k|0,g|0,j|0)|0;l=E;m=c[d+68>>2]|0;n=((m|0)<0)<<31>>31;if((!((n|0)<(p|0)|(n|0)==(p|0)&m>>>0<o>>>0)?(aa=0-m|0,ba=((aa|0)<0)<<31>>31,!((ba|0)>(p|0)|(ba|0)==(p|0)&aa>>>0>o>>>0)):0)?(ja=T(m,m)|0,g=Ym(k|0,l|0,k|0,l|0)|0,j=E,ia=Ym(o|0,p|0,o|0,p|0)|0,ia=Om(g|0,j|0,ia|0,E|0)|0,j=E,((ba|0)<(l|0)|(ba|0)==(l|0)&aa>>>0<=k>>>0)&((n|0)>(l|0)|(n|0)==(l|0)&m>>>0>=k>>>0)&(j>>>0<0|(j|0)==0&ia>>>0<=ja>>>0)):0)break;a[ea+4>>0]=1}while(0);k=c[da>>2]|0}while(0);l=k;if(k|0){m=c[ca>>2]|0;if((m|0)!=(k|0))c[ca>>2]=m+(~((m+-16-l|0)>>>4)<<4);wf(k)}}else{o=d+8|0;k=d+16|0;l=c[k>>2]|0;k=c[k+4>>2]|0;o=Km(c[o>>2]|0,c[o+4>>2]|0,e|0,f|0)|0;p=E;k=Km(l|0,k|0,g|0,j|0)|0;l=E;m=c[d+68>>2]|0;n=((m|0)<0)<<31>>31;if(!((!((n|0)<(p|0)|(n|0)==(p|0)&m>>>0<o>>>0)?(r=0-m|0,s=((r|0)<0)<<31>>31,!((s|0)>(p|0)|(s|0)==(p|0)&r>>>0>o>>>0)):0)?(ja=T(m,m)|0,ca=Ym(k|0,l|0,k|0,l|0)|0,da=E,ia=Ym(o|0,p|0,o|0,p|0)|0,ia=Om(ca|0,da|0,ia|0,E|0)|0,da=E,((s|0)<(l|0)|(s|0)==(l|0)&r>>>0<=k>>>0)&((n|0)>(l|0)|(n|0)==(l|0)&m>>>0>=k>>>0)&(da>>>0<0|(da|0)==0&ia>>>0<=ja>>>0)):0))a[ea+4>>0]=1;a[q>>0]=0}while(0);k=ea+16|0;l=c[k>>2]|0;if((l|0)==(c[ea+20>>2]|0)){Tb(ea+12|0,fa);ia=fa;ja=d+8|0;c[ja>>2]=c[ia>>2];c[ja+4>>2]=c[ia+4>>2];c[ja+8>>2]=c[ia+8>>2];c[ja+12>>2]=c[ia+12>>2];i=ga;return}else{c[l>>2]=c[fa>>2];c[l+4>>2]=c[fa+4>>2];c[l+8>>2]=c[fa+8>>2];c[l+12>>2]=c[fa+12>>2];c[k>>2]=(c[k>>2]|0)+16;ia=fa;ja=d+8|0;c[ja>>2]=c[ia>>2];c[ja+4>>2]=c[ia+4>>2];c[ja+8>>2]=c[ia+8>>2];c[ja+12>>2]=c[ia+12>>2];i=ga;return}}function cc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;w=i;i=i+96|0;s=w+72|0;t=w+56|0;v=w;u=a+8|0;c[v>>2]=c[u>>2];c[v+4>>2]=c[u+4>>2];c[v+8>>2]=c[u+8>>2];c[v+12>>2]=c[u+12>>2];m=v+16|0;e=m;f=e+36|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(f|0));l=b+4|0;e=c[b>>2]|0;a:do if((c[l>>2]|0)!=(e|0)){j=v+20|0;k=v+24|0;f=0;g=0;h=0;while(1){e=e+(f*12|0)|0;c[s>>2]=e;if((g|0)==(h|0))dc(m,s);else{c[g>>2]=e;c[j>>2]=g+4}f=f+1|0;e=c[b>>2]|0;if(f>>>0>=(((c[l>>2]|0)-e|0)/12|0)>>>0)break a;g=c[j>>2]|0;h=c[k>>2]|0}}while(0);Mc(v);p=v+44|0;e=c[p>>2]|0;q=c[v+40>>2]|0;r=q;if((e|0)!=(q|0)){o=c[v+28>>2]|0;n=0;do{m=c[r+(n<<2)>>2]|0;g=c[b>>2]|0;k=g+(m*12|0)|0;l=c[o+(m<<2)>>2]|0;f=c[k>>2]|0;j=f+(l<<4)|0;f=f+(l<<4)+8|0;bc(a,c[j>>2]|0,c[j+4>>2]|0,c[f>>2]|0,c[f+4>>2]|0);m=g+(m*12|0)+4|0;g=c[m>>2]|0;f=c[k>>2]|0;if(g-f>>4>>>0>1){j=1;do{$m(t|0,f+((((j+l|0)>>>0)%(g-f>>4>>>0)|0)<<4)|0,16)|0;c[s>>2]=c[t>>2];c[s+4>>2]=c[t+4>>2];c[s+8>>2]=c[t+8>>2];c[s+12>>2]=c[t+12>>2];g=$b(a,d)|0;h=g+16|0;f=c[h>>2]|0;if((f|0)==(c[g+20>>2]|0))Tb(g+12|0,s);else{c[f>>2]=c[s>>2];c[f+4>>2]=c[s+4>>2];c[f+8>>2]=c[s+8>>2];c[f+12>>2]=c[s+12>>2];c[h>>2]=(c[h>>2]|0)+16};c[u>>2]=c[s>>2];c[u+4>>2]=c[s+4>>2];c[u+8>>2]=c[s+8>>2];c[u+12>>2]=c[s+12>>2];j=j+1|0;g=c[m>>2]|0;f=c[k>>2]|0;h=g-f>>4}while(j>>>0<h>>>0);if(h>>>0>2){$m(s|0,f+(l<<4)|0,16)|0;f=$b(a,d)|0;g=f+16|0;h=c[g>>2]|0;if((h|0)==(c[f+20>>2]|0))Tb(f+12|0,s);else{c[h>>2]=c[s>>2];c[h+4>>2]=c[s+4>>2];c[h+8>>2]=c[s+8>>2];c[h+12>>2]=c[s+12>>2];c[g>>2]=(c[g>>2]|0)+16};c[u>>2]=c[s>>2];c[u+4>>2]=c[s+4>>2];c[u+8>>2]=c[s+8>>2];c[u+12>>2]=c[s+12>>2]}}n=n+1|0}while(n>>>0<e-q>>2>>>0)}f=q;if(q|0){if((e|0)!=(r|0))c[p>>2]=e+(~((e+-4-q|0)>>>2)<<2);wf(f)}e=c[v+28>>2]|0;f=e;if(e|0){g=v+32|0;h=c[g>>2]|0;if((h|0)!=(e|0))c[g>>2]=h+(~((h+-4-f|0)>>>2)<<2);wf(e)}g=c[v+16>>2]|0;if(!g){i=w;return}e=v+20|0;f=c[e>>2]|0;if((f|0)!=(g|0))c[e>>2]=f+(~((f+-4-g|0)>>>2)<<2);wf(g);i=w;return}function dc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;i=a+4|0;j=c[a>>2]|0;k=(c[i>>2]|0)-j|0;h=k>>2;d=h+1|0;if(d>>>0>1073741823)Bl();l=a+8|0;f=(c[l>>2]|0)-j|0;g=f>>1;g=f>>2>>>0<536870911?(g>>>0<d>>>0?d:g):1073741823;if(!g)d=0;else{if(g>>>0>1073741823){l=Fa(4)|0;c[l>>2]=8316;$a(l|0,1336,91)}e=g<<2;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}f=d+(h<<2)|0;c[f>>2]=c[b>>2];e=f+(0-h<<2)|0;if((k|0)>0)Vm(e|0,j|0,k|0)|0;c[a>>2]=e;c[i>>2]=f+4;c[l>>2]=d+(g<<2);if(!j)return;wf(j);return}function ec(b,d,e){b=b|0;d=d|0;e=e|0;var f=0.0,g=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0.0,r=0.0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0.0,Aa=0.0,Ba=0,Ca=0.0,Da=0.0,Ea=0,Fa=0.0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0.0,Na=0.0;Ia=i;i=i+96|0;Ha=Ia+88|0;Ga=Ia+80|0;ua=Ia+72|0;ta=Ia+64|0;sa=Ia+56|0;ra=Ia+48|0;qa=Ia+40|0;wa=Ia+32|0;va=Ia+24|0;pa=Ia+8|0;oa=Ia;W=b+24|0;X=b+28|0;g=c[W>>2]|0;if((c[X>>2]|0)!=(g|0)){Q=b+40|0;R=b+56|0;V=b+60|0;l=+(e|0);y=0;n=c[(c[b>>2]|0)+376>>2]|0;e=0;while(1){x=c[g+(e*28|0)+8>>2]|0;do if((n|0)==(x|0)){if(a[g+(e*28|0)+4>>0]|0)Zb(c[b>>2]|0,0)}else{w=c[b>>2]|0;u=w+376|0;n=c[u>>2]|0;if((n|0)==(x|0))n=x;else{v=w+384|0;o=c[v>>2]|0;if((o|0)==3){t=w+372|0;a:do if(!(a[t>>0]|0)){p=c[w>>2]|0;o=p+16|0;n=c[o>>2]|0;do if(!n){n=p+74|0;P=a[n>>0]|0;a[n>>0]=P+255|P;n=c[p>>2]|0;if(!(n&8)){c[p+8>>2]=0;c[p+4>>2]=0;P=c[p+44>>2]|0;c[p+28>>2]=P;s=p+20|0;c[s>>2]=P;n=P+(c[p+48>>2]|0)|0;c[o>>2]=n;o=P;break}else{c[p>>2]=n|32;break a}}else{o=p+20|0;s=o;o=c[o>>2]|0}while(0);if((n-o|0)>>>0<5){lb[c[p+36>>2]&31](p,9264,5)|0;break}if((a[p+75>>0]|0)>-1){if((lb[c[p+36>>2]&31](p,9264,5)|0)>>>0<5)break;n=0;p=9269;o=c[s>>2]|0}else{n=5;p=9264}Vm(o|0,p|0,n|0)|0;c[s>>2]=(c[s>>2]|0)+n}while(0);a[t>>0]=1;n=x;break}t=w+8|0;f=+h[t>>3];if(!((o&-2|0)==2|f==0.0)){o=c[w>>2]|0;c[oa>>2]=a[w+344+n>>0];lf(o,9227,oa);o=w+416+(c[u>>2]<<3)|0;h[o>>3]=+h[t>>3]+ +h[o>>3];o=w+64|0;h[o>>3]=+h[o>>3]-+h[t>>3];h[t>>3]=0.0;o=c[v>>2]|0;f=0.0}b:do switch(o|0){case 5:case 1:{p=c[w>>2]|0;o=p+16|0;n=c[o>>2]|0;do if(!n){n=p+74|0;P=a[n>>0]|0;a[n>>0]=P+255|P;n=c[p>>2]|0;if(!(n&8)){c[p+8>>2]=0;c[p+4>>2]=0;P=c[p+44>>2]|0;c[p+28>>2]=P;s=p+20|0;c[s>>2]=P;n=P+(c[p+48>>2]|0)|0;c[o>>2]=n;o=P;break}else{c[p>>2]=n|32;break b}}else{o=p+20|0;s=o;o=c[o>>2]|0}while(0);if((n-o|0)>>>0<7){lb[c[p+36>>2]&31](p,9382,7)|0;break b}if((a[p+75>>0]|0)>-1){if((lb[c[p+36>>2]&31](p,9382,7)|0)>>>0<7)break b;n=0;p=9389;o=c[s>>2]|0}else{n=7;p=9382}Vm(o|0,p|0,n|0)|0;c[s>>2]=(c[s>>2]|0)+n;break}default:{O=c[w>>2]|0;P=w+364|0;N=a[(c[u>>2]|0)+(w+344)>>0]|0;k=f-+h[w+48>>3];c[pa>>2]=(c[P>>2]|0)*60;c[pa+4>>2]=N;h[pa+8>>3]=k;lf(O,9318,pa);c[w+360>>2]=c[P>>2]}}while(0);n=c[w+40>>2]|0;if((n|0)>0){P=c[w>>2]|0;h[va>>3]=+((c[w+80>>2]|0)+n|0)/1.0e3;lf(P,9302,va)}c[u>>2]=x;if((c[v>>2]|0)==4?+h[t>>3]!=0.0:0){P=c[w>>2]|0;c[wa>>2]=a[w+344+x>>0];lf(P,9227,wa);P=w+416+(c[u>>2]<<3)|0;h[P>>3]=+h[t>>3]+ +h[P>>3];P=w+64|0;h[P>>3]=+h[P>>3]-+h[t>>3];h[t>>3]=0.0}a[w+372>>0]=1;n=w+388|0;if((a[n+11>>0]|0)<0)n=c[n>>2]|0;o=c[w>>2]|0;c[qa>>2]=n;lf(o,20015,qa);o=c[w>>2]|0;n=c[u>>2]|0;if((c[v>>2]|0)==2){c[ra>>2]=n;lf(o,9390,ra)}else{c[sa>>2]=n;lf(o,9400,sa)}n=w+400|0;if((a[n+11>>0]|0)<0)n=c[n>>2]|0;P=c[w>>2]|0;c[ta>>2]=n;lf(P,20015,ta);n=x}}while(0);O=g+(e*28|0)|0;o=c[O>>2]|0;if((o|0)==(Q|0)|(y|0)==(o|0))P=y;else{P=c[b>>2]|0;c[ua>>2]=c[o+8>>2];Wb(P,9578,ua);o=c[O>>2]|0;P=o}L=c[o+4>>2]|0;N=(T(c[((L|0)==0?V:R)>>2]|0,c[o>>2]|0)|0)/100|0;M=g+(e*28|0)+12|0;K=g+(e*28|0)+16|0;D=c[K>>2]|0;I=c[M>>2]|0;J=D-I|0;p=I;if(((!((o|0)==(Q|0)|(J|0)!=16)?(Y=c[b>>2]|0,Z=c[Y+72>>2]|0,_=((Z|0)<0)<<31>>31,$=c[Y+76>>2]|0,aa=(($|0)<0)<<31>>31,ca=p,ba=c[ca>>2]|0,ca=c[ca+4>>2]|0,ea=p+8|0,da=c[ea>>2]|0,ea=c[ea+4>>2]|0,fa=Km(Z|0,_|0,ba|0,ca|0)|0,ga=E,ha=Km($|0,aa|0,da|0,ea|0)|0,ia=E,ja=L<<1,ka=((ja|0)<0)<<31>>31,!((ka|0)<(ga|0)|(ka|0)==(ga|0)&ja>>>0<fa>>>0)):0)?(la=0-ja|0,ma=((la|0)<0)<<31>>31,!((ma|0)>(ga|0)|(ma|0)==(ga|0)&la>>>0>fa>>>0)):0)?(na=T(ja,ja)|0,A=Ym(ha|0,ia|0,ha|0,ia|0)|0,B=E,C=Ym(fa|0,ga|0,fa|0,ga|0)|0,C=Om(A|0,B|0,C|0,E|0)|0,B=E,((ma|0)<(ia|0)|(ma|0)==(ia|0)&la>>>0<=ha>>>0)&((ka|0)>(ia|0)|(ka|0)==(ia|0)&ja>>>0>=ha>>>0)&(B>>>0<0|(B|0)==0&C>>>0<=na>>>0)):0){s=e+1|0;g=c[W>>2]|0;C=((c[X>>2]|0)-g|0)/28|0;c:do if(s>>>0<C>>>0){t=e;B=s;x=ba;y=ca;z=da;A=ea;while(1){w=c[g+(B*28|0)+12>>2]|0;s=w;if(((c[g+(B*28|0)+16>>2]|0)-w|0)!=16){s=B;break c}w=s;Ja=x;x=c[w>>2]|0;u=y;y=c[w+4>>2]|0;s=s+8|0;w=z;z=c[s>>2]|0;v=A;A=c[s+4>>2]|0;s=Km(Ja|0,u|0,x|0,y|0)|0;u=E;v=Km(w|0,v|0,z|0,A|0)|0;w=E;if((ka|0)<(u|0)|(ka|0)==(u|0)&ja>>>0<s>>>0|((ma|0)>(u|0)|(ma|0)==(u|0)&la>>>0>s>>>0)){s=B;break c}La=Ym(v|0,w|0,v|0,w|0)|0;Ka=E;Ja=Ym(s|0,u|0,s|0,u|0)|0;Ja=Om(La|0,Ka|0,Ja|0,E|0)|0;u=E;if(!(((ma|0)<(w|0)|(ma|0)==(w|0)&la>>>0<=v>>>0)&((ka|0)>(w|0)|(ka|0)==(w|0)&ja>>>0>=v>>>0)&(u>>>0<0|(u|0)==0&Ja>>>0<=na>>>0))){s=B;break c}s=B+1|0;if(s>>>0>=C>>>0){t=B;break}else{t=B;B=s}}}else t=e;while(0);s=(c[g+(t*28|0)>>2]|0)==(Q|0)?t:s;if(s>>>0>(e+2|0)>>>0){K=s+-1|0;if(e>>>0<K>>>0){o=g;p=Z;s=_;t=$;u=aa;D=Z;I=$;J=Y;while(1){A=c[o+(e*28|0)+12>>2]|0;y=A;x=c[y>>2]|0;y=c[y+4>>2]|0;A=A+8|0;z=c[A>>2]|0;A=c[A+4>>2]|0;B=Km(p|0,s|0,x|0,y|0)|0;C=E;u=Km(t|0,u|0,z|0,A|0)|0;v=E;w=e+1|0;p=c[o+(w*28|0)+12>>2]|0;Ka=p;s=p+8|0;t=c[s>>2]|0;s=c[s+4>>2]|0;y=Om(c[Ka>>2]|0,c[Ka+4>>2]|0,x|0,y|0)|0;x=E;A=Om(t|0,s|0,z|0,A|0)|0;z=E;x=Rm(y|0,x|0,2,0)|0;y=E;z=Rm(A|0,z|0,2,0)|0;A=E;s=Km(D|0,((D|0)<0)<<31>>31|0,x|0,y|0)|0;t=E;Ka=Km(I|0,((I|0)<0)<<31>>31|0,z|0,A|0)|0;La=E;t=Ym(s|0,t|0,s|0,t|0)|0;s=E;La=Ym(Ka|0,La|0,Ka|0,La|0)|0;s=Om(La|0,E|0,t|0,s|0)|0;k=+H(+(+(s>>>0)+4294967296.0*+(E|0)));s=~~k>>>0;t=+G(k)>=1.0?(k>0.0?~~+U(+F(k/4294967296.0),4294967295.0)>>>0:~~+S((k-+(~~k>>>0))/4294967296.0)>>>0):0;if((t|0)>0|(t|0)==0&s>>>0>0){g=Ym(u|0,v|0,u|0,v|0)|0;p=E;o=Ym(B|0,C|0,B|0,C|0)|0;o=Om(g|0,p|0,o|0,E|0)|0;k=+H(+(+(o>>>0)+4294967296.0*+(E|0)));o=+G(k)>=1.0?(k>0.0?~~+U(+F(k/4294967296.0),4294967295.0)>>>0:~~+S((k-+(~~k>>>0))/4294967296.0)>>>0):0;p=c[(c[O>>2]|0)+4>>2]|0;o=Ym(p|0,((p|0)<0)<<31>>31|0,~~k>>>0|0,o|0)|0;o=Rm(o|0,E|0,s|0,t|0)|0;Yb(J,x,y,z,A,N,o);o=c[W>>2]|0;p=c[o+(w*28|0)+12>>2]|0;g=o}e=e+2|0;if(e>>>0>=K>>>0)break;u=p+8|0;s=p;J=c[b>>2]|0;p=c[s>>2]|0;s=c[s+4>>2]|0;t=c[u>>2]|0;u=c[u+4>>2]|0;D=c[J+72>>2]|0;I=c[J+76>>2]|0}o=c[b>>2]|0;e=c[(c[O>>2]|0)+4>>2]|0}else{o=Y;e=L}La=c[g+(K*28|0)+12>>2]|0;Ka=La;La=La+8|0;Yb(o,c[Ka>>2]|0,c[Ka+4>>2]|0,c[La>>2]|0,c[La+4>>2]|0,N,e);e=K}else xa=123}else xa=123;d:do if((xa|0)==123){xa=0;do if(a[o+12>>0]|0){g=e+1|0;t=c[W>>2]|0;s=((c[X>>2]|0)-t|0)/28|0;if(g>>>0<s>>>0){o=1;do{o=(a[(c[t+(g*28|0)>>2]|0)+12>>0]|0)==0?o:0;g=g+1|0}while((g|0)!=(s|0));if(!(o&1))break}C=c[b>>2]|0;w=c[C+80>>2]|0;if((D|0)==(I|0))break d;y=c[C+76>>2]|0;B=((y|0)<0)<<31>>31;x=c[C+72>>2]|0;z=((x|0)<0)<<31>>31;o=J>>4;g=0;k=0.0;s=x;t=z;u=y;v=B;do{I=p+(g<<4)|0;Ka=s;s=c[I>>2]|0;Ja=t;t=c[I+4>>2]|0;I=p+(g<<4)+8|0;J=u;u=c[I>>2]|0;La=v;v=c[I+4>>2]|0;Ja=Km(Ka|0,Ja|0,s|0,t|0)|0;Ka=E;La=Km(J|0,La|0,u|0,v|0)|0;f=(+(Ja>>>0)+4294967296.0*+(Ka|0))/1.0e3;j=(+(La>>>0)+4294967296.0*+(E|0))/1.0e3;k=k+ +H(+(f*f+j*j));g=g+1|0}while(g>>>0<o>>>0);j=+(w|0);g=0;f=0.0;A=x;s=B;t=C;o=L;while(1){v=p+(g<<4)|0;u=c[v>>2]|0;v=c[v+4>>2]|0;x=p+(g<<4)+8|0;w=c[x>>2]|0;x=c[x+4>>2]|0;Ja=Km(A|0,z|0,u|0,v|0)|0;Ka=E;La=Km(y|0,s|0,w|0,x|0)|0;Na=(+(Ja>>>0)+4294967296.0*+(Ka|0))/1.0e3;Ma=(+(La>>>0)+4294967296.0*+(E|0))/1.0e3;f=f+ +H(+(Na*Na+Ma*Ma));c[t+368>>2]=~~(j+l*f/k);La=p+(g<<4)|0;p=p+(g<<4)+8|0;Yb(c[b>>2]|0,c[La>>2]|0,c[La+4>>2]|0,c[p>>2]|0,c[p+4>>2]|0,N,o);g=g+1|0;p=c[M>>2]|0;if(g>>>0>=(c[K>>2]|0)-p>>4>>>0)break d;A=u;z=v;y=w;s=x;t=c[b>>2]|0;o=c[(c[O>>2]|0)+4>>2]|0}}while(0);if((D|0)!=(I|0)){g=0;o=L;while(1){Ka=p+(g<<4)|0;La=p+(g<<4)+8|0;Yb(c[b>>2]|0,c[Ka>>2]|0,c[Ka+4>>2]|0,c[La>>2]|0,c[La+4>>2]|0,N,o);g=g+1|0;o=c[M>>2]|0;if(g>>>0>=(c[K>>2]|0)-o>>4>>>0)break d;p=o;o=c[(c[O>>2]|0)+4>>2]|0}}}while(0);e=e+1|0;g=c[W>>2]|0;if(e>>>0>=(((c[X>>2]|0)-g|0)/28|0)>>>0)break;else y=P}}u=c[b>>2]|0;v=u+628|0;o=c[v>>2]|0;w=c[u+624>>2]|0;t=o-w|0;x=w;y=o;if((t|0)>0){g=((t>>>0)/160|0)+-1|0;n=0;e=0;while(1){p=x+(g*160|0)|0;if((n|0)!=0&(e|0)!=0?(ya=n+40|0,m=+h[n+48>>3],+h[ya>>3]!=m):0){if((a[n+56>>0]|0)==0?(q=+h[e+40>>3],m>q):0){f=+H(+(q*q-+h[n+88>>3]*-2.0*+h[n+80>>3]));f=f<m?f:m}else f=m;h[ya>>3]=f;a[n>>0]=1}g=g+-1|0;if((g|0)<=-1)break;else{e=n;n=p}}}s=(o|0)==(w|0);if(!s){o=(t|0)/160|0;g=0;e=0;n=0;while(1){p=x+(g*160|0)|0;if(((e|0?(a[e+56>>0]|0)==0:0)?(Da=+h[e+40>>3],Ea=n+40|0,Fa=+h[Ea>>3],Da<Fa):0)?(r=+H(+(Da*Da-+h[e+88>>3]*-2.0*+h[e+80>>3])),r=r<Fa?r:Fa,Fa!=r):0){h[Ea>>3]=r;a[n>>0]=1}e=g+1|0;if(e>>>0<o>>>0){La=n;g=e;n=p;e=La}else break}if(((n|0?(a[n+56>>0]|0)==0:0)?(Aa=+h[n+40>>3],Ba=x+(g*160|0)+40|0,Ca=+h[Ba>>3],Aa<Ca):0)?(za=+H(+(Aa*Aa-+h[n+88>>3]*-2.0*+h[n+80>>3])),za=za<Ca?za:Ca,Ca!=za):0){h[Ba>>3]=za;a[p>>0]=1}if(!s){g=(t|0)/160|0;n=0;o=0;while(1){e=n;n=x+(o*160|0)|0;do if(e|0){if((a[e>>0]|0)==0?(a[n>>0]|0)==0:0)break;k=+h[e+64>>3];q=k*(+h[e+40>>3]/k);r=k*(+h[x+(o*160|0)+40>>3]/k);m=+h[e+88>>3];f=q;l=m;if(l==0.0)f=0.0;else f=(k*k-f*f)/(l*2.0);j=r;if(l==-0.0)j=0.0;else j=(j*j-k*k)/(-l*2.0);k=+h[e+80>>3];j=k-f-j;if(j<0.0){if(m==0.0)f=0.0;else f=(r*r+(m*2.0*k-q*q))/(m*4.0);f=f<0.0?0.0:f;j=0.0;f=k<f?k:f}h[e+8>>3]=f;h[e+16>>3]=f+j;h[e+24>>3]=q;h[e+32>>3]=r;a[e>>0]=0}while(0);e=o+-1|0;if(e>>>0>=g>>>0)break;else o=e}if(n|0){k=+h[x+(o*160|0)+64>>3];q=k*(+h[x+(o*160|0)+40>>3]/k);r=k*(.05/k);m=+h[x+(o*160|0)+88>>3];f=q;l=m;if(l==0.0)f=0.0;else f=(k*k-f*f)/(l*2.0);j=r;if(l==-0.0)j=0.0;else j=(j*j-k*k)/(-l*2.0);k=+h[x+(o*160|0)+80>>3];j=k-f-j;if(j<0.0){if(m==0.0)f=0.0;else f=(r*r+(m*2.0*k-q*q))/(m*4.0);f=f<0.0?0.0:f;j=0.0;f=k<f?k:f}h[x+(o*160|0)+8>>3]=f;h[x+(o*160|0)+16>>3]=f+j;h[x+(o*160|0)+24>>3]=q;h[x+(o*160|0)+32>>3]=r;a[n>>0]=0}if(!s){g=(t|0)/160|0;e=0;f=0.0;do{Ma=+h[x+(e*160|0)+16>>3];Ca=+h[x+(e*160|0)+8>>3];Da=+h[x+(e*160|0)+24>>3];Na=+h[x+(e*160|0)+88>>3];Fa=Na*2.0;Da=f+(+H(+(Da*Da+Ca*Fa))-Da)/Na;f=+h[x+(e*160|0)+32>>3];f=(Ma-Ca)/+h[x+(e*160|0)+64>>3]+Da+(+H(+(f*f+Fa*(+h[x+(e*160|0)+80>>3]-Ma)))-f)/Na;e=e+1|0}while(e>>>0<g>>>0)}else f=0.0}else f=0.0}else f=0.0;La=u+544|0;h[La>>3]=f+ +h[La>>3];if((y|0)!=(x|0))c[v>>2]=y+(~(((y+-160-w|0)>>>0)/160|0)*160|0);if(!d){i=Ia;return}e=b+80|0;f=+h[e>>3];if(!(f>0.0)){i=Ia;return}Ka=c[b>>2]|0;h[Ga>>3]=f;Wb(Ka,9586,Ga);Zb(c[b>>2]|0,1);Ka=c[b>>2]|0;c[Ka+368>>2]=(c[Ka+80>>2]|0)+3e3;Ka=c[b>>2]|0;Ja=c[Ka+72>>2]|0;Ga=c[Ka+76>>2]|0;La=b+40|0;Yb(Ka,Ja,((Ja|0)<0)<<31>>31,Ga,((Ga|0)<0)<<31>>31,c[La>>2]|0,0);Ga=c[b>>2]|0;Ja=c[Ga+72>>2]|0;Ka=c[Ga+76>>2]|0;Ja=Om(Ja|0,((Ja|0)<0)<<31>>31|0,2e4,0)|0;Yb(Ga,Ja,E,Ka,((Ka|0)<0)<<31>>31,c[La>>2]|0,0);La=c[b>>2]|0;Na=+h[e>>3];Ka=c[La>>2]|0;c[Ha>>2]=~~(Na*1.0e3);lf(Ka,9236,Ha);La=La+544|0;h[La>>3]=Na+ +h[La>>3];i=Ia;return}function fc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0.0,j=0,k=0,l=0,m=0.0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0.0,z=0.0,A=0,B=0,C=0,D=0,I=0,L=0,N=0,O=0,P=0,Q=0,R=0,T=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0.0,da=0,ea=0,fa=0.0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0.0;la=i;i=i+320|0;ja=la+192|0;ha=la+176|0;ka=la;c[b>>2]=0;ia=b+4|0;c[ia>>2]=0;c[b+8>>2]=0;Q=ka+112|0;k=ka+16|0;l=k+48|0;do{c[k>>2]=0;k=k+4|0}while((k|0)<(l|0));j=Q+8|0;k=j;l=k+40|0;do{c[k>>2]=0;k=k+4|0}while((k|0)<(l|0));a[j+40>>0]=0;h[ka>>3]=2.0;ba=ka+8|0;h[ba>>3]=.25;D=Q;c[D>>2]=-1;c[D+4>>2]=-1;D=d+4|0;j=c[d>>2]|0;if((c[D>>2]|0)!=(j|0)){I=ka+128|0;L=ka+140|0;N=ka+144|0;O=ka+148|0;C=ka+120|0;P=ka+140|0;B=0;do{k=j;x=k+(B*12|0)|0;q=c[x>>2]|0;k=(c[k+(B*12|0)+4>>2]|0)-q|0;p=(k>>4)+-1|0;do if((k|0)>=16){j=vf(44)|0;a:do if(!j)while(1){j=c[5972]|0;c[5972]=j+0;if(!j){A=0;break a}ub[j&3]();j=vf(44)|0;if(j|0){A=j;break}}else A=j;while(0);c[A>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;c[A+12>>2]=0;c[A+16>>2]=0;c[A+20>>2]=0;c[A+24>>2]=0;c[A+28>>2]=0;a[A+32>>0]=0;c[A+36>>2]=2;c[A+40>>2]=0;b:do if((k|0)==16)j=p;else{n=q;l=c[n>>2]|0;n=c[n+4>>2]|0;o=q+8|0;j=p;while(1){ga=q+(j<<4)|0;if(!((l|0)==(c[ga>>2]|0)?(n|0)==(c[ga+4>>2]|0):0))break b;ea=o;ga=q+(j<<4)+8|0;if(!((c[ea>>2]|0)==(c[ga>>2]|0)?(c[ea+4>>2]|0)==(c[ga+4>>2]|0):0))break b;k=j+-1|0;if((j|0)>1)j=k;else{j=k;break}}}while(0);t=j+1|0;ne(A,t);k=c[x>>2]|0;w=A+4|0;l=c[w>>2]|0;u=A+8|0;if((l|0)==(c[u>>2]|0))Tb(A,k);else{c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];c[l+8>>2]=c[k+8>>2];c[l+12>>2]=c[k+12>>2];c[w>>2]=(c[w>>2]|0)+16}if((j|0)>=1){s=1;r=0;j=0;l=c[x>>2]|0;k=c[A>>2]|0;while(1){ea=k+(j<<4)|0;ga=l+(s<<4)|0;if(((c[ea>>2]|0)==(c[ga>>2]|0)?(c[ea+4>>2]|0)==(c[ga+4>>2]|0):0)?(ea=k+(j<<4)+8|0,ga=l+(s<<4)+8|0,(c[ea>>2]|0)==(c[ga>>2]|0)?(c[ea+4>>2]|0)==(c[ga+4>>2]|0):0):0)v=r;else W=21;do if((W|0)==21){W=0;q=j+1|0;j=l+(s<<4)|0;k=c[w>>2]|0;if((k|0)==(c[u>>2]|0))Tb(A,j);else{c[k>>2]=c[j>>2];c[k+4>>2]=c[j+4>>2];c[k+8>>2]=c[j+8>>2];c[k+12>>2]=c[j+12>>2];c[w>>2]=(c[w>>2]|0)+16}l=c[x>>2]|0;n=l+(s<<4)+8|0;j=c[n>>2]|0;n=c[n+4>>2]|0;k=c[A>>2]|0;p=k+(r<<4)+8|0;o=c[p>>2]|0;p=c[p+4>>2]|0;if(!((n|0)>(p|0)|(n|0)==(p|0)&j>>>0>o>>>0)){if(!((j|0)==(o|0)&(n|0)==(p|0))){v=r;j=q;break}ea=l+(s<<4)|0;v=c[ea+4>>2]|0;ga=k+(r<<4)|0;da=c[ga+4>>2]|0;if(!((v|0)<(da|0)|((v|0)==(da|0)?(c[ea>>2]|0)>>>0<(c[ga>>2]|0)>>>0:0))){v=r;j=q;break}}v=q;j=q}while(0);s=s+1|0;if((s|0)==(t|0))break;else r=v}if((j|0)>=2){j=c[N>>2]|0;k=j-(c[L>>2]|0)>>2;c[ja>>2]=A;if(j>>>0<(c[O>>2]|0)>>>0){c[j>>2]=A;c[N>>2]=(c[N>>2]|0)+4}else ie(L,ja);c[A+24>>2]=I;c[A+28>>2]=k;ga=Q;j=c[ga>>2]|0;if((c[ga+4>>2]|0)<0){ga=Q;c[ga>>2]=0;c[ga+4>>2]=0;ga=C;c[ga>>2]=v;c[ga+4>>2]=((v|0)<0)<<31>>31;break}n=c[P>>2]|0;r=c[C>>2]|0;q=c[c[n+(j<<2)>>2]>>2]|0;p=q+(r<<4)|0;o=c[p>>2]|0;p=c[p+4>>2]|0;r=q+(r<<4)+8|0;q=c[r>>2]|0;r=c[r+4>>2]|0;j=c[A>>2]|0;l=j+(v<<4)+8|0;k=c[l>>2]|0;l=c[l+4>>2]|0;if(!((l|0)>(r|0)|(l|0)==(r|0)&k>>>0>q>>>0)){if(!((k|0)==(q|0)&(l|0)==(r|0)))break;ga=j+(v<<4)|0;ea=c[ga+4>>2]|0;if(!((ea|0)<(p|0)|((ea|0)==(p|0)?(c[ga>>2]|0)>>>0<o>>>0:0)))break}ea=((c[N>>2]|0)-n>>2)+-1|0;ga=Q;c[ga>>2]=ea;c[ga+4>>2]=((ea|0)<0)<<31>>31;ga=C;c[ga>>2]=v;c[ga+4>>2]=((v|0)<0)<<31>>31;break}}j=c[A+12>>2]|0;k=j;if(j|0){l=A+16|0;n=c[l>>2]|0;if((n|0)!=(j|0))c[l>>2]=n+(~((n+-4-k|0)>>>2)<<2);wf(j)}j=c[A>>2]|0;k=j;if(j|0){l=c[w>>2]|0;if((l|0)!=(j|0))c[w>>2]=l+(~((l+-16-k|0)>>>4)<<4);wf(j)}wf(A)}while(0);B=B+1|0;j=c[d>>2]|0}while(B>>>0<(((c[D>>2]|0)-j|0)/12|0)>>>0);p=c[b>>2]|0;j=c[ia>>2]|0;h[ka>>3]=2.0;g=+(e|0);if((j|0)==(p|0)){ga=b;fa=g}else{do{k=j;j=j+-12|0;c[ia>>2]=j;n=c[j>>2]|0;o=n;if(n|0){k=k+-8|0;l=c[k>>2]|0;if((l|0)!=(n|0))c[k>>2]=l+(~((l+-16-o|0)>>>4)<<4);wf(n)}}while((j|0)!=(p|0));ga=b;fa=g}}else{h[ka>>3]=2.0;ga=b;fa=+(e|0)}ea=Q;j=c[ea>>2]|0;ea=c[ea+4>>2]|0;c:do if((ea|0)>-1|(ea|0)==-1&j>>>0>4294967295){s=c[ka+140>>2]|0;ea=c[s+(j<<2)>>2]|0;l=c[ea>>2]|0;ea=(c[ea+4>>2]|0)-l|0;k=ea>>4;r=s;if((ea|0)>=48){q=k+-1|0;o=l+(q<<4)|0;q=l+(q<<4)+8|0;j=0;g=0.0;n=c[o+4>>2]|0;o=c[o>>2]|0;p=c[q+4>>2]|0;q=c[q>>2]|0;do{P=l+(j<<4)|0;d=o;o=c[P>>2]|0;Q=n;n=c[P+4>>2]|0;P=l+(j<<4)+8|0;da=q;q=c[P>>2]|0;ea=p;p=c[P+4>>2]|0;g=g+(+(d>>>0)+4294967296.0*+(Q|0)+(+(o>>>0)+4294967296.0*+(n|0)))*(+(da>>>0)+4294967296.0*+(ea|0)-(+(q>>>0)+4294967296.0*+(p|0)));j=j+1|0}while((j|0)<(k|0));if(!(g*-.5>=0.0)){v=ka+140|0;w=ka+144|0;j=c[w>>2]|0;if((j-r|0)>0){u=0;t=j;j=s;while(1){k=c[j+(u<<2)>>2]|0;switch(c[k+40>>2]|0){case 0:{j=c[k>>2]|0;k=c[k+4>>2]|0;W=70;break}case 1:{da=c[k+4>>2]|0;j=c[k>>2]|0;ea=da-j|0;n=ea>>4;k=da;if((ea|0)>=48){s=n+-1|0;p=j+(s<<4)|0;s=j+(s<<4)+8|0;l=0;g=0.0;o=c[p+4>>2]|0;p=c[p>>2]|0;q=c[s+4>>2]|0;s=c[s>>2]|0;do{P=j+(l<<4)|0;d=p;p=c[P>>2]|0;Q=o;o=c[P+4>>2]|0;P=j+(l<<4)+8|0;da=s;s=c[P>>2]|0;ea=q;q=c[P+4>>2]|0;g=g+(+(d>>>0)+4294967296.0*+(Q|0)+(+(p>>>0)+4294967296.0*+(o|0)))*(+(da>>>0)+4294967296.0*+(ea|0)-(+(s>>>0)+4294967296.0*+(q|0)));l=l+1|0}while((l|0)<(n|0));if(!(g*-.5>=0.0)){k=r;j=t}else W=70}else W=70;break}default:{k=r;j=t}}if((W|0)==70){W=0;if((j|0)!=(k|0)?(R=k+-16|0,j>>>0<R>>>0):0){k=R;do{c[ja>>2]=c[j>>2];c[ja+4>>2]=c[j+4>>2];c[ja+8>>2]=c[j+8>>2];c[ja+12>>2]=c[j+12>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];c[j+8>>2]=c[k+8>>2];c[j+12>>2]=c[k+12>>2];c[k>>2]=c[ja>>2];c[k+4>>2]=c[ja+4>>2];c[k+8>>2]=c[ja+8>>2];c[k+12>>2]=c[ja+12>>2];j=j+16|0;k=k+-16|0}while(j>>>0<k>>>0);k=c[v>>2]|0;j=c[w>>2]|0}else{k=r;j=t}}u=u+1|0;if((u|0)>=(j-k>>2|0))break c;else{r=k;t=j;j=k}}}}else{f=s;T=r;W=62}}else{f=s;T=r;W=62}}else{T=c[ka+140>>2]|0;f=T;W=62}while(0);if((W|0)==62?(X=ka+140|0,Y=ka+144|0,V=c[Y>>2]|0,(V-T|0)>0):0){q=0;p=T;o=V;while(1){f=c[f+(q<<2)>>2]|0;if((c[f+40>>2]|0)==1?($=c[f+4>>2]|0,_=c[f>>2]|0,ea=$-_|0,Z=ea>>4,_,$,(ea|0)>=48):0){n=Z+-1|0;k=_+(n<<4)|0;n=_+(n<<4)+8|0;f=0;g=0.0;j=c[k+4>>2]|0;k=c[k>>2]|0;l=c[n+4>>2]|0;n=c[n>>2]|0;do{T=_+(f<<4)|0;V=k;k=c[T>>2]|0;W=j;j=c[T+4>>2]|0;T=_+(f<<4)+8|0;da=n;n=c[T>>2]|0;ea=l;l=c[T+4>>2]|0;g=g+(+(V>>>0)+4294967296.0*+(W|0)+(+(k>>>0)+4294967296.0*+(j|0)))*(+(da>>>0)+4294967296.0*+(ea|0)-(+(n>>>0)+4294967296.0*+(l|0)));f=f+1|0}while((f|0)<(Z|0));if(!((_|0)==($|0)|g*-.5>=0.0)?(aa=$+-16|0,_>>>0<aa>>>0):0){f=_;j=aa;do{c[ja>>2]=c[f>>2];c[ja+4>>2]=c[f+4>>2];c[ja+8>>2]=c[f+8>>2];c[ja+12>>2]=c[f+12>>2];c[f>>2]=c[j>>2];c[f+4>>2]=c[j+4>>2];c[f+8>>2]=c[j+8>>2];c[f+12>>2]=c[j+12>>2];c[j>>2]=c[ja>>2];c[j+4>>2]=c[ja+4>>2];c[j+8>>2]=c[ja+8>>2];c[j+12>>2]=c[ja+12>>2];f=f+16|0;j=j+-16|0}while(f>>>0<j>>>0);j=c[X>>2]|0;f=c[Y>>2]|0}else{j=p;f=o}}else{j=p;f=o}q=q+1|0;if((q|0)>=(f-j>>2|0))break;else{p=j;o=f;f=j}}}da=ka+16|0;n=c[da>>2]|0;ea=ka+20|0;f=c[ea>>2]|0;if((f|0)!=(n|0))do{j=f+-12|0;c[ea>>2]=j;k=c[j>>2]|0;l=k;if(!k)f=j;else{f=f+-8|0;j=c[f>>2]|0;if((j|0)!=(k|0))c[f>>2]=j+(~((j+-16-l|0)>>>4)<<4);wf(k);f=c[ea>>2]|0}}while((f|0)!=(n|0));h[ka+64>>3]=fa;d:do if(!e){s=ka+140|0;t=ka+144|0;me(da,(c[t>>2]|0)-(c[s>>2]|0)>>2);f=c[s>>2]|0;if(((c[t>>2]|0)-f|0)>0){u=ka+24|0;r=0;e:while(1){l=c[f+(r<<2)>>2]|0;do if(!(c[l+40>>2]|0)){n=c[ea>>2]|0;if((n|0)==(c[u>>2]|0)){Ob(da,l);break}c[n>>2]=0;q=n+4|0;c[q>>2]=0;c[n+8>>2]=0;p=l+4|0;f=(c[p>>2]|0)-(c[l>>2]|0)|0;o=f>>4;if(o|0){if(o>>>0>268435455)break e;j=(f|0)==0?1:f;f=vf(j)|0;f:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){k=0;break f}ub[f&3]();f=vf(j)|0;if(f|0){k=f;break}}else k=f;while(0);c[q>>2]=k;c[n>>2]=k;c[n+8>>2]=k+(o<<4);j=c[l>>2]|0;f=(c[p>>2]|0)-j|0;if((f|0)>0){Vm(k|0,j|0,f|0)|0;c[q>>2]=k+(f>>4<<4)}}c[ea>>2]=(c[ea>>2]|0)+12}while(0);r=r+1|0;f=c[s>>2]|0;if((r|0)>=((c[t>>2]|0)-f>>2|0))break d}Bl()}}else{g=+h[ka>>3];if(g>2.0)g=2.0/(g*g);else g=.5;h[ka+96>>3]=g;g=+h[ba>>3];m=+G(+fa);if(!(g<=0.0)){ca=m*.25;g=g>ca?ca:g}else g=.25;ca=3.141592653589793/+M(+(1.0-g/m));z=m*3.141592653589793;ca=ca>z?z:ca;z=6.283185307179586/ca;g=+K(+z);$=ka+80|0;h[$>>3]=g;aa=ka+88|0;h[aa>>3]=+J(+z);h[ka+104>>3]=ca/6.283185307179586;if((e|0)<0)h[$>>3]=-g;A=ka+140|0;B=ka+144|0;me(da,(c[B>>2]|0)-(c[A>>2]|0)>>1);f=c[A>>2]|0;if(((c[B>>2]|0)-f|0)>0){C=ka+28|0;D=ka+32|0;I=(e|0)>0;L=ka+40|0;N=ka+44|0;O=ka+24|0;P=!(ca>=1.0);d=ja+8|0;Q=ka+48|0;R=ja+8|0;T=ka+52|0;V=ka+56|0;W=ka+60|0;X=ja+8|0;Y=ha+8|0;Z=ka+72|0;_=ja+8|0;x=0;g:while(1){w=c[f+(x<<2)>>2]|0;if((C|0)!=(w|0))Nb(C,c[w>>2]|0,c[w+4>>2]|0);k=c[C>>2]|0;u=(c[D>>2]|0)-k|0;v=u>>4;h:do if(v|0){if(!I){if((u|0)<48)break;if(c[w+40>>2]|0)break}j=c[L>>2]|0;f=c[N>>2]|0;if((f|0)!=(j|0)){j=f+(~((f+-16-j|0)>>>4)<<4)|0;c[N>>2]=j}if((v|0)==1){i:do if((c[w+36>>2]|0)==1){if(!P){y=0.0;z=1.0;l=1;f=0;while(1){v=k;g=z*fa+(+((c[v>>2]|0)>>>0)+4294967296.0*+(c[v+4>>2]|0));g=g+(g<0.0?-.5:.5);v=+G(g)>=1.0?(g>0.0?~~+U(+F(g/4294967296.0),4294967295.0)>>>0:~~+S((g-+(~~g>>>0))/4294967296.0)>>>0):0;w=k+8|0;m=y*fa+(+((c[w>>2]|0)>>>0)+4294967296.0*+(c[w+4>>2]|0));m=m+(m<0.0?-.5:.5);w=+G(m)>=1.0?(m>0.0?~~+U(+F(m/4294967296.0),4294967295.0)>>>0:~~+S((m-+(~~m>>>0))/4294967296.0)>>>0):0;ba=ja;c[ba>>2]=~~g>>>0;c[ba+4>>2]=v;ba=d;c[ba>>2]=~~m>>>0;c[ba+4>>2]=w;if(j>>>0<(c[Q>>2]|0)>>>0){c[j>>2]=c[ja>>2];c[j+4>>2]=c[ja+4>>2];c[j+8>>2]=c[ja+8>>2];c[j+12>>2]=c[ja+12>>2];c[N>>2]=(c[N>>2]|0)+16}else Ub(L,ja);g=+h[aa>>3];m=+h[$>>3];l=Om(l|0,f|0,1,0)|0;f=E;if(!(+(l>>>0)+4294967296.0*+(f|0)<=ca))break i;ma=z*g-y*m;y=y*g+z*m;z=ma;k=c[C>>2]|0;j=c[N>>2]|0}}}else{f=0;g=-1.0;m=-1.0;while(1){v=k;z=m*fa+(+((c[v>>2]|0)>>>0)+4294967296.0*+(c[v+4>>2]|0));z=z+(z<0.0?-.5:.5);v=+G(z)>=1.0?(z>0.0?~~+U(+F(z/4294967296.0),4294967295.0)>>>0:~~+S((z-+(~~z>>>0))/4294967296.0)>>>0):0;w=k+8|0;ma=g*fa+(+((c[w>>2]|0)>>>0)+4294967296.0*+(c[w+4>>2]|0));ma=ma+(ma<0.0?-.5:.5);w=+G(ma)>=1.0?(ma>0.0?~~+U(+F(ma/4294967296.0),4294967295.0)>>>0:~~+S((ma-+(~~ma>>>0))/4294967296.0)>>>0):0;ba=ja;c[ba>>2]=~~z>>>0;c[ba+4>>2]=v;ba=R;c[ba>>2]=~~ma>>>0;c[ba+4>>2]=w;if(j>>>0<(c[Q>>2]|0)>>>0){c[j>>2]=c[ja>>2];c[j+4>>2]=c[ja+4>>2];c[j+8>>2]=c[ja+8>>2];c[j+12>>2]=c[ja+12>>2];c[N>>2]=(c[N>>2]|0)+16}else Ub(L,ja);if(m<0.0)m=1.0;else{ba=g<0.0;g=ba?1.0:g;m=ba?m:-1.0}f=f+1|0;if((f|0)==4)break i;k=c[C>>2]|0;j=c[N>>2]|0}}while(0);l=c[ea>>2]|0;if((l|0)==(c[O>>2]|0)){Ob(da,L);break}c[l>>2]=0;o=l+4|0;c[o>>2]=0;c[l+8>>2]=0;f=(c[N>>2]|0)-(c[L>>2]|0)|0;n=f>>4;do if(n|0){if(n>>>0>268435455){W=140;break g}j=(f|0)==0?1:f;f=vf(j)|0;j:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){k=0;break j}ub[f&3]();f=vf(j)|0;if(f|0){k=f;break}}else k=f;while(0);c[o>>2]=k;c[l>>2]=k;c[l+8>>2]=k+(n<<4);f=c[L>>2]|0;j=(c[N>>2]|0)-f|0;if((j|0)<=0)break;Vm(k|0,f|0,j|0)|0;c[o>>2]=k+(j>>4<<4)}while(0);c[ea>>2]=(c[ea>>2]|0)+12;break}o=c[T>>2]|0;f=c[V>>2]|0;j=o;if((f|0)!=(o|0)){f=f+(~((f+-16-j|0)>>>4)<<4)|0;c[V>>2]=f}do if((c[W>>2]|0)-j>>4>>>0<v>>>0){n=f-j|0;l=n>>4;if(v>>>0>268435455){W=152;break g}j=(u|0)==0?1:u;f=vf(j)|0;k:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break k}ub[f&3]();f=vf(j)|0}while(!(f|0));while(0);k=f+(l<<4)|0;j=k+(0-l<<4)|0;if((n|0)>0)Vm(j|0,o|0,n|0)|0;c[T>>2]=j;c[V>>2]=k;c[W>>2]=f+(v<<4);if(!o)break;wf(o)}while(0);f=v+-1|0;t=(u|0)>16;if(t){s=0;do{q=c[C>>2]|0;r=s;s=s+1|0;k=q+(s<<4)|0;j=c[k>>2]|0;k=c[k+4>>2]|0;n=q+(r<<4)|0;l=c[n>>2]|0;n=c[n+4>>2]|0;p=q+(s<<4)+8|0;o=c[p>>2]|0;p=c[p+4>>2]|0;r=q+(r<<4)+8|0;q=c[r>>2]|0;r=c[r+4>>2]|0;if((j|0)==(l|0)&(k|0)==(n|0)&((o|0)==(q|0)&(p|0)==(r|0))){c[ja>>2]=0;c[ja+4>>2]=0;c[ja+8>>2]=0;c[ja+12>>2]=0}else{ba=Km(j|0,k|0,l|0,n|0)|0;z=+(ba>>>0)+4294967296.0*+(E|0);ba=Km(o|0,p|0,q|0,r|0)|0;y=+(ba>>>0)+4294967296.0*+(E|0);ma=1.0/+H(+(z*z+y*y));h[ja>>3]=y*ma;h[_>>3]=-(z*ma)}j=c[V>>2]|0;if(j>>>0<(c[W>>2]|0)>>>0){c[j>>2]=c[ja>>2];c[j+4>>2]=c[ja+4>>2];c[j+8>>2]=c[ja+8>>2];c[j+12>>2]=c[ja+12>>2];c[V>>2]=(c[V>>2]|0)+16}else re(T,ja)}while((s|0)<(f|0))}s=w+40|0;if((c[s>>2]|0)>>>0<2){r=c[C>>2]|0;k=r;j=c[k>>2]|0;k=c[k+4>>2]|0;n=r+(f<<4)|0;l=c[n>>2]|0;n=c[n+4>>2]|0;p=r+8|0;o=c[p>>2]|0;p=c[p+4>>2]|0;r=r+(f<<4)+8|0;q=c[r>>2]|0;r=c[r+4>>2]|0;if((j|0)==(l|0)&(k|0)==(n|0)&((o|0)==(q|0)&(p|0)==(r|0))){c[ja>>2]=0;c[ja+4>>2]=0;c[ja+8>>2]=0;c[ja+12>>2]=0}else{ba=Km(j|0,k|0,l|0,n|0)|0;z=+(ba>>>0)+4294967296.0*+(E|0);ba=Km(o|0,p|0,q|0,r|0)|0;y=+(ba>>>0)+4294967296.0*+(E|0);ma=1.0/+H(+(z*z+y*y));h[ja>>3]=y*ma;h[X>>3]=-(z*ma)}j=c[V>>2]|0;if(j>>>0<(c[W>>2]|0)>>>0){c[j>>2]=c[ja>>2];c[j+4>>2]=c[ja+4>>2];c[j+8>>2]=c[ja+8>>2];c[j+12>>2]=c[ja+12>>2];c[V>>2]=(c[V>>2]|0)+16}else re(T,ja)}else{j=(c[T>>2]|0)+(v+-2<<4)|0;c[ja>>2]=c[j>>2];c[ja+4>>2]=c[j+4>>2];c[ja+8>>2]=c[j+8>>2];c[ja+12>>2]=c[j+12>>2];j=c[V>>2]|0;if(j>>>0<(c[W>>2]|0)>>>0){c[j>>2]=c[ja>>2];c[j+4>>2]=c[ja+4>>2];c[j+8>>2]=c[ja+8>>2];c[j+12>>2]=c[ja+12>>2];c[V>>2]=(c[V>>2]|0)+16}else re(T,ja)}j=c[s>>2]|0;switch(j|0){case 0:{c[ja>>2]=f;if((u|0)>0){j=w+36|0;f=0;do{se(ka,f,ja,c[j>>2]|0);f=f+1|0}while((f|0)<(v|0))}l=c[ea>>2]|0;if((l|0)==(c[O>>2]|0))Ob(da,L);else{c[l>>2]=0;o=l+4|0;c[o>>2]=0;c[l+8>>2]=0;f=(c[N>>2]|0)-(c[L>>2]|0)|0;n=f>>4;do if(n|0){if(n>>>0>268435455){W=186;break g}j=(f|0)==0?1:f;f=vf(j)|0;l:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){k=0;break l}ub[f&3]();f=vf(j)|0;if(f|0){k=f;break}}else k=f;while(0);c[o>>2]=k;c[l>>2]=k;c[l+8>>2]=k+(n<<4);f=c[L>>2]|0;j=(c[N>>2]|0)-f|0;if((j|0)<=0)break;Vm(k|0,f|0,j|0)|0;c[o>>2]=k+(j>>4<<4)}while(0);c[ea>>2]=(c[ea>>2]|0)+12}break h}case 1:{c[ja>>2]=f;q=(u|0)>0;if(q){k=w+36|0;j=0;do{se(ka,j,ja,c[k>>2]|0);j=j+1|0}while((j|0)<(v|0))}n=c[ea>>2]|0;if((n|0)==(c[O>>2]|0))Ob(da,L);else{c[n>>2]=0;p=n+4|0;c[p>>2]=0;c[n+8>>2]=0;j=(c[N>>2]|0)-(c[L>>2]|0)|0;o=j>>4;do if(o|0){if(o>>>0>268435455){W=201;break g}k=(j|0)==0?1:j;j=vf(k)|0;m:do if(!j)while(1){j=c[5972]|0;c[5972]=j+0;if(!j){l=0;break m}ub[j&3]();j=vf(k)|0;if(j|0){l=j;break}}else l=j;while(0);c[p>>2]=l;c[n>>2]=l;c[n+8>>2]=l+(o<<4);j=c[L>>2]|0;k=(c[N>>2]|0)-j|0;if((k|0)<=0)break;Vm(l|0,j|0,k|0)|0;c[p>>2]=l+(k>>4<<4)}while(0);c[ea>>2]=(c[ea>>2]|0)+12}j=c[L>>2]|0;k=c[N>>2]|0;if((k|0)!=(j|0))c[N>>2]=k+(~((k+-16-j|0)>>>4)<<4);j=c[T>>2]|0;g=+h[j+(f<<4)>>3];m=+h[j+(f<<4)+8>>3];if(t){k=f;do{ba=k;k=k+-1|0;ma=-+h[j+(k<<4)+8>>3];h[j+(ba<<4)>>3]=-+h[j+(k<<4)>>3];h[j+(ba<<4)+8>>3]=ma;j=c[T>>2]|0}while((ba|0)>1)}h[j>>3]=-g;h[j+8>>3]=-m;c[ja>>2]=0;if(q){j=w+36|0;while(1){se(ka,f,ja,c[j>>2]|0);if((f|0)>0)f=f+-1|0;else break}}l=c[ea>>2]|0;if((l|0)==(c[O>>2]|0))Ob(da,L);else{c[l>>2]=0;o=l+4|0;c[o>>2]=0;c[l+8>>2]=0;f=(c[N>>2]|0)-(c[L>>2]|0)|0;n=f>>4;do if(n|0){if(n>>>0>268435455){W=219;break g}j=(f|0)==0?1:f;f=vf(j)|0;n:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){k=0;break n}ub[f&3]();f=vf(j)|0;if(f|0){k=f;break}}else k=f;while(0);c[o>>2]=k;c[l>>2]=k;c[l+8>>2]=k+(n<<4);f=c[L>>2]|0;j=(c[N>>2]|0)-f|0;if((j|0)<=0)break;Vm(k|0,f|0,j|0)|0;c[o>>2]=k+(j>>4<<4)}while(0);c[ea>>2]=(c[ea>>2]|0)+12}break h}default:{c[ja>>2]=0;if((f|0)>1){k=w+36|0;j=1;do{se(ka,j,ja,c[k>>2]|0);j=j+1|0}while((j|0)!=(f|0));j=c[s>>2]|0}c[ha>>2]=0;c[ha+4>>2]=0;c[ha+8>>2]=0;c[ha+12>>2]=0;do if((j|0)==2){j=c[C>>2]|0;r=j+(f<<4)|0;ba=c[T>>2]|0;z=+((c[r>>2]|0)>>>0)+4294967296.0*+(c[r+4>>2]|0)+ +h[ba+(f<<4)>>3]*fa;z=z+(z<0.0?-.5:.5);r=+G(z)>=1.0?(z>0.0?~~+U(+F(z/4294967296.0),4294967295.0)>>>0:~~+S((z-+(~~z>>>0))/4294967296.0)>>>0):0;j=j+(f<<4)+8|0;ma=+((c[j>>2]|0)>>>0)+4294967296.0*+(c[j+4>>2]|0)+ +h[ba+(f<<4)+8>>3]*fa;ma=ma+(ma<0.0?-.5:.5);ba=+G(ma)>=1.0?(ma>0.0?~~+U(+F(ma/4294967296.0),4294967295.0)>>>0:~~+S((ma-+(~~ma>>>0))/4294967296.0)>>>0):0;j=ha;c[j>>2]=~~z>>>0;c[j+4>>2]=r;j=Y;c[j>>2]=~~ma>>>0;c[j+4>>2]=ba;j=c[N>>2]|0;if((j|0)==(c[Q>>2]|0)){Tb(L,ha);j=c[N>>2]|0}else{c[j>>2]=c[ha>>2];c[j+4>>2]=c[ha+4>>2];c[j+8>>2]=c[ha+8>>2];c[j+12>>2]=c[ha+12>>2];j=(c[N>>2]|0)+16|0;c[N>>2]=j}ba=c[C>>2]|0;q=ba+(f<<4)|0;r=c[T>>2]|0;z=+((c[q>>2]|0)>>>0)+4294967296.0*+(c[q+4>>2]|0)-+h[r+(f<<4)>>3]*fa;z=z+(z<0.0?-.5:.5);q=+G(z)>=1.0?(z>0.0?~~+U(+F(z/4294967296.0),4294967295.0)>>>0:~~+S((z-+(~~z>>>0))/4294967296.0)>>>0):0;ba=ba+(f<<4)+8|0;ma=+((c[ba>>2]|0)>>>0)+4294967296.0*+(c[ba+4>>2]|0)-+h[r+(f<<4)+8>>3]*fa;ma=ma+(ma<0.0?-.5:.5);r=+G(ma)>=1.0?(ma>0.0?~~+U(+F(ma/4294967296.0),4294967295.0)>>>0:~~+S((ma-+(~~ma>>>0))/4294967296.0)>>>0):0;ba=ha;c[ba>>2]=~~z>>>0;c[ba+4>>2]=q;ba=Y;c[ba>>2]=~~ma>>>0;c[ba+4>>2]=r;if((j|0)==(c[Q>>2]|0)){Tb(L,ha);break}else{c[j>>2]=c[ha>>2];c[j+4>>2]=c[ha+4>>2];c[j+8>>2]=c[ha+8>>2];c[j+12>>2]=c[ha+12>>2];c[N>>2]=(c[N>>2]|0)+16;break}}else{j=v+-2|0;c[ja>>2]=j;h[Z>>3]=0.0;ba=c[T>>2]|0;r=ba+(f<<4)|0;ba=ba+(f<<4)+8|0;ma=-+h[ba>>3];h[r>>3]=-+h[r>>3];h[ba>>3]=ma;if((c[s>>2]|0)==3){te(ka,f,j);break}else{ue(ka,f,j);break}}while(0);j=c[T>>2]|0;if(t){k=f;do{ba=k;k=k+-1|0;ma=-+h[j+(k<<4)+8>>3];h[j+(ba<<4)>>3]=-+h[j+(k<<4)>>3];h[j+(ba<<4)+8>>3]=ma;j=c[T>>2]|0}while((ba|0)>1)}ma=-+h[j+24>>3];h[j>>3]=-+h[j+16>>3];h[j+8>>3]=ma;c[ja>>2]=f;if((u|0)>32){j=w+36|0;f=v+-2|0;while(1){se(ka,f,ja,c[j>>2]|0);if((f|0)>1)f=f+-1|0;else break}}f=c[s>>2]|0;do if((f|0)==2){f=c[C>>2]|0;w=f;ba=c[T>>2]|0;z=+((c[w>>2]|0)>>>0)+4294967296.0*+(c[w+4>>2]|0)-+h[ba>>3]*fa;z=z+(z<0.0?-.5:.5);w=+G(z)>=1.0?(z>0.0?~~+U(+F(z/4294967296.0),4294967295.0)>>>0:~~+S((z-+(~~z>>>0))/4294967296.0)>>>0):0;f=f+8|0;ma=+((c[f>>2]|0)>>>0)+4294967296.0*+(c[f+4>>2]|0)-+h[ba+8>>3]*fa;ma=ma+(ma<0.0?-.5:.5);ba=+G(ma)>=1.0?(ma>0.0?~~+U(+F(ma/4294967296.0),4294967295.0)>>>0:~~+S((ma-+(~~ma>>>0))/4294967296.0)>>>0):0;f=ha;c[f>>2]=~~z>>>0;c[f+4>>2]=w;f=Y;c[f>>2]=~~ma>>>0;c[f+4>>2]=ba;f=c[N>>2]|0;if((f|0)==(c[Q>>2]|0)){Tb(L,ha);f=c[N>>2]|0}else{c[f>>2]=c[ha>>2];c[f+4>>2]=c[ha+4>>2];c[f+8>>2]=c[ha+8>>2];c[f+12>>2]=c[ha+12>>2];f=(c[N>>2]|0)+16|0;c[N>>2]=f}ba=c[C>>2]|0;v=ba;w=c[T>>2]|0;z=+((c[v>>2]|0)>>>0)+4294967296.0*+(c[v+4>>2]|0)+ +h[w>>3]*fa;z=z+(z<0.0?-.5:.5);v=+G(z)>=1.0?(z>0.0?~~+U(+F(z/4294967296.0),4294967295.0)>>>0:~~+S((z-+(~~z>>>0))/4294967296.0)>>>0):0;ba=ba+8|0;ma=+((c[ba>>2]|0)>>>0)+4294967296.0*+(c[ba+4>>2]|0)+ +h[w+8>>3]*fa;ma=ma+(ma<0.0?-.5:.5);w=+G(ma)>=1.0?(ma>0.0?~~+U(+F(ma/4294967296.0),4294967295.0)>>>0:~~+S((ma-+(~~ma>>>0))/4294967296.0)>>>0):0;ba=ha;c[ba>>2]=~~z>>>0;c[ba+4>>2]=v;ba=Y;c[ba>>2]=~~ma>>>0;c[ba+4>>2]=w;if((f|0)==(c[Q>>2]|0)){Tb(L,ha);break}else{c[f>>2]=c[ha>>2];c[f+4>>2]=c[ha+4>>2];c[f+8>>2]=c[ha+8>>2];c[f+12>>2]=c[ha+12>>2];c[N>>2]=(c[N>>2]|0)+16;break}}else{c[ja>>2]=1;h[Z>>3]=0.0;if((f|0)==3){te(ka,0,1);break}else{ue(ka,0,1);break}}while(0);l=c[ea>>2]|0;if((l|0)==(c[O>>2]|0))Ob(da,L);else{c[l>>2]=0;o=l+4|0;c[o>>2]=0;c[l+8>>2]=0;f=(c[N>>2]|0)-(c[L>>2]|0)|0;n=f>>4;do if(n|0){if(n>>>0>268435455){W=261;break g}j=(f|0)==0?1:f;f=vf(j)|0;o:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){k=0;break o}ub[f&3]();f=vf(j)|0;if(f|0){k=f;break}}else k=f;while(0);c[o>>2]=k;c[l>>2]=k;c[l+8>>2]=k+(n<<4);f=c[L>>2]|0;j=(c[N>>2]|0)-f|0;if((j|0)<=0)break;Vm(k|0,f|0,j|0)|0;c[o>>2]=k+(j>>4<<4)}while(0);c[ea>>2]=(c[ea>>2]|0)+12}break h}}}while(0);x=x+1|0;f=c[A>>2]|0;if((x|0)>=((c[B>>2]|0)-f>>2|0))break d}if((W|0)==140)Bl();else if((W|0)==152){la=Fa(4)|0;c[la>>2]=8316;$a(la|0,1336,91)}else if((W|0)==186)Bl();else if((W|0)==201)Bl();else if((W|0)==219)Bl();else if((W|0)==261)Bl()}}while(0);V=ja+92|0;c[ja+108>>2]=0;_=ja+112|0;c[_>>2]=0;c[ja+116>>2]=0;W=ja+100|0;c[W>>2]=0;X=ja+96|0;c[X>>2]=0;c[ja>>2]=1652;c[V>>2]=1688;f=ja+56|0;c[ja+60>>2]=0;c[ja+64>>2]=0;j=ja+60|0;k=ja+4|0;l=k+48|0;do{c[k>>2]=0;k=k+4|0}while((k|0)<(l|0));c[f>>2]=j;c[ja+68>>2]=0;c[ja+72>>2]=0;a[ja+76>>0]=0;Y=ja+104|0;a[Y>>0]=0;T=ja+88|0;a[T>>0]=0;a[ja+90>>0]=0;a[ja+120>>0]=0;Z=ja+121|0;a[Z>>0]=0;k=ja+92|0;f=c[da>>2]|0;if((c[ea>>2]|0)!=(f|0)){j=0;do{ke(k,f+(j*12|0)|0,0);j=j+1|0;f=c[da>>2]|0}while(j>>>0<(((c[ea>>2]|0)-f|0)/12|0)>>>0)}if((e|0)<=0){f=c[ja+(c[(c[ja>>2]|0)+-12>>2]|0)+8>>2]|0;p:do if(!f){r=0;q=0;p=0;o=0;n=0;l=0;k=0;j=0}else{O=c[f+8>>2]|0;s=O;t=c[s>>2]|0;s=c[s+4>>2]|0;u=O+8|0;v=c[u>>2]|0;u=c[u+4>>2]|0;P=u;d=u;Q=v;R=v;p=v;o=u;n=t;l=s;k=v;j=u;r=t;q=s;x=t;A=s;while(1){N=f+12|0;L=O;I=v;while(1){C=c[L+104>>2]|0;B=L;w=c[B>>2]|0;B=c[B+4>>2]|0;v=(B|0)<(s|0)|(B|0)==(s|0)&w>>>0<t>>>0;if(!C)C=L;else while(1){r=v?w:r;q=v?B:q;t=v?w:t;s=v?B:s;D=(B|0)>(A|0)|(B|0)==(A|0)&w>>>0>x>>>0;n=D?w:n;l=D?B:l;x=D?w:x;A=D?B:A;D=c[C+104>>2]|0;B=C;w=c[B>>2]|0;B=c[B+4>>2]|0;v=(B|0)<(s|0)|(B|0)==(s|0)&w>>>0<t>>>0;if(!D)break;else C=D}D=v?w:t;s=v?B:s;da=(B|0)>(A|0)|(B|0)==(A|0)&w>>>0>x>>>0;x=da?w:x;A=da?B:A;e=C+32|0;ea=c[e>>2]|0;e=c[e+4>>2]|0;ba=(e|0)<(s|0)|(e|0)==(s|0)&ea>>>0<D>>>0;r=ba?ea:v?w:r;q=ba?e:v?B:q;D=ba?ea:D;s=ba?e:s;v=(e|0)>(A|0)|(e|0)==(A|0)&ea>>>0>x>>>0;n=v?ea:da?w:n;l=v?e:da?B:l;x=v?ea:x;A=v?e:A;e=C+40|0;v=c[e>>2]|0;e=c[e+4>>2]|0;ea=(e|0)<(u|0)|(e|0)==(u|0)&v>>>0<I>>>0;k=ea?v:k;j=ea?e:j;v=ea?v:I;u=ea?e:u;if((L|0)!=(O|0))break;L=c[N>>2]|0;t=D;I=v}t=(P|0)>(d|0)|(P|0)==(d|0)&Q>>>0>R>>>0;p=t?Q:p;o=t?P:o;f=c[f+16>>2]|0;if(!f)break p;e=t?Q:R;ea=t?P:d;O=c[f+8>>2]|0;t=O+8|0;P=c[t+4>>2]|0;d=ea;Q=c[t>>2]|0;R=e;t=D}}while(0);s=ha+4|0;f=vf(64)|0;q:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break q}ub[f&3]();f=vf(64)|0}while(!(f|0));while(0);c[ha>>2]=f;ba=f+64|0;c[ha+8>>2]=ba;c[s>>2]=ba;ba=Om(r|0,q|0,-10,-1)|0;da=E;R=Om(p|0,o|0,10,0)|0;e=E;$=f;c[$>>2]=ba;c[$+4>>2]=da;$=f+8|0;c[$>>2]=R;c[$+4>>2]=e;$=Om(n|0,l|0,10,0)|0;aa=E;ea=f+16|0;c[ea>>2]=$;c[ea+4>>2]=aa;ea=f+24|0;c[ea>>2]=R;c[ea+4>>2]=e;ea=Om(k|0,j|0,-10,-1)|0;e=E;k=f+32|0;c[k>>2]=$;c[k+4>>2]=aa;k=f+40|0;c[k>>2]=ea;c[k+4>>2]=e;k=f+48|0;c[k>>2]=ba;c[k+4>>2]=da;k=f+56|0;c[k>>2]=ea;c[k+4>>2]=e;ke(ja+(c[(c[ja>>2]|0)+-12>>2]|0)|0,ha,0);a[T>>0]=1;le(ja,1,ga,3,3);ga=c[ia>>2]|0;b=c[b>>2]|0;k=b;f=ga;do if((ga|0)!=(b|0)){j=k+12|0;if((j|0)!=(f|0)){do{l=c[k>>2]|0;n=l;p=k+4|0;if(!l)l=k+8|0;else{o=c[p>>2]|0;if((o|0)!=(l|0))c[p>>2]=o+(~((o+-16-n|0)>>>4)<<4);wf(l);l=k+8|0;c[l>>2]=0;c[p>>2]=0;c[k>>2]=0}c[k>>2]=c[j>>2];b=j+4|0;c[p>>2]=c[b>>2];ga=j+8|0;c[l>>2]=c[ga>>2];c[ga>>2]=0;c[b>>2]=0;c[j>>2]=0;j=j+12|0;k=k+12|0}while((j|0)!=(f|0));f=c[ia>>2]|0;if((f|0)==(k|0))break}do{j=f;f=f+-12|0;c[ia>>2]=f;n=c[f>>2]|0;o=n;if(n|0){j=j+-8|0;l=c[j>>2]|0;if((l|0)!=(n|0))c[j>>2]=l+(~((l+-16-o|0)>>>4)<<4);wf(n)}}while((f|0)!=(k|0))}while(0);f=c[ha>>2]|0;j=f;if(f|0){k=c[s>>2]|0;if((k|0)!=(f|0))c[s>>2]=k+(~((k+-16-j|0)>>>4)<<4);wf(f)}}else le(ja,1,ga,2,2);Gd(ja);c[V>>2]=1624;f=c[W>>2]|0;if(f|0)do{ia=f;f=c[f+16>>2]|0;wf(ia);c[W>>2]=f}while((f|0)!=0);c[X>>2]=0;r=ja+108|0;n=c[_>>2]|0;o=c[r>>2]|0;k=o;p=n;if((n|0)==(o|0)){j=k;l=p;f=p}else{q=0;j=k;f=p;l=p;do{j=c[j+(q<<2)>>2]|0;if(j){wf(j);n=c[_>>2]|0;k=c[r>>2]|0;l=n;o=k;f=l}q=q+1|0;j=o}while(q>>>0<n-o>>2>>>0);n=o}if((l|0)!=(j|0)){f=l+(~((l+-4-n|0)>>>2)<<2)|0;c[_>>2]=f}a[Y>>0]=0;a[Z>>0]=0;if(!k){qe(ka);i=la;return}if((f|0)!=(k|0))c[_>>2]=f+(~((f+-4-k|0)>>>2)<<2);wf(k);qe(ka);i=la;return}function gc(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=+g;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,H=0,I=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,V=0,W=0,X=0,Y=0,Z=0,_=0.0,$=0.0,aa=0.0,ba=0,ca=0,da=0,ea=0,fa=0.0,ga=0.0;ea=i;i=i+80|0;ba=ea+32|0;ca=ea+60|0;Z=ea;q=ea+48|0;fc(ca,a,(T(f,d)|0)/100|0);$=g/180.0*3.141592653589793;_=+J(+$);$=+K(+$);aa=-$;da=ca+4|0;l=c[da>>2]|0;r=c[ca>>2]|0;o=r;p=l;if((l|0)!=(r|0)){k=0;do{f=r;if((c[f+(k*12|0)+4>>2]|0)!=(c[f+(k*12|0)>>2]|0)){m=o+(k*12|0)|0;n=o+(k*12|0)+4|0;a=0;while(1){Y=c[f+(k*12|0)>>2]|0;V=Y+(a<<4)|0;X=V;Y=Y+(a<<4)+8|0;R=Y;fa=+((c[X>>2]|0)>>>0)+4294967296.0*+(c[X+4>>2]|0);s=+((c[R>>2]|0)>>>0)+4294967296.0*+(c[R+4>>2]|0);g=_*fa+s*aa;R=+G(g)>=1.0?(g>0.0?~~+U(+F(g/4294967296.0),4294967295.0)>>>0:~~+S((g-+(~~g>>>0))/4294967296.0)>>>0):0;s=$*fa+_*s;X=+G(s)>=1.0?(s>0.0?~~+U(+F(s/4294967296.0),4294967295.0)>>>0:~~+S((s-+(~~s>>>0))/4294967296.0)>>>0):0;c[V>>2]=~~g>>>0;c[V+4>>2]=R;c[Y>>2]=~~s>>>0;c[Y+4>>2]=X;a=a+1|0;if(a>>>0<(c[n>>2]|0)-(c[m>>2]|0)>>4>>>0)f=o;else break}}k=k+1|0}while(k>>>0<((l-r|0)/12|0)>>>0)}c[q>>2]=0;n=q+4|0;c[n>>2]=0;c[q+8>>2]=0;Mb(q,o,p);Ib(Z,q);a=c[q>>2]|0;if(a|0){f=c[n>>2]|0;if((f|0)!=(a|0)){do{k=f+-12|0;c[n>>2]=k;l=c[k>>2]|0;m=l;if(!l)f=k;else{f=f+-8|0;k=c[f>>2]|0;if((k|0)!=(l|0))c[f>>2]=k+(~((k+-16-m|0)>>>4)<<4);wf(l);f=c[n>>2]|0}}while((f|0)!=(a|0));a=c[q>>2]|0}wf(a)}Q=Z;Y=((e|0)<0)<<31>>31;Q=Rm(c[Q>>2]|0,c[Q+4>>2]|0,e|0,Y|0)|0;Q=Om(Q|0,E|0,-1,-1)|0;Q=Ym(Q|0,E|0,e|0,Y|0)|0;R=E;X=Z;c[X>>2]=Q;c[X+4>>2]=R;X=Z+16|0;u=X;V=c[u>>2]|0;u=c[u+4>>2]|0;P=e+-1|0;R=Km(P|0,((P|0)<0)<<31>>31|0,Q|0,R|0)|0;u=Om(R|0,E|0,V|0,u|0)|0;u=Rm(u|0,E|0,e|0,Y|0)|0;do if((u|0)>0){a=0;l=0;p=0;m=0;k=0;f=0;while(1){if(k>>>0>=f>>>0){n=(p-l|0)/12|0;f=n+1|0;if(f>>>0>357913941){W=22;break}W=(m-l|0)/12|0;o=W<<1;o=W>>>0<178956970?(o>>>0<f>>>0?f:o):357913941;if(!o)f=0;else{if(o>>>0>357913941){W=25;break}k=o*12|0;k=(k|0)==0?1:k;f=vf(k)|0;a:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break a}ub[f&3]();f=vf(k)|0}while(!(f|0));while(0)}n=f+(n*12|0)|0;m=n;f=f+(o*12|0)|0;t=n+12|0;k=l;c[n>>2]=0;c[n+4>>2]=0;c[n+8>>2]=0;if((p|0)!=(k|0)){o=p;do{W=n+-12|0;V=o;o=o+-12|0;c[W>>2]=0;R=n+-8|0;c[R>>2]=0;c[n+-4>>2]=0;c[W>>2]=c[o>>2];W=V+-8|0;c[R>>2]=c[W>>2];V=V+-4|0;c[n+-4>>2]=c[V>>2];c[V>>2]=0;c[W>>2]=0;c[o>>2]=0;n=m+-12|0;m=n}while((o|0)!=(k|0));k=p}r=l;if((k|0)!=(r|0))do{n=k;k=k+-12|0;p=c[k>>2]|0;q=p;if(p|0){n=n+-8|0;o=c[n>>2]|0;if((o|0)!=(p|0))c[n>>2]=o+(~((o+-8-q|0)>>>3)<<3);wf(p)}}while((k|0)!=(r|0));if(!l){l=m;k=t}else{wf(l);l=m;k=t}}else{c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;k=k+12|0;f=m}a=a+1|0;if((a|0)>=(u|0)){W=16;break}p=k;m=f}if((W|0)==16){h=l;j=k;v=c[ca>>2]|0;break}else if((W|0)==22)Bl();else if((W|0)==25){ea=Fa(4)|0;c[ea>>2]=8316;$a(ea|0,1336,91)}}else{h=0;j=0;v=r}while(0);a=c[da>>2]|0;V=(e|0)/2|0;b:do if((a|0)!=(v|0)){R=h;Q=0;f=v;c:while(1){l=f;O=c[l+(Q*12|0)+4>>2]|0;P=c[l+(Q*12|0)>>2]|0;k=(O-P>>4)+-1|0;a=P;if((O|0)!=(P|0)){O=a+(k<<4)+8|0;M=a+(k<<4)|0;P=0;f=l;L=c[M>>2]|0;M=c[M+4>>2]|0;N=c[O>>2]|0;O=c[O+4>>2]|0;do{f=c[f+(Q*12|0)>>2]|0;D=f+(P<<4)|0;I=L;L=c[D>>2]|0;H=M;M=c[D+4>>2]|0;f=f+(P<<4)+8|0;D=N;N=c[f>>2]|0;C=O;O=c[f+4>>2]|0;f=Z;a=c[f>>2]|0;f=c[f+4>>2]|0;v=Km(L|0,M|0,a|0,f|0)|0;v=Rm(v|0,E|0,e|0,Y|0)|0;u=Km(I|0,H|0,a|0,f|0)|0;u=Rm(u|0,E|0,e|0,Y|0)|0;B=(H|0)<(M|0)|(H|0)==(M|0)&I>>>0<L>>>0;x=B?I:L;y=B?H:M;z=B?L:I;B=B?M:H;t=(v|0)>(u|0);w=t?v:u;C=Km(D|0,C|0,N|0,O|0)|0;D=E;H=Km(I|0,H|0,L|0,M|0)|0;I=E;v=t?u:v;while(1){u=T(v,e)|0;a=Om(a|0,f|0,V|0,0)|0;a=Om(a|0,E|0,u|0,0)|0;a=Sm(0,a|0,32)|0;f=E;do if(((f|0)>(y|0)|(f|0)==(y|0)&a>>>0>=x>>>0)&((f|0)<(B|0)|(f|0)==(B|0)&a>>>0<z>>>0)){n=Km(a|0,f|0,L|0,M|0)|0;n=Ym(n|0,E|0,C|0,D|0)|0;n=Rm(n|0,E|0,H|0,I|0)|0;n=Om(n|0,E|0,N|0,O|0)|0;n=Sm(0,n|0,32)|0;o=E;q=R+(v*12|0)+4|0;a=c[q>>2]|0;r=R+(v*12|0)+8|0;f=c[r>>2]|0;if(a>>>0<f>>>0){u=a;c[u>>2]=n;c[u+4>>2]=o;c[q>>2]=a+8;break}t=R+(v*12|0)|0;u=c[t>>2]|0;p=a-u|0;m=p>>3;a=m+1|0;if(a>>>0>536870911){W=54;break c}k=f-u|0;l=k>>2;l=k>>3>>>0<268435455?(l>>>0<a>>>0?a:l):536870911;if(!l)k=0;else{if(l>>>0>536870911){W=57;break c}f=l<<3;f=(f|0)==0?1:f;a=vf(f)|0;d:do if(!a)do{a=c[5972]|0;c[5972]=a+0;if(!a){a=0;break d}ub[a&3]();a=vf(f)|0}while(!(a|0));while(0);k=a}f=k+(m<<3)|0;a=f;c[a>>2]=n;c[a+4>>2]=o;a=f+(0-m<<3)|0;if((p|0)>0)Vm(a|0,u|0,p|0)|0;c[t>>2]=a;c[q>>2]=f+8;c[r>>2]=k+(l<<3);if(u|0)wf(u)}while(0);if((v|0)>=(w|0))break;f=Z;v=v+1|0;a=c[f>>2]|0;f=c[f+4>>2]|0}P=P+1|0;f=c[ca>>2]|0}while(P>>>0<(c[f+(Q*12|0)+4>>2]|0)-(c[f+(Q*12|0)>>2]|0)>>4>>>0)}Q=Q+1|0;a=c[da>>2]|0;if(Q>>>0>=((a-f|0)/12|0)>>>0){A=a;break b}}if((W|0)==54)Bl();else if((W|0)==57){ea=Fa(4)|0;c[ea>>2]=8316;$a(ea|0,1336,91)}}else A=a;while(0);k=Z;k=Om(c[k>>2]|0,c[k+4>>2]|0,V|0,((V|0)<0)<<31>>31|0)|0;f=E;z=X;y=c[z>>2]|0;z=c[z+4>>2]|0;if(!((f|0)<(z|0)|(f|0)==(z|0)&k>>>0<y>>>0)){a=h;if(a|0)W=69}else{w=(d|0)/5|0;x=((w|0)<0)<<31>>31;v=ba+8|0;u=ba+8|0;a=h;t=0;while(1){l=c[a+(t*12|0)>>2]|0;Ee(l,(c[a+(t*12|0)+4>>2]|0)-l>>3,8,11);l=c[a+(t*12|0)>>2]|0;if((c[a+(t*12|0)+4>>2]|0)-l>>3>>>0>1){s=+(k>>>0)+4294967296.0*+(f|0);g=_*s;s=s*aa;r=a+(t*12|0)|0;q=0;p=1;do{d=l;Z=d+(p<<3)|0;d=d+(q<<3)|0;d=Km(c[Z>>2]|0,c[Z+4>>2]|0,c[d>>2]|0,c[d+4>>2]|0)|0;Z=E;if(!((Z|0)<(x|0)|(Z|0)==(x|0)&d>>>0<w>>>0)){m=ic(b)|0;o=(c[r>>2]|0)+(q<<3)|0;fa=+((c[o>>2]|0)>>>0)+4294967296.0*+(c[o+4>>2]|0);ga=g+$*fa;o=+G(ga)>=1.0?(ga>0.0?~~+U(+F(ga/4294967296.0),4294967295.0)>>>0:~~+S((ga-+(~~ga>>>0))/4294967296.0)>>>0):0;fa=s+_*fa;l=+G(fa)>=1.0?(fa>0.0?~~+U(+F(fa/4294967296.0),4294967295.0)>>>0:~~+S((fa-+(~~fa>>>0))/4294967296.0)>>>0):0;n=ba;c[n>>2]=~~ga>>>0;c[n+4>>2]=o;n=v;c[n>>2]=~~fa>>>0;c[n+4>>2]=l;n=m+4|0;l=c[n>>2]|0;o=m+8|0;if((l|0)==(c[o>>2]|0)){Tb(m,ba);l=c[n>>2]|0}else{c[l>>2]=c[ba>>2];c[l+4>>2]=c[ba+4>>2];c[l+8>>2]=c[ba+8>>2];c[l+12>>2]=c[ba+12>>2];l=(c[n>>2]|0)+16|0;c[n>>2]=l}X=(c[r>>2]|0)+(p<<3)|0;ga=+((c[X>>2]|0)>>>0)+4294967296.0*+(c[X+4>>2]|0);fa=g+$*ga;X=+G(fa)>=1.0?(fa>0.0?~~+U(+F(fa/4294967296.0),4294967295.0)>>>0:~~+S((fa-+(~~fa>>>0))/4294967296.0)>>>0):0;ga=s+_*ga;Z=+G(ga)>=1.0?(ga>0.0?~~+U(+F(ga/4294967296.0),4294967295.0)>>>0:~~+S((ga-+(~~ga>>>0))/4294967296.0)>>>0):0;d=ba;c[d>>2]=~~fa>>>0;c[d+4>>2]=X;d=u;c[d>>2]=~~ga>>>0;c[d+4>>2]=Z;if((l|0)==(c[o>>2]|0))Tb(m,ba);else{c[l>>2]=c[ba>>2];c[l+4>>2]=c[ba+4>>2];c[l+8>>2]=c[ba+8>>2];c[l+12>>2]=c[ba+12>>2];c[n>>2]=(c[n>>2]|0)+16}}q=q+2|0;p=q|1;l=c[a+(t*12|0)>>2]|0}while(p>>>0<(c[a+(t*12|0)+4>>2]|0)-l>>3>>>0)}k=Om(k|0,f|0,e|0,Y|0)|0;f=E;if(!((f|0)<(z|0)|(f|0)==(z|0)&k>>>0<y>>>0)){W=69;break}else t=t+1|0}}if((W|0)==69){if((j|0)==(a|0))h=a;else do{f=j;j=j+-12|0;l=c[j>>2]|0;m=l;if(l|0){f=f+-8|0;k=c[f>>2]|0;if((k|0)!=(l|0))c[f>>2]=k+(~((k+-8-m|0)>>>3)<<3);wf(l)}}while((j|0)!=(a|0));wf(h)}l=c[ca>>2]|0;if(!l){i=ea;return}if((A|0)!=(l|0)){a=A;do{h=a;a=a+-12|0;f=c[a>>2]|0;k=f;if(f|0){h=h+-8|0;j=c[h>>2]|0;if((j|0)!=(f|0))c[h>>2]=j+(~((j+-16-k|0)>>>4)<<4);wf(f)}}while((a|0)!=(l|0));c[da>>2]=l}wf(l);i=ea;return}function hc(a,b){a=a|0;b=b|0;var d=0;d=a;a=b;a=Km(c[d>>2]|0,c[d+4>>2]|0,c[a>>2]|0,c[a+4>>2]|0)|0;b=E;return ((b|0)<0?-1:((a|0)!=0|(b|0)!=0)&1)|0}function ic(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;k=a+4|0;b=c[k>>2]|0;j=a+8|0;e=c[j>>2]|0;if(b>>>0<e>>>0){c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;j=(c[k>>2]|0)+12|0;c[k>>2]=j;k=j;a=c[a>>2]|0;k=k-a|0;k=(k|0)/12|0;k=k+-1|0;k=a+(k*12|0)|0;return k|0}d=c[a>>2]|0;g=(b-d|0)/12|0;b=g+1|0;if(b>>>0>357913941)Bl();i=(e-d|0)/12|0;f=i<<1;f=i>>>0<178956970?(f>>>0<b>>>0?b:f):357913941;if(!f)b=0;else{if(f>>>0>357913941){k=Fa(4)|0;c[k>>2]=8316;$a(k|0,1336,91)}d=f*12|0;d=(d|0)==0?1:d;b=vf(d)|0;a:do if(!b)do{b=c[5972]|0;c[5972]=b+0;if(!b){b=0;break a}ub[b&3]();b=vf(d)|0}while(!(b|0));while(0)}d=b+(g*12|0)|0;e=d;g=b+(f*12|0)|0;h=d+12|0;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;f=c[a>>2]|0;b=c[k>>2]|0;if((b|0)==(f|0)){b=e;i=f;d=f}else{do{i=d+-12|0;l=b;b=b+-12|0;c[i>>2]=0;m=d+-8|0;c[m>>2]=0;c[d+-4>>2]=0;c[i>>2]=c[b>>2];i=l+-8|0;c[m>>2]=c[i>>2];l=l+-4|0;c[d+-4>>2]=c[l>>2];c[l>>2]=0;c[i>>2]=0;c[b>>2]=0;d=e+-12|0;e=d}while((b|0)!=(f|0));b=e;i=c[a>>2]|0;d=c[k>>2]|0}c[a>>2]=b;c[k>>2]=h;c[j>>2]=g;h=i;if((d|0)!=(h|0))do{b=d;d=d+-12|0;f=c[d>>2]|0;g=f;if(f|0){b=b+-8|0;e=c[b>>2]|0;if((e|0)!=(f|0))c[b>>2]=e+(~((e+-16-g|0)>>>4)<<4);wf(f)}}while((d|0)!=(h|0));if(i|0)wf(i);l=a;m=c[k>>2]|0;l=c[l>>2]|0;m=m-l|0;m=(m|0)/12|0;m=m+-1|0;m=l+(m*12|0)|0;return m|0}function jc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;l=a+4|0;d=c[a>>2]|0;i=((c[l>>2]|0)-d|0)/12|0;e=i+1|0;if(e>>>0>357913941)Bl();m=a+8|0;k=((c[m>>2]|0)-d|0)/12|0;f=k<<1;f=k>>>0<178956970?(f>>>0<e>>>0?e:f):357913941;if(!f)d=0;else{if(f>>>0>357913941){m=Fa(4)|0;c[m>>2]=8316;$a(m|0,1336,91)}e=f*12|0;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}g=d+(i*12|0)|0;h=g;j=d+(f*12|0)|0;c[g>>2]=0;c[d+(i*12|0)+4>>2]=0;c[d+(i*12|0)+8>>2]=0;if((g|0)==(b|0))d=b;else{Mb(g,c[b>>2]|0,c[b+4>>2]|0);d=g}i=d+12|0;b=c[a>>2]|0;d=c[l>>2]|0;if((d|0)==(b|0)){d=h;k=b;e=b}else{do{f=g+-12|0;e=d;d=d+-12|0;c[f>>2]=0;c[g+-8>>2]=0;c[g+-4>>2]=0;if((g|0)!=(e|0))Mb(f,c[d>>2]|0,c[e+-8>>2]|0);g=h+-12|0;h=g}while((d|0)!=(b|0));d=h;k=c[a>>2]|0;e=c[l>>2]|0}c[a>>2]=d;c[l>>2]=i;c[m>>2]=j;j=k;if((e|0)!=(j|0)){i=e;do{e=i;i=i+-12|0;d=c[i>>2]|0;if(d|0){b=e+-8|0;e=c[b>>2]|0;if((e|0)!=(d|0)){do{f=e+-12|0;c[b>>2]=f;g=c[f>>2]|0;h=g;if(!g)e=f;else{e=e+-8|0;f=c[e>>2]|0;if((f|0)!=(g|0))c[e>>2]=f+(~((f+-16-h|0)>>>4)<<4);wf(g);e=c[b>>2]|0}}while((e|0)!=(d|0));d=c[i>>2]|0}wf(d)}}while((i|0)!=(j|0))}if(!k)return;wf(k);return}function kc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;D=i;i=i+16|0;A=D;C=a+8|0;B=a+12|0;e=c[C>>2]|0;if((c[B>>2]|0)==(e|0)){i=D;return}v=0-b|0;w=(d|0)==0;x=(d|0)>0;y=A+4|0;z=A+8|0;s=(b|0)/2|0;t=A+4|0;u=A+4|0;r=0;a:while(1){b=e+(r*96|0)+44|0;a=e+(r*96|0)+32|0;fc(A,a,v);if((b|0)!=(A|0))Mb(b,c[A>>2]|0,c[u>>2]|0);b=c[A>>2]|0;if(b|0){f=c[u>>2]|0;if((f|0)!=(b|0)){do{g=f+-12|0;c[u>>2]=g;h=c[g>>2]|0;j=h;if(!h)f=g;else{f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(h|0))c[f>>2]=g+(~((g+-16-j|0)>>>4)<<4);wf(h);f=c[u>>2]|0}}while((f|0)!=(b|0));b=c[A>>2]|0}wf(b)}b:do if(!w){if(x){p=e+(r*96|0)+56|0;q=e+(r*96|0)+60|0;o=e+(r*96|0)+64|0;n=0;while(1){c[A>>2]=0;c[y>>2]=0;c[z>>2]=0;e=c[q>>2]|0;m=c[o>>2]|0;b=m;if(e>>>0>=m>>>0){f=c[p>>2]|0;j=(e-f|0)/12|0;e=j+1|0;if(e>>>0>357913941){s=29;break a}m=(b-f|0)/12|0;f=m<<1;f=m>>>0<178956970?(f>>>0<e>>>0?e:f):357913941;if(!f)e=0;else{if(f>>>0>357913941){s=32;break a}b=f*12|0;b=(b|0)==0?1:b;e=vf(b)|0;c:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break c}ub[e&3]();e=vf(b)|0}while(!(e|0));while(0)}g=e+(j*12|0)|0;h=g;l=e+(f*12|0)|0;c[g>>2]=0;c[e+(j*12|0)+4>>2]=0;c[e+(j*12|0)+8>>2]=0;if((g|0)==(A|0))e=A;else{Mb(g,c[A>>2]|0,c[y>>2]|0);e=g}k=e+12|0;j=c[p>>2]|0;e=c[q>>2]|0;if((e|0)==(j|0)){e=h;m=j;b=j}else{do{f=g+-12|0;b=e;e=e+-12|0;c[f>>2]=0;c[g+-8>>2]=0;c[g+-4>>2]=0;if((g|0)!=(b|0))Mb(f,c[e>>2]|0,c[b+-8>>2]|0);g=h+-12|0;h=g}while((e|0)!=(j|0));e=h;m=c[p>>2]|0;b=c[q>>2]|0}c[p>>2]=e;c[q>>2]=k;c[o>>2]=l;l=m;if((b|0)!=(l|0)){k=b;do{b=k;k=k+-12|0;e=c[k>>2]|0;if(e|0){j=b+-8|0;b=c[j>>2]|0;if((b|0)!=(e|0)){do{f=b+-12|0;c[j>>2]=f;g=c[f>>2]|0;h=g;if(!g)b=f;else{b=b+-8|0;f=c[b>>2]|0;if((f|0)!=(g|0))c[b>>2]=f+(~((f+-16-h|0)>>>4)<<4);wf(g);b=c[j>>2]|0}}while((b|0)!=(e|0));e=c[k>>2]|0}wf(e)}}while((k|0)!=(l|0))}if(m|0)wf(m)}else{c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;if((e|0)==(A|0))e=A;else{Mb(e,c[A>>2]|0,c[y>>2]|0);e=c[q>>2]|0}c[q>>2]=e+12}e=c[A>>2]|0;if(e|0){b=c[y>>2]|0;if((b|0)!=(e|0)){do{f=b+-12|0;c[y>>2]=f;g=c[f>>2]|0;h=g;if(!g)b=f;else{b=b+-8|0;f=c[b>>2]|0;if((f|0)!=(g|0))c[b>>2]=f+(~((f+-16-h|0)>>>4)<<4);wf(g);b=c[y>>2]|0}}while((b|0)!=(e|0));e=c[A>>2]|0}wf(e)}e=(c[p>>2]|0)+(n*12|0)|0;fc(A,a,(T(n,v)|0)-s|0);if((e|0)!=(A|0))Mb(e,c[A>>2]|0,c[t>>2]|0);e=c[A>>2]|0;if(e|0){b=c[t>>2]|0;if((b|0)!=(e|0)){do{f=b+-12|0;c[t>>2]=f;g=c[f>>2]|0;h=g;if(!g)b=f;else{b=b+-8|0;f=c[b>>2]|0;if((f|0)!=(g|0))c[b>>2]=f+(~((f+-16-h|0)>>>4)<<4);wf(g);b=c[t>>2]|0}}while((b|0)!=(e|0));e=c[A>>2]|0}wf(e)}g=c[p>>2]|0;f=g+(n*12|0)|0;g=g+(n*12|0)+4|0;e=c[f>>2]|0;if((c[g>>2]|0)==(e|0))break;b=0;do{Oc(e+(b*12|0)|0);e=c[f>>2]|0;if((c[e+(b*12|0)+4>>2]|0)-(c[e+(b*12|0)>>2]|0)>>4>>>0<3){Pc(f,b);b=b+-1|0;e=c[f>>2]|0}b=b+1|0}while(b>>>0<(((c[g>>2]|0)-e|0)/12|0)>>>0);m=c[p>>2]|0;if((c[m+(n*12|0)+4>>2]|0)==(c[m+(n*12|0)>>2]|0))break;n=n+1|0;if((n|0)>=(d|0))break b}e=c[q>>2]|0;k=e+-12|0;while(1){a=e+-12|0;c[q>>2]=a;j=c[a>>2]|0;if(j){h=e+-8|0;e=c[h>>2]|0;if((e|0)==(j|0))a=j;else{do{b=e+-12|0;c[h>>2]=b;f=c[b>>2]|0;g=f;if(!f)e=b;else{e=e+-8|0;b=c[e>>2]|0;if((b|0)!=(f|0))c[e>>2]=b+(~((b+-16-g|0)>>>4)<<4);wf(f);e=c[h>>2]|0}}while((e|0)!=(j|0));a=c[a>>2]|0}wf(a);a=c[q>>2]|0}if((a|0)==(k|0))break;else e=a}}}else{f=e+(r*96|0)+60|0;b=c[f>>2]|0;if((b|0)==(c[e+(r*96|0)+64>>2]|0)){jc(e+(r*96|0)+56|0,a);break}c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;if((b|0)!=(a|0)){Mb(b,c[a>>2]|0,c[e+(r*96|0)+36>>2]|0);a=c[f>>2]|0}c[f>>2]=a+12}while(0);r=r+1|0;g=c[B>>2]|0;b=c[C>>2]|0;e=b;if(r>>>0>=((g-b|0)/96|0)>>>0){s=3;break}}if((s|0)==3){if((g|0)==(b|0)){i=D;return}else r=0;while(1){a=g;f=e+(r*96|0)|0;if((c[e+(r*96|0)+60>>2]|0)==(c[e+(r*96|0)+56>>2]|0)){e=f+96|0;if((e|0)!=(a|0)){do{c[f>>2]=c[e>>2];c[f+4>>2]=c[e+4>>2];c[f+8>>2]=c[e+8>>2];c[f+12>>2]=c[e+12>>2];c[f+16>>2]=c[e+16>>2];c[f+20>>2]=c[e+20>>2];c[f+24>>2]=c[e+24>>2];c[f+28>>2]=c[e+28>>2];Mb(f+32|0,c[e+32>>2]|0,c[e+36>>2]|0);Mb(f+44|0,c[e+44>>2]|0,c[e+48>>2]|0);p=f+56|0;q=e+56|0;g=c[p>>2]|0;if(!g){g=f+64|0;b=f+60|0}else{b=f+60|0;h=c[b>>2]|0;if((h|0)!=(g|0)){do{n=h+-12|0;c[b>>2]=n;o=c[n>>2]|0;if(!o)h=n;else{m=h+-8|0;h=c[m>>2]|0;if((h|0)==(o|0))h=o;else{do{j=h+-12|0;c[m>>2]=j;k=c[j>>2]|0;l=k;if(!k)h=j;else{h=h+-8|0;j=c[h>>2]|0;if((j|0)!=(k|0))c[h>>2]=j+(~((j+-16-l|0)>>>4)<<4);wf(k);h=c[m>>2]|0}}while((h|0)!=(o|0));h=c[n>>2]|0}wf(h);h=c[b>>2]|0}}while((h|0)!=(g|0));g=c[p>>2]|0}wf(g);g=f+64|0;c[g>>2]=0;c[b>>2]=0;c[p>>2]=0}c[p>>2]=c[q>>2];A=e+60|0;c[b>>2]=c[A>>2];d=e+64|0;c[g>>2]=c[d>>2];c[d>>2]=0;c[A>>2]=0;c[q>>2]=0;Mb(f+68|0,c[e+68>>2]|0,c[e+72>>2]|0);Mb(f+80|0,c[e+80>>2]|0,c[e+84>>2]|0);e=e+96|0;f=f+96|0}while((e|0)!=(a|0));a=c[B>>2]|0;if((a|0)==(f|0))a=f;else{e=f;s=116}}else{e=f;s=116}if((s|0)==116){s=0;do{A=a+-96|0;c[B>>2]=A;Lb(A);a=c[B>>2]|0}while((a|0)!=(e|0));a=e}e=r+-1|0;b=c[C>>2]|0}else{e=r;a=g}r=e+1|0;if(r>>>0>=((a-b|0)/96|0)>>>0)break;else{g=a;e=b}}i=D;return}else if((s|0)==29)Bl();else if((s|0)==32){D=Fa(4)|0;c[D>>2]=8316;$a(D|0,1336,91)}}function lc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;s=i;i=i+192|0;o=s+56|0;k=s;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;l=o+92|0;c[o+108>>2]=0;r=o+112|0;c[r>>2]=0;c[o+116>>2]=0;m=o+100|0;c[m>>2]=0;n=o+96|0;c[n>>2]=0;c[o>>2]=1652;c[l>>2]=1688;f=o+56|0;c[o+60>>2]=0;c[o+64>>2]=0;g=o+60|0;h=o+4|0;j=h+48|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(j|0));c[f>>2]=g;c[o+68>>2]=0;c[o+72>>2]=0;a[o+76>>0]=0;p=o+104|0;a[p>>0]=0;a[o+88>>0]=0;a[o+90>>0]=0;a[o+120>>0]=0;q=o+121|0;a[q>>0]=0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;c[k+20>>2]=0;c[k+24>>2]=0;c[k+28>>2]=0;a[k+32>>0]=0;c[k+44>>2]=0;c[k+48>>2]=0;c[k+52>>2]=0;h=o+92|0;j=d+4|0;f=c[d>>2]|0;if((c[j>>2]|0)!=(f|0)){g=0;do{ke(h,f+(g*12|0)|0,0);g=g+1|0;f=c[d>>2]|0}while(g>>>0<(((c[j>>2]|0)-f|0)/12|0)>>>0)}if(e)oe(o,k,1,1);else oe(o,k,0,0);nc(k,b);mc(k);Gd(o);c[l>>2]=1624;f=c[m>>2]|0;if(f|0)do{l=f;f=c[f+16>>2]|0;wf(l);c[m>>2]=f}while((f|0)!=0);c[n>>2]=0;l=o+108|0;b=c[r>>2]|0;d=c[l>>2]|0;h=d;e=b;if((b|0)==(d|0)){g=h;j=e;f=e}else{k=0;g=h;f=e;j=e;do{g=c[g+(k<<2)>>2]|0;if(g){wf(g);b=c[r>>2]|0;h=c[l>>2]|0;j=b;d=h;f=j}k=k+1|0;g=d}while(k>>>0<b-d>>2>>>0);b=d}if((j|0)!=(g|0)){f=j+(~((j+-4-b|0)>>>2)<<2)|0;c[r>>2]=f}a[p>>0]=0;a[q>>0]=0;if(!h){i=s;return}if((f|0)!=(h|0))c[r>>2]=f+(~((f+-4-h|0)>>>2)<<2);wf(h);i=s;return}function mc(a){a=a|0;var b=0,d=0,e=0,f=0;he(a);b=c[a+44>>2]|0;d=b;if(b|0){e=a+48|0;f=c[e>>2]|0;if((f|0)!=(b|0))c[e>>2]=f+(~((f+-4-d|0)>>>2)<<2);wf(b)}b=c[a+12>>2]|0;d=b;if(b|0){e=a+16|0;f=c[e>>2]|0;if((f|0)!=(b|0))c[e>>2]=f+(~((f+-4-d|0)>>>2)<<2);wf(b)}e=c[a>>2]|0;if(!e)return;b=a+4|0;d=c[b>>2]|0;if((d|0)!=(e|0))c[b>>2]=d+(~((d+-16-e|0)>>>4)<<4);wf(e);return}
function af(a,b){a=+a;b=+b;var d=0,e=0,f=0,g=0,i=0,j=0,k=0,m=0,n=0,o=0,p=0,q=0;h[l>>3]=a;i=c[l>>2]|0;k=c[l+4>>2]|0;h[l>>3]=b;n=c[l>>2]|0;o=c[l+4>>2]|0;e=Tm(i|0,k|0,52)|0;e=e&2047;m=Tm(n|0,o|0,52)|0;m=m&2047;p=k&-2147483648;g=_m(n|0,o|0,1)|0;j=E;a:do if(!((g|0)==0&(j|0)==0)?(f=o&2147483647,!(f>>>0>2146435072|(f|0)==2146435072&n>>>0>0|(e|0)==2047)):0){d=_m(i|0,k|0,1)|0;f=E;if(!(f>>>0>j>>>0|(f|0)==(j|0)&d>>>0>g>>>0))return +((d|0)==(g|0)&(f|0)==(j|0)?a*0.0:a);if(!e){d=_m(i|0,k|0,12)|0;f=E;if((f|0)>-1|(f|0)==-1&d>>>0>4294967295){e=0;do{e=e+-1|0;d=_m(d|0,f|0,1)|0;f=E}while((f|0)>-1|(f|0)==-1&d>>>0>4294967295)}else e=0;i=_m(i|0,k|0,1-e|0)|0;g=E}else g=k&1048575|1048576;if(!m){f=_m(n|0,o|0,12)|0;j=E;if((j|0)>-1|(j|0)==-1&f>>>0>4294967295){d=0;do{d=d+-1|0;f=_m(f|0,j|0,1)|0;j=E}while((j|0)>-1|(j|0)==-1&f>>>0>4294967295)}else d=0;n=_m(n|0,o|0,1-d|0)|0;m=d;k=E}else k=o&1048575|1048576;f=Km(i|0,g|0,n|0,k|0)|0;d=E;j=(d|0)>-1|(d|0)==-1&f>>>0>4294967295;b:do if((e|0)>(m|0)){while(1){if(j){if((f|0)==0&(d|0)==0)break}else{f=i;d=g}i=_m(f|0,d|0,1)|0;g=E;e=e+-1|0;f=Km(i|0,g|0,n|0,k|0)|0;d=E;j=(d|0)>-1|(d|0)==-1&f>>>0>4294967295;if((e|0)<=(m|0))break b}b=a*0.0;break a}while(0);if(j){if((f|0)==0&(d|0)==0){b=a*0.0;break}}else{d=g;f=i}if(d>>>0<1048576|(d|0)==1048576&f>>>0<0)do{f=_m(f|0,d|0,1)|0;d=E;e=e+-1|0}while(d>>>0<1048576|(d|0)==1048576&f>>>0<0);if((e|0)>0){o=Om(f|0,d|0,0,-1048576)|0;d=E;e=_m(e|0,0,52)|0;d=d|E;e=o|e}else{e=Tm(f|0,d|0,1-e|0)|0;d=E}c[l>>2]=e;c[l+4>>2]=d|p;b=+h[l>>3]}else q=3;while(0);if((q|0)==3){b=a*b;b=b/b}return +b}function bf(a,b){a=+a;b=b|0;var d=0;if((b|0)>1023){a=a*8988465674311579538646525.0e283;d=b+-1023|0;b=b+-2046|0;if((d|0)>1023){a=a*8988465674311579538646525.0e283;b=(b|0)>1023?1023:b}else b=d}else if((b|0)<-1022){a=a*2.2250738585072014e-308;d=b+1022|0;b=b+2044|0;if((d|0)<-1022){a=a*2.2250738585072014e-308;b=(b|0)<-1022?-1022:b}else b=d}b=_m(b+1023|0,0,52)|0;d=E;c[l>>2]=b;c[l+4>>2]=d;return +(a*+h[l>>3])}function cf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;b=i;i=i+16|0;e=b;c[e>>2]=d;Pe(a,2147483647,20019,e)|0;i=b;return}function df(b,e,f){b=b|0;e=e|0;f=f|0;var g=0.0,j=0,k=0.0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,v=0,w=0.0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,F=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0.0;O=i;i=i+512|0;K=O;switch(e|0){case 0:{L=-149;M=24;C=4;break}case 1:{L=-1074;M=53;C=4;break}case 2:{L=-1074;M=53;C=4;break}default:g=0.0}a:do if((C|0)==4){F=b+4|0;D=b+100|0;b:while(1){e=c[F>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[F>>2]=e+1;e=d[e>>0]|0}else e=He(b)|0;switch(e|0){case 9:case 10:case 11:case 12:case 13:case 32:break;default:break b}}c:do switch(e|0){case 43:case 45:{j=1-(((e|0)==45&1)<<1)|0;e=c[F>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[F>>2]=e+1;m=d[e>>0]|0;N=j;break c}else{m=He(b)|0;N=j;break c}}default:{m=e;N=1}}while(0);e=0;do{if((m|32|0)!=(a[17149+e>>0]|0))break;do if(e>>>0<7){j=c[F>>2]|0;if(j>>>0<(c[D>>2]|0)>>>0){c[F>>2]=j+1;m=d[j>>0]|0;break}else{m=He(b)|0;break}}while(0);e=e+1|0}while(e>>>0<8);d:do switch(e|0){case 8:break;case 3:{C=23;break}default:{n=(f|0)!=0;if(n&e>>>0>3)if((e|0)==8)break d;else{C=23;break d}e:do if(!e){e=0;do{if((m|32|0)!=(a[17158+e>>0]|0))break e;do if(e>>>0<2){j=c[F>>2]|0;if(j>>>0<(c[D>>2]|0)>>>0){c[F>>2]=j+1;m=d[j>>0]|0;break}else{m=He(b)|0;break}}while(0);e=e+1|0}while(e>>>0<3)}while(0);switch(e|0){case 3:{e=c[F>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[F>>2]=e+1;e=d[e>>0]|0}else e=He(b)|0;if((e|0)==40)e=1;else{if(!(c[D>>2]|0)){g=t;break a}c[F>>2]=(c[F>>2]|0)+-1;g=t;break a}while(1){j=c[F>>2]|0;if(j>>>0<(c[D>>2]|0)>>>0){c[F>>2]=j+1;j=d[j>>0]|0}else j=He(b)|0;if(!((j+-48|0)>>>0<10|(j+-65|0)>>>0<26)?!((j|0)==95|(j+-97|0)>>>0<26):0)break;e=e+1|0}if((j|0)==41){g=t;break a}j=(c[D>>2]|0)==0;if(!j)c[F>>2]=(c[F>>2]|0)+-1;if(!n){if(!(c[5356]|0))e=21468;else e=c[(en()|0)+64>>2]|0;c[e>>2]=22;c[b+104>>2]=0;N=c[b+8>>2]|0;c[b+108>>2]=N-(c[F>>2]|0);c[D>>2]=N;g=0.0;break a}if(!e){g=t;break a}while(1){e=e+-1|0;if(!j)c[F>>2]=(c[F>>2]|0)+-1;if(!e){g=t;break a}}}case 0:{do if((m|0)==48){e=c[F>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[F>>2]=e+1;e=d[e>>0]|0}else e=He(b)|0;if((e|32|0)!=120){if(!(c[D>>2]|0)){e=48;break}c[F>>2]=(c[F>>2]|0)+-1;e=48;break}e=c[F>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[F>>2]=e+1;j=d[e>>0]|0;m=0}else{j=He(b)|0;m=0}f:while(1){switch(j|0){case 46:{C=78;break f}case 48:break;default:{x=0;o=0;r=1.0;g=0.0;e=0;n=j;y=m;A=0;z=0;m=0;j=0;break f}}e=c[F>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[F>>2]=e+1;j=d[e>>0]|0;m=1;continue}else{j=He(b)|0;m=1;continue}}if((C|0)==78){e=c[F>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[F>>2]=e+1;j=d[e>>0]|0}else j=He(b)|0;if((j|0)==48){m=0;j=0;do{e=c[F>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[F>>2]=e+1;n=d[e>>0]|0}else n=He(b)|0;m=Om(m|0,j|0,-1,-1)|0;j=E}while((n|0)==48);x=1;o=0;r=1.0;g=0.0;e=0;y=1;A=0;z=0}else{x=1;o=0;r=1.0;g=0.0;e=0;n=j;y=m;A=0;z=0;m=0;j=0}}while(1){q=n+-48|0;p=n|32;if(q>>>0>=10){v=(n|0)==46;if(!(v|(p+-97|0)>>>0<6)){p=n;break}if(v)if(!x){x=1;k=r;v=y;m=z;j=A;q=z;p=A}else{p=46;break}else C=90}else C=90;if((C|0)==90){C=0;n=(n|0)>57?p+-87|0:q;do if(!((A|0)<0|(A|0)==0&z>>>0<8)){if((A|0)<0|(A|0)==0&z>>>0<14){w=r*.0625;k=w;g=g+w*+(n|0);break}if((o|0)!=0|(n|0)==0)k=r;else{o=1;k=r;g=g+r*.5}}else{k=r;e=n+(e<<4)|0}while(0);q=Om(z|0,A|0,1,0)|0;v=1;p=E}n=c[F>>2]|0;if(n>>>0<(c[D>>2]|0)>>>0){c[F>>2]=n+1;r=k;n=d[n>>0]|0;y=v;A=p;z=q;continue}else{r=k;n=He(b)|0;y=v;A=p;z=q;continue}}if(!y){e=(c[D>>2]|0)==0;if(!e)c[F>>2]=(c[F>>2]|0)+-1;if(f){if(!e?(B=c[F>>2]|0,c[F>>2]=B+-1,x|0):0)c[F>>2]=B+-2}else{c[b+104>>2]=0;M=c[b+8>>2]|0;c[b+108>>2]=M-(c[F>>2]|0);c[D>>2]=M}g=+(N|0)*0.0;break a}o=(x|0)==0;q=o?z:m;o=o?A:j;if((A|0)<0|(A|0)==0&z>>>0<8){m=z;j=A;do{e=e<<4;m=Om(m|0,j|0,1,0)|0;j=E}while((j|0)<0|(j|0)==0&m>>>0<8);n=e}else n=e;if((p|32|0)==112){j=ef(b,f)|0;e=E;if((j|0)==0&(e|0)==-2147483648){if(!f){c[b+104>>2]=0;N=c[b+8>>2]|0;c[b+108>>2]=N-(c[F>>2]|0);c[D>>2]=N;g=0.0;break a}if(!(c[D>>2]|0)){j=0;e=0}else{c[F>>2]=(c[F>>2]|0)+-1;j=0;e=0}}}else if(!(c[D>>2]|0)){j=0;e=0}else{c[F>>2]=(c[F>>2]|0)+-1;j=0;e=0}m=_m(q|0,o|0,2)|0;m=Om(m|0,E|0,-32,-1)|0;m=Om(m|0,E|0,j|0,e|0)|0;e=E;if(!n){g=+(N|0)*0.0;break a}if((e|0)>0|(e|0)==0&m>>>0>(0-L|0)>>>0){if(!(c[5356]|0))e=21468;else e=c[(en()|0)+64>>2]|0;c[e>>2]=34;g=+(N|0)*1797693134862315708145274.0e284*1797693134862315708145274.0e284;break a}K=L+-106|0;J=((K|0)<0)<<31>>31;if((e|0)<(J|0)|(e|0)==(J|0)&m>>>0<K>>>0){if(!(c[5356]|0))e=21468;else e=c[(en()|0)+64>>2]|0;c[e>>2]=34;g=+(N|0)*2.2250738585072014e-308*2.2250738585072014e-308;break a}if((n|0)>-1){j=n;do{J=!(g>=.5);K=J&1|j<<1;j=K^1;g=g+(J?g:g+-1.0);m=Om(m|0,e|0,-1,-1)|0;e=E}while((K|0)>-1);r=g;n=j}else r=g;L=Km(32,0,L|0,((L|0)<0)<<31>>31|0)|0;e=Om(m|0,e|0,L|0,E|0)|0;L=E;if(0>(L|0)|0==(L|0)&M>>>0>e>>>0)if((e|0)<0){j=0;e=84;C=135}else C=133;else{e=M;C=133}if((C|0)==133)if((e|0)<53){j=e;e=84-e|0;C=135}else{k=0.0;g=+(N|0)}if((C|0)==135){k=+bf(1.0,e);g=+(N|0);h[l>>3]=k;N=c[l>>2]|0;e=c[l+4>>2]|0;h[l>>3]=g;e=e&2147483647|c[l+4>>2]&-2147483648;c[l>>2]=N;c[l+4>>2]=e;k=+h[l>>3];e=j}N=(n&1|0)==0&(r!=0.0&(e|0)<32);g=g*(N?0.0:r)+(k+g*+(((N&1)+n|0)>>>0))-k;if(!(g!=0.0)){if(!(c[5356]|0))e=21468;else e=c[(en()|0)+64>>2]|0;c[e>>2]=34}g=+bf(g,m);break a}else e=m;while(0);H=L+M|0;J=0-H|0;j=0;g:while(1){switch(e|0){case 46:{C=148;break g}case 48:break;default:{p=0;n=j;q=0;o=0;break g}}e=c[F>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[F>>2]=e+1;e=d[e>>0]|0;j=1;continue}else{e=He(b)|0;j=1;continue}}if((C|0)==148){e=c[F>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[F>>2]=e+1;e=d[e>>0]|0}else e=He(b)|0;if((e|0)==48){j=0;e=0;while(1){j=Om(j|0,e|0,-1,-1)|0;o=E;e=c[F>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[F>>2]=e+1;e=d[e>>0]|0}else e=He(b)|0;if((e|0)==48)e=o;else{p=1;n=1;q=j;break}}}else{p=1;n=j;q=0;o=0}}c[K>>2]=0;v=e+-48|0;m=(e|0)==46;h:do if(m|v>>>0<10){C=K+496|0;y=0;j=0;B=0;z=p;A=n;p=0;n=0;i:while(1){do if(m)if(!z){z=1;x=B;q=p;o=n}else break i;else{p=Om(p|0,n|0,1,0)|0;n=E;x=(e|0)!=48;if((j|0)>=125){if(!x){x=B;break}c[C>>2]=c[C>>2]|1;x=B;break}m=K+(j<<2)|0;if(!y)e=v;else e=e+-48+((c[m>>2]|0)*10|0)|0;c[m>>2]=e;y=y+1|0;A=(y|0)==9;y=A?0:y;j=(A&1)+j|0;x=x?p:B;A=1}while(0);e=c[F>>2]|0;if(e>>>0<(c[D>>2]|0)>>>0){c[F>>2]=e+1;e=d[e>>0]|0}else e=He(b)|0;v=e+-48|0;m=(e|0)==46;if(!(m|v>>>0<10)){v=x;x=z;m=A;C=171;break h}else B=x}e=y;v=B;m=(A|0)!=0;C=179}else{y=0;j=0;v=0;x=p;m=n;p=0;n=0;C=171}while(0);do if((C|0)==171){B=(x|0)==0;q=B?p:q;o=B?n:o;m=(m|0)!=0;if(!(m&(e|32|0)==101))if((e|0)>-1){e=y;C=179;break}else{e=y;C=181;break}m=ef(b,f)|0;e=E;if((m|0)==0&(e|0)==-2147483648){if(!f){c[b+104>>2]=0;N=c[b+8>>2]|0;c[b+108>>2]=N-(c[F>>2]|0);c[D>>2]=N;g=0.0;break}if(!(c[D>>2]|0)){m=0;e=0}else{c[F>>2]=(c[F>>2]|0)+-1;m=0;e=0}}A=Om(m|0,e|0,q|0,o|0)|0;e=y;o=E;C=185}while(0);if((C|0)==179)if(c[D>>2]|0){c[F>>2]=(c[F>>2]|0)+-1;if(m){A=q;C=185}else C=182}else C=181;if((C|0)==181)if(m){A=q;C=185}else C=182;do if((C|0)==182){if(!(c[5356]|0))e=21468;else e=c[(en()|0)+64>>2]|0;c[e>>2]=22;c[b+104>>2]=0;N=c[b+8>>2]|0;c[b+108>>2]=N-(c[F>>2]|0);c[D>>2]=N;g=0.0}else if((C|0)==185){m=c[K>>2]|0;if(!m){g=+(N|0)*0.0;break}if(((n|0)<0|(n|0)==0&p>>>0<10)&((A|0)==(p|0)&(o|0)==(n|0))?M>>>0>30|(m>>>M|0)==0:0){g=+(N|0)*+(m>>>0);break}F=(L|0)/-2|0;b=((F|0)<0)<<31>>31;if((o|0)>(b|0)|(o|0)==(b|0)&A>>>0>F>>>0){if(!(c[5356]|0))e=21468;else e=c[(en()|0)+64>>2]|0;c[e>>2]=34;g=+(N|0)*1797693134862315708145274.0e284*1797693134862315708145274.0e284;break}F=L+-106|0;b=((F|0)<0)<<31>>31;if((o|0)<(b|0)|(o|0)==(b|0)&A>>>0<F>>>0){if(!(c[5356]|0))e=21468;else e=c[(en()|0)+64>>2]|0;c[e>>2]=34;g=+(N|0)*2.2250738585072014e-308*2.2250738585072014e-308;break}if(e){if((e|0)<9){n=K+(j<<2)|0;m=c[n>>2]|0;do{m=m*10|0;e=e+1|0}while((e|0)!=9);c[n>>2]=m}j=j+1|0}if((v|0)<9?(v|0)<=(A|0)&(A|0)<18:0){if((A|0)==9){g=+(N|0)*+((c[K>>2]|0)>>>0);break}if((A|0)<9){g=+(N|0)*+((c[K>>2]|0)>>>0)/+(c[5340+(8-A<<2)>>2]|0);break}F=M+27+(T(A,-3)|0)|0;e=c[K>>2]|0;if((F|0)>30|(e>>>F|0)==0){g=+(N|0)*+(e>>>0)*+(c[5340+(A+-10<<2)>>2]|0);break}}e=(A|0)%9|0;if(!e){e=0;n=0}else{v=(A|0)>-1?e:e+9|0;p=c[5340+(8-v<<2)>>2]|0;if(j){q=1e9/(p|0)|0;n=0;o=0;m=A;e=0;do{D=K+(e<<2)|0;b=c[D>>2]|0;F=((b>>>0)/(p>>>0)|0)+n|0;c[D>>2]=F;n=T((b>>>0)%(p>>>0)|0,q)|0;F=(e|0)==(o|0)&(F|0)==0;m=F?m+-9|0:m;o=F?o+1&127:o;e=e+1|0}while((e|0)!=(j|0));if(!n)n=o;else{c[K+(j<<2)>>2]=n;n=o;j=j+1|0}}else{n=0;j=0;m=A}e=0;A=9-v+m|0}j:while(1){v=(A|0)<18;x=(A|0)==18;y=K+(n<<2)|0;while(1){if(!v){if(!x){m=A;break j}if((c[y>>2]|0)>>>0>=9007199){m=18;break j}}m=0;z=j;j=j+127|0;while(1){o=j&127;p=K+(o<<2)|0;j=_m(c[p>>2]|0,0,29)|0;j=Om(j|0,E|0,m|0,0)|0;m=E;if(m>>>0>0|(m|0)==0&j>>>0>1e9){q=Wm(j|0,m|0,1e9,0)|0;j=an(j|0,m|0,1e9,0)|0}else q=0;c[p>>2]=j;F=(o|0)==(n|0);z=(o|0)!=(z+127&127|0)|F?z:(j|0)==0?o:z;if(F)break;else{m=q;j=o+-1|0}}e=e+-29|0;if(q|0)break;else j=z}n=n+127&127;j=z+127&127;m=K+((z+126&127)<<2)|0;if((n|0)==(z|0))c[m>>2]=c[m>>2]|c[K+(j<<2)>>2];else j=z;c[K+(n<<2)>>2]=q;A=A+9|0}k:while(1){y=j+1&127;z=K+((j+127&127)<<2)|0;while(1){q=(m|0)==18;x=(m|0)>27?9:1;A=n;while(1){n=0;while(1){o=n+A&127;if((o|0)==(j|0)){I=2;C=236;break}o=c[K+(o<<2)>>2]|0;p=c[5372+(n<<2)>>2]|0;if(o>>>0<p>>>0){I=2;C=236;break}if(o>>>0>p>>>0)break;n=n+1|0;if((n|0)>=2){I=n;C=236;break}}if((C|0)==236?(C=0,q&(I|0)==2):0){g=0.0;o=0;break k}e=e+x|0;if((A|0)==(j|0))A=j;else break}q=(1<<x)+-1|0;v=1e9>>>x;p=0;n=A;o=A;do{D=K+(o<<2)|0;b=c[D>>2]|0;F=(b>>>x)+p|0;c[D>>2]=F;p=T(b&q,v)|0;F=(o|0)==(n|0)&(F|0)==0;m=F?m+-9|0:m;n=F?n+1&127:n;o=o+1&127}while((o|0)!=(j|0));if(!p)continue;if((y|0)!=(n|0))break;c[z>>2]=c[z>>2]|1}c[K+(j<<2)>>2]=p;j=y}while(1){n=o+A&127;m=j+1&127;if((n|0)==(j|0))c[K+(m+-1<<2)>>2]=0;else m=j;g=g*1.0e9+ +((c[K+(n<<2)>>2]|0)>>>0);o=o+1|0;if((o|0)==2)break;else j=m}w=+(N|0);k=w*g;p=e+53|0;q=p-L|0;v=(q|0)<(M|0);j=v&1;o=v?((q|0)<0?0:q):M;if((o|0)<53){r=+bf(1.0,105-o|0);h[l>>3]=r;M=c[l>>2]|0;N=c[l+4>>2]|0;h[l>>3]=k;N=N&2147483647|c[l+4>>2]&-2147483648;c[l>>2]=M;c[l+4>>2]=N;r=+h[l>>3];P=+af(k,+bf(1.0,53-o|0));s=r;g=P;r=k-P+r}else{s=0.0;g=0.0;r=k}n=A+2&127;do if((n|0)!=(m|0)){n=c[K+(n<<2)>>2]|0;do if(n>>>0>=5e8){if((n|0)!=5e8){g=w*.75+g;break}if((A+3&127|0)==(m|0)){g=w*.5+g;break}else{g=w*.75+g;break}}else{if((n|0)==0?(A+3&127|0)==(m|0):0)break;g=w*.25+g}while(0);if((53-o|0)>1){if(+af(g,1.0)!=0.0){k=g;break}k=g+1.0}else k=g}else k=g;while(0);g=r+k-s;do if((p&2147483647|0)>(-2-H|0)){if(+G(+g)>=9007199254740992.0){g=g*.5;j=v&(o|0)==(q|0)?0:j;e=e+1|0}if((e+50|0)<=(J|0)?!(k!=0.0&(j|0)!=0):0)break;if(!(c[5356]|0))j=21468;else j=c[(en()|0)+64>>2]|0;c[j>>2]=34}while(0);g=+bf(g,e)}while(0);break a}default:{if(c[D>>2]|0)c[F>>2]=(c[F>>2]|0)+-1;if(!(c[5356]|0))e=21468;else e=c[(en()|0)+64>>2]|0;c[e>>2]=22;c[b+104>>2]=0;N=c[b+8>>2]|0;c[b+108>>2]=N-(c[F>>2]|0);c[D>>2]=N;g=0.0;break a}}}}while(0);if((C|0)==23){j=(c[D>>2]|0)==0;if(!j)c[F>>2]=(c[F>>2]|0)+-1;if((f|0)!=0&e>>>0>3)do{if(!j)c[F>>2]=(c[F>>2]|0)+-1;e=e+-1|0}while(e>>>0>3)}g=+(N|0)*u}while(0);i=O;return +g}function ef(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,i=0,j=0;i=a+4|0;e=c[i>>2]|0;j=a+100|0;if(e>>>0<(c[j>>2]|0)>>>0){c[i>>2]=e+1;e=d[e>>0]|0}else e=He(a)|0;switch(e|0){case 43:case 45:{f=(e|0)==45&1;e=c[i>>2]|0;if(e>>>0<(c[j>>2]|0)>>>0){c[i>>2]=e+1;e=d[e>>0]|0}else e=He(a)|0;if((b|0)!=0&(e+-48|0)>>>0>9?(c[j>>2]|0)!=0:0)c[i>>2]=(c[i>>2]|0)+-1;break}default:f=0}if((e+-48|0)>>>0>9)if(!(c[j>>2]|0)){f=-2147483648;e=0}else{c[i>>2]=(c[i>>2]|0)+-1;f=-2147483648;e=0}else{h=0;do{h=e+-48+(h*10|0)|0;e=c[i>>2]|0;if(e>>>0<(c[j>>2]|0)>>>0){c[i>>2]=e+1;e=d[e>>0]|0}else e=He(a)|0;g=(e+-48|0)>>>0<10}while((h|0)<214748364&g);b=((h|0)<0)<<31>>31;if(g){g=h;do{g=Ym(g|0,b|0,10,0)|0;g=Om(g|0,E|0,-48,-1)|0;g=Om(g|0,E|0,e|0,((e|0)<0)<<31>>31|0)|0;b=E;e=c[i>>2]|0;if(e>>>0<(c[j>>2]|0)>>>0){c[i>>2]=e+1;e=d[e>>0]|0}else e=He(a)|0}while(((b|0)<21474836|(b|0)==21474836&g>>>0<2061584302)&(e+-48|0)>>>0<10)}else g=h;if((e+-48|0)>>>0<10)do{e=c[i>>2]|0;if(e>>>0<(c[j>>2]|0)>>>0){c[i>>2]=e+1;e=d[e>>0]|0}else e=He(a)|0}while((e+-48|0)>>>0<10);if(c[j>>2]|0)c[i>>2]=(c[i>>2]|0)+-1;j=(f|0)!=0;e=Km(0,0,g|0,b|0)|0;f=j?E:b;e=j?e:g}E=f;return e|0}function ff(a,b){a=a|0;b=b|0;var d=0.0,e=0,f=0,g=0,h=0,j=0;h=i;i=i+112|0;e=h;f=e;g=f+100|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));j=e+4|0;c[j>>2]=a;f=e+8|0;c[f>>2]=-1;c[e+44>>2]=a;c[e+76>>2]=-1;c[e+104>>2]=0;g=e+108|0;c[g>>2]=~a;c[e+100>>2]=-1;d=+df(e,2,1);e=(c[j>>2]|0)-(c[f>>2]|0)+(c[g>>2]|0)|0;if(b|0)c[b>>2]=e|0?a+e|0:a;i=h;return +d}function gf(a){a=a|0;var b=0;if(a|0)return hf(a)|0;if(!(c[538]|0))a=0;else a=gf(c[538]|0)|0;ab(21452);b=c[5362]|0;if(b)do{if((c[b+20>>2]|0)>>>0>(c[b+28>>2]|0)>>>0)a=hf(b)|0|a;b=c[b+56>>2]|0}while((b|0)!=0);Xa(21452);return a|0}function hf(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=a+20|0;h=a+28|0;if((c[b>>2]|0)>>>0>(c[h>>2]|0)>>>0?(lb[c[a+36>>2]&31](a,0,0)|0,(c[b>>2]|0)==0):0)a=-1;else{d=a+4|0;e=c[d>>2]|0;f=a+8|0;g=c[f>>2]|0;if(e>>>0<g>>>0)lb[c[a+40>>2]&31](a,e-g|0,1)|0;c[a+16>>2]=0;c[h>>2]=0;c[b>>2]=0;c[f>>2]=0;c[d>>2]=0;a=0}return a|0}function jf(e,f,j){e=e|0;f=f|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0.0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0;Q=i;i=i+304|0;K=Q+16|0;L=Q+8|0;M=Q+33|0;N=Q;O=Q+32|0;m=a[f>>0]|0;a:do if(m<<24>>24){z=e+4|0;A=e+100|0;B=e+108|0;C=e+8|0;D=M+10|0;F=M+33|0;y=L+4|0;G=M+46|0;H=M+94|0;I=M+1|0;J=e+104|0;q=f;v=0;f=0;l=0;k=0;b:while(1){c:do if(m<<24>>24==32|((m&255)+-9|0)>>>0<5){o=q;while(1){m=o+1|0;x=a[m>>0]|0;if(x<<24>>24==32|((x&255)+-9|0)>>>0<5)o=m;else break}c[J>>2]=0;n=c[C>>2]|0;m=c[z>>2]|0;c[B>>2]=n-m;c[A>>2]=n;d:while(1){if(m>>>0<n>>>0){c[z>>2]=m+1;m=d[m>>0]|0}else m=He(e)|0;switch(m|0){case 9:case 10:case 11:case 12:case 13:case 32:break;default:break d}m=c[z>>2]|0;n=c[A>>2]|0}if(!(c[A>>2]|0))m=c[z>>2]|0;else{m=(c[z>>2]|0)+-1|0;c[z>>2]=m}n=o;o=m+v+(c[B>>2]|0)-(c[C>>2]|0)|0}else{m=m<<24>>24==37;e:do if(m){n=q+1|0;o=a[n>>0]|0;f:do switch(o<<24>>24){case 37:break e;case 42:{x=0;n=q+2|0;break}default:{m=(o&255)+-48|0;if(m>>>0<10?(a[q+2>>0]|0)==36:0){c[K>>2]=c[j>>2];while(1){x=(c[K>>2]|0)+(4-1)&~(4-1);n=c[x>>2]|0;c[K>>2]=x+4;if(m>>>0>1)m=m+-1|0;else break}x=n;n=q+3|0;break f}w=(c[j>>2]|0)+(4-1)&~(4-1);x=c[w>>2]|0;c[j>>2]=w+4}}while(0);m=a[n>>0]|0;o=m&255;if((o+-48|0)>>>0<10){m=0;do{m=o+-48+(m*10|0)|0;n=n+1|0;q=a[n>>0]|0;o=q&255}while((o+-48|0)>>>0<10);t=m;o=q}else{t=0;o=m}if(o<<24>>24==109){o=n+1|0;m=(x|0)!=0&1;l=0;k=0;n=o;o=a[o>>0]|0}else m=0;q=n+1|0;switch(o<<24>>24){case 104:{w=(a[q>>0]|0)==104;o=w?-2:-1;n=w?n+2|0:q;break}case 108:{w=(a[q>>0]|0)==108;o=w?3:1;n=w?n+2|0:q;break}case 106:{o=3;n=q;break}case 116:case 122:{o=1;n=q;break}case 76:{o=2;n=q;break}case 110:case 112:case 67:case 83:case 91:case 99:case 115:case 88:case 71:case 70:case 69:case 65:case 103:case 102:case 101:case 97:case 120:case 117:case 111:case 105:case 100:{o=0;break}default:{P=157;break b}}s=d[n>>0]|0;u=(s&47|0)==3;s=u?s|32:s;u=u?1:o;r=s&255;switch(r<<24>>24){case 99:{t=(t|0)<1?1:t;break}case 91:break;case 110:{if(!x){o=v;break c}switch(u|0){case -2:{a[x>>0]=v;o=v;break c}case -1:{b[x>>1]=v;o=v;break c}case 0:{c[x>>2]=v;o=v;break c}case 1:{c[x>>2]=v;o=v;break c}case 3:{o=x;c[o>>2]=v;c[o+4>>2]=((v|0)<0)<<31>>31;o=v;break c}default:{o=v;break c}}}default:{c[J>>2]=0;q=c[C>>2]|0;o=c[z>>2]|0;c[B>>2]=q-o;c[A>>2]=q;g:while(1){if(o>>>0<q>>>0){c[z>>2]=o+1;o=d[o>>0]|0}else o=He(e)|0;switch(o|0){case 9:case 10:case 11:case 12:case 13:case 32:break;default:break g}o=c[z>>2]|0;q=c[A>>2]|0}if(!(c[A>>2]|0))o=c[z>>2]|0;else{o=(c[z>>2]|0)+-1|0;c[z>>2]=o}v=o+v+(c[B>>2]|0)-(c[C>>2]|0)|0}}c[J>>2]=t;o=c[C>>2]|0;q=c[z>>2]|0;w=o-q|0;c[B>>2]=w;if((t|0)!=0&(w|0)>(t|0)){o=q+t|0;c[A>>2]=o}else c[A>>2]=o;if(q>>>0<o>>>0)c[z>>2]=q+1;else{if((He(e)|0)<0){P=157;break b}o=c[A>>2]|0}if(o|0)c[z>>2]=(c[z>>2]|0)+-1;h:do switch(r<<24>>24){case 91:case 99:case 115:{w=(s|0)==99;i:do if((s|16|0)==115){Mm(I|0,-1,256)|0;a[M>>0]=0;if((s|0)==115){a[F>>0]=0;a[D>>0]=0;a[D+1>>0]=0;a[D+2>>0]=0;a[D+3>>0]=0;a[D+4>>0]=0}}else{r=n+1|0;s=(a[r>>0]|0)==94;q=s&1;n=s?n+2|0:r;Mm(I|0,s&1|0,256)|0;a[M>>0]=0;switch(a[n>>0]|0){case 45:{s=(q^1)&255;a[G>>0]=s;n=n+1|0;break}case 93:{s=(q^1)&255;a[H>>0]=s;n=n+1|0;break}default:s=(q^1)&255}while(1){q=a[n>>0]|0;j:do switch(q<<24>>24){case 0:{P=157;break b}case 93:break i;case 45:{r=n+1|0;q=a[r>>0]|0;switch(q<<24>>24){case 93:case 0:{q=45;break j}default:{}}n=a[n+-1>>0]|0;if((n&255)<(q&255)){n=n&255;do{n=n+1|0;a[M+n>>0]=s;q=a[r>>0]|0}while((n|0)<(q&255|0));n=r}else n=r;break}default:{}}while(0);a[M+((q&255)+1)>>0]=s;n=n+1|0}}while(0);q=w?t+1|0:31;s=(u|0)==1;u=(m|0)!=0;k:do if(s){if(u){l=vf(q<<2)|0;if(!l){k=0;P=157;break b}}else l=x;c[L>>2]=0;c[y>>2]=0;k=0;l:while(1){r=(l|0)==0;do{m:while(1){o=c[z>>2]|0;if(o>>>0<(c[A>>2]|0)>>>0){c[z>>2]=o+1;o=d[o>>0]|0}else o=He(e)|0;if(!(a[M+(o+1)>>0]|0))break l;a[O>>0]=o;switch($e(N,O,1,L)|0){case -1:{k=0;P=157;break b}case -2:break;default:break m}}if(!r){c[l+(k<<2)>>2]=c[N>>2];k=k+1|0}}while(!(u&(k|0)==(q|0)));k=q<<1|1;o=xf(l,k<<2)|0;if(!o){k=0;P=157;break b}else{r=q;q=k;l=o;k=r}}if(!(c[L>>2]|0)){q=k;k=0}else{k=0;P=157;break b}}else{if(u){k=vf(q)|0;if(!k){k=0;l=0;P=157;break b}else l=0;while(1){do{o=c[z>>2]|0;if(o>>>0<(c[A>>2]|0)>>>0){c[z>>2]=o+1;o=d[o>>0]|0}else o=He(e)|0;if(!(a[M+(o+1)>>0]|0)){q=l;l=0;break k}a[k+l>>0]=o;l=l+1|0}while((l|0)!=(q|0));l=q<<1|1;o=xf(k,l)|0;if(!o){l=0;P=157;break b}else{r=q;q=l;k=o;l=r}}}if(!x){l=o;while(1){k=c[z>>2]|0;if(k>>>0<l>>>0){c[z>>2]=k+1;k=d[k>>0]|0}else k=He(e)|0;if(!(a[M+(k+1)>>0]|0)){q=0;k=0;l=0;break k}l=c[A>>2]|0}}else{q=0;l=o;while(1){k=c[z>>2]|0;if(k>>>0<l>>>0){c[z>>2]=k+1;k=d[k>>0]|0}else k=He(e)|0;if(!(a[M+(k+1)>>0]|0)){k=x;l=0;break k}a[x+q>>0]=k;q=q+1|0;l=c[A>>2]|0}}}while(0);if(!(c[A>>2]|0))o=c[z>>2]|0;else{o=(c[z>>2]|0)+-1|0;c[z>>2]=o}o=o-(c[C>>2]|0)+(c[B>>2]|0)|0;if(!o)break b;if(!((o|0)==(t|0)|w^1))break b;do if(u)if(s){c[x>>2]=l;break}else{c[x>>2]=k;break}while(0);if(!w){if(l|0)c[l+(q<<2)>>2]=0;if(!k){k=0;break h}a[k+q>>0]=0}break}case 120:case 88:case 112:{o=16;P=139;break}case 111:{o=8;P=139;break}case 117:case 100:{o=10;P=139;break}case 105:{o=0;P=139;break}case 71:case 103:case 70:case 102:case 69:case 101:case 65:case 97:{p=+df(e,u,0);if((c[B>>2]|0)==((c[C>>2]|0)-(c[z>>2]|0)|0))break b;if(x)switch(u|0){case 0:{g[x>>2]=p;break h}case 1:{h[x>>3]=p;break h}case 2:{h[x>>3]=p;break h}default:break h}break}default:{}}while(0);n:do if((P|0)==139){P=0;o=Ge(e,o,0,-1,-1)|0;if((c[B>>2]|0)==((c[C>>2]|0)-(c[z>>2]|0)|0))break b;if((x|0)!=0&(s|0)==112){c[x>>2]=o;break}if(x)switch(u|0){case -2:{a[x>>0]=o;break n}case -1:{b[x>>1]=o;break n}case 0:{c[x>>2]=o;break n}case 1:{c[x>>2]=o;break n}case 3:{w=x;c[w>>2]=o;c[w+4>>2]=E;break n}default:break n}}while(0);f=((x|0)!=0&1)+f|0;o=(c[B>>2]|0)+v+(c[z>>2]|0)-(c[C>>2]|0)|0;break c}while(0);n=q+(m&1)|0;c[J>>2]=0;x=c[C>>2]|0;m=c[z>>2]|0;c[B>>2]=x-m;c[A>>2]=x;if(m>>>0<x>>>0){c[z>>2]=m+1;m=d[m>>0]|0}else m=He(e)|0;if((m|0)!=(d[n>>0]|0)){P=21;break b}o=v+1|0}while(0);q=n+1|0;m=a[q>>0]|0;if(!(m<<24>>24))break a;else v=o}if((P|0)==21){if(c[A>>2]|0)c[z>>2]=(c[z>>2]|0)+-1;if((f|0)!=0|(m|0)>-1)break;else{m=0;f=l;P=158}}else if((P|0)==157)if(!f){f=l;P=158}if((P|0)==158){l=f;f=-1}if(m){wf(k);wf(l)}}else f=0;while(0);i=Q;return f|0}function kf(){var b=0,e=0,f=0,g=0;g=i;i=i+16|0;f=g;a[f>>0]=10;b=c[486]|0;if(!b)if(!(Ye(1928)|0)){b=c[486]|0;e=4}else b=-1;else e=4;do if((e|0)==4){e=c[487]|0;if(!(e>>>0>=b>>>0|(a[2003]|0)==10)){c[487]=e+1;a[e>>0]=10;b=10;break}if((lb[c[1964>>2]&31](1928,f,1)|0)==1)b=d[f>>0]|0;else b=-1}while(0);i=g;return b|0}function lf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;i=i+16|0;f=e;c[f>>2]=d;Qe(a,b,f)|0;i=e;return}function mf(a){a=a|0;var b=0,d=0,e=0,f=0;f=(c[a>>2]&1|0)!=0;if(!f){ab(21452);d=c[a+52>>2]|0;b=a+56|0;if(d|0)c[d+56>>2]=c[b>>2];b=c[b>>2]|0;if(b|0)c[b+52>>2]=d;if((c[5362]|0)==(a|0))c[5362]=b;Xa(21452);if(!a){if(!(c[538]|0))b=0;else b=gf(c[538]|0)|0;ab(21452);d=c[5362]|0;if(d)do{if((c[d+20>>2]|0)>>>0>(c[d+28>>2]|0)>>>0)b=hf(d)|0|b;d=c[d+56>>2]|0}while((d|0)!=0);Xa(21452)}else e=9}else e=9;if((e|0)==9)b=hf(a)|0;b=sb[c[a+12>>2]&63](a)|0|b;d=c[a+92>>2]|0;if(d|0)wf(d);if(!f)wf(a);return b|0}function nf(a,b){a=a|0;b=b|0;var d=0;a=i;i=i+16|0;d=a;c[d>>2]=b;Qe(2040,14145,d)|0;i=a;return}function of(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=a+84|0;g=c[e>>2]|0;h=d+256|0;f=Me(g,0,h)|0;f=(f|0)==0?h:f-g|0;d=f>>>0<d>>>0?f:d;Vm(b|0,g|0,d|0)|0;c[a+4>>2]=g+d;b=g+f|0;c[a+8>>2]=b;c[e>>2]=b;return d|0}function pf(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;o=i;i=i+128|0;f=o+120|0;n=o+104|0;k=o+88|0;j=o+80|0;h=o+64|0;m=o;e=a[d>>0]|0;do if(Me(17167,e<<24>>24,4)|0){l=Ne(d,43)|0;l=(l|0)==0|(a[l>>0]|0)!=43?e<<24>>24!=114&1:2;g=Ne(d,120)|0;l=(g|0)==0|(a[g>>0]|0)!=120?l:l|128;g=Ne(d,101)|0;l=(g|0)==0|(a[g>>0]|0)!=101?l:l|524288;l=e<<24>>24==114?l:l|64;l=e<<24>>24==119?l|512:l;c[m>>2]=b;c[m+4>>2]=(e<<24>>24==97?l|1024:l)|32768;c[m+8>>2]=438;l=cb(5,m|0)|0;if(l>>>0>4294963200){if(!(c[5356]|0))b=21468;else b=c[(en()|0)+64>>2]|0;c[b>>2]=0-l;b=0;break}if((l|0)<0)b=0;else{e=a[d>>0]|0;if(Me(17167,e<<24>>24,4)|0){b=vf(1144)|0;if(b|0){f=b;g=f+112|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));g=Ne(d,43)|0;if((g|0)==0|(a[g>>0]|0)!=43)c[b>>2]=e<<24>>24==114?8:4;g=Ne(d,101)|0;if(!((g|0)==0|(a[g>>0]|0)!=101)){c[h>>2]=l;c[h+4>>2]=2;c[h+8>>2]=1;Ta(221,h|0)|0;e=a[d>>0]|0}if(e<<24>>24==97){c[j>>2]=l;c[j+4>>2]=3;e=Ta(221,j|0)|0;if(!(e&1024)){c[k>>2]=l;c[k+4>>2]=4;c[k+8>>2]=e|1024;Ta(221,k|0)|0}f=c[b>>2]|128;c[b>>2]=f}else f=c[b>>2]|0;c[b+60>>2]=l;c[b+44>>2]=b+120;c[b+48>>2]=1024;e=b+75|0;a[e>>0]=-1;if((f&8|0)==0?(c[n>>2]=l,c[n+4>>2]=21505,c[n+8>>2]=m,(Wa(54,n|0)|0)==0):0)a[e>>0]=10;c[b+32>>2]=23;c[b+36>>2]=4;c[b+40>>2]=5;c[b+12>>2]=7;if(!(c[5357]|0))c[b+76>>2]=-1;ab(21452);e=c[5362]|0;c[b+56>>2]=e;if(e|0)c[e+52>>2]=b;c[5362]=b;Xa(21452);break}}else{if(!(c[5356]|0))b=21468;else b=c[(en()|0)+64>>2]|0;c[b>>2]=22}c[f>>2]=l;bb(6,f|0)|0;b=0}}else{if(!(c[5356]|0))b=21468;else b=c[(en()|0)+64>>2]|0;c[b>>2]=22;b=0}while(0);i=o;return b|0}function qf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;h=i;i=i+128|0;f=h+16|0;g=h;c[g>>2]=d;d=f;e=d+112|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(e|0));c[f+32>>2]=24;c[f+44>>2]=a;c[f+76>>2]=-1;c[f+84>>2]=a;g=jf(f,b,g)|0;i=h;return g|0}function rf(a){a=a|0;var b=0,d=0;b=(en()|0)+184|0;d=c[b>>2]|0;if(a|0)c[b>>2]=a;return d|0}function sf(a){a=a|0;return dn(a|0)|0}function tf(a){a=a|0;return dn(a|0)|0}function uf(a){a=a|0;return cn(a|0)|0}function vf(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;L=i;i=i+16|0;p=L;do if(a>>>0<245){o=a>>>0<11?16:a+11&-8;a=o>>>3;t=c[5371]|0;d=t>>>a;if(d&3|0){a=(d&1^1)+a|0;d=21524+(a<<1<<2)|0;e=d+8|0;f=c[e>>2]|0;g=f+8|0;h=c[g>>2]|0;do if((d|0)!=(h|0)){if(h>>>0<(c[5375]|0)>>>0)Ua();b=h+12|0;if((c[b>>2]|0)==(f|0)){c[b>>2]=d;c[e>>2]=h;break}else Ua()}else c[5371]=t&~(1<<a);while(0);K=a<<3;c[f+4>>2]=K|3;K=f+K+4|0;c[K>>2]=c[K>>2]|1;K=g;i=L;return K|0}s=c[5373]|0;if(o>>>0>s>>>0){if(d|0){j=2<<a;a=d<<a&(j|0-j);a=(a&0-a)+-1|0;j=a>>>12&16;a=a>>>j;e=a>>>5&8;a=a>>>e;g=a>>>2&4;a=a>>>g;d=a>>>1&2;a=a>>>d;b=a>>>1&1;b=(e|j|g|d|b)+(a>>>b)|0;a=21524+(b<<1<<2)|0;d=a+8|0;g=c[d>>2]|0;j=g+8|0;e=c[j>>2]|0;do if((a|0)!=(e|0)){if(e>>>0<(c[5375]|0)>>>0)Ua();f=e+12|0;if((c[f>>2]|0)==(g|0)){c[f>>2]=a;c[d>>2]=e;k=t;break}else Ua()}else{k=t&~(1<<b);c[5371]=k}while(0);h=(b<<3)-o|0;c[g+4>>2]=o|3;e=g+o|0;c[e+4>>2]=h|1;c[e+h>>2]=h;if(s|0){f=c[5376]|0;b=s>>>3;d=21524+(b<<1<<2)|0;b=1<<b;if(k&b){b=d+8|0;a=c[b>>2]|0;if(a>>>0<(c[5375]|0)>>>0)Ua();else{l=a;m=b}}else{c[5371]=k|b;l=d;m=d+8|0}c[m>>2]=f;c[l+12>>2]=f;c[f+8>>2]=l;c[f+12>>2]=d}c[5373]=h;c[5376]=e;K=j;i=L;return K|0}l=c[5372]|0;if(l){a=(l&0-l)+-1|0;J=a>>>12&16;a=a>>>J;I=a>>>5&8;a=a>>>I;K=a>>>2&4;a=a>>>K;j=a>>>1&2;a=a>>>j;k=a>>>1&1;k=c[21788+((I|J|K|j|k)+(a>>>k)<<2)>>2]|0;a=k;j=k;k=(c[k+4>>2]&-8)-o|0;while(1){b=c[a+16>>2]|0;if(!b){b=c[a+20>>2]|0;if(!b)break}K=(c[b+4>>2]&-8)-o|0;J=K>>>0<k>>>0;a=b;j=J?b:j;k=J?K:k}f=c[5375]|0;if(j>>>0<f>>>0)Ua();h=j+o|0;if(j>>>0>=h>>>0)Ua();g=c[j+24>>2]|0;d=c[j+12>>2]|0;do if((d|0)==(j|0)){a=j+20|0;b=c[a>>2]|0;if(!b){a=j+16|0;b=c[a>>2]|0;if(!b){n=0;break}}while(1){d=b+20|0;e=c[d>>2]|0;if(e|0){b=e;a=d;continue}d=b+16|0;e=c[d>>2]|0;if(!e)break;else{b=e;a=d}}if(a>>>0<f>>>0)Ua();else{c[a>>2]=0;n=b;break}}else{e=c[j+8>>2]|0;if(e>>>0<f>>>0)Ua();b=e+12|0;if((c[b>>2]|0)!=(j|0))Ua();a=d+8|0;if((c[a>>2]|0)==(j|0)){c[b>>2]=d;c[a>>2]=e;n=d;break}else Ua()}while(0);do if(g|0){b=c[j+28>>2]|0;a=21788+(b<<2)|0;if((j|0)==(c[a>>2]|0)){c[a>>2]=n;if(!n){c[5372]=l&~(1<<b);break}}else{if(g>>>0<(c[5375]|0)>>>0)Ua();b=g+16|0;if((c[b>>2]|0)==(j|0))c[b>>2]=n;else c[g+20>>2]=n;if(!n)break}a=c[5375]|0;if(n>>>0<a>>>0)Ua();c[n+24>>2]=g;b=c[j+16>>2]|0;do if(b|0)if(b>>>0<a>>>0)Ua();else{c[n+16>>2]=b;c[b+24>>2]=n;break}while(0);b=c[j+20>>2]|0;if(b|0)if(b>>>0<(c[5375]|0)>>>0)Ua();else{c[n+20>>2]=b;c[b+24>>2]=n;break}}while(0);if(k>>>0<16){K=k+o|0;c[j+4>>2]=K|3;K=j+K+4|0;c[K>>2]=c[K>>2]|1}else{c[j+4>>2]=o|3;c[h+4>>2]=k|1;c[h+k>>2]=k;if(s|0){e=c[5376]|0;b=s>>>3;d=21524+(b<<1<<2)|0;b=1<<b;if(b&t){b=d+8|0;a=c[b>>2]|0;if(a>>>0<(c[5375]|0)>>>0)Ua();else{q=a;r=b}}else{c[5371]=b|t;q=d;r=d+8|0}c[r>>2]=e;c[q+12>>2]=e;c[e+8>>2]=q;c[e+12>>2]=d}c[5373]=k;c[5376]=h}K=j+8|0;i=L;return K|0}}}else if(a>>>0<=4294967231){a=a+11|0;o=a&-8;l=c[5372]|0;if(l){e=0-o|0;a=a>>>8;if(a)if(o>>>0>16777215)k=31;else{r=(a+1048320|0)>>>16&8;D=a<<r;q=(D+520192|0)>>>16&4;D=D<<q;k=(D+245760|0)>>>16&2;k=14-(q|r|k)+(D<<k>>>15)|0;k=o>>>(k+7|0)&1|k<<1}else k=0;a=c[21788+(k<<2)>>2]|0;a:do if(!a){d=0;f=0;D=86}else{f=0;j=a;h=o<<((k|0)==31?0:25-(k>>>1)|0);d=0;while(1){a=(c[j+4>>2]&-8)-o|0;if(a>>>0<e>>>0)if(!a){a=j;e=0;d=j;D=90;break a}else{f=j;e=a}a=c[j+20>>2]|0;j=c[j+16+(h>>>31<<2)>>2]|0;d=(a|0)==0|(a|0)==(j|0)?d:a;a=(j|0)==0;if(a){D=86;break}else h=h<<(a&1^1)}}while(0);if((D|0)==86){if((d|0)==0&(f|0)==0){a=2<<k;a=(a|0-a)&l;if(!a)break;r=(a&0-a)+-1|0;m=r>>>12&16;r=r>>>m;k=r>>>5&8;r=r>>>k;n=r>>>2&4;r=r>>>n;q=r>>>1&2;r=r>>>q;d=r>>>1&1;d=c[21788+((k|m|n|q|d)+(r>>>d)<<2)>>2]|0}if(!d){k=f;j=e}else{a=f;D=90}}if((D|0)==90)while(1){D=0;r=(c[d+4>>2]&-8)-o|0;f=r>>>0<e>>>0;e=f?r:e;a=f?d:a;f=c[d+16>>2]|0;if(f|0){d=f;D=90;continue}d=c[d+20>>2]|0;if(!d){k=a;j=e;break}else D=90}if((k|0)!=0?j>>>0<((c[5373]|0)-o|0)>>>0:0){f=c[5375]|0;if(k>>>0<f>>>0)Ua();h=k+o|0;if(k>>>0>=h>>>0)Ua();g=c[k+24>>2]|0;d=c[k+12>>2]|0;do if((d|0)==(k|0)){a=k+20|0;b=c[a>>2]|0;if(!b){a=k+16|0;b=c[a>>2]|0;if(!b){s=0;break}}while(1){d=b+20|0;e=c[d>>2]|0;if(e|0){b=e;a=d;continue}d=b+16|0;e=c[d>>2]|0;if(!e)break;else{b=e;a=d}}if(a>>>0<f>>>0)Ua();else{c[a>>2]=0;s=b;break}}else{e=c[k+8>>2]|0;if(e>>>0<f>>>0)Ua();b=e+12|0;if((c[b>>2]|0)!=(k|0))Ua();a=d+8|0;if((c[a>>2]|0)==(k|0)){c[b>>2]=d;c[a>>2]=e;s=d;break}else Ua()}while(0);do if(g){b=c[k+28>>2]|0;a=21788+(b<<2)|0;if((k|0)==(c[a>>2]|0)){c[a>>2]=s;if(!s){t=l&~(1<<b);c[5372]=t;break}}else{if(g>>>0<(c[5375]|0)>>>0)Ua();b=g+16|0;if((c[b>>2]|0)==(k|0))c[b>>2]=s;else c[g+20>>2]=s;if(!s){t=l;break}}a=c[5375]|0;if(s>>>0<a>>>0)Ua();c[s+24>>2]=g;b=c[k+16>>2]|0;do if(b|0)if(b>>>0<a>>>0)Ua();else{c[s+16>>2]=b;c[b+24>>2]=s;break}while(0);b=c[k+20>>2]|0;if(b)if(b>>>0<(c[5375]|0)>>>0)Ua();else{c[s+20>>2]=b;c[b+24>>2]=s;t=l;break}else t=l}else t=l;while(0);do if(j>>>0>=16){c[k+4>>2]=o|3;c[h+4>>2]=j|1;c[h+j>>2]=j;b=j>>>3;if(j>>>0<256){d=21524+(b<<1<<2)|0;a=c[5371]|0;b=1<<b;if(a&b){b=d+8|0;a=c[b>>2]|0;if(a>>>0<(c[5375]|0)>>>0)Ua();else{B=a;C=b}}else{c[5371]=a|b;B=d;C=d+8|0}c[C>>2]=h;c[B+12>>2]=h;c[h+8>>2]=B;c[h+12>>2]=d;break}b=j>>>8;if(b)if(j>>>0>16777215)b=31;else{J=(b+1048320|0)>>>16&8;K=b<<J;I=(K+520192|0)>>>16&4;K=K<<I;b=(K+245760|0)>>>16&2;b=14-(I|J|b)+(K<<b>>>15)|0;b=j>>>(b+7|0)&1|b<<1}else b=0;d=21788+(b<<2)|0;c[h+28>>2]=b;a=h+16|0;c[a+4>>2]=0;c[a>>2]=0;a=1<<b;if(!(a&t)){c[5372]=a|t;c[d>>2]=h;c[h+24>>2]=d;c[h+12>>2]=h;c[h+8>>2]=h;break}a=j<<((b|0)==31?0:25-(b>>>1)|0);e=c[d>>2]|0;while(1){if((c[e+4>>2]&-8|0)==(j|0)){D=148;break}d=e+16+(a>>>31<<2)|0;b=c[d>>2]|0;if(!b){D=145;break}else{a=a<<1;e=b}}if((D|0)==145)if(d>>>0<(c[5375]|0)>>>0)Ua();else{c[d>>2]=h;c[h+24>>2]=e;c[h+12>>2]=h;c[h+8>>2]=h;break}else if((D|0)==148){b=e+8|0;a=c[b>>2]|0;K=c[5375]|0;if(a>>>0>=K>>>0&e>>>0>=K>>>0){c[a+12>>2]=h;c[b>>2]=h;c[h+8>>2]=a;c[h+12>>2]=e;c[h+24>>2]=0;break}else Ua()}}else{K=j+o|0;c[k+4>>2]=K|3;K=k+K+4|0;c[K>>2]=c[K>>2]|1}while(0);K=k+8|0;i=L;return K|0}}}else o=-1;while(0);d=c[5373]|0;if(d>>>0>=o>>>0){b=d-o|0;a=c[5376]|0;if(b>>>0>15){K=a+o|0;c[5376]=K;c[5373]=b;c[K+4>>2]=b|1;c[K+b>>2]=b;c[a+4>>2]=o|3}else{c[5373]=0;c[5376]=0;c[a+4>>2]=d|3;K=a+d+4|0;c[K>>2]=c[K>>2]|1}K=a+8|0;i=L;return K|0}j=c[5374]|0;if(j>>>0>o>>>0){I=j-o|0;c[5374]=I;K=c[5377]|0;J=K+o|0;c[5377]=J;c[J+4>>2]=I|1;c[K+4>>2]=o|3;K=K+8|0;i=L;return K|0}if(!(c[5489]|0)){c[5491]=4096;c[5490]=4096;c[5492]=-1;c[5493]=-1;c[5494]=0;c[5482]=0;a=p&-16^1431655768;c[p>>2]=a;c[5489]=a;a=4096}else a=c[5491]|0;k=o+48|0;l=o+47|0;h=a+l|0;f=0-a|0;m=h&f;if(m>>>0<=o>>>0){K=0;i=L;return K|0}a=c[5481]|0;if(a|0?(B=c[5479]|0,C=B+m|0,C>>>0<=B>>>0|C>>>0>a>>>0):0){K=0;i=L;return K|0}b:do if(!(c[5482]&4)){d=c[5377]|0;c:do if(d){e=21932;while(1){a=c[e>>2]|0;if(a>>>0<=d>>>0?(u=e+4|0,(a+(c[u>>2]|0)|0)>>>0>d>>>0):0)break;a=c[e+8>>2]|0;if(!a){D=172;break c}else e=a}d=h-j&f;if(d>>>0<2147483647){a=Zm(d|0)|0;if((a|0)==((c[e>>2]|0)+(c[u>>2]|0)|0)){if((a|0)!=(-1|0)){h=d;g=a;D=190;break b}}else{b=d;D=180}}}else D=172;while(0);do if(((D|0)==172?(g=Zm(0)|0,(g|0)!=(-1|0)):0)?(b=g,v=c[5490]|0,w=v+-1|0,b=((w&b|0)==0?0:(w+b&0-v)-b|0)+m|0,v=c[5479]|0,w=b+v|0,b>>>0>o>>>0&b>>>0<2147483647):0){C=c[5481]|0;if(C|0?w>>>0<=v>>>0|w>>>0>C>>>0:0)break;a=Zm(b|0)|0;if((a|0)==(g|0)){h=b;D=190;break b}else D=180}while(0);d:do if((D|0)==180){d=0-b|0;do if(k>>>0>b>>>0&(b>>>0<2147483647&(a|0)!=(-1|0))?(x=c[5491]|0,x=l-b+x&0-x,x>>>0<2147483647):0)if((Zm(x|0)|0)==(-1|0)){Zm(d|0)|0;break d}else{b=x+b|0;break}while(0);if((a|0)!=(-1|0)){h=b;g=a;D=190;break b}}while(0);c[5482]=c[5482]|4;D=187}else D=187;while(0);if((((D|0)==187?m>>>0<2147483647:0)?(A=Zm(m|0)|0,y=Zm(0)|0,A>>>0<y>>>0&((A|0)!=(-1|0)&(y|0)!=(-1|0))):0)?(z=y-A|0,z>>>0>(o+40|0)>>>0):0){h=z;g=A;D=190}if((D|0)==190){b=(c[5479]|0)+h|0;c[5479]=b;if(b>>>0>(c[5480]|0)>>>0)c[5480]=b;l=c[5377]|0;do if(l){b=21932;while(1){a=c[b>>2]|0;d=b+4|0;e=c[d>>2]|0;if((g|0)==(a+e|0)){D=200;break}f=c[b+8>>2]|0;if(!f)break;else b=f}if(((D|0)==200?(c[b+12>>2]&8|0)==0:0)?l>>>0<g>>>0&l>>>0>=a>>>0:0){c[d>>2]=e+h;K=l+8|0;K=(K&7|0)==0?0:0-K&7;J=l+K|0;K=(c[5374]|0)+(h-K)|0;c[5377]=J;c[5374]=K;c[J+4>>2]=K|1;c[J+K+4>>2]=40;c[5378]=c[5493];break}b=c[5375]|0;if(g>>>0<b>>>0){c[5375]=g;j=g}else j=b;a=g+h|0;b=21932;while(1){if((c[b>>2]|0)==(a|0)){D=208;break}b=c[b+8>>2]|0;if(!b){a=21932;break}}if((D|0)==208)if(!(c[b+12>>2]&8)){c[b>>2]=g;n=b+4|0;c[n>>2]=(c[n>>2]|0)+h;n=g+8|0;n=g+((n&7|0)==0?0:0-n&7)|0;b=a+8|0;b=a+((b&7|0)==0?0:0-b&7)|0;m=n+o|0;k=b-n-o|0;c[n+4>>2]=o|3;do if((b|0)!=(l|0)){if((b|0)==(c[5376]|0)){K=(c[5373]|0)+k|0;c[5373]=K;c[5376]=m;c[m+4>>2]=K|1;c[m+K>>2]=K;break}a=c[b+4>>2]|0;if((a&3|0)==1){h=a&-8;f=a>>>3;e:do if(a>>>0>=256){g=c[b+24>>2]|0;e=c[b+12>>2]|0;do if((e|0)==(b|0)){e=b+16|0;d=e+4|0;a=c[d>>2]|0;if(!a){a=c[e>>2]|0;if(!a){I=0;break}else d=e}while(1){e=a+20|0;f=c[e>>2]|0;if(f|0){a=f;d=e;continue}e=a+16|0;f=c[e>>2]|0;if(!f)break;else{a=f;d=e}}if(d>>>0<j>>>0)Ua();else{c[d>>2]=0;I=a;break}}else{f=c[b+8>>2]|0;if(f>>>0<j>>>0)Ua();a=f+12|0;if((c[a>>2]|0)!=(b|0))Ua();d=e+8|0;if((c[d>>2]|0)==(b|0)){c[a>>2]=e;c[d>>2]=f;I=e;break}else Ua()}while(0);if(!g)break;a=c[b+28>>2]|0;d=21788+(a<<2)|0;do if((b|0)!=(c[d>>2]|0)){if(g>>>0<(c[5375]|0)>>>0)Ua();a=g+16|0;if((c[a>>2]|0)==(b|0))c[a>>2]=I;else c[g+20>>2]=I;if(!I)break e}else{c[d>>2]=I;if(I|0)break;c[5372]=c[5372]&~(1<<a);break e}while(0);e=c[5375]|0;if(I>>>0<e>>>0)Ua();c[I+24>>2]=g;a=b+16|0;d=c[a>>2]|0;do if(d|0)if(d>>>0<e>>>0)Ua();else{c[I+16>>2]=d;c[d+24>>2]=I;break}while(0);a=c[a+4>>2]|0;if(!a)break;if(a>>>0<(c[5375]|0)>>>0)Ua();else{c[I+20>>2]=a;c[a+24>>2]=I;break}}else{d=c[b+8>>2]|0;e=c[b+12>>2]|0;a=21524+(f<<1<<2)|0;do if((d|0)!=(a|0)){if(d>>>0<j>>>0)Ua();if((c[d+12>>2]|0)==(b|0))break;Ua()}while(0);if((e|0)==(d|0)){c[5371]=c[5371]&~(1<<f);break}do if((e|0)==(a|0))F=e+8|0;else{if(e>>>0<j>>>0)Ua();a=e+8|0;if((c[a>>2]|0)==(b|0)){F=a;break}Ua()}while(0);c[d+12>>2]=e;c[F>>2]=d}while(0);b=b+h|0;f=h+k|0}else f=k;b=b+4|0;c[b>>2]=c[b>>2]&-2;c[m+4>>2]=f|1;c[m+f>>2]=f;b=f>>>3;if(f>>>0<256){d=21524+(b<<1<<2)|0;a=c[5371]|0;b=1<<b;do if(!(a&b)){c[5371]=a|b;J=d;K=d+8|0}else{b=d+8|0;a=c[b>>2]|0;if(a>>>0>=(c[5375]|0)>>>0){J=a;K=b;break}Ua()}while(0);c[K>>2]=m;c[J+12>>2]=m;c[m+8>>2]=J;c[m+12>>2]=d;break}b=f>>>8;do if(!b)b=0;else{if(f>>>0>16777215){b=31;break}J=(b+1048320|0)>>>16&8;K=b<<J;I=(K+520192|0)>>>16&4;K=K<<I;b=(K+245760|0)>>>16&2;b=14-(I|J|b)+(K<<b>>>15)|0;b=f>>>(b+7|0)&1|b<<1}while(0);e=21788+(b<<2)|0;c[m+28>>2]=b;a=m+16|0;c[a+4>>2]=0;c[a>>2]=0;a=c[5372]|0;d=1<<b;if(!(a&d)){c[5372]=a|d;c[e>>2]=m;c[m+24>>2]=e;c[m+12>>2]=m;c[m+8>>2]=m;break}a=f<<((b|0)==31?0:25-(b>>>1)|0);e=c[e>>2]|0;while(1){if((c[e+4>>2]&-8|0)==(f|0)){D=278;break}d=e+16+(a>>>31<<2)|0;b=c[d>>2]|0;if(!b){D=275;break}else{a=a<<1;e=b}}if((D|0)==275)if(d>>>0<(c[5375]|0)>>>0)Ua();else{c[d>>2]=m;c[m+24>>2]=e;c[m+12>>2]=m;c[m+8>>2]=m;break}else if((D|0)==278){b=e+8|0;a=c[b>>2]|0;K=c[5375]|0;if(a>>>0>=K>>>0&e>>>0>=K>>>0){c[a+12>>2]=m;c[b>>2]=m;c[m+8>>2]=a;c[m+12>>2]=e;c[m+24>>2]=0;break}else Ua()}}else{K=(c[5374]|0)+k|0;c[5374]=K;c[5377]=m;c[m+4>>2]=K|1}while(0);K=n+8|0;i=L;return K|0}else a=21932;while(1){b=c[a>>2]|0;if(b>>>0<=l>>>0?(E=b+(c[a+4>>2]|0)|0,E>>>0>l>>>0):0)break;a=c[a+8>>2]|0}f=E+-47|0;a=f+8|0;a=f+((a&7|0)==0?0:0-a&7)|0;f=l+16|0;a=a>>>0<f>>>0?l:a;b=a+8|0;d=g+8|0;d=(d&7|0)==0?0:0-d&7;K=g+d|0;d=h+-40-d|0;c[5377]=K;c[5374]=d;c[K+4>>2]=d|1;c[K+d+4>>2]=40;c[5378]=c[5493];d=a+4|0;c[d>>2]=27;c[b>>2]=c[5483];c[b+4>>2]=c[5484];c[b+8>>2]=c[5485];c[b+12>>2]=c[5486];c[5483]=g;c[5484]=h;c[5486]=0;c[5485]=b;b=a+24|0;do{b=b+4|0;c[b>>2]=7}while((b+4|0)>>>0<E>>>0);if((a|0)!=(l|0)){g=a-l|0;c[d>>2]=c[d>>2]&-2;c[l+4>>2]=g|1;c[a>>2]=g;b=g>>>3;if(g>>>0<256){d=21524+(b<<1<<2)|0;a=c[5371]|0;b=1<<b;if(a&b){b=d+8|0;a=c[b>>2]|0;if(a>>>0<(c[5375]|0)>>>0)Ua();else{G=a;H=b}}else{c[5371]=a|b;G=d;H=d+8|0}c[H>>2]=l;c[G+12>>2]=l;c[l+8>>2]=G;c[l+12>>2]=d;break}b=g>>>8;if(b)if(g>>>0>16777215)d=31;else{J=(b+1048320|0)>>>16&8;K=b<<J;I=(K+520192|0)>>>16&4;K=K<<I;d=(K+245760|0)>>>16&2;d=14-(I|J|d)+(K<<d>>>15)|0;d=g>>>(d+7|0)&1|d<<1}else d=0;e=21788+(d<<2)|0;c[l+28>>2]=d;c[l+20>>2]=0;c[f>>2]=0;b=c[5372]|0;a=1<<d;if(!(b&a)){c[5372]=b|a;c[e>>2]=l;c[l+24>>2]=e;c[l+12>>2]=l;c[l+8>>2]=l;break}a=g<<((d|0)==31?0:25-(d>>>1)|0);e=c[e>>2]|0;while(1){if((c[e+4>>2]&-8|0)==(g|0)){D=304;break}d=e+16+(a>>>31<<2)|0;b=c[d>>2]|0;if(!b){D=301;break}else{a=a<<1;e=b}}if((D|0)==301)if(d>>>0<(c[5375]|0)>>>0)Ua();else{c[d>>2]=l;c[l+24>>2]=e;c[l+12>>2]=l;c[l+8>>2]=l;break}else if((D|0)==304){b=e+8|0;a=c[b>>2]|0;K=c[5375]|0;if(a>>>0>=K>>>0&e>>>0>=K>>>0){c[a+12>>2]=l;c[b>>2]=l;c[l+8>>2]=a;c[l+12>>2]=e;c[l+24>>2]=0;break}else Ua()}}}else{K=c[5375]|0;if((K|0)==0|g>>>0<K>>>0)c[5375]=g;c[5483]=g;c[5484]=h;c[5486]=0;c[5380]=c[5489];c[5379]=-1;b=0;do{K=21524+(b<<1<<2)|0;c[K+12>>2]=K;c[K+8>>2]=K;b=b+1|0}while((b|0)!=32);K=g+8|0;K=(K&7|0)==0?0:0-K&7;J=g+K|0;K=h+-40-K|0;c[5377]=J;c[5374]=K;c[J+4>>2]=K|1;c[J+K+4>>2]=40;c[5378]=c[5493]}while(0);b=c[5374]|0;if(b>>>0>o>>>0){I=b-o|0;c[5374]=I;K=c[5377]|0;J=K+o|0;c[5377]=J;c[J+4>>2]=I|1;c[K+4>>2]=o|3;K=K+8|0;i=L;return K|0}}if(!(c[5356]|0))b=21468;else b=c[(en()|0)+64>>2]|0;c[b>>2]=12;K=0;i=L;return K|0}function wf(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;if(!a)return;d=a+-8|0;h=c[5375]|0;if(d>>>0<h>>>0)Ua();a=c[a+-4>>2]|0;b=a&3;if((b|0)==1)Ua();e=a&-8;n=d+e|0;do if(!(a&1)){a=c[d>>2]|0;if(!b)return;k=d+(0-a)|0;j=a+e|0;if(k>>>0<h>>>0)Ua();if((k|0)==(c[5376]|0)){a=n+4|0;b=c[a>>2]|0;if((b&3|0)!=3){q=k;f=j;break}c[5373]=j;c[a>>2]=b&-2;c[k+4>>2]=j|1;c[k+j>>2]=j;return}e=a>>>3;if(a>>>0<256){b=c[k+8>>2]|0;d=c[k+12>>2]|0;a=21524+(e<<1<<2)|0;if((b|0)!=(a|0)){if(b>>>0<h>>>0)Ua();if((c[b+12>>2]|0)!=(k|0))Ua()}if((d|0)==(b|0)){c[5371]=c[5371]&~(1<<e);q=k;f=j;break}if((d|0)!=(a|0)){if(d>>>0<h>>>0)Ua();a=d+8|0;if((c[a>>2]|0)==(k|0))g=a;else Ua()}else g=d+8|0;c[b+12>>2]=d;c[g>>2]=b;q=k;f=j;break}g=c[k+24>>2]|0;d=c[k+12>>2]|0;do if((d|0)==(k|0)){d=k+16|0;b=d+4|0;a=c[b>>2]|0;if(!a){a=c[d>>2]|0;if(!a){i=0;break}else b=d}while(1){d=a+20|0;e=c[d>>2]|0;if(e|0){a=e;b=d;continue}d=a+16|0;e=c[d>>2]|0;if(!e)break;else{a=e;b=d}}if(b>>>0<h>>>0)Ua();else{c[b>>2]=0;i=a;break}}else{e=c[k+8>>2]|0;if(e>>>0<h>>>0)Ua();a=e+12|0;if((c[a>>2]|0)!=(k|0))Ua();b=d+8|0;if((c[b>>2]|0)==(k|0)){c[a>>2]=d;c[b>>2]=e;i=d;break}else Ua()}while(0);if(g){a=c[k+28>>2]|0;b=21788+(a<<2)|0;if((k|0)==(c[b>>2]|0)){c[b>>2]=i;if(!i){c[5372]=c[5372]&~(1<<a);q=k;f=j;break}}else{if(g>>>0<(c[5375]|0)>>>0)Ua();a=g+16|0;if((c[a>>2]|0)==(k|0))c[a>>2]=i;else c[g+20>>2]=i;if(!i){q=k;f=j;break}}d=c[5375]|0;if(i>>>0<d>>>0)Ua();c[i+24>>2]=g;a=k+16|0;b=c[a>>2]|0;do if(b|0)if(b>>>0<d>>>0)Ua();else{c[i+16>>2]=b;c[b+24>>2]=i;break}while(0);a=c[a+4>>2]|0;if(a)if(a>>>0<(c[5375]|0)>>>0)Ua();else{c[i+20>>2]=a;c[a+24>>2]=i;q=k;f=j;break}else{q=k;f=j}}else{q=k;f=j}}else{q=d;f=e}while(0);if(q>>>0>=n>>>0)Ua();a=n+4|0;b=c[a>>2]|0;if(!(b&1))Ua();if(!(b&2)){if((n|0)==(c[5377]|0)){p=(c[5374]|0)+f|0;c[5374]=p;c[5377]=q;c[q+4>>2]=p|1;if((q|0)!=(c[5376]|0))return;c[5376]=0;c[5373]=0;return}if((n|0)==(c[5376]|0)){p=(c[5373]|0)+f|0;c[5373]=p;c[5376]=q;c[q+4>>2]=p|1;c[q+p>>2]=p;return}f=(b&-8)+f|0;e=b>>>3;do if(b>>>0>=256){g=c[n+24>>2]|0;a=c[n+12>>2]|0;do if((a|0)==(n|0)){d=n+16|0;b=d+4|0;a=c[b>>2]|0;if(!a){a=c[d>>2]|0;if(!a){m=0;break}else b=d}while(1){d=a+20|0;e=c[d>>2]|0;if(e|0){a=e;b=d;continue}d=a+16|0;e=c[d>>2]|0;if(!e)break;else{a=e;b=d}}if(b>>>0<(c[5375]|0)>>>0)Ua();else{c[b>>2]=0;m=a;break}}else{b=c[n+8>>2]|0;if(b>>>0<(c[5375]|0)>>>0)Ua();d=b+12|0;if((c[d>>2]|0)!=(n|0))Ua();e=a+8|0;if((c[e>>2]|0)==(n|0)){c[d>>2]=a;c[e>>2]=b;m=a;break}else Ua()}while(0);if(g|0){a=c[n+28>>2]|0;b=21788+(a<<2)|0;if((n|0)==(c[b>>2]|0)){c[b>>2]=m;if(!m){c[5372]=c[5372]&~(1<<a);break}}else{if(g>>>0<(c[5375]|0)>>>0)Ua();a=g+16|0;if((c[a>>2]|0)==(n|0))c[a>>2]=m;else c[g+20>>2]=m;if(!m)break}d=c[5375]|0;if(m>>>0<d>>>0)Ua();c[m+24>>2]=g;a=n+16|0;b=c[a>>2]|0;do if(b|0)if(b>>>0<d>>>0)Ua();else{c[m+16>>2]=b;c[b+24>>2]=m;break}while(0);a=c[a+4>>2]|0;if(a|0)if(a>>>0<(c[5375]|0)>>>0)Ua();else{c[m+20>>2]=a;c[a+24>>2]=m;break}}}else{b=c[n+8>>2]|0;d=c[n+12>>2]|0;a=21524+(e<<1<<2)|0;if((b|0)!=(a|0)){if(b>>>0<(c[5375]|0)>>>0)Ua();if((c[b+12>>2]|0)!=(n|0))Ua()}if((d|0)==(b|0)){c[5371]=c[5371]&~(1<<e);break}if((d|0)!=(a|0)){if(d>>>0<(c[5375]|0)>>>0)Ua();a=d+8|0;if((c[a>>2]|0)==(n|0))l=a;else Ua()}else l=d+8|0;c[b+12>>2]=d;c[l>>2]=b}while(0);c[q+4>>2]=f|1;c[q+f>>2]=f;if((q|0)==(c[5376]|0)){c[5373]=f;return}}else{c[a>>2]=b&-2;c[q+4>>2]=f|1;c[q+f>>2]=f}a=f>>>3;if(f>>>0<256){d=21524+(a<<1<<2)|0;b=c[5371]|0;a=1<<a;if(b&a){a=d+8|0;b=c[a>>2]|0;if(b>>>0<(c[5375]|0)>>>0)Ua();else{o=b;p=a}}else{c[5371]=b|a;o=d;p=d+8|0}c[p>>2]=q;c[o+12>>2]=q;c[q+8>>2]=o;c[q+12>>2]=d;return}a=f>>>8;if(a)if(f>>>0>16777215)a=31;else{o=(a+1048320|0)>>>16&8;p=a<<o;n=(p+520192|0)>>>16&4;p=p<<n;a=(p+245760|0)>>>16&2;a=14-(n|o|a)+(p<<a>>>15)|0;a=f>>>(a+7|0)&1|a<<1}else a=0;e=21788+(a<<2)|0;c[q+28>>2]=a;c[q+20>>2]=0;c[q+16>>2]=0;b=c[5372]|0;d=1<<a;do if(b&d){b=f<<((a|0)==31?0:25-(a>>>1)|0);e=c[e>>2]|0;while(1){if((c[e+4>>2]&-8|0)==(f|0)){a=130;break}d=e+16+(b>>>31<<2)|0;a=c[d>>2]|0;if(!a){a=127;break}else{b=b<<1;e=a}}if((a|0)==127)if(d>>>0<(c[5375]|0)>>>0)Ua();else{c[d>>2]=q;c[q+24>>2]=e;c[q+12>>2]=q;c[q+8>>2]=q;break}else if((a|0)==130){a=e+8|0;b=c[a>>2]|0;p=c[5375]|0;if(b>>>0>=p>>>0&e>>>0>=p>>>0){c[b+12>>2]=q;c[a>>2]=q;c[q+8>>2]=b;c[q+12>>2]=e;c[q+24>>2]=0;break}else Ua()}}else{c[5372]=b|d;c[e>>2]=q;c[q+24>>2]=e;c[q+12>>2]=q;c[q+8>>2]=q}while(0);q=(c[5379]|0)+-1|0;c[5379]=q;if(!q)a=21940;else return;while(1){a=c[a>>2]|0;if(!a)break;else a=a+8|0}c[5379]=-1;return}function xf(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;if(!a){a=vf(b)|0;return a|0}if(b>>>0>4294967231){if(!(c[5356]|0))d=21468;else d=c[(en()|0)+64>>2]|0;c[d>>2]=12;a=0;return a|0}n=b>>>0<11?16:b+11&-8;m=a+-8|0;p=a+-4|0;o=c[p>>2]|0;d=o&-8;j=a+(d+-8)|0;h=c[5375]|0;e=o&3;if(!((e|0)!=1&m>>>0>=h>>>0&(d|0)>0))Ua();f=c[j+4>>2]|0;if(!(f&1))Ua();do if(!e){if(!(n>>>0<256|d>>>0<(n|4)>>>0)?(d-n|0)>>>0<=c[5491]<<1>>>0:0)return a|0}else{if(d>>>0>=n>>>0){d=d-n|0;if(d>>>0<=15)return a|0;m=m+n|0;c[p>>2]=o&1|n|2;c[m+4>>2]=d|3;p=m+d+4|0;c[p>>2]=c[p>>2]|1;yf(m,d);return a|0}if((j|0)==(c[5377]|0)){d=(c[5374]|0)+d|0;if(d>>>0<=n>>>0)break;l=d-n|0;m=m+n|0;c[p>>2]=o&1|n|2;c[m+4>>2]=l|1;c[5377]=m;c[5374]=l;return a|0}if((j|0)==(c[5376]|0)){e=(c[5373]|0)+d|0;if(e>>>0<n>>>0)break;d=e-n|0;if(d>>>0>15){e=m+n|0;m=e+d|0;c[p>>2]=o&1|n|2;c[e+4>>2]=d|1;c[m>>2]=d;p=m+4|0;c[p>>2]=c[p>>2]&-2}else{c[p>>2]=o&1|e|2;e=m+e+4|0;c[e>>2]=c[e>>2]|1;e=0;d=0}c[5373]=d;c[5376]=e;return a|0}if((f&2|0)==0?(l=(f&-8)+d|0,l>>>0>=n>>>0):0){k=l-n|0;b=f>>>3;do if(f>>>0>=256){g=c[j+24>>2]|0;f=c[j+12>>2]|0;do if((f|0)==(j|0)){f=j+16|0;e=f+4|0;d=c[e>>2]|0;if(!d){d=c[f>>2]|0;if(!d){i=0;break}else e=f}while(1){f=d+20|0;b=c[f>>2]|0;if(b|0){d=b;e=f;continue}f=d+16|0;b=c[f>>2]|0;if(!b)break;else{d=b;e=f}}if(e>>>0<h>>>0)Ua();else{c[e>>2]=0;i=d;break}}else{b=c[j+8>>2]|0;if(b>>>0<h>>>0)Ua();d=b+12|0;if((c[d>>2]|0)!=(j|0))Ua();e=f+8|0;if((c[e>>2]|0)==(j|0)){c[d>>2]=f;c[e>>2]=b;i=f;break}else Ua()}while(0);if(g|0){d=c[j+28>>2]|0;e=21788+(d<<2)|0;if((j|0)==(c[e>>2]|0)){c[e>>2]=i;if(!i){c[5372]=c[5372]&~(1<<d);break}}else{if(g>>>0<(c[5375]|0)>>>0)Ua();d=g+16|0;if((c[d>>2]|0)==(j|0))c[d>>2]=i;else c[g+20>>2]=i;if(!i)break}f=c[5375]|0;if(i>>>0<f>>>0)Ua();c[i+24>>2]=g;d=j+16|0;e=c[d>>2]|0;do if(e|0)if(e>>>0<f>>>0)Ua();else{c[i+16>>2]=e;c[e+24>>2]=i;break}while(0);d=c[d+4>>2]|0;if(d|0)if(d>>>0<(c[5375]|0)>>>0)Ua();else{c[i+20>>2]=d;c[d+24>>2]=i;break}}}else{e=c[j+8>>2]|0;f=c[j+12>>2]|0;d=21524+(b<<1<<2)|0;if((e|0)!=(d|0)){if(e>>>0<h>>>0)Ua();if((c[e+12>>2]|0)!=(j|0))Ua()}if((f|0)==(e|0)){c[5371]=c[5371]&~(1<<b);break}if((f|0)!=(d|0)){if(f>>>0<h>>>0)Ua();d=f+8|0;if((c[d>>2]|0)==(j|0))g=d;else Ua()}else g=f+8|0;c[e+12>>2]=f;c[g>>2]=e}while(0);if(k>>>0<16){c[p>>2]=o&1|l|2;p=m+l+4|0;c[p>>2]=c[p>>2]|1;return a|0}else{m=m+n|0;c[p>>2]=o&1|n|2;c[m+4>>2]=k|3;p=m+k+4|0;c[p>>2]=c[p>>2]|1;yf(m,k);return a|0}}}while(0);d=vf(b)|0;if(!d){a=0;return a|0}p=c[p>>2]|0;p=(p&-8)-((p&3|0)==0?8:4)|0;Vm(d|0,a|0,(p>>>0<b>>>0?p:b)|0)|0;wf(a);a=d;return a|0}function yf(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;o=a+b|0;d=c[a+4>>2]|0;do if(!(d&1)){g=c[a>>2]|0;if(!(d&3))return;l=a+(0-g)|0;k=g+b|0;i=c[5375]|0;if(l>>>0<i>>>0)Ua();if((l|0)==(c[5376]|0)){a=o+4|0;d=c[a>>2]|0;if((d&3|0)!=3){r=l;f=k;break}c[5373]=k;c[a>>2]=d&-2;c[l+4>>2]=k|1;c[l+k>>2]=k;return}e=g>>>3;if(g>>>0<256){d=c[l+8>>2]|0;b=c[l+12>>2]|0;a=21524+(e<<1<<2)|0;if((d|0)!=(a|0)){if(d>>>0<i>>>0)Ua();if((c[d+12>>2]|0)!=(l|0))Ua()}if((b|0)==(d|0)){c[5371]=c[5371]&~(1<<e);r=l;f=k;break}if((b|0)!=(a|0)){if(b>>>0<i>>>0)Ua();a=b+8|0;if((c[a>>2]|0)==(l|0))h=a;else Ua()}else h=b+8|0;c[d+12>>2]=b;c[h>>2]=d;r=l;f=k;break}g=c[l+24>>2]|0;b=c[l+12>>2]|0;do if((b|0)==(l|0)){b=l+16|0;d=b+4|0;a=c[d>>2]|0;if(!a){a=c[b>>2]|0;if(!a){j=0;break}else d=b}while(1){b=a+20|0;e=c[b>>2]|0;if(e|0){a=e;d=b;continue}b=a+16|0;e=c[b>>2]|0;if(!e)break;else{a=e;d=b}}if(d>>>0<i>>>0)Ua();else{c[d>>2]=0;j=a;break}}else{e=c[l+8>>2]|0;if(e>>>0<i>>>0)Ua();a=e+12|0;if((c[a>>2]|0)!=(l|0))Ua();d=b+8|0;if((c[d>>2]|0)==(l|0)){c[a>>2]=b;c[d>>2]=e;j=b;break}else Ua()}while(0);if(g){a=c[l+28>>2]|0;d=21788+(a<<2)|0;if((l|0)==(c[d>>2]|0)){c[d>>2]=j;if(!j){c[5372]=c[5372]&~(1<<a);r=l;f=k;break}}else{if(g>>>0<(c[5375]|0)>>>0)Ua();a=g+16|0;if((c[a>>2]|0)==(l|0))c[a>>2]=j;else c[g+20>>2]=j;if(!j){r=l;f=k;break}}b=c[5375]|0;if(j>>>0<b>>>0)Ua();c[j+24>>2]=g;a=l+16|0;d=c[a>>2]|0;do if(d|0)if(d>>>0<b>>>0)Ua();else{c[j+16>>2]=d;c[d+24>>2]=j;break}while(0);a=c[a+4>>2]|0;if(a)if(a>>>0<(c[5375]|0)>>>0)Ua();else{c[j+20>>2]=a;c[a+24>>2]=j;r=l;f=k;break}else{r=l;f=k}}else{r=l;f=k}}else{r=a;f=b}while(0);h=c[5375]|0;if(o>>>0<h>>>0)Ua();a=o+4|0;d=c[a>>2]|0;if(!(d&2)){if((o|0)==(c[5377]|0)){q=(c[5374]|0)+f|0;c[5374]=q;c[5377]=r;c[r+4>>2]=q|1;if((r|0)!=(c[5376]|0))return;c[5376]=0;c[5373]=0;return}if((o|0)==(c[5376]|0)){q=(c[5373]|0)+f|0;c[5373]=q;c[5376]=r;c[r+4>>2]=q|1;c[r+q>>2]=q;return}f=(d&-8)+f|0;e=d>>>3;do if(d>>>0>=256){g=c[o+24>>2]|0;b=c[o+12>>2]|0;do if((b|0)==(o|0)){b=o+16|0;d=b+4|0;a=c[d>>2]|0;if(!a){a=c[b>>2]|0;if(!a){n=0;break}else d=b}while(1){b=a+20|0;e=c[b>>2]|0;if(e|0){a=e;d=b;continue}b=a+16|0;e=c[b>>2]|0;if(!e)break;else{a=e;d=b}}if(d>>>0<h>>>0)Ua();else{c[d>>2]=0;n=a;break}}else{e=c[o+8>>2]|0;if(e>>>0<h>>>0)Ua();a=e+12|0;if((c[a>>2]|0)!=(o|0))Ua();d=b+8|0;if((c[d>>2]|0)==(o|0)){c[a>>2]=b;c[d>>2]=e;n=b;break}else Ua()}while(0);if(g|0){a=c[o+28>>2]|0;d=21788+(a<<2)|0;if((o|0)==(c[d>>2]|0)){c[d>>2]=n;if(!n){c[5372]=c[5372]&~(1<<a);break}}else{if(g>>>0<(c[5375]|0)>>>0)Ua();a=g+16|0;if((c[a>>2]|0)==(o|0))c[a>>2]=n;else c[g+20>>2]=n;if(!n)break}b=c[5375]|0;if(n>>>0<b>>>0)Ua();c[n+24>>2]=g;a=o+16|0;d=c[a>>2]|0;do if(d|0)if(d>>>0<b>>>0)Ua();else{c[n+16>>2]=d;c[d+24>>2]=n;break}while(0);a=c[a+4>>2]|0;if(a|0)if(a>>>0<(c[5375]|0)>>>0)Ua();else{c[n+20>>2]=a;c[a+24>>2]=n;break}}}else{d=c[o+8>>2]|0;b=c[o+12>>2]|0;a=21524+(e<<1<<2)|0;if((d|0)!=(a|0)){if(d>>>0<h>>>0)Ua();if((c[d+12>>2]|0)!=(o|0))Ua()}if((b|0)==(d|0)){c[5371]=c[5371]&~(1<<e);break}if((b|0)!=(a|0)){if(b>>>0<h>>>0)Ua();a=b+8|0;if((c[a>>2]|0)==(o|0))m=a;else Ua()}else m=b+8|0;c[d+12>>2]=b;c[m>>2]=d}while(0);c[r+4>>2]=f|1;c[r+f>>2]=f;if((r|0)==(c[5376]|0)){c[5373]=f;return}}else{c[a>>2]=d&-2;c[r+4>>2]=f|1;c[r+f>>2]=f}a=f>>>3;if(f>>>0<256){b=21524+(a<<1<<2)|0;d=c[5371]|0;a=1<<a;if(d&a){a=b+8|0;d=c[a>>2]|0;if(d>>>0<(c[5375]|0)>>>0)Ua();else{p=d;q=a}}else{c[5371]=d|a;p=b;q=b+8|0}c[q>>2]=r;c[p+12>>2]=r;c[r+8>>2]=p;c[r+12>>2]=b;return}a=f>>>8;if(a)if(f>>>0>16777215)a=31;else{p=(a+1048320|0)>>>16&8;q=a<<p;o=(q+520192|0)>>>16&4;q=q<<o;a=(q+245760|0)>>>16&2;a=14-(o|p|a)+(q<<a>>>15)|0;a=f>>>(a+7|0)&1|a<<1}else a=0;e=21788+(a<<2)|0;c[r+28>>2]=a;c[r+20>>2]=0;c[r+16>>2]=0;d=c[5372]|0;b=1<<a;if(!(d&b)){c[5372]=d|b;c[e>>2]=r;c[r+24>>2]=e;c[r+12>>2]=r;c[r+8>>2]=r;return}d=f<<((a|0)==31?0:25-(a>>>1)|0);e=c[e>>2]|0;while(1){if((c[e+4>>2]&-8|0)==(f|0)){a=127;break}b=e+16+(d>>>31<<2)|0;a=c[b>>2]|0;if(!a){a=124;break}else{d=d<<1;e=a}}if((a|0)==124){if(b>>>0<(c[5375]|0)>>>0)Ua();c[b>>2]=r;c[r+24>>2]=e;c[r+12>>2]=r;c[r+8>>2]=r;return}else if((a|0)==127){a=e+8|0;d=c[a>>2]|0;q=c[5375]|0;if(!(d>>>0>=q>>>0&e>>>0>=q>>>0))Ua();c[d+12>>2]=r;c[a>>2]=r;c[r+8>>2]=d;c[r+12>>2]=e;c[r+24>>2]=0;return}}function zf(a){a=a|0;var b=0,d=0,e=0;c[a>>2]=5388;b=c[a+40>>2]|0;d=a+32|0;e=a+36|0;if(b|0)do{b=b+-1|0;tb[c[(c[d>>2]|0)+(b<<2)>>2]&0](0,a,c[(c[e>>2]|0)+(b<<2)>>2]|0)}while((b|0)!=0);Fl(c[a+28>>2]|0);wf(c[d>>2]|0);wf(c[e>>2]|0);wf(c[a+48>>2]|0);wf(c[a+60>>2]|0);return}function Af(a){a=a|0;zf(a);wf(a);return}function Bf(a){a=a|0;c[a>>2]=5404;Fl(c[a+4>>2]|0);return}function Cf(a){a=a|0;c[a>>2]=5404;Fl(c[a+4>>2]|0);wf(a);return}function Df(a,b){a=a|0;b=b|0;return}function Ef(a,b,c){a=a|0;b=b|0;c=c|0;return a|0}function Ff(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;g=a;c[g>>2]=0;c[g+4>>2]=0;g=a+8|0;c[g>>2]=-1;c[g+4>>2]=-1;return}function Gf(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;e=a;c[e>>2]=0;c[e+4>>2]=0;e=a+8|0;c[e>>2]=-1;c[e+4>>2]=-1;return}function Hf(a){a=a|0;return 0}function If(a){a=a|0;return 0}function Jf(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;h=b+12|0;i=b+16|0;a:do if((e|0)>0){g=d;d=0;while(1){f=c[h>>2]|0;if(f>>>0<(c[i>>2]|0)>>>0){c[h>>2]=f+1;f=a[f>>0]|0}else{f=sb[c[(c[b>>2]|0)+40>>2]&63](b)|0;if((f|0)==-1)break a;f=f&255}a[g>>0]=f;d=d+1|0;if((d|0)<(e|0))g=g+1|0;else break}}else d=0;while(0);return d|0}function Kf(a){a=a|0;return -1}function Lf(a){a=a|0;var b=0;if((sb[c[(c[a>>2]|0)+36>>2]&63](a)|0)==-1)a=-1;else{b=a+12|0;a=c[b>>2]|0;c[b>>2]=a+1;a=d[a>>0]|0}return a|0}function Mf(a,b){a=a|0;b=b|0;return -1}function Nf(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0;i=a+24|0;j=a+28|0;a:do if((e|0)>0){f=b;b=0;do{g=c[i>>2]|0;h=c[j>>2]|0;if(g>>>0<h>>>0){h=h-g|0;k=e-b|0;h=(k|0)<(h|0)?k:h;if(h){Vm(g|0,f|0,h|0)|0;g=c[i>>2]|0}c[i>>2]=g+h;f=f+h|0;b=h+b|0}else{if((yb[c[(c[a>>2]|0)+52>>2]&15](a,d[f>>0]|0)|0)==-1)break a;f=f+1|0;b=b+1|0}}while((b|0)<(e|0))}else b=0;while(0);return b|0}function Of(a,b){a=a|0;b=b|0;return -1}function Pf(a){a=a|0;zf(a+8|0);return}function Qf(a){a=a|0;zf(a+8|0);wf(a);return}function Rf(a){a=a|0;zf(a+(c[(c[a>>2]|0)+-12>>2]|0)+8|0);return}function Sf(a){a=a|0;Qf(a+(c[(c[a>>2]|0)+-12>>2]|0)|0);return}function Tf(a){a=a|0;var b=0,d=0;d=a+(c[(c[a>>2]|0)+-12>>2]|0)|0;b=c[d+24>>2]|0;if(b|0){if(!(c[d+16>>2]|0)){d=c[d+72>>2]|0;if(d){Tf(d);b=c[a+(c[(c[a>>2]|0)+-12>>2]|0)+24>>2]|0}if((sb[c[(c[b>>2]|0)+24>>2]&63](b)|0)==-1){d=a+(c[(c[a>>2]|0)+-12>>2]|0)+16|0;c[d>>2]=c[d>>2]|1}}d=a+(c[(c[a>>2]|0)+-12>>2]|0)|0;if((((c[d+24>>2]|0?(c[d+16>>2]|0)==0:0)?c[d+4>>2]&8192|0:0)?!(Pa()|0):0)?(d=c[a+(c[(c[a>>2]|0)+-12>>2]|0)+24>>2]|0,(sb[c[(c[d>>2]|0)+24>>2]&63](d)|0)==-1):0){a=a+(c[(c[a>>2]|0)+-12>>2]|0)+16|0;c[a>>2]=c[a>>2]|1}}return}function Uf(a){a=a|0;return}function Vf(a){a=a|0;wf(a);return}function Wf(a){a=a|0;if(a|0)ob[c[(c[a>>2]|0)+4>>2]&127](a);return}function Xf(b,c,d,e,f){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;a:do if((e|0)==(f|0))h=6;else while(1){if((c|0)==(d|0)){c=-1;break a}b=a[c>>0]|0;g=a[e>>0]|0;if(b<<24>>24<g<<24>>24){c=-1;break a}if(g<<24>>24<b<<24>>24){c=1;break a}c=c+1|0;e=e+1|0;if((e|0)==(f|0)){h=6;break}}while(0);if((h|0)==6)c=(c|0)!=(d|0)&1;return c|0}function Yf(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;h=f-e|0;if(h>>>0>4294967279)Il();if(h>>>0<11){a[b+11>>0]=h;g=b}else{d=h+16&-16;g=Hl(d)|0;c[b>>2]=g;c[b+8>>2]=d|-2147483648;c[b+4>>2]=h}if((e|0)!=(f|0)){d=e;b=g;while(1){a[b>>0]=a[d>>0]|0;d=d+1|0;if((d|0)==(f|0))break;else b=b+1|0}}a[g+h>>0]=0;return}function Zf(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if((c|0)==(d|0))b=0;else{b=0;do{b=(a[c>>0]|0)+(b<<4)|0;e=b&-268435456;b=(e>>>24|e)^b;c=c+1|0}while((c|0)!=(d|0))}return b|0}function _f(a){a=a|0;return}function $f(a){a=a|0;wf(a);return}function ag(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;a:do if((e|0)==(f|0))h=6;else while(1){if((b|0)==(d|0)){b=-1;break a}a=c[b>>2]|0;g=c[e>>2]|0;if((a|0)<(g|0)){b=-1;break a}if((g|0)<(a|0)){b=1;break a}b=b+4|0;e=e+4|0;if((e|0)==(f|0)){h=6;break}}while(0);if((h|0)==6)b=(b|0)!=(d|0)&1;return b|0}function bg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;g=f-e|0;h=g>>2;if(h>>>0>1073741807)Il();do if(h>>>0>=2){d=h+4&-4;if(d>>>0>1073741823)Ea(19862,19899,1734,20006);else{i=Hl(d<<2)|0;c[b>>2]=i;c[b+8>>2]=d|-2147483648;c[b+4>>2]=h;break}}else{a[b+8+3>>0]=h;i=b}while(0);g=g>>>2;if((e|0)!=(f|0)){d=i;while(1){c[d>>2]=c[e>>2];e=e+4|0;if((e|0)==(f|0))break;else d=d+4|0}}c[i+(g<<2)>>2]=0;return}function cg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;if((b|0)==(d|0))a=0;else{a=0;do{a=(c[b>>2]|0)+(a<<4)|0;e=a&-268435456;a=(e>>>24|e)^a;b=b+4|0}while((b|0)!=(d|0))}return a|0}function dg(a){a=a|0;return}function eg(a){a=a|0;wf(a);return}function fg(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0;o=i;i=i+48|0;n=o+16|0;j=o+12|0;m=o+8|0;k=o+4|0;l=o;if(!(c[f+4>>2]&1)){c[m>>2]=-1;p=c[(c[b>>2]|0)+16>>2]|0;c[k>>2]=c[d>>2];c[l>>2]=c[e>>2];c[j>>2]=c[k>>2];c[n>>2]=c[l>>2];j=qb[p&63](b,j,n,f,g,m)|0;c[d>>2]=j;switch(c[m>>2]|0){case 0:{a[h>>0]=0;break}case 1:{a[h>>0]=1;break}default:{a[h>>0]=1;c[g>>2]=4}}}else{p=f+28|0;b=c[p>>2]|0;j=b+4|0;c[j>>2]=(c[j>>2]|0)+1;j=qg(b,21996)|0;Fl(b);p=c[p>>2]|0;b=p+4|0;c[b>>2]=(c[b>>2]|0)+1;b=qg(p,22012)|0;Fl(p);pb[c[(c[b>>2]|0)+24>>2]&63](n,b);pb[c[(c[b>>2]|0)+28>>2]&63](n+12|0,b);b=n+24|0;a[h>>0]=(Kg(d,c[e>>2]|0,n,b,j,g,1)|0)==(n|0)&1;j=c[d>>2]|0;do{b=b+-12|0;Ml(b)}while((b|0)!=(n|0))}i=o;return j|0}function gg(b,e,f,g,h,j){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;B=i;i=i+224|0;t=B+198|0;s=B+196|0;z=B+184|0;A=B+172|0;x=B+168|0;y=B+8|0;v=B+4|0;w=B;e=c[e>>2]|0;f=c[f>>2]|0;u=Cg(c[g+4>>2]|0)|0;Dg(z,g,t,s);p=A+11|0;q=A+8|0;c[A>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;Pl(A,10);l=(a[p>>0]|0)<0?c[A>>2]|0:A;c[x>>2]=l;c[v>>2]=y;c[w>>2]=0;r=A+4|0;s=a[s>>0]|0;b=e;a:while(1){if(b){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){o=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;b=o?0:b;e=o?0:e}}else b=0;g=(b|0)==0;k=f;do if(f){if((c[k+12>>2]|0)!=(c[k+16>>2]|0))if(g)break;else{g=0;break a}if((sb[c[(c[f>>2]|0)+36>>2]&63](k)|0)!=-1){if(!g){g=0;break a}}else{f=0;C=9}}else C=9;while(0);if((C|0)==9){C=0;if(g){g=1;b=0;k=0;break}else k=0}m=a[p>>0]|0;m=m<<24>>24<0?c[r>>2]|0:m&255;if((c[x>>2]|0)==(l+m|0)){Pl(A,m<<1);if((a[p>>0]|0)<0)l=(c[q>>2]&2147483647)+-1|0;else l=10;Pl(A,l);l=(a[p>>0]|0)<0?c[A>>2]|0:A;c[x>>2]=l+m}n=b+12|0;m=c[n>>2]|0;o=b+16|0;if((m|0)==(c[o>>2]|0))m=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else m=d[m>>0]|0;if(rg(m&255,u,l,x,w,s,z,y,v,t)|0)break;g=c[n>>2]|0;if((g|0)==(c[o>>2]|0)){sb[c[(c[b>>2]|0)+40>>2]&63](b)|0;continue}else{c[n>>2]=g+1;continue}}t=a[z+11>>0]|0;f=c[v>>2]|0;if(((t<<24>>24<0?c[z+4>>2]|0:t&255)|0)!=0?(f-y|0)<160:0){t=c[w>>2]|0;w=f+4|0;c[v>>2]=w;c[f>>2]=t;f=w}c[j>>2]=Jg(l,c[x>>2]|0,h,u)|0;zg(z,y,f,h);if(!g){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){j=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;e=j?0:e;b=j?0:b}}else b=0;b=(b|0)==0;do if(k){if((c[k+12>>2]|0)==(c[k+16>>2]|0)?(sb[c[(c[k>>2]|0)+36>>2]&63](k)|0)==-1:0){C=32;break}if(!b)C=33}else C=32;while(0);if((C|0)==32?b:0)C=33;if((C|0)==33)c[h>>2]=c[h>>2]|2;Ml(A);Ml(z);i=B;return e|0}function hg(b,e,f,g,h,j){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;B=i;i=i+224|0;t=B+198|0;s=B+196|0;z=B+184|0;A=B+172|0;x=B+168|0;y=B+8|0;v=B+4|0;w=B;e=c[e>>2]|0;f=c[f>>2]|0;u=Cg(c[g+4>>2]|0)|0;Dg(z,g,t,s);p=A+11|0;q=A+8|0;c[A>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;Pl(A,10);l=(a[p>>0]|0)<0?c[A>>2]|0:A;c[x>>2]=l;c[v>>2]=y;c[w>>2]=0;r=A+4|0;s=a[s>>0]|0;b=e;a:while(1){if(b){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){o=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;b=o?0:b;e=o?0:e}}else b=0;g=(b|0)==0;k=f;do if(f){if((c[k+12>>2]|0)!=(c[k+16>>2]|0))if(g)break;else{g=0;break a}if((sb[c[(c[f>>2]|0)+36>>2]&63](k)|0)!=-1){if(!g){g=0;break a}}else{f=0;C=9}}else C=9;while(0);if((C|0)==9){C=0;if(g){g=1;b=0;k=0;break}else k=0}m=a[p>>0]|0;m=m<<24>>24<0?c[r>>2]|0:m&255;if((c[x>>2]|0)==(l+m|0)){Pl(A,m<<1);if((a[p>>0]|0)<0)l=(c[q>>2]&2147483647)+-1|0;else l=10;Pl(A,l);l=(a[p>>0]|0)<0?c[A>>2]|0:A;c[x>>2]=l+m}n=b+12|0;m=c[n>>2]|0;o=b+16|0;if((m|0)==(c[o>>2]|0))m=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else m=d[m>>0]|0;if(rg(m&255,u,l,x,w,s,z,y,v,t)|0)break;g=c[n>>2]|0;if((g|0)==(c[o>>2]|0)){sb[c[(c[b>>2]|0)+40>>2]&63](b)|0;continue}else{c[n>>2]=g+1;continue}}t=a[z+11>>0]|0;f=c[v>>2]|0;if(((t<<24>>24<0?c[z+4>>2]|0:t&255)|0)!=0?(f-y|0)<160:0){t=c[w>>2]|0;w=f+4|0;c[v>>2]=w;c[f>>2]=t;f=w}x=Ig(l,c[x>>2]|0,h,u)|0;c[j>>2]=x;c[j+4>>2]=E;zg(z,y,f,h);if(!g){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){j=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;e=j?0:e;b=j?0:b}}else b=0;b=(b|0)==0;do if(k){if((c[k+12>>2]|0)==(c[k+16>>2]|0)?(sb[c[(c[k>>2]|0)+36>>2]&63](k)|0)==-1:0){C=32;break}if(!b)C=33}else C=32;while(0);if((C|0)==32?b:0)C=33;if((C|0)==33)c[h>>2]=c[h>>2]|2;Ml(A);Ml(z);i=B;return e|0}function ig(e,f,g,h,j,k){e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;C=i;i=i+224|0;u=C+198|0;t=C+196|0;A=C+184|0;B=C+172|0;y=C+168|0;z=C+8|0;w=C+4|0;x=C;f=c[f>>2]|0;g=c[g>>2]|0;v=Cg(c[h+4>>2]|0)|0;Dg(A,h,u,t);q=B+11|0;r=B+8|0;c[B>>2]=0;c[B+4>>2]=0;c[B+8>>2]=0;Pl(B,10);m=(a[q>>0]|0)<0?c[B>>2]|0:B;c[y>>2]=m;c[w>>2]=z;c[x>>2]=0;s=B+4|0;t=a[t>>0]|0;e=f;a:while(1){if(e){if((c[e+12>>2]|0)==(c[e+16>>2]|0)){p=(sb[c[(c[e>>2]|0)+36>>2]&63](e)|0)==-1;e=p?0:e;f=p?0:f}}else e=0;h=(e|0)==0;l=g;do if(g){if((c[l+12>>2]|0)!=(c[l+16>>2]|0))if(h)break;else{h=0;break a}if((sb[c[(c[g>>2]|0)+36>>2]&63](l)|0)!=-1){if(!h){h=0;break a}}else{g=0;D=9}}else D=9;while(0);if((D|0)==9){D=0;if(h){h=1;e=0;l=0;break}else l=0}n=a[q>>0]|0;n=n<<24>>24<0?c[s>>2]|0:n&255;if((c[y>>2]|0)==(m+n|0)){Pl(B,n<<1);if((a[q>>0]|0)<0)m=(c[r>>2]&2147483647)+-1|0;else m=10;Pl(B,m);m=(a[q>>0]|0)<0?c[B>>2]|0:B;c[y>>2]=m+n}o=e+12|0;n=c[o>>2]|0;p=e+16|0;if((n|0)==(c[p>>2]|0))n=sb[c[(c[e>>2]|0)+36>>2]&63](e)|0;else n=d[n>>0]|0;if(rg(n&255,v,m,y,x,t,A,z,w,u)|0)break;h=c[o>>2]|0;if((h|0)==(c[p>>2]|0)){sb[c[(c[e>>2]|0)+40>>2]&63](e)|0;continue}else{c[o>>2]=h+1;continue}}u=a[A+11>>0]|0;g=c[w>>2]|0;if(((u<<24>>24<0?c[A+4>>2]|0:u&255)|0)!=0?(g-z|0)<160:0){u=c[x>>2]|0;x=g+4|0;c[w>>2]=x;c[g>>2]=u;g=x}b[k>>1]=Hg(m,c[y>>2]|0,j,v)|0;zg(A,z,g,j);if(!h){if((c[e+12>>2]|0)==(c[e+16>>2]|0)){k=(sb[c[(c[e>>2]|0)+36>>2]&63](e)|0)==-1;f=k?0:f;e=k?0:e}}else e=0;e=(e|0)==0;do if(l){if((c[l+12>>2]|0)==(c[l+16>>2]|0)?(sb[c[(c[l>>2]|0)+36>>2]&63](l)|0)==-1:0){D=32;break}if(!e)D=33}else D=32;while(0);if((D|0)==32?e:0)D=33;if((D|0)==33)c[j>>2]=c[j>>2]|2;Ml(B);Ml(A);i=C;return f|0}function jg(b,e,f,g,h,j){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;B=i;i=i+224|0;t=B+198|0;s=B+196|0;z=B+184|0;A=B+172|0;x=B+168|0;y=B+8|0;v=B+4|0;w=B;e=c[e>>2]|0;f=c[f>>2]|0;u=Cg(c[g+4>>2]|0)|0;Dg(z,g,t,s);p=A+11|0;q=A+8|0;c[A>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;Pl(A,10);l=(a[p>>0]|0)<0?c[A>>2]|0:A;c[x>>2]=l;c[v>>2]=y;c[w>>2]=0;r=A+4|0;s=a[s>>0]|0;b=e;a:while(1){if(b){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){o=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;b=o?0:b;e=o?0:e}}else b=0;g=(b|0)==0;k=f;do if(f){if((c[k+12>>2]|0)!=(c[k+16>>2]|0))if(g)break;else{g=0;break a}if((sb[c[(c[f>>2]|0)+36>>2]&63](k)|0)!=-1){if(!g){g=0;break a}}else{f=0;C=9}}else C=9;while(0);if((C|0)==9){C=0;if(g){g=1;b=0;k=0;break}else k=0}m=a[p>>0]|0;m=m<<24>>24<0?c[r>>2]|0:m&255;if((c[x>>2]|0)==(l+m|0)){Pl(A,m<<1);if((a[p>>0]|0)<0)l=(c[q>>2]&2147483647)+-1|0;else l=10;Pl(A,l);l=(a[p>>0]|0)<0?c[A>>2]|0:A;c[x>>2]=l+m}n=b+12|0;m=c[n>>2]|0;o=b+16|0;if((m|0)==(c[o>>2]|0))m=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else m=d[m>>0]|0;if(rg(m&255,u,l,x,w,s,z,y,v,t)|0)break;g=c[n>>2]|0;if((g|0)==(c[o>>2]|0)){sb[c[(c[b>>2]|0)+40>>2]&63](b)|0;continue}else{c[n>>2]=g+1;continue}}t=a[z+11>>0]|0;f=c[v>>2]|0;if(((t<<24>>24<0?c[z+4>>2]|0:t&255)|0)!=0?(f-y|0)<160:0){t=c[w>>2]|0;w=f+4|0;c[v>>2]=w;c[f>>2]=t;f=w}c[j>>2]=Gg(l,c[x>>2]|0,h,u)|0;zg(z,y,f,h);if(!g){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){j=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;e=j?0:e;b=j?0:b}}else b=0;b=(b|0)==0;do if(k){if((c[k+12>>2]|0)==(c[k+16>>2]|0)?(sb[c[(c[k>>2]|0)+36>>2]&63](k)|0)==-1:0){C=32;break}if(!b)C=33}else C=32;while(0);if((C|0)==32?b:0)C=33;if((C|0)==33)c[h>>2]=c[h>>2]|2;Ml(A);Ml(z);i=B;return e|0}function kg(b,e,f,g,h,j){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;B=i;i=i+224|0;t=B+198|0;s=B+196|0;z=B+184|0;A=B+172|0;x=B+168|0;y=B+8|0;v=B+4|0;w=B;e=c[e>>2]|0;f=c[f>>2]|0;u=Cg(c[g+4>>2]|0)|0;Dg(z,g,t,s);p=A+11|0;q=A+8|0;c[A>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;Pl(A,10);l=(a[p>>0]|0)<0?c[A>>2]|0:A;c[x>>2]=l;c[v>>2]=y;c[w>>2]=0;r=A+4|0;s=a[s>>0]|0;b=e;a:while(1){if(b){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){o=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;b=o?0:b;e=o?0:e}}else b=0;g=(b|0)==0;k=f;do if(f){if((c[k+12>>2]|0)!=(c[k+16>>2]|0))if(g)break;else{g=0;break a}if((sb[c[(c[f>>2]|0)+36>>2]&63](k)|0)!=-1){if(!g){g=0;break a}}else{f=0;C=9}}else C=9;while(0);if((C|0)==9){C=0;if(g){g=1;b=0;k=0;break}else k=0}m=a[p>>0]|0;m=m<<24>>24<0?c[r>>2]|0:m&255;if((c[x>>2]|0)==(l+m|0)){Pl(A,m<<1);if((a[p>>0]|0)<0)l=(c[q>>2]&2147483647)+-1|0;else l=10;Pl(A,l);l=(a[p>>0]|0)<0?c[A>>2]|0:A;c[x>>2]=l+m}n=b+12|0;m=c[n>>2]|0;o=b+16|0;if((m|0)==(c[o>>2]|0))m=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else m=d[m>>0]|0;if(rg(m&255,u,l,x,w,s,z,y,v,t)|0)break;g=c[n>>2]|0;if((g|0)==(c[o>>2]|0)){sb[c[(c[b>>2]|0)+40>>2]&63](b)|0;continue}else{c[n>>2]=g+1;continue}}t=a[z+11>>0]|0;f=c[v>>2]|0;if(((t<<24>>24<0?c[z+4>>2]|0:t&255)|0)!=0?(f-y|0)<160:0){t=c[w>>2]|0;w=f+4|0;c[v>>2]=w;c[f>>2]=t;f=w}c[j>>2]=Fg(l,c[x>>2]|0,h,u)|0;zg(z,y,f,h);if(!g){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){j=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;e=j?0:e;b=j?0:b}}else b=0;b=(b|0)==0;do if(k){if((c[k+12>>2]|0)==(c[k+16>>2]|0)?(sb[c[(c[k>>2]|0)+36>>2]&63](k)|0)==-1:0){C=32;break}if(!b)C=33}else C=32;while(0);if((C|0)==32?b:0)C=33;if((C|0)==33)c[h>>2]=c[h>>2]|2;Ml(A);Ml(z);i=B;return e|0}function lg(b,e,f,g,h,j){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;B=i;i=i+224|0;t=B+198|0;s=B+196|0;z=B+184|0;A=B+172|0;x=B+168|0;y=B+8|0;v=B+4|0;w=B;e=c[e>>2]|0;f=c[f>>2]|0;u=Cg(c[g+4>>2]|0)|0;Dg(z,g,t,s);p=A+11|0;q=A+8|0;c[A>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;Pl(A,10);l=(a[p>>0]|0)<0?c[A>>2]|0:A;c[x>>2]=l;c[v>>2]=y;c[w>>2]=0;r=A+4|0;s=a[s>>0]|0;b=e;a:while(1){if(b){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){o=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;b=o?0:b;e=o?0:e}}else b=0;g=(b|0)==0;k=f;do if(f){if((c[k+12>>2]|0)!=(c[k+16>>2]|0))if(g)break;else{g=0;break a}if((sb[c[(c[f>>2]|0)+36>>2]&63](k)|0)!=-1){if(!g){g=0;break a}}else{f=0;C=9}}else C=9;while(0);if((C|0)==9){C=0;if(g){g=1;b=0;k=0;break}else k=0}m=a[p>>0]|0;m=m<<24>>24<0?c[r>>2]|0:m&255;if((c[x>>2]|0)==(l+m|0)){Pl(A,m<<1);if((a[p>>0]|0)<0)l=(c[q>>2]&2147483647)+-1|0;else l=10;Pl(A,l);l=(a[p>>0]|0)<0?c[A>>2]|0:A;c[x>>2]=l+m}n=b+12|0;m=c[n>>2]|0;o=b+16|0;if((m|0)==(c[o>>2]|0))m=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else m=d[m>>0]|0;if(rg(m&255,u,l,x,w,s,z,y,v,t)|0)break;g=c[n>>2]|0;if((g|0)==(c[o>>2]|0)){sb[c[(c[b>>2]|0)+40>>2]&63](b)|0;continue}else{c[n>>2]=g+1;continue}}t=a[z+11>>0]|0;f=c[v>>2]|0;if(((t<<24>>24<0?c[z+4>>2]|0:t&255)|0)!=0?(f-y|0)<160:0){t=c[w>>2]|0;w=f+4|0;c[v>>2]=w;c[f>>2]=t;f=w}x=Eg(l,c[x>>2]|0,h,u)|0;c[j>>2]=x;c[j+4>>2]=E;zg(z,y,f,h);if(!g){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){j=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;e=j?0:e;b=j?0:b}}else b=0;b=(b|0)==0;do if(k){if((c[k+12>>2]|0)==(c[k+16>>2]|0)?(sb[c[(c[k>>2]|0)+36>>2]&63](k)|0)==-1:0){C=32;break}if(!b)C=33}else C=32;while(0);if((C|0)==32?b:0)C=33;if((C|0)==33)c[h>>2]=c[h>>2]|2;Ml(A);Ml(z);i=B;return e|0}function mg(b,e,f,h,j,k){b=b|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;E=i;i=i+240|0;w=E+200|0;t=E+199|0;u=E+198|0;D=E+184|0;C=E+172|0;A=E+168|0;B=E+8|0;x=E+4|0;y=E;z=E+197|0;v=E+196|0;e=c[e>>2]|0;f=c[f>>2]|0;wg(D,h,w,t,u);q=C+11|0;r=C+8|0;c[C>>2]=0;c[C+4>>2]=0;c[C+8>>2]=0;Pl(C,10);m=(a[q>>0]|0)<0?c[C>>2]|0:C;c[A>>2]=m;c[x>>2]=B;c[y>>2]=0;a[z>>0]=1;a[v>>0]=69;s=C+4|0;t=a[t>>0]|0;u=a[u>>0]|0;b=e;a:while(1){if(b){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){p=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;b=p?0:b;e=p?0:e}}else b=0;h=(b|0)==0;l=f;do if(f){if((c[l+12>>2]|0)!=(c[l+16>>2]|0))if(h)break;else{h=0;break a}if((sb[c[(c[f>>2]|0)+36>>2]&63](l)|0)!=-1){if(!h){h=0;break a}}else{f=0;F=9}}else F=9;while(0);if((F|0)==9){F=0;if(h){h=1;b=0;l=0;break}else l=0}n=a[q>>0]|0;n=n<<24>>24<0?c[s>>2]|0:n&255;if((c[A>>2]|0)==(m+n|0)){Pl(C,n<<1);if((a[q>>0]|0)<0)m=(c[r>>2]&2147483647)+-1|0;else m=10;Pl(C,m);m=(a[q>>0]|0)<0?c[C>>2]|0:C;c[A>>2]=m+n}o=b+12|0;n=c[o>>2]|0;p=b+16|0;if((n|0)==(c[p>>2]|0))n=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else n=d[n>>0]|0;if(xg(n&255,z,v,m,A,t,u,D,B,x,y,w)|0)break;h=c[o>>2]|0;if((h|0)==(c[p>>2]|0)){sb[c[(c[b>>2]|0)+40>>2]&63](b)|0;continue}else{c[o>>2]=h+1;continue}}w=a[D+11>>0]|0;f=c[x>>2]|0;if(!((a[z>>0]|0)==0?1:((w<<24>>24<0?c[D+4>>2]|0:w&255)|0)==0)?(f-B|0)<160:0){y=c[y>>2]|0;z=f+4|0;c[x>>2]=z;c[f>>2]=y;f=z}g[k>>2]=+Bg(m,c[A>>2]|0,j);zg(D,B,f,j);if(!h){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){k=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;e=k?0:e;b=k?0:b}}else b=0;b=(b|0)==0;do if(l){if((c[l+12>>2]|0)==(c[l+16>>2]|0)?(sb[c[(c[l>>2]|0)+36>>2]&63](l)|0)==-1:0){F=32;break}if(!b)F=33}else F=32;while(0);if((F|0)==32?b:0)F=33;if((F|0)==33)c[j>>2]=c[j>>2]|2;Ml(C);Ml(D);i=E;return e|0}function ng(b,e,f,g,j,k){b=b|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;E=i;i=i+240|0;w=E+200|0;t=E+199|0;u=E+198|0;D=E+184|0;C=E+172|0;A=E+168|0;B=E+8|0;x=E+4|0;y=E;z=E+197|0;v=E+196|0;e=c[e>>2]|0;f=c[f>>2]|0;wg(D,g,w,t,u);q=C+11|0;r=C+8|0;c[C>>2]=0;c[C+4>>2]=0;c[C+8>>2]=0;Pl(C,10);m=(a[q>>0]|0)<0?c[C>>2]|0:C;c[A>>2]=m;c[x>>2]=B;c[y>>2]=0;a[z>>0]=1;a[v>>0]=69;s=C+4|0;t=a[t>>0]|0;u=a[u>>0]|0;b=e;a:while(1){if(b){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){p=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;b=p?0:b;e=p?0:e}}else b=0;g=(b|0)==0;l=f;do if(f){if((c[l+12>>2]|0)!=(c[l+16>>2]|0))if(g)break;else{g=0;break a}if((sb[c[(c[f>>2]|0)+36>>2]&63](l)|0)!=-1){if(!g){g=0;break a}}else{f=0;F=9}}else F=9;while(0);if((F|0)==9){F=0;if(g){g=1;b=0;l=0;break}else l=0}n=a[q>>0]|0;n=n<<24>>24<0?c[s>>2]|0:n&255;if((c[A>>2]|0)==(m+n|0)){Pl(C,n<<1);if((a[q>>0]|0)<0)m=(c[r>>2]&2147483647)+-1|0;else m=10;Pl(C,m);m=(a[q>>0]|0)<0?c[C>>2]|0:C;c[A>>2]=m+n}o=b+12|0;n=c[o>>2]|0;p=b+16|0;if((n|0)==(c[p>>2]|0))n=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else n=d[n>>0]|0;if(xg(n&255,z,v,m,A,t,u,D,B,x,y,w)|0)break;g=c[o>>2]|0;if((g|0)==(c[p>>2]|0)){sb[c[(c[b>>2]|0)+40>>2]&63](b)|0;continue}else{c[o>>2]=g+1;continue}}w=a[D+11>>0]|0;f=c[x>>2]|0;if(!((a[z>>0]|0)==0?1:((w<<24>>24<0?c[D+4>>2]|0:w&255)|0)==0)?(f-B|0)<160:0){y=c[y>>2]|0;z=f+4|0;c[x>>2]=z;c[f>>2]=y;f=z}h[k>>3]=+Ag(m,c[A>>2]|0,j);zg(D,B,f,j);if(!g){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){k=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;e=k?0:e;b=k?0:b}}else b=0;b=(b|0)==0;do if(l){if((c[l+12>>2]|0)==(c[l+16>>2]|0)?(sb[c[(c[l>>2]|0)+36>>2]&63](l)|0)==-1:0){F=32;break}if(!b)F=33}else F=32;while(0);if((F|0)==32?b:0)F=33;if((F|0)==33)c[j>>2]=c[j>>2]|2;Ml(C);Ml(D);i=E;return e|0}function og(b,e,f,g,j,k){b=b|0;e=e|0;f=f|0;g=g|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;E=i;i=i+240|0;w=E+200|0;t=E+199|0;u=E+198|0;D=E+184|0;C=E+172|0;A=E+168|0;B=E+8|0;x=E+4|0;y=E;z=E+197|0;v=E+196|0;e=c[e>>2]|0;f=c[f>>2]|0;wg(D,g,w,t,u);q=C+11|0;r=C+8|0;c[C>>2]=0;c[C+4>>2]=0;c[C+8>>2]=0;Pl(C,10);m=(a[q>>0]|0)<0?c[C>>2]|0:C;c[A>>2]=m;c[x>>2]=B;c[y>>2]=0;a[z>>0]=1;a[v>>0]=69;s=C+4|0;t=a[t>>0]|0;u=a[u>>0]|0;b=e;a:while(1){if(b){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){p=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;b=p?0:b;e=p?0:e}}else b=0;g=(b|0)==0;l=f;do if(f){if((c[l+12>>2]|0)!=(c[l+16>>2]|0))if(g)break;else{g=0;break a}if((sb[c[(c[f>>2]|0)+36>>2]&63](l)|0)!=-1){if(!g){g=0;break a}}else{f=0;F=9}}else F=9;while(0);if((F|0)==9){F=0;if(g){g=1;b=0;l=0;break}else l=0}n=a[q>>0]|0;n=n<<24>>24<0?c[s>>2]|0:n&255;if((c[A>>2]|0)==(m+n|0)){Pl(C,n<<1);if((a[q>>0]|0)<0)m=(c[r>>2]&2147483647)+-1|0;else m=10;Pl(C,m);m=(a[q>>0]|0)<0?c[C>>2]|0:C;c[A>>2]=m+n}o=b+12|0;n=c[o>>2]|0;p=b+16|0;if((n|0)==(c[p>>2]|0))n=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else n=d[n>>0]|0;if(xg(n&255,z,v,m,A,t,u,D,B,x,y,w)|0)break;g=c[o>>2]|0;if((g|0)==(c[p>>2]|0)){sb[c[(c[b>>2]|0)+40>>2]&63](b)|0;continue}else{c[o>>2]=g+1;continue}}w=a[D+11>>0]|0;f=c[x>>2]|0;if(!((a[z>>0]|0)==0?1:((w<<24>>24<0?c[D+4>>2]|0:w&255)|0)==0)?(f-B|0)<160:0){y=c[y>>2]|0;z=f+4|0;c[x>>2]=z;c[f>>2]=y;f=z}h[k>>3]=+yg(m,c[A>>2]|0,j);zg(D,B,f,j);if(!g){if((c[b+12>>2]|0)==(c[b+16>>2]|0)){k=(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1;e=k?0:e;b=k?0:b}}else b=0;b=(b|0)==0;do if(l){if((c[l+12>>2]|0)==(c[l+16>>2]|0)?(sb[c[(c[l>>2]|0)+36>>2]&63](l)|0)==-1:0){F=32;break}if(!b)F=33}else F=32;while(0);if((F|0)==32?b:0)F=33;if((F|0)==33)c[j>>2]=c[j>>2]|2;Ml(C);Ml(D);i=E;return e|0}function pg(b,e,f,g,h,j){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;A=i;i=i+240|0;x=A;u=A+204|0;y=A+192|0;z=A+180|0;w=A+176|0;r=A+16|0;s=A+8|0;t=A+4|0;c[y>>2]=0;c[y+4>>2]=0;c[y+8>>2]=0;v=c[g+28>>2]|0;p=v+4|0;c[p>>2]=(c[p>>2]|0)+1;p=qg(v,21996)|0;wb[c[(c[p>>2]|0)+32>>2]&7](p,17393,17419,u)|0;Fl(v);v=z+11|0;p=z+8|0;c[z>>2]=0;c[z+4>>2]=0;c[z+8>>2]=0;Pl(z,10);l=(a[v>>0]|0)<0?c[z>>2]|0:z;c[w>>2]=l;c[s>>2]=r;c[t>>2]=0;q=z+4|0;b=c[e>>2]|0;a:while(1){if(b){if((c[b+12>>2]|0)==(c[b+16>>2]|0)?(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1:0){c[e>>2]=0;b=0}}else b=0;k=(b|0)==0;g=c[f>>2]|0;do if(g){if((c[g+12>>2]|0)!=(c[g+16>>2]|0))if(k)break;else{k=0;break a}if((sb[c[(c[g>>2]|0)+36>>2]&63](g)|0)!=-1)if(k)break;else{k=0;break a}else{c[f>>2]=0;B=11;break}}else B=11;while(0);if((B|0)==11){B=0;if(k){k=1;b=0;g=0;break}else g=0}m=a[v>>0]|0;m=m<<24>>24<0?c[q>>2]|0:m&255;if((c[w>>2]|0)==(l+m|0)){Pl(z,m<<1);if((a[v>>0]|0)<0)l=(c[p>>2]&2147483647)+-1|0;else l=10;Pl(z,l);l=(a[v>>0]|0)<0?c[z>>2]|0:z;c[w>>2]=l+m}n=b+12|0;m=c[n>>2]|0;o=b+16|0;if((m|0)==(c[o>>2]|0))m=sb[c[(c[b>>2]|0)+36>>2]&63](b)|0;else m=d[m>>0]|0;if(rg(m&255,16,l,w,t,0,y,r,s,u)|0)break;g=c[n>>2]|0;if((g|0)==(c[o>>2]|0)){sb[c[(c[b>>2]|0)+40>>2]&63](b)|0;continue}else{c[n>>2]=g+1;continue}}Pl(z,(c[w>>2]|0)-l|0);v=(a[v>>0]|0)<0?c[z>>2]|0:z;w=sg()|0;c[x>>2]=j;if((tg(v,w,0,x)|0)!=1)c[h>>2]=4;if(!k){if((c[b+12>>2]|0)==(c[b+16>>2]|0)?(sb[c[(c[b>>2]|0)+36>>2]&63](b)|0)==-1:0){c[e>>2]=0;b=0}}else b=0;b=(b|0)==0;do if(g){if((c[g+12>>2]|0)==(c[g+16>>2]|0)?(sb[c[(c[g>>2]|0)+36>>2]&63](g)|0)==-1:0){c[f>>2]=0;B=35;break}if(!b)B=36}else B=35;while(0);if((B|0)==35?b:0)B=36;if((B|0)==36)c[h>>2]=c[h>>2]|2;B=c[e>>2]|0;Ml(z);Ml(y);i=A;return B|0}function qg(a,b){a=a|0;b=b|0;b=ug(b)|0;return c[(c[a+8>>2]|0)+(b<<2)>>2]|0}function rg(b,d,e,f,g,h,i,j,k,l){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0;o=c[f>>2]|0;p=(o|0)==(e|0);do if(p){m=(a[l+24>>0]|0)==b<<24>>24;if(!m?(a[l+25>>0]|0)!=b<<24>>24:0){n=5;break}c[f>>2]=e+1;a[e>>0]=m?43:45;c[g>>2]=0;m=0}else n=5;while(0);a:do if((n|0)==5){n=a[i+11>>0]|0;if(b<<24>>24==h<<24>>24?((n<<24>>24<0?c[i+4>>2]|0:n&255)|0)!=0:0){m=c[k>>2]|0;if((m-j|0)>=160){m=0;break}f=c[g>>2]|0;c[k>>2]=m+4;c[m>>2]=f;c[g>>2]=0;m=0;break}i=l+26|0;h=0;while(1){m=l+h|0;if((h|0)==26){m=i;break}if((a[m>>0]|0)==b<<24>>24)break;else h=h+1|0}m=m-l|0;if((m|0)>23)m=-1;else{switch(d|0){case 10:case 8:{if((m|0)>=(d|0)){m=-1;break a}break}case 16:{if((m|0)>=22){if(p){m=-1;break a}if((o-e|0)>=3){m=-1;break a}if((a[o+-1>>0]|0)!=48){m=-1;break a}c[g>>2]=0;m=a[17393+m>>0]|0;c[f>>2]=o+1;a[o>>0]=m;m=0;break a}break}default:{}}m=a[17393+m>>0]|0;c[f>>2]=o+1;a[o>>0]=m;c[g>>2]=(c[g>>2]|0)+1;m=0}}while(0);return m|0}function sg(){var b=0;if(!(a[20720]|0)){a[20720]=1;if(!(c[5369]|0)){c[5369]=1;b=21480}else{b=vf(4)|0;if(b|0?c[b+-4>>2]&3|0:0){a[b>>0]=0;a[b+1>>0]=0;a[b+2>>0]=0;a[b+3>>0]=0}}c[5501]=b}else b=c[5501]|0;return b|0}function tg(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;h=i;i=i+128|0;f=h+16|0;g=h;c[g>>2]=e;e=rf(b)|0;d=f;b=d+112|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(b|0));c[f+32>>2]=24;c[f+44>>2]=a;c[f+76>>2]=-1;c[f+84>>2]=a;d=jf(f,17426,g)|0;if(e|0)c[(en()|0)+184>>2]=e;i=h;return d|0}function ug(a){a=a|0;var b=0,d=0,e=0,f=0;f=i;i=i+32|0;b=f+16|0;d=f+12|0;e=f;c[e>>2]=a;c[e+4>>2]=99;c[e+8>>2]=0;if((c[a>>2]|0)!=-1){c[b>>2]=e;c[d>>2]=b;Gl(a,d)}i=f;return (c[a+4>>2]|0)+-1|0}function vg(a){a=a|0;var b=0;b=c[5502]|0;c[5502]=b+1;c[a+4>>2]=b+1;return}function wg(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;d=c[d+28>>2]|0;h=d+4|0;c[h>>2]=(c[h>>2]|0)+1;h=qg(d,21996)|0;wb[c[(c[h>>2]|0)+32>>2]&7](h,17393,17425,e)|0;e=qg(d,22012)|0;a[f>>0]=sb[c[(c[e>>2]|0)+12>>2]&63](e)|0;a[g>>0]=sb[c[(c[e>>2]|0)+16>>2]&63](e)|0;pb[c[(c[e>>2]|0)+20>>2]&63](b,e);Fl(d);return}function xg(b,e,f,g,h,i,j,k,l,m,n,o){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0;a:do if(b<<24>>24==i<<24>>24)if(a[e>>0]|0){a[e>>0]=0;f=c[h>>2]|0;c[h>>2]=f+1;a[f>>0]=46;h=a[k+11>>0]|0;if(((h<<24>>24<0?c[k+4>>2]|0:h&255)|0)!=0?(p=c[m>>2]|0,(p-l|0)<160):0){l=c[n>>2]|0;c[m>>2]=p+4;c[p>>2]=l;p=0}else p=0}else p=-1;else{if(b<<24>>24==j<<24>>24?(j=a[k+11>>0]|0,(j<<24>>24<0?c[k+4>>2]|0:j&255)|0):0){if(!(a[e>>0]|0)){p=-1;break}p=c[m>>2]|0;if((p-l|0)>=160){p=0;break}l=c[n>>2]|0;c[m>>2]=p+4;c[p>>2]=l;c[n>>2]=0;p=0;break}j=o+32|0;i=0;while(1){p=o+i|0;if((i|0)==32){p=j;break}if((a[p>>0]|0)==b<<24>>24)break;else i=i+1|0}i=p-o|0;if((i|0)>31)p=-1;else{j=a[17393+i>>0]|0;switch(i|0){case 24:case 25:{p=c[h>>2]|0;if((p|0)!=(g|0)?(d[p+-1>>0]&95|0)!=(d[f>>0]&127|0):0){p=-1;break a}c[h>>2]=p+1;a[p>>0]=j;p=0;break a}case 23:case 22:{a[f>>0]=80;p=c[h>>2]|0;c[h>>2]=p+1;a[p>>0]=j;p=0;break a}default:{p=j&95;if((((p|0)==(a[f>>0]|0)?(a[f>>0]=p|128,a[e>>0]|0):0)?(a[e>>0]=0,f=a[k+11>>0]|0,(f<<24>>24<0?c[k+4>>2]|0:f&255)|0):0)?(q=c[m>>2]|0,(q-l|0)<160):0){l=c[n>>2]|0;c[m>>2]=q+4;c[q>>2]=l}m=c[h>>2]|0;c[h>>2]=m+1;a[m>>0]=j;if((i|0)>21){p=0;break a}c[n>>2]=(c[n>>2]|0)+1;p=0;break a}}}}while(0);return p|0}function yg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0,g=0,h=0,j=0;j=i;i=i+16|0;f=j;if((a|0)==(b|0)){c[d>>2]=4;e=0.0}else{g=ze()|0;h=c[g>>2]|0;c[g>>2]=0;sg()|0;e=+ff(a,f);a=c[g>>2]|0;if(!a)c[g>>2]=h;if((c[f>>2]|0)==(b|0)){if((a|0)==34)c[d>>2]=4}else{c[d>>2]=4;e=0.0}}i=j;return +e}function zg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0;j=a[b+11>>0]|0;i=j<<24>>24<0;h=b+4|0;g=c[h>>2]|0;j=j&255;a:do if((i?g:j)|0){l=e+-4|0;k=l>>>0>d>>>0;if((d|0)!=(e|0)&k){g=d;e=l;do{m=c[g>>2]|0;c[g>>2]=c[e>>2];c[e>>2]=m;g=g+4|0;e=e+-4|0}while(g>>>0<e>>>0);g=c[h>>2]|0}h=i?c[b>>2]|0:b;b=h+(i?g:j)|0;e=a[h>>0]|0;g=e<<24>>24>0&e<<24>>24!=127;b:do if(k){while(1){if(g?(e<<24>>24|0)!=(c[d>>2]|0):0)break;h=(b-h|0)>1?h+1|0:h;d=d+4|0;e=a[h>>0]|0;g=e<<24>>24>0&e<<24>>24!=127;if(d>>>0>=l>>>0)break b}c[f>>2]=4;break a}while(0);if(g?((c[l>>2]|0)+-1|0)>>>0>=e<<24>>24>>>0:0)c[f>>2]=4}while(0);return}function Ag(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0,g=0,h=0,j=0;j=i;i=i+16|0;f=j;if((a|0)==(b|0)){c[d>>2]=4;e=0.0}else{g=ze()|0;h=c[g>>2]|0;c[g>>2]=0;sg()|0;e=+ff(a,f);a=c[g>>2]|0;if(!a)c[g>>2]=h;if((c[f>>2]|0)==(b|0)){if((a|0)==34)c[d>>2]=4}else{c[d>>2]=4;e=0.0}}i=j;return +e}function Bg(a,b,d){a=a|0;b=b|0;d=d|0;var e=0.0,f=0,g=0,h=0,j=0;j=i;i=i+16|0;f=j;if((a|0)==(b|0)){c[d>>2]=4;e=0.0}else{g=ze()|0;h=c[g>>2]|0;c[g>>2]=0;sg()|0;e=+ff(a,f);a=c[g>>2]|0;if(!a)c[g>>2]=h;if((c[f>>2]|0)==(b|0)){if((a|0)==34)c[d>>2]=4}else{c[d>>2]=4;e=0.0}}i=j;return +e}function Cg(a){a=a|0;switch(a&74){case 64:{a=8;break}case 8:{a=16;break}case 0:{a=0;break}default:a=10}return a|0}function Dg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0;d=c[d+28>>2]|0;g=d+4|0;c[g>>2]=(c[g>>2]|0)+1;g=qg(d,21996)|0;wb[c[(c[g>>2]|0)+32>>2]&7](g,17393,17419,e)|0;e=qg(d,22012)|0;a[f>>0]=sb[c[(c[e>>2]|0)+16>>2]&63](e)|0;pb[c[(c[e>>2]|0)+20>>2]&63](b,e);Fl(d);return}function Eg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0;l=i;i=i+16|0;h=l;do if((b|0)==(d|0)){c[e>>2]=4;f=0;b=0}else{if((a[b>>0]|0)==45){c[e>>2]=4;f=0;b=0;break}j=ze()|0;k=c[j>>2]|0;c[j>>2]=0;sg()|0;b=Fe(b,h,f,-1,-1)|0;f=E;g=c[j>>2]|0;if(!g)c[j>>2]=k;if((c[h>>2]|0)==(d|0)){if((g|0)==34){c[e>>2]=4;b=-1;f=-1}}else{c[e>>2]=4;b=0;f=0}}while(0);E=f;i=l;return b|0}function Fg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0;l=i;i=i+16|0;h=l;do if((b|0)==(d|0)){c[e>>2]=4;b=0}else{if((a[b>>0]|0)==45){c[e>>2]=4;b=0;break}j=ze()|0;k=c[j>>2]|0;c[j>>2]=0;sg()|0;b=Fe(b,h,f,-1,-1)|0;f=E;g=c[j>>2]|0;if(!g)c[j>>2]=k;do if((c[h>>2]|0)==(d|0))if(f>>>0>0|(f|0)==0&b>>>0>4294967295|(g|0)==34){c[e>>2]=4;b=-1;break}else break;else{c[e>>2]=4;b=0}while(0)}while(0);i=l;return b|0}function Gg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0;l=i;i=i+16|0;h=l;do if((b|0)==(d|0)){c[e>>2]=4;b=0}else{if((a[b>>0]|0)==45){c[e>>2]=4;b=0;break}j=ze()|0;k=c[j>>2]|0;c[j>>2]=0;sg()|0;b=Fe(b,h,f,-1,-1)|0;f=E;g=c[j>>2]|0;if(!g)c[j>>2]=k;do if((c[h>>2]|0)==(d|0))if(f>>>0>0|(f|0)==0&b>>>0>4294967295|(g|0)==34){c[e>>2]=4;b=-1;break}else break;else{c[e>>2]=4;b=0}while(0)}while(0);i=l;return b|0}function Hg(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0;l=i;i=i+16|0;h=l;do if((b|0)==(d|0)){c[e>>2]=4;b=0}else{if((a[b>>0]|0)==45){c[e>>2]=4;b=0;break}j=ze()|0;k=c[j>>2]|0;c[j>>2]=0;sg()|0;b=Fe(b,h,f,-1,-1)|0;f=E;g=c[j>>2]|0;if(!g)c[j>>2]=k;do if((c[h>>2]|0)==(d|0))if(f>>>0>0|(f|0)==0&b>>>0>65535|(g|0)==34){c[e>>2]=4;b=-1;break}else{b=b&65535;break}else{c[e>>2]=4;b=0}while(0)}while(0);i=l;return b|0}function Ig(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;k=i;i=i+16|0;g=k;if((a|0)==(b|0)){c[d>>2]=4;e=0;a=0}else{h=ze()|0;j=c[h>>2]|0;c[h>>2]=0;sg()|0;a=Fe(a,g,e,0,-2147483648)|0;e=E;f=c[h>>2]|0;if(!f)c[h>>2]=j;if((c[g>>2]|0)==(b|0)){if((f|0)==34){c[d>>2]=4;e=(e|0)>0|(e|0)==0&a>>>0>0;a=e?-1:0;e=e?2147483647:-2147483648}}else{c[d>>2]=4;a=0;e=0}}E=e;i=k;return a|0}function Jg(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;k=i;i=i+16|0;g=k;if((a|0)==(b|0)){c[d>>2]=4;a=0}else{h=ze()|0;j=c[h>>2]|0;c[h>>2]=0;sg()|0;a=Fe(a,g,e,0,-2147483648)|0;f=E;e=c[h>>2]|0;if(!e)c[h>>2]=j;a:do if((c[g>>2]|0)==(b|0)){do if((e|0)==34){c[d>>2]=4;if((f|0)>0|(f|0)==0&a>>>0>0){a=2147483647;break a}}else{if((f|0)<-1|(f|0)==-1&a>>>0<2147483648){c[d>>2]=4;break}if((f|0)>0|(f|0)==0&a>>>0>2147483647){c[d>>2]=4;a=2147483647;break a}else break a}while(0);a=-2147483648}else{c[d>>2]=4;a=0}while(0)}i=k;return a|0}function Kg(b,e,f,g,h,j,k){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;A=i;i=i+112|0;m=(g-f|0)/12|0;if(m>>>0>100){y=vf(m)|0;l=y}else{l=A;y=0}x=(f|0)==(g|0);if(x)n=0;else{p=f;q=l;n=0;while(1){o=a[p+11>>0]|0;if(o<<24>>24<0)o=c[p+4>>2]|0;else o=o&255;if(!o){a[q>>0]=2;m=m+-1|0;n=n+1|0}else a[q>>0]=1;p=p+12|0;if((p|0)==(g|0))break;else q=q+1|0}}o=0;t=m;m=e;a:while(1){e=(t|0)!=0;v=o;while(1){o=c[b>>2]|0;do if(o){if((c[o+12>>2]|0)==(c[o+16>>2]|0))if((sb[c[(c[o>>2]|0)+36>>2]&63](o)|0)==-1){c[b>>2]=0;o=0;break}else{o=c[b>>2]|0;break}}else o=0;while(0);o=(o|0)==0;if(m)if((c[m+12>>2]|0)==(c[m+16>>2]|0)){w=(sb[c[(c[m>>2]|0)+36>>2]&63](m)|0)==-1;q=w?0:m;w=w?0:m}else{q=m;w=m}else{q=0;w=0}p=(q|0)==0;m=c[b>>2]|0;if(!(e&(o^p)))break a;o=c[m+12>>2]|0;if((o|0)==(c[m+16>>2]|0))m=sb[c[(c[m>>2]|0)+36>>2]&63](m)|0;else m=d[o>>0]|0;m=m&255;if(!k)m=yb[c[(c[h>>2]|0)+12>>2]&15](h,m)|0;u=v+1|0;if(x){v=u;m=w}else{r=f;q=0;s=l;e=t;break}}while(1){do if((a[s>>0]|0)==1){p=r+11|0;if((a[p>>0]|0)<0)o=c[r>>2]|0;else o=r;o=a[o+v>>0]|0;if(!k)o=yb[c[(c[h>>2]|0)+12>>2]&15](h,o)|0;if(m<<24>>24!=o<<24>>24){a[s>>0]=0;o=q;e=e+-1|0;break}o=a[p>>0]|0;if(o<<24>>24<0)o=c[r+4>>2]|0;else o=o&255;if((o|0)==(u|0)){a[s>>0]=2;o=1;n=n+1|0;e=e+-1|0}else o=1}else o=q;while(0);r=r+12|0;if((r|0)==(g|0))break;else{q=o;s=s+1|0}}if(!o){o=u;t=e;m=w;continue}m=c[b>>2]|0;o=m+12|0;p=c[o>>2]|0;if((p|0)==(c[m+16>>2]|0))sb[c[(c[m>>2]|0)+40>>2]&63](m)|0;else c[o>>2]=p+1;if((n+e|0)>>>0<2){o=u;t=e;m=w;continue}else{m=f;p=l}while(1){if((a[p>>0]|0)==2){o=a[m+11>>0]|0;if(o<<24>>24<0)o=c[m+4>>2]|0;else o=o&255;if((o|0)!=(u|0)){a[p>>0]=0;n=n+-1|0}}m=m+12|0;if((m|0)==(g|0)){o=u;t=e;m=w;continue a}else p=p+1|0}}do if(m){if((c[m+12>>2]|0)==(c[m+16>>2]|0))if((sb[c[(c[m>>2]|0)+36>>2]&63](m)|0)==-1){c[b>>2]=0;m=0;break}else{m=c[b>>2]|0;break}}else m=0;while(0);m=(m|0)==0;do if(!p){if((c[q+12>>2]|0)==(c[q+16>>2]|0)?(sb[c[(c[q>>2]|0)+36>>2]&63](q)|0)==-1:0){z=31;break}if(!m)z=64}else z=31;while(0);if((z|0)==31?m:0)z=64;if((z|0)==64)c[j>>2]=c[j>>2]|2;b:do if(x)z=68;else while(1){if((a[l>>0]|0)==2)break b;f=f+12|0;if((f|0)==(g|0)){z=68;break}else l=l+1|0}while(0);if((z|0)==68){c[j>>2]=c[j>>2]|4;f=g}wf(y);i=A;return f|0}function Lg(a){a=a|0;return}function Mg(a){a=a|0;wf(a);return}function Ng(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0;o=i;i=i+48|0;n=o+16|0;j=o+12|0;m=o+8|0;k=o+4|0;l=o;if(!(c[f+4>>2]&1)){c[m>>2]=-1;p=c[(c[b>>2]|0)+16>>2]|0;c[k>>2]=c[d>>2];c[l>>2]=c[e>>2];c[j>>2]=c[k>>2];c[n>>2]=c[l>>2];j=qb[p&63](b,j,n,f,g,m)|0;c[d>>2]=j;switch(c[m>>2]|0){case 0:{a[h>>0]=0;break}case 1:{a[h>>0]=1;break}default:{a[h>>0]=1;c[g>>2]=4}}}else{p=f+28|0;b=c[p>>2]|0;j=b+4|0;c[j>>2]=(c[j>>2]|0)+1;j=qg(b,22028)|0;Fl(b);p=c[p>>2]|0;b=p+4|0;c[b>>2]=(c[b>>2]|0)+1;b=qg(p,22036)|0;Fl(p);pb[c[(c[b>>2]|0)+24>>2]&63](n,b);pb[c[(c[b>>2]|0)+28>>2]&63](n+12|0,b);b=n+24|0;a[h>>0]=(ah(d,c[e>>2]|0,n,b,j,g,1)|0)==(n|0)&1;j=c[d>>2]|0;do{b=b+-12|0;Tl(b)}while((b|0)!=(n|0))}i=o;return j|0}function Og(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;z=i;i=i+304|0;r=z+200|0;p=z+196|0;x=z+184|0;y=z+172|0;v=z+168|0;w=z+8|0;t=z+4|0;u=z;d=c[d>>2]|0;k=c[e>>2]|0;s=Cg(c[f+4>>2]|0)|0;$g(x,f,r,p);m=y+11|0;n=y+8|0;c[y>>2]=0;c[y+4>>2]=0;c[y+8>>2]=0;Pl(y,10);e=(a[m>>0]|0)<0?c[y>>2]|0:y;c[v>>2]=e;c[t>>2]=w;c[u>>2]=0;o=y+4|0;p=c[p>>2]|0;f=d;while(1){if(!f){q=0;j=1}else{b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;j=(b|0)==-1;q=j?0:f;d=j?0:d}f=k;if(k){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[k>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1)if(j)b=k;else break;else{b=0;A=12}}else{b=k;A=12}if((A|0)==12){A=0;if(j){f=0;break}else f=0}j=a[m>>0]|0;j=j<<24>>24<0?c[o>>2]|0:j&255;if((c[v>>2]|0)==(e+j|0)){Pl(y,j<<1);if((a[m>>0]|0)<0)e=(c[n>>2]&2147483647)+-1|0;else e=10;Pl(y,e);e=(a[m>>0]|0)<0?c[y>>2]|0:y;c[v>>2]=e+j}k=q+12|0;j=c[k>>2]|0;l=q+16|0;if((j|0)==(c[l>>2]|0))j=sb[c[(c[q>>2]|0)+36>>2]&63](q)|0;else j=c[j>>2]|0;if(Yg(j,s,e,v,u,p,x,w,t,r)|0)break;f=c[k>>2]|0;if((f|0)==(c[l>>2]|0)){sb[c[(c[q>>2]|0)+40>>2]&63](q)|0;f=q;k=b;continue}else{c[k>>2]=f+4;f=q;k=b;continue}}r=a[x+11>>0]|0;b=c[t>>2]|0;if(((r<<24>>24<0?c[x+4>>2]|0:r&255)|0)!=0?(b-w|0)<160:0){r=c[u>>2]|0;u=b+4|0;c[t>>2]=u;c[b>>2]=r;b=u}c[h>>2]=Jg(e,c[v>>2]|0,g,s)|0;zg(x,w,b,g);if(!q)e=1;else{b=c[q+12>>2]|0;if((b|0)==(c[q+16>>2]|0))b=sb[c[(c[q>>2]|0)+36>>2]&63](q)|0;else b=c[b>>2]|0;e=(b|0)==-1;d=e?0:d}if(f){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1){if(!e)A=40}else A=38}else A=38;if((A|0)==38?e:0)A=40;if((A|0)==40)c[g>>2]=c[g>>2]|2;Ml(y);Ml(x);i=z;return d|0}function Pg(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;z=i;i=i+304|0;r=z+200|0;p=z+196|0;x=z+184|0;y=z+172|0;v=z+168|0;w=z+8|0;t=z+4|0;u=z;d=c[d>>2]|0;k=c[e>>2]|0;s=Cg(c[f+4>>2]|0)|0;$g(x,f,r,p);m=y+11|0;n=y+8|0;c[y>>2]=0;c[y+4>>2]=0;c[y+8>>2]=0;Pl(y,10);e=(a[m>>0]|0)<0?c[y>>2]|0:y;c[v>>2]=e;c[t>>2]=w;c[u>>2]=0;o=y+4|0;p=c[p>>2]|0;f=d;while(1){if(!f){q=0;j=1}else{b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;j=(b|0)==-1;q=j?0:f;d=j?0:d}f=k;if(k){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[k>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1)if(j)b=k;else break;else{b=0;A=12}}else{b=k;A=12}if((A|0)==12){A=0;if(j){f=0;break}else f=0}j=a[m>>0]|0;j=j<<24>>24<0?c[o>>2]|0:j&255;if((c[v>>2]|0)==(e+j|0)){Pl(y,j<<1);if((a[m>>0]|0)<0)e=(c[n>>2]&2147483647)+-1|0;else e=10;Pl(y,e);e=(a[m>>0]|0)<0?c[y>>2]|0:y;c[v>>2]=e+j}k=q+12|0;j=c[k>>2]|0;l=q+16|0;if((j|0)==(c[l>>2]|0))j=sb[c[(c[q>>2]|0)+36>>2]&63](q)|0;else j=c[j>>2]|0;if(Yg(j,s,e,v,u,p,x,w,t,r)|0)break;f=c[k>>2]|0;if((f|0)==(c[l>>2]|0)){sb[c[(c[q>>2]|0)+40>>2]&63](q)|0;f=q;k=b;continue}else{c[k>>2]=f+4;f=q;k=b;continue}}r=a[x+11>>0]|0;b=c[t>>2]|0;if(((r<<24>>24<0?c[x+4>>2]|0:r&255)|0)!=0?(b-w|0)<160:0){r=c[u>>2]|0;u=b+4|0;c[t>>2]=u;c[b>>2]=r;b=u}v=Ig(e,c[v>>2]|0,g,s)|0;c[h>>2]=v;c[h+4>>2]=E;zg(x,w,b,g);if(!q)e=1;else{b=c[q+12>>2]|0;if((b|0)==(c[q+16>>2]|0))b=sb[c[(c[q>>2]|0)+36>>2]&63](q)|0;else b=c[b>>2]|0;e=(b|0)==-1;d=e?0:d}if(f){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1){if(!e)A=40}else A=38}else A=38;if((A|0)==38?e:0)A=40;if((A|0)==40)c[g>>2]=c[g>>2]|2;Ml(y);Ml(x);i=z;return d|0}function Qg(d,e,f,g,h,j){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;A=i;i=i+304|0;s=A+200|0;q=A+196|0;y=A+184|0;z=A+172|0;w=A+168|0;x=A+8|0;u=A+4|0;v=A;e=c[e>>2]|0;l=c[f>>2]|0;t=Cg(c[g+4>>2]|0)|0;$g(y,g,s,q);n=z+11|0;o=z+8|0;c[z>>2]=0;c[z+4>>2]=0;c[z+8>>2]=0;Pl(z,10);f=(a[n>>0]|0)<0?c[z>>2]|0:z;c[w>>2]=f;c[u>>2]=x;c[v>>2]=0;p=z+4|0;q=c[q>>2]|0;g=e;while(1){if(!g){r=0;k=1}else{d=c[g+12>>2]|0;if((d|0)==(c[g+16>>2]|0))d=sb[c[(c[g>>2]|0)+36>>2]&63](g)|0;else d=c[d>>2]|0;k=(d|0)==-1;r=k?0:g;e=k?0:e}g=l;if(l){d=c[g+12>>2]|0;if((d|0)==(c[g+16>>2]|0))d=sb[c[(c[l>>2]|0)+36>>2]&63](g)|0;else d=c[d>>2]|0;if((d|0)!=-1)if(k)d=l;else break;else{d=0;B=12}}else{d=l;B=12}if((B|0)==12){B=0;if(k){g=0;break}else g=0}k=a[n>>0]|0;k=k<<24>>24<0?c[p>>2]|0:k&255;if((c[w>>2]|0)==(f+k|0)){Pl(z,k<<1);if((a[n>>0]|0)<0)f=(c[o>>2]&2147483647)+-1|0;else f=10;Pl(z,f);f=(a[n>>0]|0)<0?c[z>>2]|0:z;c[w>>2]=f+k}l=r+12|0;k=c[l>>2]|0;m=r+16|0;if((k|0)==(c[m>>2]|0))k=sb[c[(c[r>>2]|0)+36>>2]&63](r)|0;else k=c[k>>2]|0;if(Yg(k,t,f,w,v,q,y,x,u,s)|0)break;g=c[l>>2]|0;if((g|0)==(c[m>>2]|0)){sb[c[(c[r>>2]|0)+40>>2]&63](r)|0;g=r;l=d;continue}else{c[l>>2]=g+4;g=r;l=d;continue}}s=a[y+11>>0]|0;d=c[u>>2]|0;if(((s<<24>>24<0?c[y+4>>2]|0:s&255)|0)!=0?(d-x|0)<160:0){s=c[v>>2]|0;v=d+4|0;c[u>>2]=v;c[d>>2]=s;d=v}b[j>>1]=Hg(f,c[w>>2]|0,h,t)|0;zg(y,x,d,h);if(!r)f=1;else{d=c[r+12>>2]|0;if((d|0)==(c[r+16>>2]|0))d=sb[c[(c[r>>2]|0)+36>>2]&63](r)|0;else d=c[d>>2]|0;f=(d|0)==-1;e=f?0:e}if(g){d=c[g+12>>2]|0;if((d|0)==(c[g+16>>2]|0))d=sb[c[(c[g>>2]|0)+36>>2]&63](g)|0;else d=c[d>>2]|0;if((d|0)!=-1){if(!f)B=40}else B=38}else B=38;if((B|0)==38?f:0)B=40;if((B|0)==40)c[h>>2]=c[h>>2]|2;Ml(z);Ml(y);i=A;return e|0}function Rg(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;z=i;i=i+304|0;r=z+200|0;p=z+196|0;x=z+184|0;y=z+172|0;v=z+168|0;w=z+8|0;t=z+4|0;u=z;d=c[d>>2]|0;k=c[e>>2]|0;s=Cg(c[f+4>>2]|0)|0;$g(x,f,r,p);m=y+11|0;n=y+8|0;c[y>>2]=0;c[y+4>>2]=0;c[y+8>>2]=0;Pl(y,10);e=(a[m>>0]|0)<0?c[y>>2]|0:y;c[v>>2]=e;c[t>>2]=w;c[u>>2]=0;o=y+4|0;p=c[p>>2]|0;f=d;while(1){if(!f){q=0;j=1}else{b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;j=(b|0)==-1;q=j?0:f;d=j?0:d}f=k;if(k){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[k>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1)if(j)b=k;else break;else{b=0;A=12}}else{b=k;A=12}if((A|0)==12){A=0;if(j){f=0;break}else f=0}j=a[m>>0]|0;j=j<<24>>24<0?c[o>>2]|0:j&255;if((c[v>>2]|0)==(e+j|0)){Pl(y,j<<1);if((a[m>>0]|0)<0)e=(c[n>>2]&2147483647)+-1|0;else e=10;Pl(y,e);e=(a[m>>0]|0)<0?c[y>>2]|0:y;c[v>>2]=e+j}k=q+12|0;j=c[k>>2]|0;l=q+16|0;if((j|0)==(c[l>>2]|0))j=sb[c[(c[q>>2]|0)+36>>2]&63](q)|0;else j=c[j>>2]|0;if(Yg(j,s,e,v,u,p,x,w,t,r)|0)break;f=c[k>>2]|0;if((f|0)==(c[l>>2]|0)){sb[c[(c[q>>2]|0)+40>>2]&63](q)|0;f=q;k=b;continue}else{c[k>>2]=f+4;f=q;k=b;continue}}r=a[x+11>>0]|0;b=c[t>>2]|0;if(((r<<24>>24<0?c[x+4>>2]|0:r&255)|0)!=0?(b-w|0)<160:0){r=c[u>>2]|0;u=b+4|0;c[t>>2]=u;c[b>>2]=r;b=u}c[h>>2]=Gg(e,c[v>>2]|0,g,s)|0;zg(x,w,b,g);if(!q)e=1;else{b=c[q+12>>2]|0;if((b|0)==(c[q+16>>2]|0))b=sb[c[(c[q>>2]|0)+36>>2]&63](q)|0;else b=c[b>>2]|0;e=(b|0)==-1;d=e?0:d}if(f){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1){if(!e)A=40}else A=38}else A=38;if((A|0)==38?e:0)A=40;if((A|0)==40)c[g>>2]=c[g>>2]|2;Ml(y);Ml(x);i=z;return d|0}function Sg(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;z=i;i=i+304|0;r=z+200|0;p=z+196|0;x=z+184|0;y=z+172|0;v=z+168|0;w=z+8|0;t=z+4|0;u=z;d=c[d>>2]|0;k=c[e>>2]|0;s=Cg(c[f+4>>2]|0)|0;$g(x,f,r,p);m=y+11|0;n=y+8|0;c[y>>2]=0;c[y+4>>2]=0;c[y+8>>2]=0;Pl(y,10);e=(a[m>>0]|0)<0?c[y>>2]|0:y;c[v>>2]=e;c[t>>2]=w;c[u>>2]=0;o=y+4|0;p=c[p>>2]|0;f=d;while(1){if(!f){q=0;j=1}else{b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;j=(b|0)==-1;q=j?0:f;d=j?0:d}f=k;if(k){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[k>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1)if(j)b=k;else break;else{b=0;A=12}}else{b=k;A=12}if((A|0)==12){A=0;if(j){f=0;break}else f=0}j=a[m>>0]|0;j=j<<24>>24<0?c[o>>2]|0:j&255;if((c[v>>2]|0)==(e+j|0)){Pl(y,j<<1);if((a[m>>0]|0)<0)e=(c[n>>2]&2147483647)+-1|0;else e=10;Pl(y,e);e=(a[m>>0]|0)<0?c[y>>2]|0:y;c[v>>2]=e+j}k=q+12|0;j=c[k>>2]|0;l=q+16|0;if((j|0)==(c[l>>2]|0))j=sb[c[(c[q>>2]|0)+36>>2]&63](q)|0;else j=c[j>>2]|0;if(Yg(j,s,e,v,u,p,x,w,t,r)|0)break;f=c[k>>2]|0;if((f|0)==(c[l>>2]|0)){sb[c[(c[q>>2]|0)+40>>2]&63](q)|0;f=q;k=b;continue}else{c[k>>2]=f+4;f=q;k=b;continue}}r=a[x+11>>0]|0;b=c[t>>2]|0;if(((r<<24>>24<0?c[x+4>>2]|0:r&255)|0)!=0?(b-w|0)<160:0){r=c[u>>2]|0;u=b+4|0;c[t>>2]=u;c[b>>2]=r;b=u}c[h>>2]=Fg(e,c[v>>2]|0,g,s)|0;zg(x,w,b,g);if(!q)e=1;else{b=c[q+12>>2]|0;if((b|0)==(c[q+16>>2]|0))b=sb[c[(c[q>>2]|0)+36>>2]&63](q)|0;else b=c[b>>2]|0;e=(b|0)==-1;d=e?0:d}if(f){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1){if(!e)A=40}else A=38}else A=38;if((A|0)==38?e:0)A=40;if((A|0)==40)c[g>>2]=c[g>>2]|2;Ml(y);Ml(x);i=z;return d|0}function Tg(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0;z=i;i=i+304|0;r=z+200|0;p=z+196|0;x=z+184|0;y=z+172|0;v=z+168|0;w=z+8|0;t=z+4|0;u=z;d=c[d>>2]|0;k=c[e>>2]|0;s=Cg(c[f+4>>2]|0)|0;$g(x,f,r,p);m=y+11|0;n=y+8|0;c[y>>2]=0;c[y+4>>2]=0;c[y+8>>2]=0;Pl(y,10);e=(a[m>>0]|0)<0?c[y>>2]|0:y;c[v>>2]=e;c[t>>2]=w;c[u>>2]=0;o=y+4|0;p=c[p>>2]|0;f=d;while(1){if(!f){q=0;j=1}else{b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;j=(b|0)==-1;q=j?0:f;d=j?0:d}f=k;if(k){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[k>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1)if(j)b=k;else break;else{b=0;A=12}}else{b=k;A=12}if((A|0)==12){A=0;if(j){f=0;break}else f=0}j=a[m>>0]|0;j=j<<24>>24<0?c[o>>2]|0:j&255;if((c[v>>2]|0)==(e+j|0)){Pl(y,j<<1);if((a[m>>0]|0)<0)e=(c[n>>2]&2147483647)+-1|0;else e=10;Pl(y,e);e=(a[m>>0]|0)<0?c[y>>2]|0:y;c[v>>2]=e+j}k=q+12|0;j=c[k>>2]|0;l=q+16|0;if((j|0)==(c[l>>2]|0))j=sb[c[(c[q>>2]|0)+36>>2]&63](q)|0;else j=c[j>>2]|0;if(Yg(j,s,e,v,u,p,x,w,t,r)|0)break;f=c[k>>2]|0;if((f|0)==(c[l>>2]|0)){sb[c[(c[q>>2]|0)+40>>2]&63](q)|0;f=q;k=b;continue}else{c[k>>2]=f+4;f=q;k=b;continue}}r=a[x+11>>0]|0;b=c[t>>2]|0;if(((r<<24>>24<0?c[x+4>>2]|0:r&255)|0)!=0?(b-w|0)<160:0){r=c[u>>2]|0;u=b+4|0;c[t>>2]=u;c[b>>2]=r;b=u}v=Eg(e,c[v>>2]|0,g,s)|0;c[h>>2]=v;c[h+4>>2]=E;zg(x,w,b,g);if(!q)e=1;else{b=c[q+12>>2]|0;if((b|0)==(c[q+16>>2]|0))b=sb[c[(c[q>>2]|0)+36>>2]&63](q)|0;else b=c[b>>2]|0;e=(b|0)==-1;d=e?0:d}if(f){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1){if(!e)A=40}else A=38}else A=38;if((A|0)==38?e:0)A=40;if((A|0)==40)c[g>>2]=c[g>>2]|2;Ml(y);Ml(x);i=z;return d|0}function Ug(b,d,e,f,h,j){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;C=i;i=i+352|0;u=C+208|0;q=C+200|0;r=C+196|0;B=C+184|0;A=C+172|0;y=C+168|0;z=C+8|0;v=C+4|0;w=C;x=C+337|0;t=C+336|0;d=c[d>>2]|0;l=c[e>>2]|0;Zg(B,f,u,q,r);n=A+11|0;o=A+8|0;c[A>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;Pl(A,10);e=(a[n>>0]|0)<0?c[A>>2]|0:A;c[y>>2]=e;c[v>>2]=z;c[w>>2]=0;a[x>>0]=1;a[t>>0]=69;p=A+4|0;q=c[q>>2]|0;r=c[r>>2]|0;f=d;while(1){if(!f){s=0;k=1}else{b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;k=(b|0)==-1;s=k?0:f;d=k?0:d}f=l;if(l){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[l>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1)if(k)b=l;else break;else{b=0;D=12}}else{b=l;D=12}if((D|0)==12){D=0;if(k){f=0;break}else f=0}k=a[n>>0]|0;k=k<<24>>24<0?c[p>>2]|0:k&255;if((c[y>>2]|0)==(e+k|0)){Pl(A,k<<1);if((a[n>>0]|0)<0)e=(c[o>>2]&2147483647)+-1|0;else e=10;Pl(A,e);e=(a[n>>0]|0)<0?c[A>>2]|0:A;c[y>>2]=e+k}l=s+12|0;k=c[l>>2]|0;m=s+16|0;if((k|0)==(c[m>>2]|0))k=sb[c[(c[s>>2]|0)+36>>2]&63](s)|0;else k=c[k>>2]|0;if(_g(k,x,t,e,y,q,r,B,z,v,w,u)|0)break;f=c[l>>2]|0;if((f|0)==(c[m>>2]|0)){sb[c[(c[s>>2]|0)+40>>2]&63](s)|0;f=s;l=b;continue}else{c[l>>2]=f+4;f=s;l=b;continue}}u=a[B+11>>0]|0;b=c[v>>2]|0;if(!((a[x>>0]|0)==0?1:((u<<24>>24<0?c[B+4>>2]|0:u&255)|0)==0)?(b-z|0)<160:0){w=c[w>>2]|0;x=b+4|0;c[v>>2]=x;c[b>>2]=w;b=x}g[j>>2]=+Bg(e,c[y>>2]|0,h);zg(B,z,b,h);if(!s)e=1;else{b=c[s+12>>2]|0;if((b|0)==(c[s+16>>2]|0))b=sb[c[(c[s>>2]|0)+36>>2]&63](s)|0;else b=c[b>>2]|0;e=(b|0)==-1;d=e?0:d}if(f){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1){if(!e)D=40}else D=38}else D=38;if((D|0)==38?e:0)D=40;if((D|0)==40)c[h>>2]=c[h>>2]|2;Ml(A);Ml(B);i=C;return d|0}function Vg(b,d,e,f,g,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;C=i;i=i+352|0;u=C+208|0;q=C+200|0;r=C+196|0;B=C+184|0;A=C+172|0;y=C+168|0;z=C+8|0;v=C+4|0;w=C;x=C+337|0;t=C+336|0;d=c[d>>2]|0;l=c[e>>2]|0;Zg(B,f,u,q,r);n=A+11|0;o=A+8|0;c[A>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;Pl(A,10);e=(a[n>>0]|0)<0?c[A>>2]|0:A;c[y>>2]=e;c[v>>2]=z;c[w>>2]=0;a[x>>0]=1;a[t>>0]=69;p=A+4|0;q=c[q>>2]|0;r=c[r>>2]|0;f=d;while(1){if(!f){s=0;k=1}else{b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;k=(b|0)==-1;s=k?0:f;d=k?0:d}f=l;if(l){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[l>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1)if(k)b=l;else break;else{b=0;D=12}}else{b=l;D=12}if((D|0)==12){D=0;if(k){f=0;break}else f=0}k=a[n>>0]|0;k=k<<24>>24<0?c[p>>2]|0:k&255;if((c[y>>2]|0)==(e+k|0)){Pl(A,k<<1);if((a[n>>0]|0)<0)e=(c[o>>2]&2147483647)+-1|0;else e=10;Pl(A,e);e=(a[n>>0]|0)<0?c[A>>2]|0:A;c[y>>2]=e+k}l=s+12|0;k=c[l>>2]|0;m=s+16|0;if((k|0)==(c[m>>2]|0))k=sb[c[(c[s>>2]|0)+36>>2]&63](s)|0;else k=c[k>>2]|0;if(_g(k,x,t,e,y,q,r,B,z,v,w,u)|0)break;f=c[l>>2]|0;if((f|0)==(c[m>>2]|0)){sb[c[(c[s>>2]|0)+40>>2]&63](s)|0;f=s;l=b;continue}else{c[l>>2]=f+4;f=s;l=b;continue}}u=a[B+11>>0]|0;b=c[v>>2]|0;if(!((a[x>>0]|0)==0?1:((u<<24>>24<0?c[B+4>>2]|0:u&255)|0)==0)?(b-z|0)<160:0){w=c[w>>2]|0;x=b+4|0;c[v>>2]=x;c[b>>2]=w;b=x}h[j>>3]=+Ag(e,c[y>>2]|0,g);zg(B,z,b,g);if(!s)e=1;else{b=c[s+12>>2]|0;if((b|0)==(c[s+16>>2]|0))b=sb[c[(c[s>>2]|0)+36>>2]&63](s)|0;else b=c[b>>2]|0;e=(b|0)==-1;d=e?0:d}if(f){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1){if(!e)D=40}else D=38}else D=38;if((D|0)==38?e:0)D=40;if((D|0)==40)c[g>>2]=c[g>>2]|2;Ml(A);Ml(B);i=C;return d|0}function Wg(b,d,e,f,g,j){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;C=i;i=i+352|0;u=C+208|0;q=C+200|0;r=C+196|0;B=C+184|0;A=C+172|0;y=C+168|0;z=C+8|0;v=C+4|0;w=C;x=C+337|0;t=C+336|0;d=c[d>>2]|0;l=c[e>>2]|0;Zg(B,f,u,q,r);n=A+11|0;o=A+8|0;c[A>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;Pl(A,10);e=(a[n>>0]|0)<0?c[A>>2]|0:A;c[y>>2]=e;c[v>>2]=z;c[w>>2]=0;a[x>>0]=1;a[t>>0]=69;p=A+4|0;q=c[q>>2]|0;r=c[r>>2]|0;f=d;while(1){if(!f){s=0;k=1}else{b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;k=(b|0)==-1;s=k?0:f;d=k?0:d}f=l;if(l){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[l>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1)if(k)b=l;else break;else{b=0;D=12}}else{b=l;D=12}if((D|0)==12){D=0;if(k){f=0;break}else f=0}k=a[n>>0]|0;k=k<<24>>24<0?c[p>>2]|0:k&255;if((c[y>>2]|0)==(e+k|0)){Pl(A,k<<1);if((a[n>>0]|0)<0)e=(c[o>>2]&2147483647)+-1|0;else e=10;Pl(A,e);e=(a[n>>0]|0)<0?c[A>>2]|0:A;c[y>>2]=e+k}l=s+12|0;k=c[l>>2]|0;m=s+16|0;if((k|0)==(c[m>>2]|0))k=sb[c[(c[s>>2]|0)+36>>2]&63](s)|0;else k=c[k>>2]|0;if(_g(k,x,t,e,y,q,r,B,z,v,w,u)|0)break;f=c[l>>2]|0;if((f|0)==(c[m>>2]|0)){sb[c[(c[s>>2]|0)+40>>2]&63](s)|0;f=s;l=b;continue}else{c[l>>2]=f+4;f=s;l=b;continue}}u=a[B+11>>0]|0;b=c[v>>2]|0;if(!((a[x>>0]|0)==0?1:((u<<24>>24<0?c[B+4>>2]|0:u&255)|0)==0)?(b-z|0)<160:0){w=c[w>>2]|0;x=b+4|0;c[v>>2]=x;c[b>>2]=w;b=x}h[j>>3]=+yg(e,c[y>>2]|0,g);zg(B,z,b,g);if(!s)e=1;else{b=c[s+12>>2]|0;if((b|0)==(c[s+16>>2]|0))b=sb[c[(c[s>>2]|0)+36>>2]&63](s)|0;else b=c[b>>2]|0;e=(b|0)==-1;d=e?0:d}if(f){b=c[f+12>>2]|0;if((b|0)==(c[f+16>>2]|0))b=sb[c[(c[f>>2]|0)+36>>2]&63](f)|0;else b=c[b>>2]|0;if((b|0)!=-1){if(!e)D=40}else D=38}else D=38;if((D|0)==38?e:0)D=40;if((D|0)==40)c[g>>2]=c[g>>2]|2;Ml(A);Ml(B);i=C;return d|0}function Xg(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;y=i;i=i+320|0;v=y;s=y+208|0;w=y+192|0;x=y+180|0;u=y+176|0;p=y+16|0;q=y+8|0;r=y+4|0;c[w>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;t=c[f+28>>2]|0;n=t+4|0;c[n>>2]=(c[n>>2]|0)+1;n=qg(t,22028)|0;wb[c[(c[n>>2]|0)+48>>2]&7](n,17393,17419,s)|0;Fl(t);t=x+11|0;n=x+8|0;c[x>>2]=0;c[x+4>>2]=0;c[x+8>>2]=0;Pl(x,10);b=(a[t>>0]|0)<0?c[x>>2]|0:x;c[u>>2]=b;c[q>>2]=p;c[r>>2]=0;o=x+4|0;j=c[d>>2]|0;a:while(1){if(j){f=c[j+12>>2]|0;if((f|0)==(c[j+16>>2]|0))f=sb[c[(c[j>>2]|0)+36>>2]&63](j)|0;else f=c[f>>2]|0;if((f|0)==-1){c[d>>2]=0;m=0;k=1}else{m=j;k=0}}else{m=0;k=1}j=c[e>>2]|0;do if(j){f=c[j+12>>2]|0;if((f|0)==(c[j+16>>2]|0))f=sb[c[(c[j>>2]|0)+36>>2]&63](j)|0;else f=c[f>>2]|0;if((f|0)!=-1)if(k)break;else break a;else{c[e>>2]=0;z=14;break}}else z=14;while(0);if((z|0)==14){z=0;if(k){j=0;break}else j=0}f=a[t>>0]|0;f=f<<24>>24<0?c[o>>2]|0:f&255;if((c[u>>2]|0)==(b+f|0)){Pl(x,f<<1);if((a[t>>0]|0)<0)b=(c[n>>2]&2147483647)+-1|0;else b=10;Pl(x,b);b=(a[t>>0]|0)<0?c[x>>2]|0:x;c[u>>2]=b+f}k=m+12|0;f=c[k>>2]|0;l=m+16|0;if((f|0)==(c[l>>2]|0))f=sb[c[(c[m>>2]|0)+36>>2]&63](m)|0;else f=c[f>>2]|0;if(Yg(f,16,b,u,r,0,w,p,q,s)|0)break;f=c[k>>2]|0;if((f|0)==(c[l>>2]|0)){sb[c[(c[m>>2]|0)+40>>2]&63](m)|0;j=m;continue}else{c[k>>2]=f+4;j=m;continue}}Pl(x,(c[u>>2]|0)-b|0);t=(a[t>>0]|0)<0?c[x>>2]|0:x;u=sg()|0;c[v>>2]=h;if((tg(t,u,0,v)|0)!=1)c[g>>2]=4;if(m){b=c[m+12>>2]|0;if((b|0)==(c[m+16>>2]|0))b=sb[c[(c[m>>2]|0)+36>>2]&63](m)|0;else b=c[b>>2]|0;if((b|0)==-1){c[d>>2]=0;f=1}else f=0}else f=1;do if(j){b=c[j+12>>2]|0;if((b|0)==(c[j+16>>2]|0))b=sb[c[(c[j>>2]|0)+36>>2]&63](j)|0;else b=c[b>>2]|0;if((b|0)!=-1)if(f)break;else{z=43;break}else{c[e>>2]=0;z=41;break}}else z=41;while(0);if((z|0)==41?f:0)z=43;if((z|0)==43)c[g>>2]=c[g>>2]|2;z=c[d>>2]|0;Ml(x);Ml(w);i=y;return z|0}function Yg(b,d,e,f,g,h,i,j,k,l){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0;o=c[f>>2]|0;p=(o|0)==(e|0);do if(p){m=(c[l+96>>2]|0)==(b|0);if(!m?(c[l+100>>2]|0)!=(b|0):0){n=5;break}c[f>>2]=e+1;a[e>>0]=m?43:45;c[g>>2]=0;m=0}else n=5;while(0);a:do if((n|0)==5){n=a[i+11>>0]|0;if((b|0)==(h|0)?((n<<24>>24<0?c[i+4>>2]|0:n&255)|0)!=0:0){m=c[k>>2]|0;if((m-j|0)>=160){m=0;break}f=c[g>>2]|0;c[k>>2]=m+4;c[m>>2]=f;c[g>>2]=0;m=0;break}i=l+104|0;h=0;while(1){m=l+(h<<2)|0;if((h|0)==26){m=i;break}if((c[m>>2]|0)==(b|0))break;else h=h+1|0}m=m-l|0;h=m>>2;if((m|0)>92)m=-1;else{switch(d|0){case 10:case 8:{if((h|0)>=(d|0)){m=-1;break a}break}case 16:{if((m|0)>=88){if(p){m=-1;break a}if((o-e|0)>=3){m=-1;break a}if((a[o+-1>>0]|0)!=48){m=-1;break a}c[g>>2]=0;m=a[17393+h>>0]|0;c[f>>2]=o+1;a[o>>0]=m;m=0;break a}break}default:{}}m=a[17393+h>>0]|0;c[f>>2]=o+1;a[o>>0]=m;c[g>>2]=(c[g>>2]|0)+1;m=0}}while(0);return m|0}function Zg(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;b=c[b+28>>2]|0;g=b+4|0;c[g>>2]=(c[g>>2]|0)+1;g=qg(b,22028)|0;wb[c[(c[g>>2]|0)+48>>2]&7](g,17393,17425,d)|0;d=qg(b,22036)|0;c[e>>2]=sb[c[(c[d>>2]|0)+12>>2]&63](d)|0;c[f>>2]=sb[c[(c[d>>2]|0)+16>>2]&63](d)|0;pb[c[(c[d>>2]|0)+20>>2]&63](a,d);Fl(b);return}function _g(b,e,f,g,h,i,j,k,l,m,n,o){b=b|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;m=m|0;n=n|0;o=o|0;var p=0,q=0;a:do if((b|0)==(i|0))if(a[e>>0]|0){a[e>>0]=0;f=c[h>>2]|0;c[h>>2]=f+1;a[f>>0]=46;h=a[k+11>>0]|0;if(((h<<24>>24<0?c[k+4>>2]|0:h&255)|0)!=0?(p=c[m>>2]|0,(p-l|0)<160):0){l=c[n>>2]|0;c[m>>2]=p+4;c[p>>2]=l;p=0}else p=0}else p=-1;else{if((b|0)==(j|0)?(j=a[k+11>>0]|0,(j<<24>>24<0?c[k+4>>2]|0:j&255)|0):0){if(!(a[e>>0]|0)){p=-1;break}p=c[m>>2]|0;if((p-l|0)>=160){p=0;break}l=c[n>>2]|0;c[m>>2]=p+4;c[p>>2]=l;c[n>>2]=0;p=0;break}j=o+128|0;i=0;while(1){p=o+(i<<2)|0;if((i|0)==32){p=j;break}if((c[p>>2]|0)==(b|0))break;else i=i+1|0}i=p-o|0;p=i>>2;if((i|0)<=124){j=a[17393+p>>0]|0;switch(p|0){case 24:case 25:{p=c[h>>2]|0;if((p|0)!=(g|0)?(d[p+-1>>0]&95|0)!=(d[f>>0]&127|0):0){p=-1;break a}c[h>>2]=p+1;a[p>>0]=j;p=0;break a}case 23:case 22:{a[f>>0]=80;break}default:{p=j&95;if((((p|0)==(a[f>>0]|0)?(a[f>>0]=p|128,a[e>>0]|0):0)?(a[e>>0]=0,f=a[k+11>>0]|0,(f<<24>>24<0?c[k+4>>2]|0:f&255)|0):0)?(q=c[m>>2]|0,(q-l|0)<160):0){l=c[n>>2]|0;c[m>>2]=q+4;c[q>>2]=l}}}m=c[h>>2]|0;c[h>>2]=m+1;a[m>>0]=j;if((i|0)>84)p=0;else{c[n>>2]=(c[n>>2]|0)+1;p=0}}else p=-1}while(0);return p|0}function $g(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;b=c[b+28>>2]|0;f=b+4|0;c[f>>2]=(c[f>>2]|0)+1;f=qg(b,22028)|0;wb[c[(c[f>>2]|0)+48>>2]&7](f,17393,17419,d)|0;d=qg(b,22036)|0;c[e>>2]=sb[c[(c[d>>2]|0)+16>>2]&63](d)|0;pb[c[(c[d>>2]|0)+20>>2]&63](a,d);Fl(b);return}
function xc(b,d){b=b|0;d=d|0;var e=0.0,f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,Q=0,R=0,V=0,W=0,X=0,Y=0.0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Nb=0,Pb=0,Qb=0,Ub=0,Vb=0,$b=0,hc=0,ic=0,jc=0,kc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,sc=0,tc=0,uc=0,vc=0,wc=0,xc=0.0,Bc=0,Cc=0,Dc=0,Ec=0,Fc=0,Gc=0,Hc=0,Ic=0,Jc=0,Kc=0,Lc=0,Nc=0,Oc=0,Pc=0,Qc=0,Rc=0,Sc=0,Tc=0,Uc=0,Vc=0,Wc=0,Xc=0,Yc=0;Rc=i;i=i+736|0;Lc=Rc+624|0;Kc=Rc+608|0;Qc=Rc+600|0;Oc=Rc+592|0;Jc=Rc+584|0;X=Rc+576|0;W=Rc+568|0;V=Rc+472|0;R=Rc+456|0;r=Rc+360|0;q=Rc+344|0;Ic=Rc+312|0;j=Rc+304|0;m=Rc+296|0;o=Rc+288|0;n=Rc+280|0;l=Rc+272|0;k=Rc+264|0;g=Rc+256|0;f=Rc+248|0;wc=Rc+720|0;Bc=Rc+704|0;Cc=Rc+152|0;Dc=Rc+688|0;Ec=Rc+96|0;Fc=Rc+676|0;Gc=Rc+664|0;Hc=Rc+652|0;tc=Rc+640|0;uc=Rc+628|0;vc=Rc;p=b+4|0;Pc=b+8|0;if((c[p>>2]|0)==1){j=b+392|0;if((c[j>>2]|0)==1){Wb(Pc,10731,f);Wb(Pc,10748,g);Wb(Pc,10764,k);Wb(Pc,10784,l)}g=b+648|0;f=(c[g>>2]|0)+496|0;if((a[f+11>>0]|0)<0)f=c[f>>2]|0;sc=c[Pc>>2]|0;c[n>>2]=f;lf(sc,20015,n);if((c[j>>2]|0)==3){Wb(Pc,10805,o);sc=((c[(c[g>>2]|0)+60>>2]|0)*2560|0)/1e3|0;c[m>>2]=sc;c[m+4>>2]=sc;Xb(Pc,0,m);sc=g}else sc=g}else{_b(Pc,0);f=b+16|0;if(+h[f>>3]!=0.0?(c[b+392>>2]&-2|0)!=2:0){rc=c[Pc>>2]|0;sc=b+384|0;c[j>>2]=a[(c[sc>>2]|0)+(b+352)>>0];lf(rc,9227,j);sc=b+424+(c[sc>>2]<<3)|0;h[sc>>3]=+h[f>>3]+ +h[sc>>3];sc=b+72|0;h[sc>>3]=+h[sc>>3]-+h[f>>3];h[f>>3]=0.0}Zb(Pc,0);c[b+376>>2]=(c[b>>2]|0)+5e3;rc=c[b+80>>2]|0;qc=c[b+84>>2]|0;sc=b+648|0;Yb(Pc,rc,((rc|0)<0)<<31>>31,qc,((qc|0)<0)<<31>>31,c[(c[sc>>2]|0)+124>>2]|0,0);qc=c[d+12>>2]|0;rc=c[d+16>>2]|0;Yb(Pc,qc,((qc|0)<0)<<31>>31,rc,((rc|0)<0)<<31>>31,c[(c[sc>>2]|0)+124>>2]|0,0)}c[p>>2]=(c[p>>2]|0)+1;qc=d+72|0;rc=c[qc>>2]|0;rc=(c[rc+4>>2]|0)-(c[rc>>2]|0)>>5;c[Ic>>2]=rc;Wb(Pc,10841,Ic);pc=c[sc>>2]|0;f=c[pc+204>>2]|0;if((f|0)>0?(c[pc+216>>2]|0)>0:0){Q=d+48|0;yc(b,10857,0,f,Q);g=c[sc>>2]|0;yc(b,10857,0,(c[g+216>>2]|0)+(c[g+204>>2]|0)|0,Q);g=c[sc>>2]|0;f=c[g+212>>2]|0;if((f|0)<1)f=c[g+108>>2]|0;M=c[g+208>>2]|0;c[Ic>>2]=f;c[Ic+4>>2]=M;c[Ic+8>>2]=10865;a[Ic+12>>0]=0;M=c[g+112>>2]|0;pc=c[g+220>>2]|0;c[wc>>2]=M;c[wc+4>>2]=pc;c[wc+8>>2]=10865;a[wc+12>>0]=0;pc=c[g+248>>2]|0;j=c[g+236>>2]|0;c[Bc>>2]=(pc|0)>0?pc:M;c[Bc+4>>2]=j;c[Bc+8>>2]=10865;a[Bc+12>>0]=0;Wb(Pc,10873,q);Wb(Pc,10882,r);j=c[sc>>2]|0;M=c[j+124>>2]|0;g=c[j+76>>2]|0;c[r>>2]=Pc;pc=r+8|0;f=pc+16|0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[r+40>>2]=M;c[r+44>>2]=0;c[r+48>>2]=9571;a[r+52>>0]=0;M=b+80|0;f=c[M>>2]|0;N=b+84|0;O=c[N>>2]|0;c[pc>>2]=f;c[pc+4>>2]=((f|0)<0)<<31>>31;pc=r+16|0;c[pc>>2]=O;c[pc+4>>2]=((O|0)<0)<<31>>31;c[r+36>>2]=0;c[r+56>>2]=100;c[r+60>>2]=100;pc=r+80|0;a[r+72>>0]=0;a[r+73>>0]=0;O=b+384|0;c[pc>>2]=0;c[pc+4>>2]=0;c[pc+8>>2]=0;c[pc+12>>2]=0;pc=c[O>>2]|0;f=r+64|0;c[f>>2]=pc;c[r+68>>2]=g;g=c[j+172>>2]|0;if(!((g|0)<1|(pc|0)==(g|0)))c[f>>2]=g;L=b+376|0;c[L>>2]=c[j+204>>2];f=c[sc>>2]|0;g=c[f+204>>2]|0;e=+(c[f+20>>2]|0)/1.0e3*.5;K=b+392|0;switch(c[K>>2]|0){case 5:case 1:{h[b+24>>3]=+(g|0)/1.0e3;break}default:h[b+24>>3]=+(g|0)/1.0e3/(e*(e*3.141592653589793))*+(c[f+24>>2]|0)/100.0}cc(r,d+36|0,Ic);cc(r,Q,Ic);c[q>>2]=0;n=q+4|0;c[n>>2]=0;c[q+8>>2]=0;m=c[sc>>2]|0;gc(Q,q,c[m+208>>2]|0,c[m+200>>2]|0,c[m+136>>2]|0,0.0);cc(r,q,Ic);ec(r,0,c[(c[sc>>2]|0)+204>>2]|0);m=c[q>>2]|0;if(m|0){f=c[n>>2]|0;if((f|0)!=(m|0)){do{g=f;f=f+-12|0;k=c[f>>2]|0;l=k;if(k|0){g=g+-8|0;j=c[g>>2]|0;if((j|0)!=(k|0))c[g>>2]=j+(~((j+-16-l|0)>>>4)<<4);wf(k)}}while((f|0)!=(m|0));c[n>>2]=m}wf(m)}ac(r);f=c[(c[sc>>2]|0)+228>>2]|0;if(f|0)_b(Pc,f);Wb(Pc,10887,R);Wb(Pc,10882,V);f=c[sc>>2]|0;nc=c[f+124>>2]|0;g=c[f+76>>2]|0;c[V>>2]=Pc;pc=V+8|0;oc=pc+16|0;c[oc>>2]=0;c[oc+4>>2]=0;c[oc+8>>2]=0;c[V+40>>2]=nc;c[V+44>>2]=0;c[V+48>>2]=9571;a[V+52>>0]=0;nc=c[M>>2]|0;oc=c[N>>2]|0;c[pc>>2]=nc;c[pc+4>>2]=((nc|0)<0)<<31>>31;pc=V+16|0;c[pc>>2]=oc;c[pc+4>>2]=((oc|0)<0)<<31>>31;c[V+36>>2]=0;c[V+56>>2]=100;c[V+60>>2]=100;pc=V+80|0;a[V+72>>0]=0;a[V+73>>0]=0;c[pc>>2]=0;c[pc+4>>2]=0;c[pc+8>>2]=0;c[pc+12>>2]=0;c[V+64>>2]=c[O>>2];c[V+68>>2]=g;c[L>>2]=(c[f+216>>2]|0)+(c[f+204>>2]|0);f=c[sc>>2]|0;g=c[f+216>>2]|0;e=+(c[f+20>>2]|0)/1.0e3*.5;switch(c[K>>2]|0){case 5:case 1:{h[b+24>>3]=+(g|0)/1.0e3;break}default:h[b+24>>3]=+(g|0)/1.0e3/(e*(e*3.141592653589793))*+(c[f+24>>2]|0)/100.0}c[R>>2]=0;m=R+4|0;c[m>>2]=0;c[R+8>>2]=0;n=c[sc>>2]|0;gc(Q,R,c[n+220>>2]|0,c[n+224>>2]|0,c[n+136>>2]|0,(c[n+244>>2]|0)>0?45.0:90.0);cc(V,R,wc);ec(V,0,c[(c[sc>>2]|0)+216>>2]|0);n=c[R>>2]|0;if(n|0){f=c[m>>2]|0;if((f|0)!=(n|0)){do{g=f;f=f+-12|0;k=c[f>>2]|0;l=k;if(k|0){g=g+-8|0;j=c[g>>2]|0;if((j|0)!=(k|0))c[g>>2]=j+(~((j+-16-l|0)>>>4)<<4);wf(k)}}while((f|0)!=(n|0));c[m>>2]=n}wf(n)}ac(V);a:do if((c[(c[sc>>2]|0)+244>>2]|0)>=1){o=R+4|0;p=R+8|0;q=V+8|0;r=V+16|0;s=V+40|0;t=V+44|0;u=V+48|0;v=V+52|0;w=V+36|0;x=V+56|0;y=V+60|0;z=V+80|0;A=V+72|0;B=V+73|0;C=V+64|0;D=V+68|0;I=b+24|0;J=q+16|0;n=1;while(1){Wb(Pc,10887,W);Wb(Pc,10882,X);f=c[sc>>2]|0;nc=c[f+124>>2]|0;g=c[f+76>>2]|0;c[V>>2]=Pc;c[J>>2]=0;c[J+4>>2]=0;c[J+8>>2]=0;c[s>>2]=nc;c[t>>2]=0;c[u>>2]=9571;a[v>>0]=0;nc=c[M>>2]|0;oc=c[N>>2]|0;pc=q;c[pc>>2]=nc;c[pc+4>>2]=((nc|0)<0)<<31>>31;pc=r;c[pc>>2]=oc;c[pc+4>>2]=((oc|0)<0)<<31>>31;c[w>>2]=0;c[x>>2]=100;c[y>>2]=100;a[A>>0]=0;a[B>>0]=0;c[z>>2]=0;c[z+4>>2]=0;c[z+8>>2]=0;c[z+12>>2]=0;c[C>>2]=c[O>>2];c[D>>2]=g;c[L>>2]=(c[f+216>>2]|0)+(c[f+204>>2]|0)+(T(c[f+232>>2]|0,n)|0);f=c[sc>>2]|0;g=c[f+232>>2]|0;e=+(c[f+20>>2]|0)/1.0e3*.5;switch(c[K>>2]|0){case 5:case 1:{e=+(g|0)/1.0e3;break}default:e=+(g|0)/1.0e3/(e*(e*3.141592653589793))*+(c[f+24>>2]|0)/100.0}h[I>>3]=e;c[R>>2]=0;c[o>>2]=0;c[p>>2]=0;m=c[sc>>2]|0;gc(Q,R,c[m+236>>2]|0,c[m+240>>2]|0,c[m+136>>2]|0,+(n*90|0));cc(V,R,Bc);ec(V,0,c[(c[sc>>2]|0)+216>>2]|0);m=c[R>>2]|0;if(m|0){f=c[o>>2]|0;if((f|0)!=(m|0)){do{g=f;f=f+-12|0;k=c[f>>2]|0;l=k;if(k|0){g=g+-8|0;j=c[g>>2]|0;if((j|0)!=(k|0))c[g>>2]=j+(~((j+-16-l|0)>>>4)<<4);wf(k)}}while((f|0)!=(m|0));c[o>>2]=m}wf(m)}ac(V);if((n|0)<(c[(c[sc>>2]|0)+244>>2]|0))n=n+1|0;else break a}}while(0)}b:do if(rc|0){nc=b+668|0;oc=b+672|0;pc=b+676|0;X=b+684|0;ba=b+688|0;ca=b+692|0;da=b+700|0;ea=b+704|0;fa=b+708|0;ga=b+716|0;ha=b+720|0;ia=b+724|0;ja=b+732|0;ka=b+736|0;la=b+740|0;ma=d+88|0;na=vc+64|0;oa=d+76|0;pa=vc+56|0;qa=b+392|0;ra=b+24|0;sa=vc+8|0;ta=vc+16|0;ua=vc+40|0;va=vc+44|0;wa=vc+48|0;xa=vc+52|0;ya=b+80|0;za=b+84|0;Aa=vc+36|0;Ba=vc+60|0;Ca=vc+80|0;Da=vc+72|0;Ea=vc+73|0;Fa=b+384|0;Ga=vc+68|0;Ha=b+376|0;Ia=sa+16|0;Ja=vc+24|0;Ka=vc+28|0;La=vc+88|0;Ma=b+648|0;Na=d+36|0;Oa=d+40|0;Pa=b+668|0;Qa=d+60|0;Ra=d+64|0;V=Ec+8|0;Sa=Ec+16|0;Ta=Ec+40|0;Ua=Ec+44|0;Va=Ec+28|0;Wa=Ec+16|0;Xa=Ec+20|0;Ya=Ec+32|0;Za=b+684|0;_a=b+700|0;$a=b+696|0;ab=Fc+4|0;bb=Fc+8|0;cb=Gc+4|0;eb=uc+4|0;fb=uc+8|0;gb=b+716|0;hb=Hc+4|0;ib=Hc+8|0;jb=tc+4|0;kb=tc+8|0;mb=Ic+4|0;nb=Fc+8|0;ob=vc+8|0;W=Ic+8|0;pb=wc+4|0;qb=wc+8|0;rb=Bc+4|0;sb=Bc+8|0;tb=Ic+16|0;vb=Cc+16|0;wb=Ic+24|0;xb=Cc+8|0;yb=Ic+8|0;zb=Cc+24|0;Ab=Cc+32|0;Bb=Dc+4|0;Cb=Bc+8|0;Db=Ec+24|0;Eb=wc+4|0;Fb=wc+8|0;Gb=Bc+4|0;Hb=Bc+8|0;Nb=Bc+12|0;Pb=wc+8|0;Qb=Bc+4|0;Ub=Bc+4|0;Vb=Bc+8|0;$b=Bc+12|0;hc=Bc+4|0;ic=Bc+4|0;jc=Bc+8|0;kc=Bc+12|0;mc=Bc+4|0;Q=0;o=0;c:while(1){R=Q;Q=Q+1|0;do if(a[23892]|0){c[Kc>>2]=10921;c[Kc+4>>2]=Q;c[Kc+8>>2]=rc;lf(1928,14126,Kc);if((c[487]|0)>>>0>(c[489]|0)>>>0?(lb[c[1964>>2]&31](1928,0,0)|0,(c[487]|0)==0):0)break;f=c[483]|0;g=c[484]|0;if(f>>>0<g>>>0)lb[c[1968>>2]&31](1928,f-g|0,1)|0;c[486]=0;c[489]=0;c[487]=0;c[484]=0;c[483]=0}while(0);j=c[sc>>2]|0;O=(R|0)==0;n=c[(O?j+28|0:j+32|0)>>2]|0;k=c[j+104>>2]|0;g=c[j+112>>2]|0;l=c[j+116>>2]|0;m=c[j+120>>2]|0;f=c[j+140>>2]|0;if((k|0)>(R|0)){M=((T(g,R)|0)>>>0)/(k>>>0)|0;N=((T(c[j+108>>2]|0,k-R|0)|0)>>>0)/(k>>>0)|0;M=N+M|0;g=(M|0)<(g|0)?M:g;c[nc>>2]=g;c[oc>>2]=n;c[pc>>2]=10928;M=(((T(l,R)|0)>>>0)/(k>>>0)|0)+N|0;c[X>>2]=(M|0)<(l|0)?M:l;c[ba>>2]=n;c[ca>>2]=10934;M=(((T(m,R)|0)>>>0)/(k>>>0)|0)+N|0;c[da>>2]=(M|0)<(m|0)?M:m;c[ea>>2]=n;c[fa>>2]=10945;N=(((T(f,R)|0)>>>0)/(k>>>0)|0)+N|0;f=(N|0)<(f|0)?N:f}else{c[nc>>2]=g;c[oc>>2]=n;c[pc>>2]=10928;c[X>>2]=l;c[ba>>2]=n;c[ca>>2]=10934;c[da>>2]=m;c[ea>>2]=n;c[fa>>2]=10945}c[ga>>2]=f;c[ha>>2]=n;c[ia>>2]=10956;c[ja>>2]=g;c[ka>>2]=n;c[la>>2]=10865;c[Lc>>2]=R;Wb(Pc,10961,Lc);f=c[sc>>2]|0;g=c[f+20>>2]|0;j=c[f+24>>2]|0;d:do if(O){f=c[f+16>>2]|0;e=+(g|0)/1.0e3*.5;switch(c[qa>>2]|0){case 5:case 1:{h[ra>>3]=+(f|0)/1.0e3;break d}default:{h[ra>>3]=+(j|0)*(+(f|0)/1.0e3/(e*(e*3.141592653589793)))/100.0;break d}}}else{f=c[f+12>>2]|0;e=+(g|0)/1.0e3*.5;switch(c[qa>>2]|0){case 5:case 1:{h[ra>>3]=+(f|0)/1.0e3;break d}default:{h[ra>>3]=+(j|0)*(+(f|0)/1.0e3/(e*(e*3.141592653589793)))/100.0;break d}}}while(0);g=c[sc>>2]|0;N=c[g+124>>2]|0;f=c[g+76>>2]|0;c[vc>>2]=Pc;c[Ia>>2]=0;c[Ia+4>>2]=0;c[Ia+8>>2]=0;c[ua>>2]=N;c[va>>2]=0;c[wa>>2]=9571;a[xa>>0]=0;N=c[ya>>2]|0;M=c[za>>2]|0;j=sa;c[j>>2]=N;c[j+4>>2]=((N|0)<0)<<31>>31;j=ta;c[j>>2]=M;c[j+4>>2]=((M|0)<0)<<31>>31;c[Aa>>2]=0;c[pa>>2]=100;c[Ba>>2]=100;a[Da>>0]=0;a[Ea>>0]=0;c[Ca>>2]=0;c[Ca+4>>2]=0;c[Ca+8>>2]=0;c[Ca+12>>2]=0;j=c[Fa>>2]|0;c[na>>2]=j;c[Ga>>2]=f;f=T(c[g+12>>2]|0,R)|0;M=c[g+204>>2]|0;N=c[g+216>>2]|0;f=f+(c[g+16>>2]|0)+M+N+(T(c[g+232>>2]|0,c[g+244>>2]|0)|0)|0;do if((M|0)>0&(N|0)>0)if(O){f=(c[g+256>>2]|0)+f|0;break}else{f=(c[g+252>>2]|0)+f|0;break}while(0);c[Ha>>2]=f;if((a[ma>>0]|0)!=0?(N=c[(c[sc>>2]|0)+172>>2]|0,(N|0)>0&(N|0)==(j|0)):0){zc(b,d,vc,R);N=1}else N=0;f=c[qc>>2]|0;g=(c[oa>>2]|0)-f|0;if(!g)x=o;else{J=(R&1|0)==0?45:135;$=+(J|0);L=(R|0)>0;M=R+-1|0;aa=$+90.0;K=0;j=o;g=(g|0)/12|0;while(1){if(!K)I=j;else I=((j+1|0)>>>0)%(g>>>0)|0;u=c[na>>2]|0;if((u|0)==(I|0))t=0;else{c[na>>2]=I;t=1}do if(!(R|I)){D=c[Ma>>2]|0;if((c[D+204>>2]|0)>0?(c[D+216>>2]|0)>0:0)break;j=c[Na>>2]|0;f=(c[Oa>>2]|0)-j|0;if(f|0){q=((f|0)/12|0)+-1|0;r=c[ya>>2]|0;s=((r|0)<0)<<31>>31;g=c[za>>2]|0;f=((g|0)<0)<<31>>31;k=c[j+(q*12|0)+4>>2]|0;j=c[j+(q*12|0)>>2]|0;q=j;if((k|0)==(j|0)){k=r;j=s}else{o=k-j>>4;n=0;e=3402823466385288598117041.0e14;k=r;j=s;l=g;m=f;while(1){B=q+(n<<4)|0;A=c[B>>2]|0;B=c[B+4>>2]|0;D=q+(n<<4)+8|0;C=c[D>>2]|0;D=c[D+4>>2]|0;y=Km(r|0,s|0,A|0,B|0)|0;z=E;p=Km(g|0,f|0,C|0,D|0)|0;_=+(y>>>0)+4294967296.0*+(z|0);Y=+(p>>>0)+4294967296.0*+(E|0);Y=_*_+Y*Y;p=Y<e;k=p?A:k;j=p?B:j;l=p?C:l;m=p?D:m;n=n+1|0;if(n>>>0>=o>>>0){g=l;f=m;break}else e=p?Y:e}}bc(vc,k,j,g,f)}cc(vc,Na,Pa);f=c[qc>>2]|0}while(0);v=c[f+(I*12|0)>>2]|0;if(t)Ac(b,d,vc,R,u);D=c[Qa>>2]|0;f=D;if((c[Ra>>2]|0)!=(D|0)?(((c[oa>>2]|0)-(c[qc>>2]|0)|0)/12|0)>>>0>1:0){a[Ea>>0]=1;cc(vc,f+(R*12|0)|0,Pa);yc(b,10970,R,c[v+(R<<5)+4>>2]|0,(c[Qa>>2]|0)+(R*12|0)|0);a[Ea>>0]=(c[(c[Ma>>2]|0)+88>>2]|0)==0&1}if(!(c[(c[Ma>>2]|0)+360>>2]|0)){D=c[ya>>2]|0;g=c[za>>2]|0;f=Ec;c[f>>2]=D;c[f+4>>2]=((D|0)<0)<<31>>31;f=V;c[f>>2]=g;c[f+4>>2]=((g|0)<0)<<31>>31;f=Sa;g=f+36|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));D=v+(R<<5)+8|0;l=v+(R<<5)+12|0;f=c[D>>2]|0;e:do if((c[l>>2]|0)!=(f|0)){g=0;j=0;k=0;while(1){f=c[c[f+(g*96|0)+56>>2]>>2]|0;c[Ic>>2]=f;if((j|0)==(k|0))dc(Sa,Ic);else{c[j>>2]=f;c[Xa>>2]=(c[Xa>>2]|0)+4}g=g+1|0;f=c[D>>2]|0;if(g>>>0>=(((c[l>>2]|0)-f|0)/96|0)>>>0)break e;j=c[Xa>>2]|0;k=c[Db>>2]|0}}while(0);Mc(Ec);f=c[Ua>>2]|0;C=c[Ta>>2]|0;g=C;if((f|0)==(C|0))k=g;else{C=0;f=g;while(1){A=c[f+(C<<2)>>2]|0;B=c[D>>2]|0;f=c[Ma>>2]|0;if(!(c[f+88>>2]|0))a[Ea>>0]=1;else{j=B+(A*96|0)+44|0;g=c[Aa>>2]|0;if(g|0){f=c[g+4>>2]|0;if(f|0)wf(f);f=c[g+8>>2]|0;if(f|0)wf(f);f=c[g+12>>2]|0;if(f|0)wf(f);f=c[g+16>>2]|0;if(f|0)wf(f);wf(g)}f=vf(88)|0;f:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){k=0;break f}ub[f&3]();f=vf(88)|0;if(f|0){k=f;break}}else k=f;while(0);c[k>>2]=j;h[k+24>>3]=1.0;g=k+32|0;c[g>>2]=0;c[g+4>>2]=0;c[g+8>>2]=0;c[g+12>>2]=0;h[k+48>>3]=1.0;g=k+56|0;c[g>>2]=0;c[g+4>>2]=0;c[g+8>>2]=0;c[g+12>>2]=0;c[g+16>>2]=0;c[g+20>>2]=0;c[g+24>>2]=0;c[g+28>>2]=0;j=((c[B+(A*96|0)+48>>2]|0)-(c[j>>2]|0)|0)/12|0;g=j>>>0>536870911?-1:j<<3;g=(g|0)==0?1:g;f=vf(g)|0;g:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break g}ub[f&3]();f=vf(g)|0}while(!(f|0));while(0);c[k+4>>2]=f;f=vf(g)|0;h:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break h}ub[f&3]();f=vf(g)|0}while(!(f|0));while(0);c[k+8>>2]=f;g=j>>>0>1073741823?-1:j<<2;g=(g|0)==0?1:g;f=vf(g)|0;i:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break i}ub[f&3]();f=vf(g)|0}while(!(f|0));while(0);c[k+12>>2]=f;f=vf(g)|0;j:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break j}ub[f&3]();f=vf(g)|0}while(!(f|0));while(0);c[k+16>>2]=f;c[Aa>>2]=k;f=c[Ma>>2]|0}k:do if((c[f+36>>2]|0)>0){do if(c[f+356>>2]|0){f=c[f+40>>2]|0;if((f|0)<=(R|0))a[$a>>0]=1;if((f|0)!=(R|0))break;f=c[B+(A*96|0)+56>>2]|0;if((c[B+(A*96|0)+60>>2]|0)==(f|0))break;cc(vc,f,_a)}while(0);k=B+(A*96|0)+56|0;j=c[k>>2]|0;f=(c[B+(A*96|0)+60>>2]|0)-j|0;if((f|0)<=0)break;g=((f>>>0)/12|0)+-1|0;f=j+(g*12|0)|0;if(g)do{cc(vc,f,_a);g=g+-1|0;if((g|0)<=-1)break k;f=(c[k>>2]|0)+(g*12|0)|0}while((g|0)!=0);cc(vc,f,Za)}while(0);c[Fc>>2]=0;c[ab>>2]=0;c[bb>>2]=0;z=c[Ma>>2]|0;z=c[(O?z+28|0:z+32|0)>>2]|0;lc(Gc,B+(A*96|0)+68|0,0);f=c[Gc>>2]|0;y=c[cb>>2]|0;if((f|0)!=(y|0)){do{c[Hc>>2]=0;c[hb>>2]=0;c[ib>>2]=0;if((Hc|0)!=(f|0))Mb(Hc,c[f>>2]|0,c[f+4>>2]|0);do if(L){c[tc>>2]=0;c[jb>>2]=0;c[kb>>2]=0;Mb(tc,c[Hc>>2]|0,c[hb>>2]|0);n=c[(c[qc>>2]|0)+(I*12|0)>>2]|0;c[wc>>2]=0;c[pb>>2]=0;c[qb>>2]=0;Mb(wc,c[tc>>2]|0,c[jb>>2]|0);Ib(Ic,wc);g=c[wc>>2]|0;if(g|0){j=c[pb>>2]|0;if((j|0)!=(g|0)){do{k=j+-12|0;c[pb>>2]=k;l=c[k>>2]|0;m=l;if(!l)j=k;else{j=j+-8|0;k=c[j>>2]|0;if((k|0)!=(l|0))c[j>>2]=k+(~((k+-16-m|0)>>>4)<<4);wf(l);j=c[pb>>2]|0}}while((j|0)!=(g|0));g=c[wc>>2]|0}wf(g)}c[Bc>>2]=0;c[rb>>2]=0;c[sb>>2]=0;g=c[n+(M<<5)+8>>2]|0;s=c[n+(M<<5)+12>>2]|0;if((g|0)==(s|0)){p=0;j=0;k=0;l=0;m=0}else{do{Jb(Cc,g);w=tb;u=c[w+4>>2]|0;x=Cc;v=c[x+4>>2]|0;do if(!((u|0)<(v|0)|((u|0)==(v|0)?(c[w>>2]|0)>>>0<(c[x>>2]|0)>>>0:0))){w=Ic;u=c[w+4>>2]|0;x=vb;v=c[x+4>>2]|0;if((u|0)>(v|0)|((u|0)==(v|0)?(c[w>>2]|0)>>>0>(c[x>>2]|0)>>>0:0))break;w=wb;u=c[w+4>>2]|0;x=xb;v=c[x+4>>2]|0;if((u|0)<(v|0)|((u|0)==(v|0)?(c[w>>2]|0)>>>0<(c[x>>2]|0)>>>0:0))break;w=yb;u=c[w+4>>2]|0;x=zb;v=c[x+4>>2]|0;if((u|0)>(v|0)|((u|0)==(v|0)?(c[w>>2]|0)>>>0>(c[x>>2]|0)>>>0:0))break;Kb(Dc,tc,Ab);l=c[Bb>>2]|0;j=c[Dc>>2]|0;m=j;if((l|0)==(j|0)){k=l;j=l}else{r=0;k=l;do{l=j;p=l+(r*12|0)|0;q=c[rb>>2]|0;if((q|0)==(c[Cb>>2]|0))Ob(Bc,p);else{c[q>>2]=0;o=q+4|0;c[o>>2]=0;c[q+8>>2]=0;n=l+(r*12|0)+4|0;j=(c[n>>2]|0)-(c[p>>2]|0)|0;m=j>>4;do if(m|0){if(m>>>0>268435455){Nc=297;break c}k=(j|0)==0?1:j;j=vf(k)|0;l:do if(!j)while(1){j=c[5972]|0;c[5972]=j+0;if(!j){l=0;break l}ub[j&3]();j=vf(k)|0;if(j|0){l=j;break}}else l=j;while(0);c[o>>2]=l;c[q>>2]=l;c[q+8>>2]=l+(m<<4);k=c[p>>2]|0;j=(c[n>>2]|0)-k|0;if((j|0)<=0)break;Vm(l|0,k|0,j|0)|0;c[o>>2]=l+(j>>4<<4)}while(0);c[rb>>2]=(c[rb>>2]|0)+12;j=c[Dc>>2]|0;m=j;k=c[Bb>>2]|0}r=r+1|0}while(r>>>0<((k-j|0)/12|0)>>>0)}p=j;if(j|0){if((k|0)!=(p|0)){do{j=k;k=k+-12|0;n=c[k>>2]|0;o=n;if(n|0){j=j+-8|0;l=c[j>>2]|0;if((l|0)!=(n|0))c[j>>2]=l+(~((l+-16-o|0)>>>4)<<4);wf(n)}}while((k|0)!=(p|0));c[Bb>>2]=p;j=m}wf(j)}}while(0);Lb(Cc);g=g+96|0}while((g|0)!=(s|0));m=c[rb>>2]|0;k=c[Bc>>2]|0;p=k;j=k;l=m}g=l-k|0;v=(g|0)/12|0;w=k;do if(v>>>0>5){g=-1;p=w}else{if(!g){g=-1;break}if((l|0)==(k|0)){k=-1;g=-1}else{u=0;k=-1;t=-1;Z=0.0;_=0.0;while(1){n=c[w+(u*12|0)>>2]|0;x=(c[w+(u*12|0)+4>>2]|0)-n|0;l=x>>4;if((x|0)>=48){s=l+-1|0;q=n+(s<<4)|0;s=n+(s<<4)+8|0;g=0;e=0.0;o=c[q+4>>2]|0;q=c[q>>2]|0;r=c[s+4>>2]|0;s=c[s>>2]|0;do{Vc=n+(g<<4)|0;Uc=q;q=c[Vc>>2]|0;Tc=o;o=c[Vc+4>>2]|0;Vc=n+(g<<4)+8|0;Sc=s;s=c[Vc>>2]|0;x=r;r=c[Vc+4>>2]|0;e=e+(+(Uc>>>0)+4294967296.0*+(Tc|0)+(+(q>>>0)+4294967296.0*+(o|0)))*(+(Sc>>>0)+4294967296.0*+(x|0)-(+(s>>>0)+4294967296.0*+(r|0)));g=g+1|0}while((g|0)<(l|0));if(!(e*-.5>=0.0)){g=t;Y=_;e=Z}else Nc=324}else Nc=324;do if((Nc|0)==324){Nc=0;n=c[p+(u*12|0)>>2]|0;Vc=(c[p+(u*12|0)+4>>2]|0)-n|0;l=Vc>>4;if((Vc|0)<48)e=0.0;else{s=l+-1|0;q=n+(s<<4)|0;s=n+(s<<4)+8|0;g=0;e=0.0;o=c[q+4>>2]|0;q=c[q>>2]|0;r=c[s+4>>2]|0;s=c[s>>2]|0;do{x=n+(g<<4)|0;Sc=q;q=c[x>>2]|0;Tc=o;o=c[x+4>>2]|0;x=n+(g<<4)+8|0;Uc=s;s=c[x>>2]|0;Vc=r;r=c[x+4>>2]|0;e=e+(+(Sc>>>0)+4294967296.0*+(Tc|0)+(+(q>>>0)+4294967296.0*+(o|0)))*(+(Uc>>>0)+4294967296.0*+(Vc|0)-(+(s>>>0)+4294967296.0*+(r|0)));g=g+1|0}while((g|0)<(l|0));e=e*-.5}e=+G(+e);if(e>_){Vc=_>Z;g=u;Y=e;k=Vc?t:k;e=Vc?_:Z;break}if(!(e>Z)){g=t;Y=_;e=Z;break}g=t;Y=_;k=u}while(0);u=u+1|0;if(u>>>0>=v>>>0)break;else{t=g;Z=e;_=Y}}}if((k|g|0)<0){g=-1;p=w;break}Uc=c[w+(g*12|0)+4>>2]|0;Vc=c[w+(g*12|0)>>2]|0;r=Uc-Vc|0;u=r>>4;s=u+-1|0;t=Vc;if((Uc|0)==(Vc|0)){Z=0.0;Y=0.0}else{q=t+(s<<4)+8|0;n=t+(s<<4)|0;Y=0.0;g=0;e=0.0;l=c[n>>2]|0;n=c[n+4>>2]|0;o=c[q>>2]|0;q=c[q+4>>2]|0;do{v=t+(g<<4)|0;Sc=l;l=c[v>>2]|0;Tc=n;n=c[v+4>>2]|0;v=t+(g<<4)+8|0;Uc=o;o=c[v>>2]|0;Vc=q;q=c[v+4>>2]|0;v=Ym(o|0,q|0,Sc|0,Tc|0)|0;w=E;x=Ym(l|0,n|0,Uc|0,Vc|0)|0;x=Km(v|0,w|0,x|0,E|0)|0;_=+(x>>>0)+4294967296.0*+(E|0);Tc=Om(l|0,n|0,Sc|0,Tc|0)|0;e=e+(+(Tc>>>0)+4294967296.0*+(E|0))*_;Vc=Om(o|0,q|0,Uc|0,Vc|0)|0;Y=Y+(+(Vc>>>0)+4294967296.0*+(E|0))*_;g=g+1|0}while(g>>>0<u>>>0);Z=e}if((r|0)<48)e=0.0;else{n=t+(s<<4)|0;q=t+(s<<4)+8|0;g=0;e=0.0;l=c[n+4>>2]|0;n=c[n>>2]|0;o=c[q+4>>2]|0;q=c[q>>2]|0;do{x=t+(g<<4)|0;Sc=n;n=c[x>>2]|0;Tc=l;l=c[x+4>>2]|0;x=t+(g<<4)+8|0;Uc=q;q=c[x>>2]|0;Vc=o;o=c[x+4>>2]|0;e=e+(+(Sc>>>0)+4294967296.0*+(Tc|0)+(+(n>>>0)+4294967296.0*+(l|0)))*(+(Uc>>>0)+4294967296.0*+(Vc|0)-(+(q>>>0)+4294967296.0*+(o|0)));g=g+1|0}while((g|0)<(u|0));e=e*-.5}Z=Z/6.0/e;_=Y/6.0/e;u=Z<0.0;_=u?-_:_;Z=u?-Z:Z;u=~~Z>>>0;v=+G(Z)>=1.0?(Z>0.0?~~+U(+F(Z/4294967296.0),4294967295.0)>>>0:~~+S((Z-+(~~Z>>>0))/4294967296.0)>>>0):0;w=~~_>>>0;x=+G(_)>=1.0?(_>0.0?~~+U(+F(_/4294967296.0),4294967295.0)>>>0:~~+S((_-+(~~_>>>0))/4294967296.0)>>>0):0;Uc=c[p+(k*12|0)+4>>2]|0;Vc=c[p+(k*12|0)>>2]|0;q=Uc-Vc|0;t=q>>4;r=t+-1|0;s=Vc;if((Uc|0)==(Vc|0)){Z=0.0;Y=0.0}else{o=s+(r<<4)+8|0;l=s+(r<<4)|0;Y=0.0;g=0;e=0.0;k=c[l>>2]|0;l=c[l+4>>2]|0;n=c[o>>2]|0;o=c[o+4>>2]|0;do{Yc=s+(g<<4)|0;Sc=k;k=c[Yc>>2]|0;Tc=l;l=c[Yc+4>>2]|0;Yc=s+(g<<4)+8|0;Uc=n;n=c[Yc>>2]|0;Vc=o;o=c[Yc+4>>2]|0;Yc=Ym(n|0,o|0,Sc|0,Tc|0)|0;Xc=E;Wc=Ym(k|0,l|0,Uc|0,Vc|0)|0;Wc=Km(Yc|0,Xc|0,Wc|0,E|0)|0;_=+(Wc>>>0)+4294967296.0*+(E|0);Tc=Om(k|0,l|0,Sc|0,Tc|0)|0;e=e+(+(Tc>>>0)+4294967296.0*+(E|0))*_;Vc=Om(n|0,o|0,Uc|0,Vc|0)|0;Y=Y+(+(Vc>>>0)+4294967296.0*+(E|0))*_;g=g+1|0}while(g>>>0<t>>>0);Z=e}if((q|0)<48)e=0.0;else{l=s+(r<<4)|0;o=s+(r<<4)+8|0;g=0;e=0.0;k=c[l+4>>2]|0;l=c[l>>2]|0;n=c[o+4>>2]|0;o=c[o>>2]|0;do{Uc=s+(g<<4)|0;Vc=l;l=c[Uc>>2]|0;Wc=k;k=c[Uc+4>>2]|0;Uc=s+(g<<4)+8|0;Xc=o;o=c[Uc>>2]|0;Yc=n;n=c[Uc+4>>2]|0;e=e+(+(Vc>>>0)+4294967296.0*+(Wc|0)+(+(l>>>0)+4294967296.0*+(k|0)))*(+(Xc>>>0)+4294967296.0*+(Yc|0)-(+(o>>>0)+4294967296.0*+(n|0)));g=g+1|0}while((g|0)<(t|0));e=e*-.5}Z=Z/6.0/e;_=Y/6.0/e;Xc=Z<0.0;_=Xc?-_:_;Z=Xc?-Z:Z;Xc=+G(Z)>=1.0?(Z>0.0?~~+U(+F(Z/4294967296.0),4294967295.0)>>>0:~~+S((Z-+(~~Z>>>0))/4294967296.0)>>>0):0;g=+G(_)>=1.0?(_>0.0?~~+U(+F(_/4294967296.0),4294967295.0)>>>0:~~+S((_-+(~~_>>>0))/4294967296.0)>>>0):0;Xc=Km(~~Z>>>0|0,Xc|0,u|0,v|0)|0;Yc=E;g=Km(~~_>>>0|0,g|0,w|0,x|0)|0;_=+P(+(+(Xc>>>0)+4294967296.0*+(Yc|0)),+(+(g>>>0)+4294967296.0*+(E|0)))/3.141592653589793*180.0;g=~~(_<0.0?_+360.0:_)}while(0);if(p|0){if((m|0)==(p|0))j=p;else{do{k=m;m=m+-12|0;n=c[m>>2]|0;o=n;if(n|0){k=k+-8|0;l=c[k>>2]|0;if((l|0)!=(n|0))c[k>>2]=l+(~((l+-16-o|0)>>>4)<<4);wf(n)}}while((m|0)!=(p|0));c[rb>>2]=p}wf(j)}o=c[tc>>2]|0;if(!o)break;j=c[jb>>2]|0;if((j|0)!=(o|0)){do{k=j;j=j+-12|0;m=c[j>>2]|0;n=m;if(m|0){k=k+-8|0;l=c[k>>2]|0;if((l|0)!=(m|0))c[k>>2]=l+(~((l+-16-n|0)>>>4)<<4);wf(m)}}while((j|0)!=(o|0));c[jb>>2]=o}wf(o)}else g=-1;while(0);gc(Hc,Fc,z,z,c[(c[Ma>>2]|0)+136>>2]|0,+(((g|0)>-1?g:J)|0));g=c[Hc>>2]|0;if(g|0){j=c[hb>>2]|0;if((j|0)!=(g|0)){do{k=j+-12|0;c[hb>>2]=k;l=c[k>>2]|0;m=l;if(!l)j=k;else{j=j+-8|0;k=c[j>>2]|0;if((k|0)!=(l|0))c[j>>2]=k+(~((k+-16-m|0)>>>4)<<4);wf(l);j=c[hb>>2]|0}}while((j|0)!=(g|0));g=c[Hc>>2]|0}wf(g)}f=f+12|0}while((f|0)!=(y|0));f=c[Gc>>2]|0}if(f|0){g=c[cb>>2]|0;if((g|0)!=(f|0)){do{k=g;g=g+-12|0;j=c[g>>2]|0;if(j|0){o=k+-8|0;k=c[o>>2]|0;if((k|0)!=(j|0)){do{l=k+-12|0;c[o>>2]=l;m=c[l>>2]|0;n=m;if(!m)k=l;else{k=k+-8|0;l=c[k>>2]|0;if((l|0)!=(m|0))c[k>>2]=l+(~((l+-16-n|0)>>>4)<<4);wf(m);k=c[o>>2]|0}}while((k|0)!=(j|0));j=c[g>>2]|0}wf(j)}}while((g|0)!=(f|0));c[cb>>2]=f}wf(f)}f=c[Ma>>2]|0;j=c[f+132>>2]|0;m:do if((j|0)>0)switch(c[f+144>>2]|0){case 0:{g=B+(A*96|0)+80|0;f=c[f+136>>2]|0;if((z<<2|0)<(j|0)){Yc=j<<1;gc(g,Fc,z,Yc,f,$);gc(g,Fc,z,Yc,f,aa);break m}else{gc(g,Fc,z,j,f,$);break m}}case 1:{Wc=B+(A*96|0)+80|0;Yc=c[f+136>>2]|0;Xc=j<<1;gc(Wc,Fc,z,Xc,Yc,$);gc(Wc,Fc,z,Xc,Yc,aa);break m}case 2:{gc(B+(A*96|0)+80|0,Fc,z,j,c[f+136>>2]|0,$);break m}case 3:{f=B+(A*96|0)+80|0;c[uc>>2]=0;c[eb>>2]=0;c[fb>>2]=0;if((uc|0)==(f|0))break m;Mb(uc,c[f>>2]|0,c[B+(A*96|0)+84>>2]|0);g=c[eb>>2]|0;f=c[uc>>2]|0;if((g|0)!=(f|0)){q=0-(c[(c[Ma>>2]|0)+132>>2]|0)|0;while(1){if((g|0)!=(f|0)){p=0;do{l=f+(p*12|0)|0;m=c[ab>>2]|0;if((m|0)==(c[nb>>2]|0))Ob(Fc,l);else{c[m>>2]=0;o=m+4|0;c[o>>2]=0;c[m+8>>2]=0;n=f+(p*12|0)+4|0;f=(c[n>>2]|0)-(c[l>>2]|0)|0;k=f>>4;do if(k|0){if(k>>>0>268435455){Nc=389;break c}g=(f|0)==0?1:f;f=vf(g)|0;n:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){j=0;break n}ub[f&3]();f=vf(g)|0;if(f|0){j=f;break}}else j=f;while(0);c[o>>2]=j;c[m>>2]=j;c[m+8>>2]=j+(k<<4);g=c[l>>2]|0;f=(c[n>>2]|0)-g|0;if((f|0)<=0)break;Vm(j|0,g|0,f|0)|0;c[o>>2]=j+(f>>4<<4)}while(0);c[ab>>2]=(c[ab>>2]|0)+12}p=p+1|0;f=c[uc>>2]|0}while(p>>>0<(((c[eb>>2]|0)-f|0)/12|0)>>>0)}fc(Ic,uc,q);m=c[Ic>>2]|0;f=c[mb>>2]|0;Mb(uc,m,f);if(m|0){if((f|0)!=(m|0)){do{g=f;f=f+-12|0;k=c[f>>2]|0;l=k;if(k|0){g=g+-8|0;j=c[g>>2]|0;if((j|0)!=(k|0))c[g>>2]=j+(~((j+-16-l|0)>>>4)<<4);wf(k)}}while((f|0)!=(m|0));c[mb>>2]=m}wf(m)}g=c[eb>>2]|0;f=c[uc>>2]|0;j=g;if((g|0)==(f|0)){f=j;g=j;break}}}if(!f)break m;if((g|0)!=(f|0)){do{j=g+-12|0;c[eb>>2]=j;k=c[j>>2]|0;l=k;if(!k)g=j;else{g=g+-8|0;j=c[g>>2]|0;if((j|0)!=(k|0))c[g>>2]=j+(~((j+-16-l|0)>>>4)<<4);wf(k);g=c[eb>>2]|0}}while((g|0)!=(f|0));f=c[uc>>2]|0}wf(f);break m}default:break m}while(0);cc(vc,Fc,gb);f=c[Ma>>2]|0;if(!((c[f+356>>2]|0)!=0?(c[f+40>>2]|0)<=(R|0):0))Nc=419;do if((Nc|0)==419){Nc=0;g=c[f+32>>2]<<1;f=c[Aa>>2]|0;if(!f)break;Xc=sa;Yc=ta;f=c[f>>2]|0;if(Sb(f,c[Xc>>2]|0,c[Xc+4>>2]|0,c[Yc>>2]|0,c[Yc+4>>2]|0)|0)break;c[Ic>>2]=c[ob>>2];c[Ic+4>>2]=c[ob+4>>2];c[Ic+8>>2]=c[ob+8>>2];c[Ic+12>>2]=c[ob+12>>2];do if(Rb(f,Ic,g)|0){Rb(c[c[Aa>>2]>>2]|0,Ic,g)|0;g=Ic;f=c[g>>2]|0;g=c[g+4>>2]|0;k=W;j=c[k>>2]|0;k=c[k+4>>2]|0;if(!(Sb(c[c[Aa>>2]>>2]|0,f,g,j,k)|0))break;bc(vc,f,g,j,k);f=c[Ja>>2]|0;g=(c[Ka>>2]|0)-f|0;if(!g)break;a[f+((((g|0)/28|0)+-1|0)*28|0)+24>>0]=1}while(0)}while(0);m=c[Fc>>2]|0;if(m|0){f=c[ab>>2]|0;if((f|0)!=(m|0)){do{g=f;f=f+-12|0;k=c[f>>2]|0;l=k;if(k|0){g=g+-8|0;j=c[g>>2]|0;if((j|0)!=(k|0))c[g>>2]=j+(~((j+-16-l|0)>>>4)<<4);wf(k)}}while((f|0)!=(m|0));c[ab>>2]=m}wf(m)}C=C+1|0;f=c[Ua>>2]|0;Yc=c[Ta>>2]|0;g=Yc;if(C>>>0>=f-Yc>>2>>>0){k=g;break}else f=g}}j=c[Aa>>2]|0;if(j|0){g=c[j+4>>2]|0;if(g|0)wf(g);g=c[j+8>>2]|0;if(g|0)wf(g);g=c[j+12>>2]|0;if(g|0)wf(g);g=c[j+16>>2]|0;if(g|0)wf(g);wf(j)}c[Aa>>2]=0;g=k;if(k|0){if((f|0)!=(k|0))c[Ua>>2]=f+(~((f+-4-g|0)>>>2)<<2);wf(k)}f=c[Va>>2]|0;g=f;if(f|0){j=c[Ya>>2]|0;if((j|0)!=(f|0))c[Ya>>2]=j+(~((j+-4-g|0)>>>2)<<2);wf(f)}f=c[Wa>>2]|0;g=f;if(f|0){j=c[Xa>>2]|0;if((j|0)!=(f|0))c[Xa>>2]=j+(~((j+-4-g|0)>>>2)<<2);wf(f)}}else{c[wc>>2]=0;c[Eb>>2]=0;c[Fb>>2]=0;s=v+(R<<5)+8|0;t=v+(R<<5)+12|0;f=c[t>>2]|0;g=c[s>>2]|0;if((f|0)!=(g|0)){r=0;do{j=g;if((c[j+(r*96|0)+36>>2]|0)!=(c[j+(r*96|0)+32>>2]|0)){q=0;f=g;g=j;do{k=c[g+(r*96|0)+32>>2]|0;j=(c[k+(q*12|0)+4>>2]|0)-(c[k+(q*12|0)>>2]|0)>>4;if(j>>>0>1){p=1;do{c[Bc>>2]=ic;c[ic>>2]=0;c[jc>>2]=0;c[kc>>2]=0;f=(c[k+(q*12|0)>>2]|0)+(p+-1<<4)|0;c[Ic>>2]=c[f>>2];c[Ic+4>>2]=c[f+4>>2];c[Ic+8>>2]=c[f+8>>2];c[Ic+12>>2]=c[f+12>>2];Tb(ic,Ic);f=c[Bc>>2]|0;g=(c[(c[(c[s>>2]|0)+(r*96|0)+32>>2]|0)+(q*12|0)>>2]|0)+(p<<4)|0;c[Ic>>2]=c[g>>2];c[Ic+4>>2]=c[g+4>>2];c[Ic+8>>2]=c[g+8>>2];c[Ic+12>>2]=c[g+12>>2];g=f+4|0;j=c[g>>2]|0;if((j|0)==(c[f+8>>2]|0))Tb(f,Ic);else{c[j>>2]=c[Ic>>2];c[j+4>>2]=c[Ic+4>>2];c[j+8>>2]=c[Ic+8>>2];c[j+12>>2]=c[Ic+12>>2];c[g>>2]=(c[g>>2]|0)+16}k=c[Bc>>2]|0;l=c[Eb>>2]|0;if((l|0)==(c[Pb>>2]|0))Ob(wc,k);else{c[l>>2]=0;o=l+4|0;c[o>>2]=0;c[l+8>>2]=0;n=k+4|0;f=(c[n>>2]|0)-(c[k>>2]|0)|0;m=f>>4;do if(m|0){if(m>>>0>268435455){Nc=131;break c}g=(f|0)==0?1:f;f=vf(g)|0;o:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){j=0;break o}ub[f&3]();f=vf(g)|0;if(f|0){j=f;break}}else j=f;while(0);c[o>>2]=j;c[l>>2]=j;c[l+8>>2]=j+(m<<4);g=c[k>>2]|0;f=(c[n>>2]|0)-g|0;if((f|0)<=0)break;Vm(j|0,g|0,f|0)|0;c[o>>2]=j+(f>>4<<4)}while(0);c[Eb>>2]=(c[Eb>>2]|0)+12}f=c[mc>>2]|0;g=f;if(f|0){j=c[jc>>2]|0;if((j|0)!=(f|0))c[jc>>2]=j+(~((j+-16-g|0)>>>4)<<4);wf(f)}p=p+1|0;g=c[s>>2]|0;k=c[g+(r*96|0)+32>>2]|0;j=(c[k+(q*12|0)+4>>2]|0)-(c[k+(q*12|0)>>2]|0)>>4}while(p>>>0<j>>>0);f=g}if(j){c[Bc>>2]=Ub;c[Ub>>2]=0;c[Vb>>2]=0;c[$b>>2]=0;f=c[k+(q*12|0)>>2]|0;$m(Ic|0,f+(((c[k+(q*12|0)+4>>2]|0)-f>>4)+-1<<4)|0,16)|0;Tb(Ub,Ic);f=c[Bc>>2]|0;g=c[(c[(c[s>>2]|0)+(r*96|0)+32>>2]|0)+(q*12|0)>>2]|0;c[Ic>>2]=c[g>>2];c[Ic+4>>2]=c[g+4>>2];c[Ic+8>>2]=c[g+8>>2];c[Ic+12>>2]=c[g+12>>2];g=f+4|0;j=c[g>>2]|0;if((j|0)==(c[f+8>>2]|0))Tb(f,Ic);else{c[j>>2]=c[Ic>>2];c[j+4>>2]=c[Ic+4>>2];c[j+8>>2]=c[Ic+8>>2];c[j+12>>2]=c[Ic+12>>2];c[g>>2]=(c[g>>2]|0)+16}k=c[Bc>>2]|0;l=c[Eb>>2]|0;if((l|0)==(c[Pb>>2]|0))Ob(wc,k);else{c[l>>2]=0;o=l+4|0;c[o>>2]=0;c[l+8>>2]=0;n=k+4|0;f=(c[n>>2]|0)-(c[k>>2]|0)|0;m=f>>4;do if(m|0){if(m>>>0>268435455){Nc=152;break c}g=(f|0)==0?1:f;f=vf(g)|0;p:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){j=0;break p}ub[f&3]();f=vf(g)|0;if(f|0){j=f;break}}else j=f;while(0);c[o>>2]=j;c[l>>2]=j;c[l+8>>2]=j+(m<<4);g=c[k>>2]|0;f=(c[n>>2]|0)-g|0;if((f|0)<=0)break;Vm(j|0,g|0,f|0)|0;c[o>>2]=j+(f>>4<<4)}while(0);c[Eb>>2]=(c[Eb>>2]|0)+12}f=c[hc>>2]|0;g=f;if(f|0){j=c[Vb>>2]|0;if((j|0)!=(f|0))c[Vb>>2]=j+(~((j+-16-g|0)>>>4)<<4);wf(f)}f=c[s>>2]|0;g=f}q=q+1|0}while(q>>>0<(((c[g+(r*96|0)+36>>2]|0)-(c[g+(r*96|0)+32>>2]|0)|0)/12|0)>>>0);g=f;f=c[t>>2]|0}r=r+1|0}while(r>>>0<((f-g|0)/96|0)>>>0)}s=v+(R<<5)+20|0;r=v+(R<<5)+24|0;g=c[r>>2]|0;f=c[s>>2]|0;if((g|0)!=(f|0)){q=0;j=f;while(1){f=j;if((c[f+(q*12|0)+4>>2]|0)-(c[f+(q*12|0)>>2]|0)>>4>>>0>1){p=1;do{c[Bc>>2]=Gb;c[Gb>>2]=0;c[Hb>>2]=0;c[Nb>>2]=0;f=(c[f+(q*12|0)>>2]|0)+(p+-1<<4)|0;c[Ic>>2]=c[f>>2];c[Ic+4>>2]=c[f+4>>2];c[Ic+8>>2]=c[f+8>>2];c[Ic+12>>2]=c[f+12>>2];Tb(Gb,Ic);f=c[Bc>>2]|0;g=(c[(c[s>>2]|0)+(q*12|0)>>2]|0)+(p<<4)|0;c[Ic>>2]=c[g>>2];c[Ic+4>>2]=c[g+4>>2];c[Ic+8>>2]=c[g+8>>2];c[Ic+12>>2]=c[g+12>>2];g=f+4|0;j=c[g>>2]|0;if((j|0)==(c[f+8>>2]|0))Tb(f,Ic);else{c[j>>2]=c[Ic>>2];c[j+4>>2]=c[Ic+4>>2];c[j+8>>2]=c[Ic+8>>2];c[j+12>>2]=c[Ic+12>>2];c[g>>2]=(c[g>>2]|0)+16}k=c[Bc>>2]|0;l=c[Eb>>2]|0;if((l|0)==(c[Pb>>2]|0))Ob(wc,k);else{c[l>>2]=0;o=l+4|0;c[o>>2]=0;c[l+8>>2]=0;n=k+4|0;f=(c[n>>2]|0)-(c[k>>2]|0)|0;m=f>>4;do if(m|0){if(m>>>0>268435455){Nc=176;break c}g=(f|0)==0?1:f;f=vf(g)|0;q:do if(!f)while(1){f=c[5972]|0;c[5972]=f+0;if(!f){j=0;break q}ub[f&3]();f=vf(g)|0;if(f|0){j=f;break}}else j=f;while(0);c[o>>2]=j;c[l>>2]=j;c[l+8>>2]=j+(m<<4);g=c[k>>2]|0;f=(c[n>>2]|0)-g|0;if((f|0)<=0)break;Vm(j|0,g|0,f|0)|0;c[o>>2]=j+(f>>4<<4)}while(0);c[Eb>>2]=(c[Eb>>2]|0)+12}f=c[Qb>>2]|0;g=f;if(f|0){j=c[Hb>>2]|0;if((j|0)!=(f|0))c[Hb>>2]=j+(~((j+-16-g|0)>>>4)<<4);wf(f)}p=p+1|0;f=c[s>>2]|0}while(p>>>0<(c[f+(q*12|0)+4>>2]|0)-(c[f+(q*12|0)>>2]|0)>>4>>>0);g=c[r>>2]|0}else f=j;q=q+1|0;if(q>>>0>=((g-f|0)/12|0)>>>0)break;else j=f}}if(c[(c[Ma>>2]|0)+356>>2]|0)a[$a>>0]=1;cc(vc,wc,Za);m=c[wc>>2]|0;if(m|0){f=c[Eb>>2]|0;if((f|0)!=(m|0))do{g=f;f=f+-12|0;c[Eb>>2]=f;k=c[f>>2]|0;l=k;if(k|0){g=g+-8|0;j=c[g>>2]|0;if((j|0)!=(k|0))c[g>>2]=j+(~((j+-16-l|0)>>>4)<<4);wf(k)}}while((f|0)!=(m|0));wf(m)}}K=K+1|0;f=c[qc>>2]|0;g=((c[oa>>2]|0)-f|0)/12|0;if(K>>>0>=g>>>0){x=I;break}else j=I}}if(!N)zc(b,d,vc,R);w=c[sc>>2]|0;aa=+(c[w+176>>2]|0);u=c[w+180>>2]|0;f=c[vc>>2]|0;g=c[Ka>>2]|0;j=c[Ja>>2]|0;v=j;if((g|0)!=(j|0)){m=c[f+76>>2]|0;l=c[f+72>>2]|0;t=(g-j|0)/28|0;e=0.0;Y=0.0;s=0;k=m;f=((m|0)<0)<<31>>31;m=l;l=((l|0)<0)<<31>>31;while(1){g=c[v+(s*28|0)+16>>2]|0;j=c[v+(s*28|0)+12>>2]|0;r=j;if((g|0)!=(j|0)){Yc=c[v+(s*28|0)>>2]|0;Z=+(c[Yc>>2]|0);q=g-j>>4;if(!(c[Yc+4>>2]|0)){p=0;n=m;j=f;while(1){o=r+(p<<4)|0;m=c[o>>2]|0;o=c[o+4>>2]|0;f=r+(p<<4)+8|0;g=c[f>>2]|0;f=c[f+4>>2]|0;Wc=Km(n|0,l|0,m|0,o|0)|0;Xc=E;Yc=Km(k|0,j|0,g|0,f|0)|0;_=(+(Wc>>>0)+4294967296.0*+(Xc|0))/1.0e3;$=(+(Yc>>>0)+4294967296.0*+(E|0))/1.0e3;e=e+ +H(+(_*_+$*$))/Z;p=p+1|0;if(p>>>0>=q>>>0){$=e;_=Y;j=o;break}else{n=m;l=o;k=g;j=f}}}else{p=0;n=m;j=f;while(1){o=r+(p<<4)|0;m=c[o>>2]|0;o=c[o+4>>2]|0;f=r+(p<<4)+8|0;g=c[f>>2]|0;f=c[f+4>>2]|0;Wc=Km(n|0,l|0,m|0,o|0)|0;Xc=E;Yc=Km(k|0,j|0,g|0,f|0)|0;_=(+(Wc>>>0)+4294967296.0*+(Xc|0))/1.0e3;$=(+(Yc>>>0)+4294967296.0*+(E|0))/1.0e3;Y=Y+ +H(+(_*_+$*$))/Z;p=p+1|0;if(p>>>0>=q>>>0){$=e;_=Y;j=o;break}else{n=m;l=o;k=g;j=f}}}}else{$=e;_=Y;j=l;g=k}s=s+1|0;if(s>>>0>=t>>>0)break;else{e=$;Y=_;k=g;l=j}}e=_+$;if(_>0.0&e<aa){e=aa-$;Y=+(u|0);g=0;e=_/(e<1.0?1.0:e);do{f=c[v+(g*28|0)>>2]|0;if((c[f+4>>2]|0)!=0?(xc=+(c[f>>2]|0),(~~(e*xc)|0)<(u|0)):0)e=Y/xc;g=g+1|0}while(g>>>0<t>>>0);Y=e*100.0;f=c[pa>>2]|0;Z=+(f|0);if(Y<Z){f=~~Y;f=(f|0)<1?1:f;c[pa>>2]=f}else e=Z/100.0;Y=_/e;e=aa-Y-$;if(e>.1)h[Ca>>3]=e;h[La>>3]=$+Y}else Nc=470}else{e=0.0;Nc=470}if((Nc|0)==470){Nc=0;h[La>>3]=e;f=c[pa>>2]|0}if((f|0)<51)f=c[w+192>>2]|0;else{Yc=(T(c[w+188>>2]|0,f+-50|0)|0)/50|0;f=((T(c[w+192>>2]|0,100-f|0)|0)/50|0)+Yc|0}g=c[w+128>>2]|0;if((R|0)<(g|0))f=((T(f,R)|0)>>>0)/(g>>>0)|0;_b(Pc,f);Yc=c[sc>>2]|0;ec(vc,(c[Yc+184>>2]|0)>0,c[((R|0)>0?Yc+12|0:Yc+16|0)>>2]|0);ac(vc);if(Q>>>0>=rc>>>0)break b;else o=x}if((Nc|0)==131)Bl();else if((Nc|0)==152)Bl();else if((Nc|0)==176)Bl();else if((Nc|0)==297)Bl();else if((Nc|0)==389)Bl()}while(0);db(Ic|0,0)|0;g=b+656|0;xc=+(c[Ic>>2]|0)+ +(c[Ic+4>>2]|0)/1.0e6-+h[g>>3];db(Ic|0,0)|0;h[g>>3]=+(c[Ic>>2]|0)+ +(c[Ic+4>>2]|0)/1.0e6;h[Jc>>3]=xc;sd(10896,Jc);g=c[Pc>>2]|0;if(!(c[g>>2]&128))f=1;else f=(c[g+20>>2]|0)>>>0>(c[g+28>>2]|0)>>>0?2:1;f=lb[c[g+40>>2]&31](g,0,f)|0;if((f|0)>=0){Yc=f-(c[g+8>>2]|0)+(c[g+4>>2]|0)+(c[g+20>>2]|0)-(c[g+28>>2]|0)|0;e=+(Yc|0);if((Yc|0)>1048576){e=e*9.5367431640625e-07;h[Oc>>3]=e;sd(9452,Oc)}}else e=+(f|0);if(!(e>1024.0)){_b(Pc,0);Yc=d+8|0;Yc=c[Yc>>2]|0;Xc=c[sc>>2]|0;Xc=Xc+344|0;Xc=c[Xc>>2]|0;Xc=Yc-Xc|0;Yc=c[b>>2]|0;Wc=(Yc|0)<(Xc|0);Yc=Wc?Xc:Yc;c[b>>2]=Yc;i=Rc;return}h[Qc>>3]=e*.0009765625;sd(9469,Qc);_b(Pc,0);Yc=d+8|0;Yc=c[Yc>>2]|0;Xc=c[sc>>2]|0;Xc=Xc+344|0;Xc=c[Xc>>2]|0;Xc=Yc-Xc|0;Yc=c[b>>2]|0;Wc=(Yc|0)<(Xc|0);Yc=Wc?Xc:Yc;c[b>>2]=Yc;i=Rc;return}function yc(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0;j=b+664|0;td(j,2);k=g+4|0;td(j,((c[k>>2]|0)-(c[g>>2]|0)|0)/12|0);td(j,e);td(j,f);i=d;f=(i&3|0)==0;a:do if(f){b=d;h=4}else{e=d;b=i;while(1){if(!(a[e>>0]|0))break a;e=e+1|0;b=e;if(!(b&3)){b=e;h=4;break}}}while(0);if((h|0)==4){while(1){e=c[b>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))b=b+4|0;else break}if((e&255)<<24>>24)do b=b+1|0;while((a[b>>0]|0)!=0)}td(j,b-i|0);b:do if(f){b=d;h=12}else{b=d;e=i;while(1){if(!(a[b>>0]|0)){b=e;break b}b=b+1|0;e=b;if(!(e&3)){h=12;break}}}while(0);if((h|0)==12){while(1){e=c[b>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))b=b+4|0;else break}if((e&255)<<24>>24)do b=b+1|0;while((a[b>>0]|0)!=0)}ud(j,d,b-i|0);b=c[g>>2]|0;if((c[k>>2]|0)==(b|0))return;else e=0;do{i=b;d=i+(e*12|0)|0;i=i+(e*12|0)+4|0;td(j,(c[i>>2]|0)-(c[d>>2]|0)>>4);d=c[d>>2]|0;ud(j,d,(c[i>>2]|0)-d|0);e=e+1|0;b=c[g>>2]|0}while(e>>>0<(((c[k>>2]|0)-b|0)/12|0)>>>0);return}function zc(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0,A=0,B=0,C=0;C=i;i=i+128|0;y=C+96|0;B=C+56|0;z=C+108|0;A=C;l=d+88|0;if(!(a[l>>0]|0)){i=C;return}x=b+648|0;g=c[(c[x>>2]|0)+172>>2]|0;if((g|0)>-1){j=e+64|0;k=c[j>>2]|0;if((k|0)!=(g|0)){c[j>>2]=g;Ac(b,d,e,f,k)}v=c[d+60>>2]|0;g=v;if((c[d+64>>2]|0)!=(v|0)?((c[d+76>>2]|0)-(c[d+72>>2]|0)|0)==12:0){v=e+73|0;a[v>>0]=1;cc(e,g+(f*12|0)|0,b+668|0);a[v>>0]=(c[(c[x>>2]|0)+88>>2]|0)==0&1}}v=c[x>>2]|0;v=(T(c[v+12>>2]|0,f)|0)+(c[v+16>>2]|0)|0;od(B,l,v);u=d+72|0;r=d+76|0;g=c[r>>2]|0;j=c[u>>2]|0;if((g|0)==(j|0))o=B;else{s=y+4|0;t=z+4|0;q=0;do{p=c[j+(q*12|0)>>2]|0;o=p+(f<<5)+8|0;p=p+(f<<5)+12|0;k=c[o>>2]|0;if((c[p>>2]|0)!=(k|0)){n=0;g=k;do{fc(z,g+(n*96|0)+32|0,c[(c[x>>2]|0)+164>>2]|0);pc(y,B,z);m=c[y>>2]|0;g=c[s>>2]|0;Mb(B,m,g);if(m|0){if((g|0)!=(m|0)){do{j=g;g=g+-12|0;l=c[g>>2]|0;d=l;if(l|0){j=j+-8|0;k=c[j>>2]|0;if((k|0)!=(l|0))c[j>>2]=k+(~((k+-16-d|0)>>>4)<<4);wf(l)}}while((g|0)!=(m|0));c[s>>2]=m}wf(m)}m=c[z>>2]|0;if(m|0){g=c[t>>2]|0;if((g|0)!=(m|0)){do{j=g;g=g+-12|0;l=c[g>>2]|0;d=l;if(l|0){j=j+-8|0;k=c[j>>2]|0;if((k|0)!=(l|0))c[j>>2]=k+(~((k+-16-d|0)>>>4)<<4);wf(l)}}while((g|0)!=(m|0));c[t>>2]=m}wf(m)}n=n+1|0;g=c[o>>2]|0}while(n>>>0<(((c[p>>2]|0)-g|0)/96|0)>>>0);j=c[u>>2]|0;g=c[r>>2]|0}q=q+1|0}while(q>>>0<((g-j|0)/12|0)>>>0);o=B}fc(y,o,T(c[(c[x>>2]|0)+32>>2]|0,-3)|0);m=c[y>>2]|0;n=y+4|0;g=c[n>>2]|0;Mb(B,m,g);if(m|0){if((g|0)!=(m|0)){do{j=g;g=g+-12|0;l=c[g>>2]|0;d=l;if(l|0){j=j+-8|0;k=c[j>>2]|0;if((k|0)!=(l|0))c[j>>2]=k+(~((k+-16-d|0)>>>4)<<4);wf(l)}}while((g|0)!=(m|0));c[n>>2]=m}wf(m)}fc(y,o,(c[(c[x>>2]|0)+32>>2]|0)*3|0);m=c[y>>2]|0;n=y+4|0;g=c[n>>2]|0;Mb(B,m,g);if(m|0){if((g|0)!=(m|0)){do{j=g;g=g+-12|0;l=c[g>>2]|0;d=l;if(l|0){j=j+-8|0;k=c[j>>2]|0;if((k|0)!=(l|0))c[j>>2]=k+(~((k+-16-d|0)>>>4)<<4);wf(l)}}while((g|0)!=(m|0));c[n>>2]=m}wf(m)}yc(b,10857,f,v,o);lc(z,o,0);j=c[b+80>>2]|0;g=c[b+84>>2]|0;q=A;c[q>>2]=j;c[q+4>>2]=((j|0)<0)<<31>>31;q=A+8|0;c[q>>2]=g;c[q+4>>2]=((g|0)<0)<<31>>31;q=A+16|0;g=q;j=g+36|0;do{c[g>>2]=0;g=g+4|0}while((g|0)<(j|0));u=z+4|0;j=c[u>>2]|0;g=c[z>>2]|0;r=(j|0)==(g|0);s=g;a:do if(!r){n=A+20|0;o=A+24|0;p=(j-g|0)/12|0;k=0;d=0;m=0;while(1){l=c[s+(k*12|0)>>2]|0;c[y>>2]=l;if((d|0)==(m|0))dc(q,y);else{c[d>>2]=l;c[n>>2]=d+4}k=k+1|0;if(k>>>0>=p>>>0)break a;d=c[n>>2]|0;m=c[o>>2]|0}}while(0);Mc(A);t=A+40|0;d=c[t>>2]|0;if(!r){r=y+4|0;s=y+8|0;w=f&1|0?0.0:90.0;q=e+72|0;o=b+732|0;p=e+36|0;n=0;k=g;do{m=k;l=c[d+(n<<2)>>2]|0;d=m+(l*12|0)|0;c[y>>2]=0;c[r>>2]=0;c[s>>2]=0;g=c[x>>2]|0;j=c[g+160>>2]|0;b:do if((j|0)>0){switch(c[g+148>>2]|0){case 0:break;case 1:{gc(d,y,c[g+32>>2]|0,j,c[g+136>>2]|0,0.0);break b}default:break b}k=c[g+32>>2]|0;if((j|0)>(k<<2|0)){gc(d,y,k,j<<1,c[g+136>>2]|0,0.0);b=c[x>>2]|0;gc(d,y,c[b+32>>2]|0,c[b+160>>2]<<1,c[b+136>>2]|0,90.0);break}else{gc(d,y,k,j,c[g+136>>2]|0,w);break}}while(0);a[q>>0]=1;g=c[x>>2]|0;if(c[g+88>>2]|0){j=c[p>>2]|0;if(j|0){g=c[j+4>>2]|0;if(g|0)wf(g);g=c[j+8>>2]|0;if(g|0)wf(g);g=c[j+12>>2]|0;if(g|0)wf(g);g=c[j+16>>2]|0;if(g|0)wf(g);wf(j)}if(!d)g=0;else{g=vf(88)|0;c:do if(!g)do{g=c[5972]|0;c[5972]=g+0;if(!g){g=0;break c}ub[g&3]();g=vf(88)|0}while(!(g|0));while(0);c[g>>2]=d;h[g+24>>3]=1.0;k=g+32|0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;h[g+48>>3]=1.0;k=g+56|0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;c[k+20>>2]=0;c[k+24>>2]=0;c[k+28>>2]=0;l=((c[m+(l*12|0)+4>>2]|0)-(c[d>>2]|0)|0)/12|0;k=l>>>0>536870911?-1:l<<3;k=(k|0)==0?1:k;j=vf(k)|0;d:do if(!j)do{j=c[5972]|0;c[5972]=j+0;if(!j){j=0;break d}ub[j&3]();j=vf(k)|0}while(!(j|0));while(0);c[g+4>>2]=j;j=vf(k)|0;e:do if(!j)do{j=c[5972]|0;c[5972]=j+0;if(!j){j=0;break e}ub[j&3]();j=vf(k)|0}while(!(j|0));while(0);c[g+8>>2]=j;k=l>>>0>1073741823?-1:l<<2;k=(k|0)==0?1:k;j=vf(k)|0;f:do if(!j)do{j=c[5972]|0;c[5972]=j+0;if(!j){j=0;break f}ub[j&3]();j=vf(k)|0}while(!(j|0));while(0);c[g+12>>2]=j;j=vf(k)|0;g:do if(!j)do{j=c[5972]|0;c[5972]=j+0;if(!j){j=0;break g}ub[j&3]();j=vf(k)|0}while(!(j|0));while(0);c[g+16>>2]=j}c[p>>2]=g;g=c[x>>2]|0}if(!(c[g+148>>2]|0))cc(e,d,o);cc(e,y,o);j=c[p>>2]|0;if(j|0){g=c[j+4>>2]|0;if(g|0)wf(g);g=c[j+8>>2]|0;if(g|0)wf(g);g=c[j+12>>2]|0;if(g|0)wf(g);g=c[j+16>>2]|0;if(g|0)wf(g);wf(j)}c[p>>2]=0;m=c[y>>2]|0;if(m|0){g=c[r>>2]|0;if((g|0)!=(m|0)){do{j=g;g=g+-12|0;l=c[g>>2]|0;d=l;if(l|0){j=j+-8|0;k=c[j>>2]|0;if((k|0)!=(l|0))c[j>>2]=k+(~((k+-16-d|0)>>>4)<<4);wf(l)}}while((g|0)!=(m|0));c[r>>2]=m}wf(m)}n=n+1|0;j=c[u>>2]|0;k=c[z>>2]|0;d=c[t>>2]|0}while(n>>>0<((j-k|0)/12|0)>>>0);g=k;s=k}o=j;j=d;if(d|0){k=A+44|0;l=c[k>>2]|0;if((l|0)!=(d|0))c[k>>2]=l+(~((l+-4-j|0)>>>2)<<2);wf(d)}j=c[A+28>>2]|0;k=j;if(j|0){l=A+32|0;d=c[l>>2]|0;if((d|0)!=(j|0))c[l>>2]=d+(~((d+-4-k|0)>>>2)<<2);wf(j)}l=c[A+16>>2]|0;d=l;if(l|0){j=A+20|0;k=c[j>>2]|0;if((k|0)!=(l|0))c[j>>2]=k+(~((k+-4-d|0)>>>2)<<2);wf(l)}if(s|0){if((o|0)==(s|0))g=s;else{do{k=o;o=o+-12|0;j=c[o>>2]|0;if(j|0){n=k+-8|0;k=c[n>>2]|0;if((k|0)!=(j|0)){do{l=k+-12|0;c[n>>2]=l;d=c[l>>2]|0;m=d;if(!d)k=l;else{k=k+-8|0;l=c[k>>2]|0;if((l|0)!=(d|0))c[k>>2]=l+(~((l+-16-m|0)>>>4)<<4);wf(d);k=c[n>>2]|0}}while((k|0)!=(j|0));j=c[o>>2]|0}wf(j)}}while((o|0)!=(s|0));c[u>>2]=s}wf(g)}g=c[B>>2]|0;if(g|0){m=B+4|0;j=c[m>>2]|0;if((j|0)!=(g|0)){do{k=j+-12|0;c[m>>2]=k;l=c[k>>2]|0;d=l;if(!l)j=k;else{j=j+-8|0;k=c[j>>2]|0;if((k|0)!=(l|0))c[j>>2]=k+(~((k+-16-d|0)>>>4)<<4);wf(l);j=c[m>>2]|0}}while((j|0)!=(g|0));g=c[B>>2]|0}wf(g)}i=C;return}function Ac(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;k=i;i=i+16|0;g=k;h=a+648|0;if((c[(c[h>>2]|0)+96>>2]|0)<1){i=k;return}n=b+144|0;m=a+732|0;cc(d,n,m);c[g>>2]=0;j=g+4|0;c[j>>2]=0;c[g+8>>2]=0;l=c[h>>2]|0;a=c[l+32>>2]|0;gc(n,g,a,a,c[l+136>>2]|0,+((((e|0)%2|0)*90|0)+45|0));cc(d,g,m);m=c[h>>2]|0;l=c[m+368+(f<<3)>>2]|0;a=c[m+368+(f<<3)+4>>2]|0;f=b+160|0;b=b+168|0;h=c[b>>2]|0;b=c[b+4>>2]|0;l=Km(c[f>>2]|0,c[f+4>>2]|0,l|0,((l|0)<0)<<31>>31|0)|0;f=E;a=Km(h|0,b|0,a|0,((a|0)<0)<<31>>31|0)|0;b=E;h=c[d+64>>2]|0;e=c[m+368+(h<<3)>>2]|0;h=c[m+368+(h<<3)+4>>2]|0;e=Om(l|0,f|0,e|0,((e|0)<0)<<31>>31|0)|0;f=E;h=Om(a|0,b|0,h|0,((h|0)<0)<<31>>31|0)|0;bc(d,e,f,h,E);g=c[g>>2]|0;if(g|0){a=c[j>>2]|0;if((a|0)!=(g|0)){do{b=a;a=a+-12|0;e=c[a>>2]|0;f=e;if(e|0){b=b+-8|0;d=c[b>>2]|0;if((d|0)!=(e|0))c[b>>2]=d+(~((d+-16-f|0)>>>4)<<4);wf(e)}}while((a|0)!=(g|0));c[j>>2]=g}wf(g)}i=k;return}function Bc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;b=c[a>>2]|0;if(!b)return;l=a+4|0;d=c[l>>2]|0;if((d|0)!=(b|0)){do{c[l>>2]=d+-32;k=d+-12|0;e=c[k>>2]|0;if(e|0){j=d+-8|0;f=c[j>>2]|0;if((f|0)!=(e|0)){do{g=f+-12|0;c[j>>2]=g;h=c[g>>2]|0;i=h;if(!h)f=g;else{f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(h|0))c[f>>2]=g+(~((g+-16-i|0)>>>4)<<4);wf(h);f=c[j>>2]|0}}while((f|0)!=(e|0));e=c[k>>2]|0}wf(e)}f=d+-24|0;g=c[f>>2]|0;if(g|0){e=d+-20|0;d=c[e>>2]|0;if((d|0)==(g|0))d=g;else{do{k=d+-96|0;c[e>>2]=k;Lb(k);d=c[e>>2]|0}while((d|0)!=(g|0));d=c[f>>2]|0}wf(d)}d=c[l>>2]|0}while((d|0)!=(b|0));b=c[a>>2]|0}wf(b);return}function Cc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;k=a+4|0;d=c[a>>2]|0;h=((c[k>>2]|0)-d|0)/12|0;e=h+1|0;if(e>>>0>357913941)Bl();l=a+8|0;j=((c[l>>2]|0)-d|0)/12|0;g=j<<1;g=j>>>0<178956970?(g>>>0<e>>>0?e:g):357913941;if(!g)d=0;else{if(g>>>0>357913941){l=Fa(4)|0;c[l>>2]=8316;$a(l|0,1336,91)}e=g*12|0;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}e=d+(h*12|0)|0;f=e;j=d+(g*12|0)|0;c[d+(h*12|0)+8>>2]=0;c[e>>2]=c[b>>2];g=b+4|0;c[d+(h*12|0)+4>>2]=c[g>>2];i=b+8|0;c[d+(h*12|0)+8>>2]=c[i>>2];c[i>>2]=0;c[g>>2]=0;c[b>>2]=0;b=e+12|0;g=c[a>>2]|0;d=c[k>>2]|0;if((d|0)==(g|0)){d=f;i=g;f=g}else{do{i=e+-12|0;h=d;d=d+-12|0;c[i>>2]=0;m=e+-8|0;c[m>>2]=0;c[e+-4>>2]=0;c[i>>2]=c[d>>2];i=h+-8|0;c[m>>2]=c[i>>2];h=h+-4|0;c[e+-4>>2]=c[h>>2];c[h>>2]=0;c[i>>2]=0;c[d>>2]=0;e=f+-12|0;f=e}while((d|0)!=(g|0));d=f;i=c[a>>2]|0;f=c[k>>2]|0}c[a>>2]=d;c[k>>2]=b;c[l>>2]=j;h=i;if((f|0)!=(h|0))do{d=f;f=f+-12|0;g=c[f>>2]|0;b=g;if(g|0){d=d+-8|0;e=c[d>>2]|0;if((e|0)!=(g|0))c[d>>2]=e+(~(((e+-36-b|0)>>>0)/36|0)*36|0);wf(g)}}while((f|0)!=(h|0));if(!i)return;wf(i);return}function Dc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;i=a+4|0;j=c[a>>2]|0;k=(c[i>>2]|0)-j|0;g=(k|0)/36|0;d=g+1|0;if(d>>>0>119304647)Bl();l=a+8|0;h=((c[l>>2]|0)-j|0)/36|0;f=h<<1;f=h>>>0<59652323?(f>>>0<d>>>0?d:f):119304647;if(!f)d=0;else{if(f>>>0>119304647){l=Fa(4)|0;c[l>>2]=8316;$a(l|0,1336,91)}e=f*36|0;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}h=d+(g*36|0)|0;g=d+(f*36|0)|0;f=h;d=b;e=f+36|0;do{c[f>>2]=c[d>>2];f=f+4|0;d=d+4|0}while((f|0)<(e|0));d=h+(((k|0)/-36|0)*36|0)|0;if((k|0)>0)Vm(d|0,j|0,k|0)|0;c[a>>2]=d;c[i>>2]=h+36;c[l>>2]=g;if(!j)return;wf(j);return}function Ec(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;o=c[b+4>>2]|0;n=c[b>>2]|0;q=n;if((o|0)==(n|0)){c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;return}f=c[q+4>>2]|0;d=c[n>>2]|0;l=d;a:do if((f|0)==(d|0)){e=0;b=0;g=0}else{i=c[l>>2]|0;j=c[l+4>>2]|0;h=c[l+8>>2]|0;m=(f-d|0)/36|0;k=0;e=i;g=j;b=h;while(1){e=(i|0)<(e|0)?i:e;g=(j|0)<(g|0)?j:g;b=(h|0)<(b|0)?h:b;h=c[l+(k*36|0)+12>>2]|0;e=(h|0)<(e|0)?h:e;h=c[l+(k*36|0)+16>>2]|0;g=(h|0)<(g|0)?h:g;h=c[l+(k*36|0)+20>>2]|0;b=(h|0)<(b|0)?h:b;h=c[l+(k*36|0)+24>>2]|0;e=(h|0)<(e|0)?h:e;h=c[l+(k*36|0)+28>>2]|0;g=(h|0)<(g|0)?h:g;h=c[l+(k*36|0)+32>>2]|0;b=(h|0)<(b|0)?h:b;h=k+1|0;if(h>>>0>=m>>>0)break a;k=h;i=c[l+(h*36|0)>>2]|0;j=c[l+(h*36|0)+4>>2]|0;h=c[l+(h*36|0)+8>>2]|0}}while(0);p=(o-n|0)/12|0;o=0;n=g;while(1){m=d;b:do if((f|0)==(d|0)){d=0;f=0;g=0}else{i=c[m>>2]|0;j=c[m+4>>2]|0;h=c[m+8>>2]|0;l=(f-d|0)/36|0;k=0;d=i;f=j;g=h;while(1){d=(i|0)<(d|0)?i:d;f=(j|0)<(f|0)?j:f;g=(h|0)<(g|0)?h:g;h=c[m+(k*36|0)+12>>2]|0;d=(h|0)<(d|0)?h:d;h=c[m+(k*36|0)+16>>2]|0;f=(h|0)<(f|0)?h:f;h=c[m+(k*36|0)+20>>2]|0;g=(h|0)<(g|0)?h:g;h=c[m+(k*36|0)+24>>2]|0;d=(h|0)<(d|0)?h:d;h=c[m+(k*36|0)+28>>2]|0;f=(h|0)<(f|0)?h:f;h=c[m+(k*36|0)+32>>2]|0;g=(h|0)<(g|0)?h:g;h=k+1|0;if(h>>>0>=l>>>0)break b;k=h;i=c[m+(h*36|0)>>2]|0;j=c[m+(h*36|0)+4>>2]|0;h=c[m+(h*36|0)+8>>2]|0}}while(0);e=(d|0)<(e|0)?d:e;d=(f|0)<(n|0)?f:n;b=(g|0)<(b|0)?g:b;g=o+1|0;if(g>>>0>=p>>>0)break;o=g;n=d;f=c[q+(g*12|0)+4>>2]|0;d=c[q+(g*12|0)>>2]|0}c[a>>2]=e;c[a+4>>2]=d;c[a+8>>2]=b;return}function Fc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;o=c[b+4>>2]|0;n=c[b>>2]|0;q=n;if((o|0)==(n|0)){c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;return}f=c[q+4>>2]|0;d=c[n>>2]|0;l=d;a:do if((f|0)==(d|0)){e=0;b=0;g=0}else{i=c[l>>2]|0;j=c[l+4>>2]|0;h=c[l+8>>2]|0;m=(f-d|0)/36|0;k=0;e=i;g=j;b=h;while(1){e=(i|0)>(e|0)?i:e;g=(j|0)>(g|0)?j:g;b=(h|0)>(b|0)?h:b;h=c[l+(k*36|0)+12>>2]|0;e=(h|0)>(e|0)?h:e;h=c[l+(k*36|0)+16>>2]|0;g=(h|0)>(g|0)?h:g;h=c[l+(k*36|0)+20>>2]|0;b=(h|0)>(b|0)?h:b;h=c[l+(k*36|0)+24>>2]|0;e=(h|0)>(e|0)?h:e;h=c[l+(k*36|0)+28>>2]|0;g=(h|0)>(g|0)?h:g;h=c[l+(k*36|0)+32>>2]|0;b=(h|0)>(b|0)?h:b;h=k+1|0;if(h>>>0>=m>>>0)break a;k=h;i=c[l+(h*36|0)>>2]|0;j=c[l+(h*36|0)+4>>2]|0;h=c[l+(h*36|0)+8>>2]|0}}while(0);p=(o-n|0)/12|0;o=0;n=g;while(1){m=d;b:do if((f|0)==(d|0)){d=0;f=0;g=0}else{i=c[m>>2]|0;j=c[m+4>>2]|0;h=c[m+8>>2]|0;l=(f-d|0)/36|0;k=0;d=i;f=j;g=h;while(1){d=(i|0)>(d|0)?i:d;f=(j|0)>(f|0)?j:f;g=(h|0)>(g|0)?h:g;h=c[m+(k*36|0)+12>>2]|0;d=(h|0)>(d|0)?h:d;h=c[m+(k*36|0)+16>>2]|0;f=(h|0)>(f|0)?h:f;h=c[m+(k*36|0)+20>>2]|0;g=(h|0)>(g|0)?h:g;h=c[m+(k*36|0)+24>>2]|0;d=(h|0)>(d|0)?h:d;h=c[m+(k*36|0)+28>>2]|0;f=(h|0)>(f|0)?h:f;h=c[m+(k*36|0)+32>>2]|0;g=(h|0)>(g|0)?h:g;h=k+1|0;if(h>>>0>=l>>>0)break b;k=h;i=c[m+(h*36|0)>>2]|0;j=c[m+(h*36|0)+4>>2]|0;h=c[m+(h*36|0)+8>>2]|0}}while(0);e=(d|0)>(e|0)?d:e;d=(f|0)>(n|0)?f:n;b=(g|0)>(b|0)?g:b;g=o+1|0;if(g>>>0>=p>>>0)break;o=g;n=d;f=c[q+(g*12|0)+4>>2]|0;d=c[q+(g*12|0)>>2]|0}c[a>>2]=e;c[a+4>>2]=d;c[a+8>>2]=b;return}function Gc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0;b=c[a>>2]|0;if(!b)return;k=a+4|0;d=c[k>>2]|0;if((d|0)!=(b|0)){do{c[k>>2]=d+-28;h=c[d+-12>>2]|0;e=h;if(h|0){f=d+-8|0;g=c[f>>2]|0;if((g|0)!=(h|0))c[f>>2]=g+(~(((g+-24-e|0)>>>0)/24|0)*24|0);wf(h)}i=d+-24|0;j=c[i>>2]|0;if(j|0){h=d+-20|0;d=c[h>>2]|0;if((d|0)==(j|0))d=j;else{do{e=d+-24|0;c[h>>2]=e;f=c[d+-12>>2]|0;g=f;if(!f)d=e;else{d=d+-8|0;e=c[d>>2]|0;if((e|0)!=(f|0))c[d>>2]=e+(~((e+-4-g|0)>>>2)<<2);wf(f);d=c[h>>2]|0}}while((d|0)!=(j|0));d=c[i>>2]|0}wf(d)}d=c[k>>2]|0}while((d|0)!=(b|0));b=c[a>>2]|0}wf(b);return}function Hc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0;h=a+40|0;b=c[h>>2]|0;if(b|0){i=a+44|0;d=c[i>>2]|0;if((d|0)!=(b|0)){e=d;while(1){d=e+-12|0;c[i>>2]=d;g=c[d>>2]|0;f=g;if(g){d=e+-8|0;e=c[d>>2]|0;if((e|0)!=(g|0))c[d>>2]=e+(~((e+-16-f|0)>>>4)<<4);wf(g);d=c[i>>2]|0}if((d|0)==(b|0))break;else e=d}b=c[h>>2]|0}wf(b)}h=a+28|0;b=c[h>>2]|0;if(b|0){i=a+32|0;d=c[i>>2]|0;if((d|0)!=(b|0)){do{e=d+-12|0;c[i>>2]=e;f=c[e>>2]|0;g=f;if(!f)d=e;else{d=d+-8|0;e=c[d>>2]|0;if((e|0)!=(f|0))c[d>>2]=e+(~((e+-16-g|0)>>>4)<<4);wf(f);d=c[i>>2]|0}}while((d|0)!=(b|0));b=c[h>>2]|0}wf(b)}Ic(c[a+16>>2]|0);e=c[a>>2]|0;if(!e)return;b=a+4|0;d=c[b>>2]|0;if((d|0)!=(e|0))c[b>>2]=d+(~(((d+-40-e|0)>>>0)/40|0)*40|0);wf(e);return}function Ic(a){a=a|0;if(!a)return;else{Ic(c[a>>2]|0);Ic(c[a+4>>2]|0);wf(a);return}}function Jc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=(d|0)==(b|0);a[d+12>>0]=j&1;if(j)return;while(1){h=d+8|0;j=c[h>>2]|0;f=j+12|0;if(a[f>>0]|0){e=37;break}i=j+8|0;g=c[i>>2]|0;e=c[g>>2]|0;if((e|0)==(j|0)){e=c[g+4>>2]|0;if(!e){e=8;break}e=e+12|0;if(a[e>>0]|0){e=8;break}a[f>>0]=1;a[g+12>>0]=(g|0)==(b|0)&1;a[e>>0]=1}else{if(!e){e=24;break}e=e+12|0;if(a[e>>0]|0){e=24;break}a[f>>0]=1;a[g+12>>0]=(g|0)==(b|0)&1;a[e>>0]=1}if((g|0)==(b|0)){e=37;break}else d=g}if((e|0)==8){if((c[j>>2]|0)==(d|0)){d=j;b=g}else{h=j+4|0;d=c[h>>2]|0;e=c[d>>2]|0;c[h>>2]=e;if(!e)e=g;else{c[e+8>>2]=j;e=c[i>>2]|0}f=d+8|0;c[f>>2]=e;e=c[i>>2]|0;if((c[e>>2]|0)==(j|0))c[e>>2]=d;else c[e+4>>2]=d;c[d>>2]=j;c[i>>2]=d;b=c[f>>2]|0}a[d+12>>0]=1;a[b+12>>0]=0;f=c[b>>2]|0;g=f+4|0;d=c[g>>2]|0;c[b>>2]=d;if(d|0)c[d+8>>2]=b;d=b+8|0;c[f+8>>2]=c[d>>2];e=c[d>>2]|0;if((c[e>>2]|0)==(b|0))c[e>>2]=f;else c[e+4>>2]=f;c[g>>2]=b;c[d>>2]=f;return}else if((e|0)==24){if((c[j>>2]|0)==(d|0)){f=d+4|0;e=c[f>>2]|0;c[j>>2]=e;if(!e)e=g;else{c[e+8>>2]=j;e=c[i>>2]|0}c[h>>2]=e;e=c[i>>2]|0;if((c[e>>2]|0)==(j|0))c[e>>2]=d;else c[e+4>>2]=d;c[f>>2]=j;c[i>>2]=d;g=c[h>>2]|0}else d=j;a[d+12>>0]=1;a[g+12>>0]=0;j=g+4|0;f=c[j>>2]|0;d=c[f>>2]|0;c[j>>2]=d;if(d|0)c[d+8>>2]=g;d=g+8|0;c[f+8>>2]=c[d>>2];e=c[d>>2]|0;if((c[e>>2]|0)==(g|0))c[e>>2]=f;else c[e+4>>2]=f;c[f>>2]=g;c[d>>2]=f;return}else if((e|0)==37)return}function Kc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;i=a+4|0;j=c[a>>2]|0;k=(c[i>>2]|0)-j|0;h=k>>2;d=h+1|0;if(d>>>0>1073741823)Bl();l=a+8|0;f=(c[l>>2]|0)-j|0;g=f>>1;g=f>>2>>>0<536870911?(g>>>0<d>>>0?d:g):1073741823;if(!g)d=0;else{if(g>>>0>1073741823){l=Fa(4)|0;c[l>>2]=8316;$a(l|0,1336,91)}e=g<<2;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}f=d+(h<<2)|0;c[f>>2]=c[b>>2];e=f+(0-h<<2)|0;if((k|0)>0)Vm(e|0,j|0,k|0)|0;c[a>>2]=e;c[i>>2]=f+4;c[l>>2]=d+(g<<2);if(!j)return;wf(j);return}function Lc(a){a=a|0;var b=0,d=0,e=0,f=0;if(!a)return;Lc(c[a>>2]|0);Lc(c[a+4>>2]|0);d=c[a+20>>2]|0;e=d;if(d|0){f=a+24|0;b=c[f>>2]|0;if((b|0)!=(d|0))c[f>>2]=b+(~((b+-4-e|0)>>>2)<<2);wf(d)}wf(a);return}function Mc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0.0,h=0.0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0.0,C=0,D=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,T=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0.0;ga=i;i=i+16|0;da=ga;ea=a+16|0;fa=a+20|0;ca=c[ea>>2]|0;f=ca;do if((c[fa>>2]|0)!=(ca|0)){y=a+32|0;z=a+36|0;t=a+28|0;e=a+8|0;s=0;b=0;l=0;r=0;while(1){c[da>>2]=-1;j=c[f+(s<<2)>>2]|0;f=c[j+4>>2]|0;j=c[j>>2]|0;m=j;if((f|0)==(j|0))j=-1;else{o=a;n=c[o>>2]|0;o=c[o+4>>2]|0;q=e;p=c[q>>2]|0;q=c[q+4>>2]|0;k=f-j>>4;g=18446744073709551616.0;f=0;j=-1;do{aa=m+(f<<4)|0;ca=m+(f<<4)+8|0;$=c[ca>>2]|0;ca=c[ca+4>>2]|0;aa=Km(c[aa>>2]|0,c[aa+4>>2]|0,n|0,o|0)|0;ba=E;ca=Km($|0,ca|0,p|0,q|0)|0;B=+(aa>>>0)+4294967296.0*+(ba|0);h=+(ca>>>0)+4294967296.0*+(E|0);h=B*B+h*h;if(h<g){c[da>>2]=f;g=h;j=f}f=f+1|0}while(f>>>0<k>>>0)}f=c[y>>2]|0;if((f|0)==(c[z>>2]|0))Nc(t,da);else{c[f>>2]=j;c[y>>2]=f+4}if((l|0)==(r<<5|0)){if((l+1|0)<0){ba=17;break}f=r<<6;ca=l+32&-32;f=l>>>0<1073741823?(f>>>0<ca>>>0?ca:f):2147483647;if(l>>>0<f>>>0){if((f|0)<0){ba=20;break}m=((f+-1|0)>>>5)+1|0;j=m<<2;f=vf(j)|0;a:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break a}ub[f&3]();f=vf(j)|0}while(!(f|0));while(0);j=f;k=b;l=(l&31)+(k+(l>>>5<<2)-b<<3)|0;if((l|0)>0?(v=l>>>5,$m(f|0,b|0,v<<2|0)|0,w=l-(v<<5)|0,x=f+(v<<2)|0,(w|0)>0):0){ca=-1>>>(32-w|0);c[x>>2]=c[x>>2]&~ca|c[k+(v<<2)>>2]&ca}if(!b){b=j;j=m}else{wf(b);b=j;j=m}}else j=r}else j=r;ca=b;k=ca+(l>>>5<<2)|0;c[k>>2]=c[k>>2]&~(1<<(l&31));s=s+1|0;k=c[fa>>2]|0;m=c[ea>>2]|0;f=m;if(s>>>0>=k-m>>2>>>0){ba=4;break}else{l=l+1|0;r=j}}if((ba|0)==4){if((k|0)==(m|0)){d=a;ba=5;break}O=e;o=a;Z=a+28|0;_=a+44|0;$=a+48|0;aa=a+40|0;Y=0;X=k;W=m;n=c[o>>2]|0;o=c[o+4>>2]|0;p=c[O>>2]|0;O=c[O+4>>2]|0;P=0;Q=0;j=0;k=0;N=f;T=f;V=f;R=f;while(1){c[da>>2]=-1;do if((X|0)!=(W|0)){L=X-W>>2;M=W;d=0;g=18446744073709551616.0;K=-1;f=N;while(1){b:do if(!(c[ca+(d>>>5<<2)>>2]&1<<(d&31))){D=c[f+(d<<2)>>2]|0;I=c[D>>2]|0;J=I;switch((c[D+4>>2]|0)-I>>4|0){case 0:{r=K;break b}case 2:break;default:{I=c[(c[Z>>2]|0)+(d<<2)>>2]|0;C=J+(I<<4)|0;J=J+(I<<4)+8|0;I=c[J>>2]|0;J=c[J+4>>2]|0;C=Km(c[C>>2]|0,c[C+4>>2]|0,n|0,o|0)|0;D=E;B=+(C>>>0)+4294967296.0*+(D|0);h=+((Km(I|0,J|0,p|0,O|0)|0)>>>0)+4294967296.0*+(E|0);h=B*B+h*h;if(!(h<g)){r=K;break b}c[da>>2]=d;g=h;r=d;break b}}f=J;m=c[f>>2]|0;f=c[f+4>>2]|0;D=J+8|0;l=D;q=c[l>>2]|0;l=c[l+4>>2]|0;s=Km(m|0,f|0,n|0,o|0)|0;r=E;C=Km(q|0,l|0,p|0,O|0)|0;h=+(s>>>0)+4294967296.0*+(r|0);B=+(C>>>0)+4294967296.0*+(E|0);C=J+16|0;r=C;s=c[r>>2]|0;r=c[r+4>>2]|0;I=J+24|0;t=I;u=c[t>>2]|0;t=c[t+4>>2]|0;v=Km(s|0,r|0,m|0,f|0)|0;w=E;x=Km(u|0,t|0,q|0,l|0)|0;y=E;ia=Ym(v|0,w|0,v|0,w|0)|0;ha=E;z=Ym(x|0,y|0,x|0,y|0)|0;ha=Om(z|0,E|0,ia|0,ha|0)|0;ja=+H(+(+(ha>>>0)+4294967296.0*+(E|0)));ha=~~ja>>>0;ia=+G(ja)>=1.0?(ja>0.0?~~+U(+F(ja/4294967296.0),4294967295.0)>>>0:~~+S((ja-+(~~ja>>>0))/4294967296.0)>>>0):0;z=Sm(0,ha|0,32)|0;A=E;if((ia|0)<0|(ia|0)==0&ha>>>0<1){v=1e3;w=0;x=0;y=0}else{w=Ym(v|0,w|0,1e3,0)|0;v=E;y=Ym(x|0,y|0,1e3,0)|0;x=E;v=Rm(w|0,v|0,z|0,A|0)|0;w=E;x=Rm(y|0,x|0,z|0,A|0)|0;y=E}ia=Ym(v|0,w|0,P|0,Q|0)|0;z=E;ha=Ym(x|0,y|0,j|0,k|0)|0;z=Om(ha|0,E|0,ia|0,z|0)|0;ia=E;ha=(ia|0)>-1|(ia|0)==-1&z>>>0>4294967295;A=Km(0,0,z|0,ia|0)|0;h=h*h+B*B+(+((ha?z:A)>>>0)+4294967296.0*+((ha?ia:E)|0))*9.999999747378752e-05;if(h<g){c[da>>2]=d;c[(c[Z>>2]|0)+(d<<2)>>2]=0;r=C;t=I;f=J;l=D;K=d;s=c[r>>2]|0;r=c[r+4>>2]|0;u=c[t>>2]|0;t=c[t+4>>2]|0;m=c[f>>2]|0;f=c[f+4>>2]|0;q=c[l>>2]|0;l=c[l+4>>2]|0}else h=g;J=Km(s|0,r|0,n|0,o|0)|0;ia=E;ha=Km(u|0,t|0,p|0,O|0)|0;g=+(J>>>0)+4294967296.0*+(ia|0);B=+(ha>>>0)+4294967296.0*+(E|0);r=Km(m|0,f|0,s|0,r|0)|0;s=E;f=Km(q|0,l|0,u|0,t|0)|0;l=E;ha=Ym(r|0,s|0,r|0,s|0)|0;ia=E;m=Ym(f|0,l|0,f|0,l|0)|0;ia=Om(m|0,E|0,ha|0,ia|0)|0;ja=+H(+(+(ia>>>0)+4294967296.0*+(E|0)));ia=~~ja>>>0;ha=+G(ja)>=1.0?(ja>0.0?~~+U(+F(ja/4294967296.0),4294967295.0)>>>0:~~+S((ja-+(~~ja>>>0))/4294967296.0)>>>0):0;m=Sm(0,ia|0,32)|0;q=E;if((ha|0)<0|(ha|0)==0&ia>>>0<1){f=1e3;l=0;m=0;q=0}else{I=Ym(r|0,s|0,1e3,0)|0;J=E;ha=Ym(f|0,l|0,1e3,0)|0;ia=E;f=Rm(I|0,J|0,m|0,q|0)|0;l=E;m=Rm(ha|0,ia|0,m|0,q|0)|0;q=E}ia=Ym(f|0,l|0,P|0,Q|0)|0;I=E;ha=Ym(m|0,q|0,j|0,k|0)|0;I=Om(ha|0,E|0,ia|0,I|0)|0;ia=E;ha=(ia|0)>-1|(ia|0)==-1&I>>>0>4294967295;J=Km(0,0,I|0,ia|0)|0;g=g*g+B*B+(+((ha?I:J)>>>0)+4294967296.0*+((ha?ia:E)|0))*9.999999747378752e-05;if(g<h){c[da>>2]=d;c[(c[Z>>2]|0)+(d<<2)>>2]=1;r=d}else{g=h;r=K}}else r=K;while(0);d=d+1|0;if(d>>>0<L>>>0){K=r;f=M}else break}if((r|0)>-1){ha=c[N+(r<<2)>>2]|0;ia=c[ha>>2]|0;d=c[(c[Z>>2]|0)+(r<<2)>>2]|0;f=ia;if(((c[ha+4>>2]|0)-ia|0)==32){q=(d+1|0)%2|0;o=f+(q<<4)|0;n=c[o>>2]|0;o=c[o+4>>2]|0;q=f+(q<<4)+8|0;p=c[q>>2]|0;q=c[q+4>>2]|0;ha=f+(d<<4)|0;j=f+(d<<4)+8|0;k=c[j>>2]|0;j=c[j+4>>2]|0;d=Km(n|0,o|0,c[ha>>2]|0,c[ha+4>>2]|0)|0;f=E;j=Km(p|0,q|0,k|0,j|0)|0;k=E;ha=Ym(d|0,f|0,d|0,f|0)|0;ia=E;l=Ym(j|0,k|0,j|0,k|0)|0;ia=Om(l|0,E|0,ha|0,ia|0)|0;ja=+H(+(+(ia>>>0)+4294967296.0*+(E|0)));ia=~~ja>>>0;ha=+G(ja)>=1.0?(ja>0.0?~~+U(+F(ja/4294967296.0),4294967295.0)>>>0:~~+S((ja-+(~~ja>>>0))/4294967296.0)>>>0):0;l=Sm(0,ia|0,32)|0;m=E;if((ha|0)<0|(ha|0)==0&ia>>>0<1){d=0;f=0;j=1e3;k=0}else{ha=Ym(d|0,f|0,1e3,0)|0;ia=E;f=Ym(j|0,k|0,1e3,0)|0;d=E;j=Rm(ha|0,ia|0,l|0,m|0)|0;k=E;d=Rm(f|0,d|0,l|0,m|0)|0;f=E}f=Km(0,0,d|0,f|0)|0;l=E}else{o=f+(d<<4)|0;q=f+(d<<4)+8|0;n=c[o>>2]|0;o=c[o+4>>2]|0;p=c[q>>2]|0;q=c[q+4>>2]|0;f=0;l=0;j=0;k=0}d=ca+(r>>>5<<2)|0;c[d>>2]=c[d>>2]|1<<(r&31);d=c[_>>2]|0;if((d|0)==(c[$>>2]|0)){Nc(aa,da);r=c[ea>>2]|0;u=r;m=c[fa>>2]|0;s=u;t=u;d=l;break}else{c[d>>2]=c[da>>2];c[_>>2]=d+4;r=W;m=X;s=T;t=V;u=R;d=l;break}}else{r=W;m=X;s=T;t=V;u=R;q=O;f=P;d=Q}}else{r=W;m=W;s=T;t=V;u=R;q=O;f=P;d=Q}while(0);Y=Y+1|0;if(Y>>>0>=m-r>>2>>>0){A=_;C=aa;K=b;d=a;D=e;J=s;I=t;break}else{X=m;W=r;O=q;P=f;Q=d;N=r;T=s;V=t;R=u}}}else if((ba|0)==17)Bl();else if((ba|0)==20)Bl()}else{b=0;d=a;e=a+8|0;ba=5}while(0);if((ba|0)==5){A=a+44|0;C=a+40|0;K=b;D=e;J=f;I=f;u=f}e=c[A>>2]|0;b=c[C>>2]|0;t=b;if((e|0)!=(b|0)){s=a+28|0;r=e-b>>2;q=0;f=d;b=D;d=u;e=I;while(1){o=b;n=c[o>>2]|0;o=c[o+4>>2]|0;m=f;l=c[m>>2]|0;m=c[m+4>>2]|0;p=c[t+(q<<2)>>2]|0;d=c[d+(p<<2)>>2]|0;if((c[d+4>>2]|0)==(c[d>>2]|0))b=-1;else{j=c[e+(p<<2)>>2]|0;k=(c[j+4>>2]|0)-(c[j>>2]|0)>>4;f=0;h=18446744073709551616.0;b=-1;while(1){e=c[d>>2]|0;ia=e+(f<<4)|0;e=e+(f<<4)+8|0;ha=c[e>>2]|0;e=c[e+4>>2]|0;ia=Km(c[ia>>2]|0,c[ia+4>>2]|0,l|0,m|0)|0;d=E;e=Km(ha|0,e|0,n|0,o|0)|0;ja=+(ia>>>0)+4294967296.0*+(d|0);g=+(e>>>0)+4294967296.0*+(E|0);g=ja*ja+g*g;e=g<h;b=e?f:b;d=f+1|0;if(d>>>0<k>>>0){f=d;h=e?g:h;d=j}else break}}c[(c[s>>2]|0)+(p<<2)>>2]=b;ha=c[J+(p<<2)>>2]|0;ia=c[ha>>2]|0;d=ia;b=(c[ha+4>>2]|0)-ia>>4>>>0<3?(b+1|0)%2|0:b;q=q+1|0;if(q>>>0>=r>>>0)break;else{f=d+(b<<4)|0;b=d+(b<<4)+8|0;d=J;e=J}}}if(!K){i=ga;return}wf(K);i=ga;return}function Nc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;i=a+4|0;j=c[a>>2]|0;k=(c[i>>2]|0)-j|0;h=k>>2;d=h+1|0;if(d>>>0>1073741823)Bl();l=a+8|0;f=(c[l>>2]|0)-j|0;g=f>>1;g=f>>2>>>0<536870911?(g>>>0<d>>>0?d:g):1073741823;if(!g)d=0;else{if(g>>>0>1073741823){l=Fa(4)|0;c[l>>2]=8316;$a(l|0,1336,91)}e=g<<2;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}f=d+(h<<2)|0;c[f>>2]=c[b>>2];e=f+(0-h<<2)|0;if((k|0)>0)Vm(e|0,j|0,k|0)|0;c[a>>2]=e;c[i>>2]=f+4;c[l>>2]=d+(g<<2);if(!j)return;wf(j);return}function Oc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0.0;B=a+4|0;f=c[B>>2]|0;d=c[a>>2]|0;b=(f-d>>4)+-1|0;e=d;if((f|0)==(d|0))return;A=e+(b<<4)+8|0;y=e+(b<<4)|0;b=0;x=c[y>>2]|0;y=c[y+4>>2]|0;z=c[A>>2]|0;A=c[A+4>>2]|0;while(1){i=e+(b<<4)|0;v=c[i>>2]|0;i=c[i+4>>2]|0;g=e+(b<<4)+8|0;w=c[g>>2]|0;g=c[g+4>>2]|0;h=Km(x|0,y|0,v|0,i|0)|0;j=E;k=Km(z|0,A|0,w|0,g|0)|0;l=E;u=Om(h|0,j|0,10,0)|0;t=E;if(!(t>>>0>0|(t|0)==0&u>>>0>20)?(s=Om(k|0,l|0,10,0)|0,r=E,q=Ym(k|0,l|0,k|0,l|0)|0,t=E,u=Ym(h|0,j|0,h|0,j|0)|0,u=Om(q|0,t|0,u|0,E|0)|0,t=E,(r>>>0<0|(r|0)==0&s>>>0<21)&(t>>>0<0|(t|0)==0&u>>>0<101)):0){g=e+(b<<4)|0;d=g+16|0;e=f-d|0;h=e>>4;if(!h)d=f;else{$m(g|0,d|0,e|0)|0;f=c[B>>2]|0;d=f}e=g+(h<<4)|0;if((f|0)!=(e|0)){d=f+(~((f+-16-e|0)>>>4)<<4)|0;c[B>>2]=d}b=b+-1|0;f=d;j=x;i=y;h=z;g=A}else{u=Om(h|0,j|0,500,0)|0;t=E;if(!(t>>>0>0|(t|0)==0&u>>>0>1e3)?(s=Om(k|0,l|0,500,0)|0,r=E,q=Ym(k|0,l|0,k|0,l|0)|0,t=E,u=Ym(h|0,j|0,h|0,j|0)|0,u=Om(q|0,t|0,u|0,E|0)|0,t=E,(r>>>0<0|(r|0)==0&s>>>0<1001)&(t>>>0<0|(t|0)==0&u>>>0<250001)):0){if(b>>>0<((f-d>>4)+-1|0)>>>0){d=b+1|0;h=e+(d<<4)|0;d=e+(d<<4)+8|0}else{h=e;d=e+8|0}q=d;p=c[q>>2]|0;q=c[q+4>>2]|0;o=h;n=c[o>>2]|0;o=c[o+4>>2]|0;d=Km(v|0,i|0,x|0,y|0)|0;h=E;j=Km(w|0,g|0,z|0,A|0)|0;k=E;t=Ym(d|0,h|0,d|0,h|0)|0;u=E;l=Ym(j|0,k|0,j|0,k|0)|0;u=Om(l|0,E|0,t|0,u|0)|0;C=+H(+(+(u>>>0)+4294967296.0*+(E|0)));u=~~C>>>0;t=+G(C)>=1.0?(C>0.0?~~+U(+F(C/4294967296.0),4294967295.0)>>>0:~~+S((C-+(~~C>>>0))/4294967296.0)>>>0):0;l=Sm(0,u|0,32)|0;m=E;if((t|0)<0|(t|0)==0&u>>>0<1){r=1e7;s=0;t=0;u=0}else{s=Ym(d|0,h|0,1e7,0)|0;r=E;u=Ym(j|0,k|0,1e7,0)|0;t=E;r=Rm(s|0,r|0,l|0,m|0)|0;s=E;t=Rm(u|0,t|0,l|0,m|0)|0;u=E}l=Km(v|0,i|0,n|0,o|0)|0;m=E;d=Km(w|0,g|0,p|0,q|0)|0;h=E;j=Ym(l|0,m|0,l|0,m|0)|0;p=E;q=Ym(d|0,h|0,d|0,h|0)|0;q=Om(j|0,p|0,q|0,E|0)|0;C=+H(+(+(q>>>0)+4294967296.0*+(E|0)));q=~~C>>>0;p=+G(C)>=1.0?(C>0.0?~~+U(+F(C/4294967296.0),4294967295.0)>>>0:~~+S((C-+(~~C>>>0))/4294967296.0)>>>0):0;j=Sm(0,q|0,32)|0;k=E;if((p|0)<0|(p|0)==0&q>>>0<1){d=1e7;h=0;j=0;k=0}else{n=Ym(l|0,m|0,1e7,0)|0;o=E;p=Ym(d|0,h|0,1e7,0)|0;q=E;d=Rm(n|0,o|0,j|0,k|0)|0;h=E;j=Rm(p|0,q|0,j|0,k|0)|0;k=E}r=Ym(d|0,h|0,r|0,s|0)|0;s=E;u=Ym(j|0,k|0,t|0,u|0)|0;u=Om(u|0,E|0,r|0,s|0)|0;t=E;if((t|0)<-23284|(t|0)==-23284&u>>>0<4018520065){h=e+(b<<4)|0;d=h+16|0;e=f-d|0;i=e>>4;if(!i){g=f;d=f}else{$m(h|0,d|0,e|0)|0;d=c[B>>2]|0;g=d}e=h+(i<<4)|0;if((g|0)!=(e|0)){d=g+(~((g+-16-e|0)>>>4)<<4)|0;c[B>>2]=d}b=b+-1|0;f=d;j=x;i=y;h=z;g=A}else{j=v;h=w}}else{j=v;h=w}}b=b+1|0;e=c[a>>2]|0;if(b>>>0<f-e>>4>>>0){d=e;x=j;y=i;z=h;A=g}else break}return}function Pc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;d=(c[a>>2]|0)+(b*12|0)|0;b=d+12|0;i=a+4|0;h=c[i>>2]|0;if((b|0)!=(h|0)){do{f=c[d>>2]|0;a=f;g=d+4|0;if(!f)a=d+8|0;else{e=c[g>>2]|0;if((e|0)!=(f|0))c[g>>2]=e+(~((e+-16-a|0)>>>4)<<4);wf(f);a=d+8|0;c[a>>2]=0;c[g>>2]=0;c[d>>2]=0}c[d>>2]=c[b>>2];f=b+4|0;c[g>>2]=c[f>>2];g=b+8|0;c[a>>2]=c[g>>2];c[g>>2]=0;c[f>>2]=0;c[b>>2]=0;b=b+12|0;d=d+12|0}while((b|0)!=(h|0));b=c[i>>2]|0;if((b|0)==(d|0))return}a=b;while(1){b=a+-12|0;c[i>>2]=b;e=c[b>>2]|0;f=e;if(e){b=a+-8|0;a=c[b>>2]|0;if((a|0)!=(e|0))c[b>>2]=a+(~((a+-16-f|0)>>>4)<<4);wf(e);b=c[i>>2]|0}if((b|0)==(d|0))break;else a=b}return}function Qc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;i=a+4|0;j=c[a>>2]|0;k=(c[i>>2]|0)-j|0;h=k>>3;d=h+1|0;if(d>>>0>536870911)Bl();l=a+8|0;f=(c[l>>2]|0)-j|0;g=f>>2;g=f>>3>>>0<268435455?(g>>>0<d>>>0?d:g):536870911;if(!g)d=0;else{if(g>>>0>536870911){l=Fa(4)|0;c[l>>2]=8316;$a(l|0,1336,91)}e=g<<3;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}f=d+(h<<3)|0;m=b;b=c[m+4>>2]|0;e=f;c[e>>2]=c[m>>2];c[e+4>>2]=b;e=f+(0-h<<3)|0;if((k|0)>0)Vm(e|0,j|0,k|0)|0;c[a>>2]=e;c[i>>2]=f+8;c[l>>2]=d+(g<<3);if(!j)return;wf(j);return}function Rc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;f=c[b+4>>2]|0;h=c[b>>2]|0;n=h;g=a[d>>0]|0;a:do if((f|0)==(h|0))o=22;else{m=f-h>>3;b:do if(!(g<<24>>24)){f=0;while(1){if(!(a[c[n+(f<<3)>>2]>>0]|0)){k=f;break b}f=f+1|0;if(f>>>0>=m>>>0){h=13701;f=1;g=0;o=23;break a}}}else{l=0;while(1){k=c[n+(l<<3)>>2]|0;j=d;f=g;while(1){i=a[k>>0]|0;f=f<<24>>24;if(!(i<<24>>24)){h=0;o=11;break}h=(f+-65|0)>>>0<26?f|32:f;f=i<<24>>24;f=(f+-65|0)>>>0<26?f|32:f;if((h|0)!=(f|0)){o=9;break}j=j+1|0;k=k+1|0;f=a[j>>0]|0;if(!(f<<24>>24)){o=6;break}}if((o|0)==6){h=a[k>>0]|0;f=0;o=11}else if((o|0)==9){o=0;f=h-f|0}if((o|0)==11){o=0;f=f-(h<<24>>24)|0}if(!f){k=l;break b}l=l+1|0;if(l>>>0>=m>>>0){o=22;break a}}}while(0);h=e;while(1){f=a[h>>0]|0;g=f<<24>>24;i=h+1|0;if(f<<24>>24==32|(g+-9|0)>>>0<5)h=i;else break}switch(g|0){case 45:{f=1;o=17;break}case 43:{f=0;o=17;break}default:j=0}if((o|0)==17){j=f;h=i;f=a[i>>0]|0}g=(f<<24>>24)+-48|0;if(g>>>0<10){f=0;do{h=h+1|0;f=(f*10|0)-g|0;g=(a[h>>0]|0)+-48|0}while(g>>>0<10)}else f=0;c[c[n+(k<<3)+4>>2]>>2]=j|0?f:0-f|0;e=1;return e|0}while(0);c:do if((o|0)==22)if(!(g<<24>>24)){h=13701;f=1;g=0;o=23}else{f=13701;k=d;h=g;while(1){j=a[f>>0]|0;h=h<<24>>24;if(!(j<<24>>24)){f=0;i=0;o=28;break c}i=(h+-65|0)>>>0<26?h|32:h;h=j<<24>>24;h=(h+-65|0)>>>0<26?h|32:h;if((i|0)!=(h|0))break;k=k+1|0;f=f+1|0;h=a[k>>0]|0;if(!(h<<24>>24)){h=f;f=0;o=23;break c}}h=i-h|0;l=0}while(0);if((o|0)==23){i=a[h>>0]|0;h=0;o=28}if((o|0)==28){h=h-(i<<24>>24)|0;l=f}if(!h){l=b+496|0;h=e;d:do if(!(h&3)){f=e;o=33}else{f=e;g=h;while(1){if(!(a[f>>0]|0)){f=g;break d}f=f+1|0;g=f;if(!(g&3)){o=33;break}}}while(0);if((o|0)==33){while(1){g=c[f>>2]|0;if(!((g&-2139062144^-2139062144)&g+-16843009))f=f+4|0;else break}if((g&255)<<24>>24)do f=f+1|0;while((a[f>>0]|0)!=0)}k=f-h|0;g=l+11|0;f=(a[g>>0]|0)<0;if(f)j=(c[b+504>>2]&2147483647)+-1|0;else j=10;if(k>>>0<=j>>>0){if(f)f=c[l>>2]|0;else f=l;if(k|0)$m(f|0,e|0,k|0)|0;a[f+k>>0]=0;if((a[g>>0]|0)<0){c[b+500>>2]=k;e=1;return e|0}else{a[g>>0]=k;e=1;return e|0}}if((-18-j|0)>>>0<(k-j|0)>>>0)Il();if(f)i=c[l>>2]|0;else i=l;if(j>>>0<2147483623){h=j<<1;h=k>>>0<h>>>0?h:k;h=h>>>0<11?11:h+16&-16}else h=-17;g=(h|0)==0?1:h;f=vf(g)|0;e:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break e}ub[f&3]();f=vf(g)|0}while(!(f|0));while(0);if(k|0)Vm(f|0,e|0,k|0)|0;if((j|0)!=10)wf(i);c[l>>2]=f;c[b+504>>2]=h|-2147483648;c[b+500>>2]=k;a[f+k>>0]=0;e=1;return e|0}f:do if(l){f=13711;o=65}else{f=13711;k=d;h=g;while(1){j=a[f>>0]|0;i=h<<24>>24;if(!(j<<24>>24)){h=0;f=i;o=70;break f}i=(i+-65|0)>>>0<26?i|32:i;h=j<<24>>24;h=(h+-65|0)>>>0<26?h|32:h;if((i|0)!=(h|0))break;k=k+1|0;f=f+1|0;h=a[k>>0]|0;if(!(h<<24>>24)){o=65;break f}}f=i-h|0}while(0);if((o|0)==65){h=a[f>>0]|0;f=0;o=70}if((o|0)==70)f=f-(h<<24>>24)|0;if(!f){l=b+508|0;h=e;g:do if(!(h&3)){f=e;o=75}else{f=e;g=h;while(1){if(!(a[f>>0]|0)){f=g;break g}f=f+1|0;g=f;if(!(g&3)){o=75;break}}}while(0);if((o|0)==75){while(1){g=c[f>>2]|0;if(!((g&-2139062144^-2139062144)&g+-16843009))f=f+4|0;else break}if((g&255)<<24>>24)do f=f+1|0;while((a[f>>0]|0)!=0)}k=f-h|0;g=l+11|0;f=(a[g>>0]|0)<0;if(f)j=(c[b+516>>2]&2147483647)+-1|0;else j=10;if(k>>>0<=j>>>0){if(f)f=c[l>>2]|0;else f=l;if(k|0)$m(f|0,e|0,k|0)|0;a[f+k>>0]=0;if((a[g>>0]|0)<0){c[b+512>>2]=k;e=1;return e|0}else{a[g>>0]=k;e=1;return e|0}}if((-18-j|0)>>>0<(k-j|0)>>>0)Il();if(f)i=c[l>>2]|0;else i=l;if(j>>>0<2147483623){h=j<<1;h=k>>>0<h>>>0?h:k;h=h>>>0<11?11:h+16&-16}else h=-17;g=(h|0)==0?1:h;f=vf(g)|0;h:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break h}ub[f&3]();f=vf(g)|0}while(!(f|0));while(0);if(k|0)Vm(f|0,e|0,k|0)|0;if((j|0)!=10)wf(i);c[l>>2]=f;c[b+516>>2]=h|-2147483648;c[b+512>>2]=k;a[f+k>>0]=0;e=1;return e|0}i:do if(l){f=13719;o=107}else{f=13719;k=d;h=g;while(1){j=a[f>>0]|0;i=h<<24>>24;if(!(j<<24>>24)){h=0;f=i;o=112;break i}i=(i+-65|0)>>>0<26?i|32:i;h=j<<24>>24;h=(h+-65|0)>>>0<26?h|32:h;if((i|0)!=(h|0))break;k=k+1|0;f=f+1|0;h=a[k>>0]|0;if(!(h<<24>>24)){o=107;break i}}f=i-h|0}while(0);if((o|0)==107){h=a[f>>0]|0;f=0;o=112}if((o|0)==112)f=f-(h<<24>>24)|0;if(!f){l=b+520|0;h=e;j:do if(!(h&3)){f=e;o=117}else{f=e;g=h;while(1){if(!(a[f>>0]|0)){f=g;break j}f=f+1|0;g=f;if(!(g&3)){o=117;break}}}while(0);if((o|0)==117){while(1){g=c[f>>2]|0;if(!((g&-2139062144^-2139062144)&g+-16843009))f=f+4|0;else break}if((g&255)<<24>>24)do f=f+1|0;while((a[f>>0]|0)!=0)}k=f-h|0;g=l+11|0;f=(a[g>>0]|0)<0;if(f)j=(c[b+528>>2]&2147483647)+-1|0;else j=10;if(k>>>0<=j>>>0){if(f)f=c[l>>2]|0;else f=l;if(k|0)$m(f|0,e|0,k|0)|0;a[f+k>>0]=0;if((a[g>>0]|0)<0){c[b+524>>2]=k;e=1;return e|0}else{a[g>>0]=k;e=1;return e|0}}if((-18-j|0)>>>0<(k-j|0)>>>0)Il();if(f)i=c[l>>2]|0;else i=l;if(j>>>0<2147483623){h=j<<1;h=k>>>0<h>>>0?h:k;h=h>>>0<11?11:h+16&-16}else h=-17;g=(h|0)==0?1:h;f=vf(g)|0;k:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break k}ub[f&3]();f=vf(g)|0}while(!(f|0));while(0);if(k|0)Vm(f|0,e|0,k|0)|0;if((j|0)!=10)wf(i);c[l>>2]=f;c[b+528>>2]=h|-2147483648;c[b+524>>2]=k;a[f+k>>0]=0;e=1;return e|0}l:do if(l){f=13741;o=149}else{f=13741;j=d;while(1){i=a[f>>0]|0;h=g<<24>>24;if(!(i<<24>>24)){g=0;f=h;o=154;break l}h=(h+-65|0)>>>0<26?h|32:h;g=i<<24>>24;g=(g+-65|0)>>>0<26?g|32:g;if((h|0)!=(g|0))break;j=j+1|0;f=f+1|0;g=a[j>>0]|0;if(!(g<<24>>24)){o=149;break l}}f=h-g|0}while(0);if((o|0)==149){g=a[f>>0]|0;f=0;o=154}if((o|0)==154)f=f-(g<<24>>24)|0;if(f|0){e=0;return e|0}l=b+532|0;h=e;m:do if(!(h&3)){f=e;o=159}else{f=e;g=h;while(1){if(!(a[f>>0]|0)){f=g;break m}f=f+1|0;g=f;if(!(g&3)){o=159;break}}}while(0);if((o|0)==159){while(1){g=c[f>>2]|0;if(!((g&-2139062144^-2139062144)&g+-16843009))f=f+4|0;else break}if((g&255)<<24>>24)do f=f+1|0;while((a[f>>0]|0)!=0)}k=f-h|0;g=l+11|0;f=(a[g>>0]|0)<0;if(f)j=(c[b+540>>2]&2147483647)+-1|0;else j=10;if(k>>>0<=j>>>0){if(f)f=c[l>>2]|0;else f=l;if(k|0)$m(f|0,e|0,k|0)|0;a[f+k>>0]=0;if((a[g>>0]|0)<0){c[b+536>>2]=k;e=1;return e|0}else{a[g>>0]=k;e=1;return e|0}}if((-18-j|0)>>>0<(k-j|0)>>>0)Il();if(f)i=c[l>>2]|0;else i=l;if(j>>>0<2147483623){h=j<<1;h=k>>>0<h>>>0?h:k;h=h>>>0<11?11:h+16&-16}else h=-17;g=(h|0)==0?1:h;f=vf(g)|0;n:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break n}ub[f&3]();f=vf(g)|0}while(!(f|0));while(0);if(k|0)Vm(f|0,e|0,k|0)|0;if((j|0)!=10)wf(i);c[l>>2]=f;c[b+540>>2]=h|-2147483648;c[b+536>>2]=k;a[f+k>>0]=0;e=1;return e|0}function Sc(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0;Y=i;i=i+288|0;O=Y+16|0;N=Y+8|0;R=Y;J=Y+272|0;K=Y+268|0;L=Y+256|0;X=Y+68|0;T=Y+56|0;P=Y+44|0;Q=Y+32|0;V=X+108|0;S=X+8|0;c[X>>2]=1484;c[V>>2]=1504;c[X+4>>2]=0;c[X+132>>2]=S;c[X+124>>2]=0;c[X+128>>2]=0;c[X+112>>2]=4098;c[X+120>>2]=0;c[X+116>>2]=6;W=X+140|0;U=X+136|0;g=W;h=g+40|0;do{c[g>>2]=0;g=g+4|0}while((g|0)<(h|0));if(!(a[21400]|0)){a[21400]=1;if(!(a[21232]|0)){a[21232]=1;Cl();c[5949]=21240;f=21240}else f=c[5949]|0;c[5950]=f;I=f+4|0;c[I>>2]=(c[I>>2]|0)+1}else f=c[5950]|0;c[U>>2]=f;g=f+4|0;c[g>>2]=(c[g>>2]|0)+1;c[X+180>>2]=0;c[X+184>>2]=-1;c[X>>2]=1524;c[V>>2]=1544;c[S>>2]=5404;g=X+12|0;if(!(a[21400]|0)){a[21400]=1;if(!(a[21232]|0)){a[21232]=1;Cl();c[5949]=21240;f=21240}else f=c[5949]|0;c[5950]=f;I=f+4|0;c[I>>2]=(c[I>>2]|0)+1}else f=c[5950]|0;c[g>>2]=f;f=f+4|0;c[f>>2]=(c[f>>2]|0)+1;f=X+16|0;c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;c[f+20>>2]=0;c[S>>2]=1560;c[X+40>>2]=0;c[X+44>>2]=0;c[X+48>>2]=0;f=X+60|0;l=X+76|0;g=f;h=g+44|0;do{c[g>>2]=0;g=g+4|0}while((g|0)<(h|0));b[f+44>>1]=0;a[f+46>>0]=0;h=X+12|0;j=c[h>>2]|0;k=j+4|0;c[k>>2]=(c[k>>2]|0)+1;c[L>>2]=23764;c[L+4>>2]=99;c[L+8>>2]=0;if((c[5941]|0)!=-1){c[J>>2]=L;c[K>>2]=J;Gl(23764,K)}f=(c[5942]|0)+-1|0;g=c[j+8>>2]|0;if((c[j+12>>2]|0)-g>>2>>>0>f>>>0)f=(c[g+(f<<2)>>2]|0)!=0;else f=0;I=c[k>>2]|0;c[k>>2]=I+-1;if(!I)ob[c[(c[j>>2]|0)+8>>2]&127](j);if(f){f=c[h>>2]|0;g=f+4|0;c[g>>2]=(c[g>>2]|0)+1;c[L>>2]=23764;c[L+4>>2]=99;c[L+8>>2]=0;if((c[5941]|0)!=-1){c[J>>2]=L;c[K>>2]=J;Gl(23764,K)}c[l>>2]=c[(c[f+8>>2]|0)+((c[5942]|0)+-1<<2)>>2];I=c[g>>2]|0;c[g>>2]=I+-1;if(!I)ob[c[(c[f>>2]|0)+8>>2]&127](f);I=c[l>>2]|0;a[X+106>>0]=(sb[c[(c[I>>2]|0)+28>>2]&63](I)|0)&1}lb[c[(c[S>>2]|0)+12>>2]&31](S,0,4096)|0;f=X+72|0;if((c[f>>2]|0)==0?(I=pf(e,17171)|0,c[f>>2]=I,(I|0)!=0):0)c[X+96>>2]=8;else p=28;if((p|0)==28){H=X+(c[(c[X>>2]|0)+-12>>2]|0)|0;I=H+16|0;c[I>>2]=c[I>>2]|(c[H+24>>2]|0)==0|4};c[T>>2]=0;c[T+4>>2]=0;c[T+8>>2]=0;g=c[(c[X>>2]|0)+-12>>2]|0;I=T+11|0;a:do if(!(c[X+g+16>>2]|0)){u=T+4|0;G=Q+11|0;v=Q+4|0;H=P+11|0;w=P+4|0;q=L+4|0;s=L+8|0;x=Q+8|0;r=L+4|0;t=L+8|0;y=T+8|0;z=J+11|0;A=P+8|0;B=J+11|0;C=J+8|0;D=J+4|0;E=J+8|0;F=J+4|0;f=0;b:while(1){g=c[X+g+28>>2]|0;h=g+4|0;c[h>>2]=(c[h>>2]|0)+1;c[L>>2]=21996;c[q>>2]=99;c[s>>2]=0;if((c[5499]|0)!=-1){c[J>>2]=L;c[K>>2]=J;Gl(21996,K)}j=c[(c[g+8>>2]|0)+((c[5500]|0)+-1<<2)>>2]|0;j=yb[c[(c[j>>2]|0)+28>>2]&15](j,10)|0;o=c[h>>2]|0;c[h>>2]=o+-1;if(!o)ob[c[(c[g>>2]|0)+8>>2]&127](g);Uc(X,T,j);f=f+1|0;g=a[I>>0]|0;n=g<<24>>24<0;h=c[u>>2]|0;j=n?c[T>>2]|0:T;o=n?h:g&255;if(o){m=j;c:do if(m&3){k=o;do{if((a[j>>0]|0)==35)break c;j=j+1|0;k=k+-1|0;l=(k|0)!=0}while(l&(j&3|0)!=0);if(l)p=41;else k=0}else{k=o;p=41}while(0);d:do if((p|0)==41){p=0;if((a[j>>0]|0)!=35){do if(k>>>0>3){while(1){p=c[j>>2]|0;if((p&-2139062144^-2139062144)&(p^589505315)+-16843009|0){p=45;break}j=j+4|0;k=k+-4|0;if(k>>>0<=3){p=47;break}}if((p|0)==45){p=0;break}else if((p|0)==47){p=0;if(!k){k=0;break d}else break}}while(0);while(1){if((a[j>>0]|0)==35)break d;j=j+1|0;k=k+-1|0;if(!k){k=0;break}}}}while(0);k=k|0?j:0;j=k-m|0;if(!((k|0)==0|(j|0)==-1)){if(o>>>0<j>>>0){p=52;break}if(n)c[u>>2]=j;else a[I>>0]=j;a[k>>0]=0;g=a[I>>0]|0;h=c[u>>2]|0}}j=g<<24>>24<0;l=g&255;k=j?h:l;e:do if(k){while(1){n=c[T>>2]|0;m=j?n:T;o=a[m>>0]|0;if(!(o<<24>>24==32|((o<<24>>24)+-9|0)>>>0<5))break;j=j?h:l;h=(j|0)!=0&1;j=j-h|0;if(j){$m(m|0,m+h|0,j|0)|0;g=a[I>>0]|0}if(g<<24>>24<0)c[u>>2]=j;else a[I>>0]=j;a[m+j>>0]=0;g=a[I>>0]|0;j=g<<24>>24<0;h=c[u>>2]|0;l=g&255;k=j?h:l;if(!k)break e}j=k+-1|0;o=a[m+j>>0]|0;if(o<<24>>24==32|((o<<24>>24)+-9|0)>>>0<5){m=j;k=n;do{j=g<<24>>24<0;if((j?h:g&255)>>>0<m>>>0){p=66;break b}if(j)c[u>>2]=m;else a[I>>0]=m;a[(j?k:T)+m>>0]=0;g=a[I>>0]|0;h=c[u>>2]|0;l=g<<24>>24<0;j=l?h:g&255;if(!j)break e;k=c[T>>2]|0;m=j+-1|0;o=a[(l?k:T)+m>>0]|0}while(o<<24>>24==32|((o<<24>>24)+-9|0)>>>0<5)}else k=n;c[P>>2]=0;c[P+4>>2]=0;c[P+8>>2]=0;l=g<<24>>24<0;m=l?k:T;l=l?h:g&255;c[Q>>2]=0;c[Q+4>>2]=0;c[Q+8>>2]=0;f:do if(l){k=m;g:do if(k&3){h=m;g=l;do{if((a[h>>0]|0)==61)break g;h=h+1|0;g=g+-1|0;j=(g|0)!=0}while(j&(h&3|0)!=0);if(j)p=77;else g=0}else{h=m;g=l;p=77}while(0);h:do if((p|0)==77){p=0;if((a[h>>0]|0)==61)break;do if(g>>>0>3){while(1){p=c[h>>2]|0;if((p&-2139062144^-2139062144)&(p^1027423549)+-16843009|0){p=81;break}h=h+4|0;g=g+-4|0;if(g>>>0<=3){p=83;break}}if((p|0)==81){p=0;break}else if((p|0)==83){p=0;if(!g){g=0;break h}else break}}while(0);while(1){if((a[h>>0]|0)==61)break h;h=h+1|0;g=g+-1|0;if(!g){g=0;break}}}while(0);o=g|0?h:0;g=o-k|0;if(!((o|0)==0|(g|0)==-1)){o=g+1|0;if(l>>>0<=o>>>0){g=0;k=0;break};c[J>>2]=0;c[J+4>>2]=0;c[J+8>>2]=0;k=l>>>0<g>>>0?l:g;if(k>>>0>4294967279){p=89;break b}if(k>>>0<11){a[z>>0]=k;if(!k)g=J;else{g=J;p=96}}else{j=k+16&-16;h=(j|0)==0?1:j;g=vf(h)|0;i:do if(!g)do{g=c[5972]|0;c[5972]=g+0;if(!g){g=0;break i}ub[g&3]();g=vf(h)|0}while(!(g|0));while(0);c[J>>2]=g;c[E>>2]=j|-2147483648;c[F>>2]=k;p=96}if((p|0)==96){p=0;Vm(g|0,m|0,k|0)|0}a[g+k>>0]=0;do if((a[H>>0]|0)<0){a[c[P>>2]>>0]=0;c[w>>2]=0;g=a[H>>0]|0;if(g<<24>>24>=0){p=101;break}n=0;j=(c[A>>2]&2147483647)+-1|0;k=1}else{a[P>>0]=0;a[H>>0]=0;g=0;p=101}while(0);if((p|0)==101){p=0;n=g&255;j=10;k=0}h=n>>>0<11;m=h?10:(n+16&496)+-1|0;do if((m|0)!=(j|0)){do if(h){h=c[P>>2]|0;if(k){g=0;j=h;h=P;p=110}else{k=0;l=1;j=h;h=P;p=111}}else{j=m+1|0;j=(j|0)==0?1:j;h=vf(j)|0;j:do if(!h)do{h=c[5972]|0;c[5972]=h+0;if(!h){h=0;break j}ub[h&3]();h=vf(j)|0}while(!(h|0));while(0);if(!k){k=1;l=0;j=P;p=111;break}g=1;j=c[P>>2]|0;p=110}while(0);if((p|0)==110){p=0;k=g;l=1;g=c[w>>2]|0}else if((p|0)==111){p=0;g=g&255}g=g+1|0;if(g|0)Vm(h|0,j|0,g|0)|0;if(l)wf(j);if(k){c[A>>2]=m+1|-2147483648;c[w>>2]=n;c[P>>2]=h;break}else{a[H>>0]=n;break}}while(0);c[P>>2]=c[J>>2];c[P+4>>2]=c[J+4>>2];c[P+8>>2]=c[J+8>>2];h=a[I>>0]|0;n=c[u>>2]|0;c[J>>2]=0;c[J+4>>2]=0;c[J+8>>2]=0;g=h<<24>>24<0;h=g?n:h&255;if(h>>>0<o>>>0){p=120;break b}l=(g?c[T>>2]|0:T)+o|0;k=h-o|0;if(k>>>0>4294967279){p=122;break b}if(k>>>0<11){a[B>>0]=k;if(!k)g=J;else{g=J;p=129}}else{j=k+16&-16;h=(j|0)==0?1:j;g=vf(h)|0;k:do if(!g)do{g=c[5972]|0;c[5972]=g+0;if(!g){g=0;break k}ub[g&3]();g=vf(h)|0}while(!(g|0));while(0);c[J>>2]=g;c[C>>2]=j|-2147483648;c[D>>2]=k;p=129}if((p|0)==129){p=0;Vm(g|0,l|0,k|0)|0}a[g+k>>0]=0;do if((a[G>>0]|0)<0){a[c[Q>>2]>>0]=0;c[v>>2]=0;g=a[G>>0]|0;if(g<<24>>24>=0){p=134;break}n=0;j=(c[x>>2]&2147483647)+-1|0;k=1}else{a[Q>>0]=0;a[G>>0]=0;g=0;p=134}while(0);if((p|0)==134){p=0;n=g&255;j=10;k=0}h=n>>>0<11;m=h?10:(n+16&496)+-1|0;do if((m|0)!=(j|0)){do if(h){h=c[Q>>2]|0;if(k){g=0;j=h;h=Q;p=143}else{k=0;l=1;j=h;h=Q;p=144}}else{j=m+1|0;j=(j|0)==0?1:j;h=vf(j)|0;l:do if(!h)do{h=c[5972]|0;c[5972]=h+0;if(!h){h=0;break l}ub[h&3]();h=vf(j)|0}while(!(h|0));while(0);if(!k){k=1;l=0;j=Q;p=144;break}g=1;j=c[Q>>2]|0;p=143}while(0);if((p|0)==143){p=0;k=g;l=1;g=c[v>>2]|0}else if((p|0)==144){p=0;g=g&255}g=g+1|0;if(g|0)Vm(h|0,j|0,g|0)|0;if(l)wf(j);if(k){c[x>>2]=m+1|-2147483648;c[v>>2]=n;c[Q>>2]=h;break}else{a[G>>0]=n;break}}while(0);c[Q>>2]=c[J>>2];c[Q+4>>2]=c[J+4>>2];c[Q+8>>2]=c[J+8>>2];g=a[H>>0]|0;k=c[w>>2]|0;h=g<<24>>24<0;l=g&255;j=h?k:l;m:do if(j|0){while(1){m=c[P>>2]|0;n=h?m:P;o=a[n>>0]|0;if(!(o<<24>>24==32|((o<<24>>24)+-9|0)>>>0<5))break;j=h?k:l;h=(j|0)!=0&1;j=j-h|0;if(j){$m(n|0,n+h|0,j|0)|0;g=a[H>>0]|0}if(g<<24>>24<0)c[w>>2]=j;else a[H>>0]=j;a[n+j>>0]=0;g=a[H>>0]|0;h=g<<24>>24<0;k=c[w>>2]|0;l=g&255;j=h?k:l;if(!j)break m}h=j+-1|0;o=a[n+h>>0]|0;if(o<<24>>24==32|((o<<24>>24)+-9|0)>>>0<5)l=h;else break;do{h=g<<24>>24<0;if((h?k:g&255)>>>0<l>>>0){p=162;break b}if(h)c[w>>2]=l;else a[H>>0]=l;a[(h?m:P)+l>>0]=0;g=a[H>>0]|0;k=c[w>>2]|0;j=g<<24>>24<0;h=j?k:g&255;if(!h)break m;m=c[P>>2]|0;l=h+-1|0;o=a[(j?m:P)+l>>0]|0}while(o<<24>>24==32|((o<<24>>24)+-9|0)>>>0<5)}while(0);g=a[G>>0]|0;h=g<<24>>24<0;k=c[v>>2]|0;l=g&255;j=h?k:l;if(!j)break;while(1){m=c[Q>>2]|0;n=h?m:Q;o=a[n>>0]|0;if(!(o<<24>>24==32|((o<<24>>24)+-9|0)>>>0<5))break;j=h?k:l;h=(j|0)!=0&1;j=j-h|0;if(j){$m(n|0,n+h|0,j|0)|0;g=a[G>>0]|0}if(g<<24>>24<0)c[v>>2]=j;else a[G>>0]=j;a[n+j>>0]=0;g=a[G>>0]|0;h=g<<24>>24<0;k=c[v>>2]|0;l=g&255;j=h?k:l;if(!j)break f}h=j+-1|0;o=a[n+h>>0]|0;if(o<<24>>24==32|((o<<24>>24)+-9|0)>>>0<5)l=h;else break;do{h=g<<24>>24<0;if((h?k:g&255)>>>0<l>>>0){p=178;break b}if(h)c[v>>2]=l;else a[G>>0]=l;a[(h?m:Q)+l>>0]=0;g=a[G>>0]|0;k=c[v>>2]|0;j=g<<24>>24<0;h=j?k:g&255;if(!h)break f;m=c[Q>>2]|0;l=h+-1|0;o=a[(j?m:Q)+l>>0]|0}while(o<<24>>24==32|((o<<24>>24)+-9|0)>>>0<5)}else{g=0;k=0}}else{g=0;k=0}while(0);h=g<<24>>24<0;n:do if(((h?k:g&255)|0)==3?(M=h?c[Q>>2]|0:Q,(a[M>>0]|0)==34):0){if((a[M+1>>0]|0)!=34)break;if((a[M+2>>0]|0)!=34)break;a[M>>0]=0;if((a[G>>0]|0)<0)c[v>>2]=0;else a[G>>0]=0;g=c[(c[X>>2]|0)+-12>>2]|0;if(c[X+g+16>>2]|0){p=270;break b}o:while(1){g=c[X+g+28>>2]|0;h=g+4|0;c[h>>2]=(c[h>>2]|0)+1;c[L>>2]=21996;c[r>>2]=99;c[t>>2]=0;if((c[5499]|0)!=-1){c[J>>2]=L;c[K>>2]=J;Gl(21996,K)}j=c[(c[g+8>>2]|0)+((c[5500]|0)+-1<<2)>>2]|0;j=yb[c[(c[j>>2]|0)+28>>2]&15](j,10)|0;o=c[h>>2]|0;c[h>>2]=o+-1;if(!o)ob[c[(c[g>>2]|0)+8>>2]&127](g);Uc(X,T,j);f=f+1|0;k=a[I>>0]|0;h=k<<24>>24<0;l=c[u>>2]|0;j=k&255;g=h?l:j;p:do if(g){o=l;n=k;while(1){k=g+-1|0;m=h?c[T>>2]|0:T;l=m+k|0;Z=a[l>>0]|0;if(!(Z<<24>>24==32|((Z<<24>>24)+-9|0)>>>0<5))break;if((h?o:j)>>>0<k>>>0){p=197;break b}if(n<<24>>24<0)c[u>>2]=k;else a[I>>0]=k;a[l>>0]=0;k=a[I>>0]|0;h=k<<24>>24<0;l=c[u>>2]|0;j=k&255;g=h?l:j;if(!g)break p;else{o=l;n=k}}if((g|0)!=3){k=n;l=o;break}k=h?o:j;l=k>>>0>3;g=l?3:k;if(g|0){j=m;h=13776;while(1){if((a[j>>0]|0)!=(a[h>>0]|0)){k=n;l=o;break p}g=g+-1|0;if(!g)break;else{j=j+1|0;h=h+1|0}}}if(k>>>0>2&(l^1))break o;else{k=n;l=o}}while(0);q:do if(!1){g=17173;p=218}else{h=17173;g=17173;while(1){if(!(a[h>>0]|0))break q;h=h+1|0;g=h;if(!(g&3)){g=h;p=218;break}}}while(0);if((p|0)==218){p=0;while(1){h=c[g>>2]|0;if(!((h&-2139062144^-2139062144)&h+-16843009))g=g+4|0;else break}if((h&255)<<24>>24)do g=g+1|0;while((a[g>>0]|0)!=0)}n=g-17173|0;g=k<<24>>24<0;if(g){o=l;m=(c[y>>2]&2147483647)+-1|0}else{o=k&255;m=10}do if((m-o|0)>>>0<n>>>0){if((-18-m|0)>>>0<(n-m+o|0)>>>0){p=233;break b}j=g?c[T>>2]|0:T;if(m>>>0<2147483623){k=o+n|0;Z=m<<1;k=k>>>0<Z>>>0?Z:k;k=k>>>0<11?11:k+16&-16}else k=-17;h=(k|0)==0?1:k;g=vf(h)|0;r:do if(!g)do{g=c[5972]|0;c[5972]=g+0;if(!g){g=0;break r}ub[g&3]();g=vf(h)|0}while(!(g|0));while(0);if(o|0)Vm(g|0,j|0,o|0)|0;if(n|0)Vm(g+o|0,17173,n|0)|0;if((m|0)!=10)wf(j);c[T>>2]=g;h=k|-2147483648;c[y>>2]=h;Z=o+n|0;c[u>>2]=Z;a[g+Z>>0]=0;h=h>>>24&255;g=Z}else{if(!n){h=k;g=l;break}h=g?c[T>>2]|0:T;Vm(h+o|0,17173,n|0)|0;g=o+n|0;if((a[I>>0]|0)<0)c[u>>2]=g;else a[I>>0]=g;a[h+g>>0]=0;h=a[I>>0]|0;g=c[u>>2]|0}while(0);n=h<<24>>24<0;o=n?c[T>>2]|0:T;n=n?g:h&255;g=a[G>>0]|0;h=g<<24>>24<0;if(h){m=c[v>>2]|0;l=(c[x>>2]&2147483647)+-1|0}else{m=g&255;l=10}do if((l-m|0)>>>0<n>>>0){if((-18-l|0)>>>0<(n-l+m|0)>>>0){p=257;break b}j=h?c[Q>>2]|0:Q;if(l>>>0<2147483623){k=m+n|0;Z=l<<1;k=k>>>0<Z>>>0?Z:k;k=k>>>0<11?11:k+16&-16}else k=-17;h=(k|0)==0?1:k;g=vf(h)|0;s:do if(!g)do{g=c[5972]|0;c[5972]=g+0;if(!g){g=0;break s}ub[g&3]();g=vf(h)|0}while(!(g|0));while(0);if(m|0)Vm(g|0,j|0,m|0)|0;if(n|0)Vm(g+m|0,o|0,n|0)|0;if((l|0)!=10)wf(j);c[Q>>2]=g;c[x>>2]=k|-2147483648;Z=m+n|0;c[v>>2]=Z;a[g+Z>>0]=0}else{if(!n)break;h=h?c[Q>>2]|0:Q;Vm(h+m|0,o|0,n|0)|0;g=m+n|0;if((a[G>>0]|0)<0)c[v>>2]=g;else a[G>>0]=g;a[h+g>>0]=0}while(0);g=c[(c[X>>2]|0)+-12>>2]|0;if(c[X+g+16>>2]|0){p=270;break b}}g=a[G>>0]|0;j=g<<24>>24<0;k=c[v>>2]|0;l=g&255;h=j?k:l;if(!h)break;else m=l;do{h=h+-1|0;l=(j?c[Q>>2]|0:Q)+h|0;Z=a[l>>0]|0;if(!(Z<<24>>24==32|((Z<<24>>24)+-9|0)>>>0<5))break n;if((j?k:m)>>>0<h>>>0){p=210;break b}if(g<<24>>24<0)c[v>>2]=h;else a[G>>0]=h;a[l>>0]=0;g=a[G>>0]|0;j=g<<24>>24<0;k=c[v>>2]|0;m=g&255;h=j?k:m}while((h|0)!=0)}while(0);Z=a[H>>0]|0;h=Z<<24>>24<0;if(!((h?c[w>>2]|0:Z&255)|0)){p=273;break b}j=g<<24>>24<0;if(!((j?k:g&255)|0)){p=273;break b}if(!(Rc(d,h?c[P>>2]|0:P,j?c[Q>>2]|0:Q)|0)){p=275;break b}if((a[G>>0]|0)<0)wf(c[Q>>2]|0);if((a[H>>0]|0)<0)wf(c[P>>2]|0)}while(0);g=c[(c[X>>2]|0)+-12>>2]|0;if(c[X+g+16>>2]|0){h=1;break a}}switch(p|0){case 52:{Jl();break}case 66:{Jl();break}case 89:{Il();break}case 120:{Jl();break}case 122:{Il();break}case 162:{Jl();break}case 178:{Jl();break}case 197:{Jl();break}case 210:{Jl();break}case 233:{Il();break}case 257:{Il();break}case 270:{c[R>>2]=e;c[R+4>>2]=f;rd(13780,R);break}case 273:{c[N>>2]=e;c[N+4>>2]=f;rd(13837,N);break}case 275:{R=(a[H>>0]|0)<0?c[P>>2]|0:P;Z=(a[G>>0]|0)<0?c[Q>>2]|0:Q;c[O>>2]=e;c[O+4>>2]=f;c[O+8>>2]=R;c[O+12>>2]=Z;rd(13884,O);break}}if((a[G>>0]|0)<0)wf(c[Q>>2]|0);if((a[H>>0]|0)<0)wf(c[P>>2]|0);h=0}else h=0;while(0);if((a[I>>0]|0)<0)wf(c[T>>2]|0);c[X>>2]=1524;c[V>>2]=1544;Tc(S);c[V>>2]=5388;f=c[X+148>>2]|0;g=X+144|0;if(f|0)do{f=f+-1|0;tb[c[(c[W>>2]|0)+(f<<2)>>2]&0](0,V,c[(c[g>>2]|0)+(f<<2)>>2]|0)}while((f|0)!=0);f=c[U>>2]|0;V=f+4|0;Z=c[V>>2]|0;c[V>>2]=Z+-1;if(Z|0){Z=c[W>>2]|0;wf(Z);Z=c[g>>2]|0;wf(Z);Z=X+156|0;Z=c[Z>>2]|0;wf(Z);Z=X+168|0;Z=c[Z>>2]|0;wf(Z);i=Y;return h|0}ob[c[(c[f>>2]|0)+8>>2]&127](f);Z=c[W>>2]|0;wf(Z);Z=c[g>>2]|0;wf(Z);Z=X+156|0;Z=c[Z>>2]|0;wf(Z);Z=X+168|0;Z=c[Z>>2]|0;wf(Z);i=Y;return h|0}function Tc(d){d=d|0;var e=0,f=0,g=0,h=0;c[d>>2]=1560;e=d+64|0;f=c[e>>2]|0;if(f|0?(Vc(d)|0,(mf(f)|0)==0):0)c[e>>2]=0;f=b[d+96>>1]|0;e=(f&65535)>>>8&255;if((f&255)<<24>>24!=0?(g=c[d+32>>2]|0,(g|0)!=0):0){wf(g);e=a[d+97>>0]|0}if(e<<24>>24?(h=c[d+56>>2]|0,h|0):0)wf(h);c[d>>2]=5404;e=c[d+4>>2]|0;d=e+4|0;h=c[d>>2]|0;c[d>>2]=h+-1;if(h|0)return;ob[c[(c[e>>2]|0)+8>>2]&127](e);return}function Uc(b,e,f){b=b|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;h=b+(c[(c[b>>2]|0)+-12>>2]|0)|0;i=h+16|0;j=c[i>>2]|0;if(j|0){c[i>>2]=j|(c[h+24>>2]|0)==0|4;return}i=c[h+72>>2]|0;if(i|0?(k=i+(c[(c[i>>2]|0)+-12>>2]|0)|0,g=c[k+24>>2]|0,g|0):0){if(!(c[k+16>>2]|0)){h=c[k+72>>2]|0;if(h){Tf(h);g=c[i+(c[(c[i>>2]|0)+-12>>2]|0)+24>>2]|0}if((sb[c[(c[g>>2]|0)+24>>2]&63](g)|0)==-1){r=i+(c[(c[i>>2]|0)+-12>>2]|0)+16|0;c[r>>2]=c[r>>2]|1}}r=i+(c[(c[i>>2]|0)+-12>>2]|0)|0;if((((c[r+24>>2]|0?(c[r+16>>2]|0)==0:0)?c[r+4>>2]&8192|0:0)?!(Pa()|0):0)?(r=c[i+(c[(c[i>>2]|0)+-12>>2]|0)+24>>2]|0,(sb[c[(c[r>>2]|0)+24>>2]&63](r)|0)==-1):0){r=i+(c[(c[i>>2]|0)+-12>>2]|0)+16|0;c[r>>2]=c[r>>2]|1}}h=c[b>>2]|0;if(c[b+(c[h+-12>>2]|0)+16>>2]|0)return;r=e+11|0;if((a[r>>0]|0)<0){a[c[e>>2]>>0]=0;o=e+4|0;c[o>>2]=0;p=e;q=e}else{a[e>>0]=0;a[r>>0]=0;o=e+4|0;p=e;q=e}n=e+8|0;g=0;while(1){h=c[b+(c[h+-12>>2]|0)+24>>2]|0;i=h+12|0;j=c[i>>2]|0;if((j|0)==(c[h+16>>2]|0)){h=sb[c[(c[h>>2]|0)+40>>2]&63](h)|0;if((h|0)==-1){h=2;break}}else{c[i>>2]=j+1;h=d[j>>0]|0}g=g+1|0;m=h&255;if(m<<24>>24==f<<24>>24){h=0;break}h=a[r>>0]|0;i=h<<24>>24<0;if(i){l=c[o>>2]|0;e=(c[n>>2]&2147483647)+-1|0}else{l=h&255;e=10}do if((l|0)!=(e|0))if(i){h=c[p>>2]|0;s=41;break}else{a[r>>0]=l+1;h=q;break}else{j=i?c[p>>2]|0:q;if(e>>>0<2147483623){k=e+1|0;s=e<<1;k=k>>>0<s>>>0?s:k;k=k>>>0<11?11:k+16&-16}else k=-17;i=(k|0)==0?1:k;h=vf(i)|0;a:do if(!h)do{h=c[5972]|0;c[5972]=h+0;if(!h){h=0;break a}ub[h&3]();h=vf(i)|0}while(!(h|0));while(0);if(!((e|0)!=0?(Vm(h|0,j|0,e|0)|0,(e|0)==10):0))wf(j);c[p>>2]=h;c[n>>2]=k|-2147483648;s=41}while(0);if((s|0)==41){s=0;c[o>>2]=l+1}l=h+l|0;a[l>>0]=m;a[l+1>>0]=0;if((a[r>>0]|0)<0&(c[o>>2]|0)==-17){h=4;break}h=c[b>>2]|0}f=b+(c[(c[b>>2]|0)+-12>>2]|0)|0;b=f+16|0;c[b>>2]=c[b>>2]|((g|0)==0?h|4:h)|(c[f+24>>2]|0)==0;return}function Vc(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;s=i;i=i+16|0;q=s;p=b+64|0;if(!(c[p>>2]|0)){r=0;i=s;return r|0}o=b+68|0;e=c[o>>2]|0;if(!e){s=Fa(4)|0;c[s>>2]=8336;$a(s|0,1352,93)}l=b+92|0;d=c[l>>2]|0;do if(!(d&16)){if(d&8|0){k=b+80|0;m=c[k+4>>2]|0;n=q;c[n>>2]=c[k>>2];c[n+4>>2]=m;do if(!(a[b+98>>0]|0)){e=sb[c[(c[e>>2]|0)+24>>2]&63](e)|0;g=b+36|0;f=c[g>>2]|0;d=(c[b+40>>2]|0)-f|0;if((e|0)>0){k=0;d=(T((c[b+16>>2]|0)-(c[b+12>>2]|0)|0,e)|0)+d|0;break}e=c[b+12>>2]|0;if((e|0)==(c[b+16>>2]|0))k=0;else{n=c[o>>2]|0;o=b+32|0;n=zb[c[(c[n>>2]|0)+32>>2]&31](n,q,c[o>>2]|0,f,e-(c[b+8>>2]|0)|0)|0;k=1;d=d-n+(c[g>>2]|0)-(c[o>>2]|0)|0}}else{k=0;d=(c[b+16>>2]|0)-(c[b+12>>2]|0)|0}while(0);g=c[p>>2]|0;h=g+8|0;j=g+4|0;d=0-d-(c[h>>2]|0)+(c[j>>2]|0)|0;e=g+20|0;f=g+28|0;if(!((c[e>>2]|0)>>>0>(c[f>>2]|0)>>>0?(lb[c[g+36>>2]&31](g,0,0)|0,!(c[e>>2]|0)):0))r=33;if((r|0)==33?(c[g+16>>2]=0,c[f>>2]=0,c[e>>2]=0,(lb[c[g+40>>2]&31](g,d,1)|0)>=0):0){c[h>>2]=0;c[j>>2]=0;c[g>>2]=c[g>>2]&-17;if(k){p=q;q=c[p+4>>2]|0;r=b+72|0;c[r>>2]=c[p>>2];c[r+4>>2]=q}r=c[b+32>>2]|0;c[b+40>>2]=r;c[b+36>>2]=r;c[b+8>>2]=0;c[b+12>>2]=0;c[b+16>>2]=0;c[l>>2]=0;break}r=-1;i=s;return r|0}}else{if((c[b+24>>2]|0)!=(c[b+20>>2]|0)?(yb[c[(c[b>>2]|0)+52>>2]&15](b,-1)|0)==-1:0){r=-1;i=s;return r|0}m=b+72|0;n=b+32|0;k=b+52|0;a:while(1){j=c[o>>2]|0;l=c[n>>2]|0;l=zb[c[(c[j>>2]|0)+20>>2]&31](j,m,l,l+(c[k>>2]|0)|0,q)|0;j=c[n>>2]|0;b=(c[q>>2]|0)-j|0;g=c[p>>2]|0;e=g+16|0;d=c[e>>2]|0;do if(!d){d=g+74|0;h=a[d>>0]|0;a[d>>0]=h+255|h;d=c[g>>2]|0;if(!(d&8)){c[g+8>>2]=0;c[g+4>>2]=0;f=c[g+44>>2]|0;c[g+28>>2]=f;h=g+20|0;c[h>>2]=f;d=f+(c[g+48>>2]|0)|0;c[e>>2]=d;r=13;break}else{c[g>>2]=d|32;d=0;break}}else{f=g+20|0;h=f;f=c[f>>2]|0;r=13}while(0);b:do if((r|0)==13){r=0;e=f;if((d-f|0)>>>0<b>>>0){d=lb[c[g+36>>2]&31](g,j,b)|0;break}c:do if((a[g+75>>0]|0)>-1){d=b;while(1){if(!d){g=b;f=j;d=0;break c}f=d+-1|0;if((a[j+f>>0]|0)==10)break;else d=f}if((lb[c[g+36>>2]&31](g,j,d)|0)>>>0<d>>>0)break b;g=b-d|0;f=j+d|0;e=c[h>>2]|0}else{g=b;f=j;d=0}while(0);Vm(e|0,f|0,g|0)|0;c[h>>2]=(c[h>>2]|0)+g;d=d+g|0}while(0);if((d|0)!=(b|0)){d=-1;r=39;break}switch(l|0){case 1:break;case 2:{d=-1;r=39;break a}default:{r=23;break a}}}if((r|0)==23){if(!(gf(c[p>>2]|0)|0))break;else d=-1;i=s;return d|0}else if((r|0)==39){i=s;return d|0}}while(0);r=0;i=s;return r|0}function Wc(a){a=a|0;Tc(a);wf(a);return}function Xc(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;m=i;i=i+32|0;f=m+16|0;g=m+12|0;h=m;sb[c[(c[d>>2]|0)+24>>2]&63](d)|0;e=c[e>>2]|0;c[h>>2]=23764;c[h+4>>2]=99;c[h+8>>2]=0;if((c[5941]|0)!=-1){c[f>>2]=h;c[g>>2]=f;Gl(23764,g)}f=c[(c[e+8>>2]|0)+((c[5942]|0)+-1<<2)>>2]|0;c[d+68>>2]=f;g=d+98|0;h=a[g>>0]|0;f=sb[c[(c[f>>2]|0)+28>>2]&63](f)|0;a[g>>0]=f&1;if((h&255|0)==(f&1|0)){i=m;return}e=d+8|0;h=d+96|0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;e=b[h>>1]|0;g=(e&255)<<24>>24!=0;e=(e&65535)>>>8&255;if(f){f=d+32|0;if(g?(k=c[f>>2]|0,(k|0)!=0):0){wf(k);e=a[d+97>>0]|0}a[h>>0]=e;k=d+60|0;c[d+52>>2]=c[k>>2];l=d+56|0;c[f>>2]=c[l>>2];c[k>>2]=0;c[l>>2]=0;a[d+97>>0]=0;i=m;return}if(!g?(l=d+32|0,j=c[l>>2]|0,(j|0)!=(d+44|0)):0){f=c[d+52>>2]|0;c[d+60>>2]=f;c[d+56>>2]=j;a[d+97>>0]=0;f=(f|0)==0?1:f;e=vf(f)|0;a:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break a}ub[e&3]();e=vf(f)|0}while(!(e|0));while(0);c[l>>2]=e;a[h>>0]=1;i=m;return}f=c[d+52>>2]|0;c[d+60>>2]=f;f=(f|0)==0?1:f;e=vf(f)|0;b:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break b}ub[e&3]();e=vf(f)|0}while(!(e|0));while(0);c[d+56>>2]=e;a[d+97>>0]=1;i=m;return}function Yc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0;j=b+8|0;i=b+96|0;c[j>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;c[j+16>>2]=0;c[j+20>>2]=0;j=c[i>>2]|0;f=(j&65535)>>>8&255;if((j&255)<<24>>24!=0?(g=c[b+32>>2]|0,(g|0)!=0):0){wf(g);f=a[b+97>>0]|0}j=b+97|0;if(f<<24>>24?(h=c[b+56>>2]|0,h|0):0)wf(h);f=b+52|0;c[f>>2]=e;do if(e>>>0>8){f=a[b+98>>0]|0;if((d|0)!=0&f<<24>>24!=0){c[b+32>>2]=d;a[i>>0]=0;break}h=(e|0)==0?1:e;g=vf(h)|0;a:do if(!g)do{g=c[5972]|0;c[5972]=g+0;if(!g){g=0;break a}ub[g&3]();g=vf(h)|0}while(!(g|0));while(0);c[b+32>>2]=g;a[i>>0]=1}else{c[b+32>>2]=b+44;c[f>>2]=8;a[i>>0]=0;f=a[b+98>>0]|0}while(0);if(f<<24>>24){c[b+60>>2]=0;c[b+56>>2]=0;a[j>>0]=0;return b|0}f=(e|0)<8?8:e;c[b+60>>2]=f;if((d|0)!=0&f>>>0>7){c[b+56>>2]=d;a[j>>0]=0;return b|0}g=(f|0)==0?1:f;f=vf(g)|0;b:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break b}ub[f&3]();f=vf(g)|0}while(!(f|0));while(0);c[b+56>>2]=f;a[j>>0]=1;return b|0}function Zc(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0;g=c[b+68>>2]|0;if(!g){b=Fa(4)|0;c[b>>2]=8336;$a(b|0,1352,93)}g=sb[c[(c[g>>2]|0)+24>>2]&63](g)|0;h=b+64|0;if((c[h>>2]|0?!(((d|0)!=0|(e|0)!=0)&(g|0)<1):0)?(sb[c[(c[b>>2]|0)+24>>2]&63](b)|0)==0:0){if(f>>>0>=3){b=a;c[b>>2]=0;c[b+4>>2]=0;b=a+8|0;c[b>>2]=-1;c[b+4>>2]=-1;return}i=c[h>>2]|0;e=Ym(g|0,((g|0)<0)<<31>>31|0,d|0,e|0)|0;g=(g|0)>0?e:0;if((f|0)==1)g=g-(c[i+8>>2]|0)+(c[i+4>>2]|0)|0;d=i+20|0;e=i+28|0;if(!((c[d>>2]|0)>>>0>(c[e>>2]|0)>>>0?(lb[c[i+36>>2]&31](i,0,0)|0,!(c[d>>2]|0)):0))j=13;if((j|0)==13?(c[i+16>>2]=0,c[e>>2]=0,c[d>>2]=0,(lb[c[i+40>>2]&31](i,g,f)|0)>=0):0){c[i+8>>2]=0;c[i+4>>2]=0;c[i>>2]=c[i>>2]&-17;d=c[h>>2]|0;if(!(c[d>>2]&128))g=1;else g=(c[d+20>>2]|0)>>>0>(c[d+28>>2]|0)>>>0?2:1;g=lb[c[d+40>>2]&31](d,0,g)|0;if((g|0)>=0)g=g-(c[d+8>>2]|0)+(c[d+4>>2]|0)+(c[d+20>>2]|0)-(c[d+28>>2]|0)|0;f=b+72|0;j=c[f+4>>2]|0;b=a;c[b>>2]=c[f>>2];c[b+4>>2]=j;b=a+8|0;c[b>>2]=g;c[b+4>>2]=((g|0)<0)<<31>>31;return}b=a;c[b>>2]=0;c[b+4>>2]=0;b=a+8|0;c[b>>2]=-1;c[b+4>>2]=-1;return}b=a;c[b>>2]=0;c[b+4>>2]=0;b=a+8|0;c[b>>2]=-1;c[b+4>>2]=-1;return}function _c(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;e=b+64|0;if(c[e>>2]|0?(sb[c[(c[b>>2]|0)+24>>2]&63](b)|0)==0:0){e=c[e>>2]|0;f=c[d+8>>2]|0;g=e+20|0;h=e+28|0;if(!((c[g>>2]|0)>>>0>(c[h>>2]|0)>>>0?(lb[c[e+36>>2]&31](e,0,0)|0,!(c[g>>2]|0)):0))i=6;if((i|0)==6?(c[e+16>>2]=0,c[h>>2]=0,c[g>>2]=0,(lb[c[e+40>>2]&31](e,f,0)|0)>=0):0){c[e+8>>2]=0;c[e+4>>2]=0;c[e>>2]=c[e>>2]&-17;g=d;h=c[g+4>>2]|0;i=b+72|0;c[i>>2]=c[g>>2];c[i+4>>2]=h;c[a>>2]=c[d>>2];c[a+4>>2]=c[d+4>>2];c[a+8>>2]=c[d+8>>2];c[a+12>>2]=c[d+12>>2];return}i=a;c[i>>2]=0;c[i+4>>2]=0;i=a+8|0;c[i>>2]=-1;c[i+4>>2]=-1;return}i=a;c[i>>2]=0;c[i+4>>2]=0;i=a+8|0;c[i>>2]=-1;c[i+4>>2]=-1;return}function $c(b){b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0;G=i;i=i+16|0;F=G+4|0;A=G;h=b+64|0;if(!(c[h>>2]|0)){F=-1;i=G;return F|0}f=b+92|0;if(!(c[f>>2]&8)){c[b+24>>2]=0;c[b+20>>2]=0;c[b+28>>2]=0;if(!(a[b+98>>0]|0)){e=c[b+56>>2]|0;g=e+(c[b+60>>2]|0)|0}else{e=c[b+32>>2]|0;g=e+(c[b+52>>2]|0)|0}c[b+8>>2]=e;E=b+12|0;c[E>>2]=g;c[b+16>>2]=g;c[f>>2]=8;f=1;e=g}else{e=b+12|0;f=0;E=e;e=c[e>>2]|0}if(!e){e=F+1|0;c[b+8>>2]=F;c[E>>2]=e;D=b+16|0;c[D>>2]=e}else D=b+16|0;if(f){f=c[D>>2]|0;B=0}else{f=c[D>>2]|0;B=(f-(c[b+8>>2]|0)|0)/2|0;B=B>>>0>4?4:B}do if((e|0)==(f|0)){f=b+8|0;$m(c[f>>2]|0,e+(0-B)|0,B|0)|0;if(a[b+98>>0]|0){j=c[f>>2]|0;e=(c[D>>2]|0)-B-j|0;j=j+B|0;r=c[h>>2]|0;s=r+74|0;t=a[s>>0]|0;a[s>>0]=t+255|t;t=r+8|0;u=r+4|0;h=c[u>>2]|0;g=(c[t>>2]|0)-h|0;if((g|0)>0){A=g>>>0<e>>>0?g:e;Vm(j|0,h|0,A|0)|0;c[u>>2]=h+A;g=e-A|0;j=j+A|0}else g=e;a:do if(g){l=r+32|0;m=r+20|0;n=r+44|0;o=r+36|0;p=r+16|0;q=r+28|0;while(1){A=a[s>>0]|0;a[s>>0]=A+255|A;if((c[m>>2]|0)>>>0>(c[n>>2]|0)>>>0)lb[c[o>>2]&31](r,0,0)|0;c[p>>2]=0;c[q>>2]=0;c[m>>2]=0;h=c[r>>2]|0;if(h&20|0){C=23;break}k=c[n>>2]|0;c[t>>2]=k;c[u>>2]=k;k=lb[c[l>>2]&31](r,j,g)|0;if((k+1|0)>>>0<2)break;g=g-k|0;if(!g)break a;else j=j+k|0}if((C|0)==23?h&4|0:0)c[r>>2]=h|32;e=e-g|0}while(0);if(!e){e=-1;break}C=(c[f>>2]|0)+B|0;c[E>>2]=C;c[D>>2]=C+e;e=d[C>>0]|0;break}x=b+32|0;y=b+36|0;e=c[y>>2]|0;z=b+40|0;$m(c[x>>2]|0,e|0,(c[z>>2]|0)-e|0)|0;e=c[x>>2]|0;j=e+((c[z>>2]|0)-(c[y>>2]|0))|0;c[y>>2]=j;if((e|0)==(b+44|0))g=8;else g=c[b+52>>2]|0;w=e+g|0;c[z>>2]=w;v=b+60|0;g=(c[v>>2]|0)-B|0;w=w-j|0;g=w>>>0<g>>>0?w:g;w=b+72|0;t=w;s=c[t+4>>2]|0;r=b+80|0;c[r>>2]=c[t>>2];c[r+4>>2]=s;r=c[h>>2]|0;s=r+74|0;t=a[s>>0]|0;a[s>>0]=t+255|t;t=r+8|0;u=r+4|0;h=c[u>>2]|0;e=(c[t>>2]|0)-h|0;if((e|0)>0){q=e>>>0<g>>>0?e:g;Vm(j|0,h|0,q|0)|0;c[u>>2]=h+q;e=g-q|0;j=j+q|0}else e=g;b:do if(e){l=r+32|0;m=r+20|0;n=r+44|0;o=r+36|0;p=r+16|0;q=r+28|0;while(1){k=a[s>>0]|0;a[s>>0]=k+255|k;if((c[m>>2]|0)>>>0>(c[n>>2]|0)>>>0)lb[c[o>>2]&31](r,0,0)|0;c[p>>2]=0;c[q>>2]=0;c[m>>2]=0;h=c[r>>2]|0;if(h&20|0){C=39;break}k=c[n>>2]|0;c[t>>2]=k;c[u>>2]=k;k=lb[c[l>>2]&31](r,j,e)|0;if((k+1|0)>>>0<2)break;e=e-k|0;if(!e)break b;else j=j+k|0}if((C|0)==39?h&4|0:0)c[r>>2]=h|32;g=g-e|0}while(0);if(!g)e=-1;else{e=c[b+68>>2]|0;if(!e){G=Fa(4)|0;c[G>>2]=8336;$a(G|0,1352,93)}b=(c[y>>2]|0)+g|0;c[z>>2]=b;C=c[f>>2]|0;if((vb[c[(c[e>>2]|0)+16>>2]&15](e,w,c[x>>2]|0,b,y,C+B|0,C+(c[v>>2]|0)|0,A)|0)!=3){g=c[A>>2]|0;e=(c[f>>2]|0)+B|0;if((g|0)==(e|0))e=-1;else{c[E>>2]=e;c[D>>2]=g;e=d[e>>0]|0}}else{e=c[x>>2]|0;C=c[z>>2]|0;c[f>>2]=e;c[E>>2]=e;c[D>>2]=C;e=d[e>>0]|0}}}else{e=d[e>>0]|0;f=b+8|0}while(0);if((c[f>>2]|0)==(F|0)){c[f>>2]=0;c[E>>2]=0;c[D>>2]=0}F=e;i=G;return F|0}function ad(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;if(!(c[b+64>>2]|0)){g=-1;return g|0}g=b+12|0;f=c[g>>2]|0;if((c[b+8>>2]|0)>>>0>=f>>>0){g=-1;return g|0}if((d|0)==-1){c[g>>2]=f+-1;g=0;return g|0}if(!(c[b+88>>2]&16)){e=d&255;b=f+-1|0;if(e<<24>>24!=(a[b>>0]|0)){g=-1;return g|0}}else{e=d&255;b=f+-1|0}c[g>>2]=b;a[b>>0]=e;g=d;return g|0}function bd(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;C=i;i=i+16|0;m=C+8|0;t=C+4|0;u=C;v=b+64|0;if(!(c[v>>2]|0)){B=-1;i=C;return B|0}f=b+92|0;if(!(c[f>>2]&16)){c[b+8>>2]=0;c[b+12>>2]=0;c[b+16>>2]=0;e=c[b+52>>2]|0;do if(e>>>0>8)if(!(a[b+98>>0]|0)){j=c[b+56>>2]|0;k=j+((c[b+60>>2]|0)+-1)|0;e=b+24|0;c[e>>2]=j;h=b+20|0;c[h>>2]=j;g=b+28|0;c[g>>2]=k;l=j;break}else{j=c[b+32>>2]|0;k=j+(e+-1)|0;e=b+24|0;c[e>>2]=j;h=b+20|0;c[h>>2]=j;g=b+28|0;c[g>>2]=k;l=j;break}else{e=b+24|0;c[e>>2]=0;h=b+20|0;c[h>>2]=0;g=b+28|0;c[g>>2]=0;l=0;k=0;j=0}while(0);c[f>>2]=16;A=h;s=g;z=g;r=h;f=l;y=j;x=k;g=l}else{r=b+20|0;g=c[r>>2]|0;x=b+28|0;f=b+24|0;e=f;A=r;s=x;z=x;f=c[f>>2]|0;y=g;x=c[x>>2]|0}w=(d|0)==-1;if(w)m=g;else{if(!f){c[e>>2]=m;c[r>>2]=m;c[s>>2]=m+1;f=m}a[f>>0]=d;f=(c[e>>2]|0)+1|0;c[e>>2]=f;m=c[r>>2]|0}a:do if((f|0)==(m|0))B=72;else{b:do if(!(a[b+98>>0]|0)){p=b+32|0;g=c[p>>2]|0;c[t>>2]=g;q=b+68|0;h=c[q>>2]|0;if(!h){C=Fa(4)|0;c[C>>2]=8336;$a(C|0,1352,93)}o=b+72|0;n=b+52|0;f=vb[c[(c[h>>2]|0)+12>>2]&15](h,o,m,f,u,g,g+(c[n>>2]|0)|0,t)|0;g=c[r>>2]|0;c:do if((c[u>>2]|0)!=(g|0)){m=g;while(1){if((f|0)==3){B=35;break}b=(f|0)==1;if((f|1|0)!=1)break c;l=c[p>>2]|0;m=(c[t>>2]|0)-l|0;j=c[v>>2]|0;g=j+16|0;f=c[g>>2]|0;do if(!f){f=j+74|0;k=a[f>>0]|0;a[f>>0]=k+255|k;f=c[j>>2]|0;if(!(f&8)){c[j+8>>2]=0;c[j+4>>2]=0;h=c[j+44>>2]|0;c[j+28>>2]=h;k=j+20|0;c[k>>2]=h;f=h+(c[j+48>>2]|0)|0;c[g>>2]=f;B=56;break}else{c[j>>2]=f|32;f=0;break}}else{h=j+20|0;k=h;h=c[h>>2]|0;B=56}while(0);d:do if((B|0)==56){B=0;g=h;if((f-h|0)>>>0<m>>>0){f=lb[c[j+36>>2]&31](j,l,m)|0;break}e:do if((a[j+75>>0]|0)>-1){f=m;while(1){if(!f){j=m;h=l;f=0;break e}h=f+-1|0;if((a[l+h>>0]|0)==10)break;else f=h}if((lb[c[j+36>>2]&31](j,l,f)|0)>>>0<f>>>0)break d;j=m-f|0;h=l+f|0;g=c[k>>2]|0}else{j=m;h=l;f=0}while(0);Vm(g|0,h|0,j|0)|0;c[k>>2]=(c[k>>2]|0)+j;f=f+j|0}while(0);if((f|0)!=(m|0))break c;if(!b){B=68;break}g=c[u>>2]|0;h=c[e>>2]|0;c[A>>2]=g;c[s>>2]=h;f=g;g=f+(h-g)|0;c[e>>2]=g;h=c[q>>2]|0;if(!h){B=33;break}b=c[p>>2]|0;f=vb[c[(c[h>>2]|0)+12>>2]&15](h,o,f,g,u,b,b+(c[n>>2]|0)|0,t)|0;g=c[r>>2]|0;if((c[u>>2]|0)==(g|0))break c;else m=g}if((B|0)==33){C=Fa(4)|0;c[C>>2]=8336;$a(C|0,1352,93)}else if((B|0)==35){l=(c[e>>2]|0)-m|0;j=c[v>>2]|0;g=j+16|0;f=c[g>>2]|0;do if(!f){f=j+74|0;v=a[f>>0]|0;a[f>>0]=v+255|v;f=c[j>>2]|0;if(!(f&8)){c[j+8>>2]=0;c[j+4>>2]=0;h=c[j+44>>2]|0;c[j+28>>2]=h;k=j+20|0;c[k>>2]=h;f=h+(c[j+48>>2]|0)|0;c[g>>2]=f;B=40;break}else{c[j>>2]=f|32;f=0;break}}else{h=j+20|0;k=h;h=c[h>>2]|0;B=40}while(0);f:do if((B|0)==40){g=h;if((f-h|0)>>>0<l>>>0){f=lb[c[j+36>>2]&31](j,m,l)|0;break}g:do if((a[j+75>>0]|0)>-1){f=l;while(1){if(!f){j=l;h=m;f=0;break g}h=f+-1|0;if((a[m+h>>0]|0)==10)break;else f=h}if((lb[c[j+36>>2]&31](j,m,f)|0)>>>0<f>>>0)break f;j=l-f|0;h=m+f|0;g=c[k>>2]|0}else{j=l;h=m;f=0}while(0);Vm(g|0,h|0,j|0)|0;c[k>>2]=(c[k>>2]|0)+j;f=f+j|0}while(0);if((f|0)!=(l|0))break}break b}while(0);e=-1;break a}else{l=f-m|0;j=c[v>>2]|0;g=j+16|0;f=c[g>>2]|0;do if(!f){f=j+74|0;v=a[f>>0]|0;a[f>>0]=v+255|v;f=c[j>>2]|0;if(!(f&8)){c[j+8>>2]=0;c[j+4>>2]=0;h=c[j+44>>2]|0;c[j+28>>2]=h;k=j+20|0;c[k>>2]=h;f=h+(c[j+48>>2]|0)|0;c[g>>2]=f;B=21;break}else{c[j>>2]=f|32;f=0;break}}else{h=j+20|0;k=h;h=c[h>>2]|0;B=21}while(0);h:do if((B|0)==21){g=h;if((f-h|0)>>>0<l>>>0){f=lb[c[j+36>>2]&31](j,m,l)|0;break}i:do if((a[j+75>>0]|0)>-1){f=l;while(1){if(!f){j=l;h=m;f=0;break i}h=f+-1|0;if((a[m+h>>0]|0)==10)break;else f=h}if((lb[c[j+36>>2]&31](j,m,f)|0)>>>0<f>>>0)break h;j=l-f|0;h=m+f|0;g=c[k>>2]|0}else{j=l;h=m;f=0}while(0);Vm(g|0,h|0,j|0)|0;c[k>>2]=(c[k>>2]|0)+j;f=f+j|0}while(0);if((f|0)!=(l|0)){e=-1;break a}}while(0);c[e>>2]=y;c[A>>2]=y;c[z>>2]=x;B=72}while(0);if((B|0)==72)e=w?0:d;B=e;i=C;return B|0}function cd(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;c[a>>2]=1524;d=a+108|0;c[d>>2]=1544;Tc(a+8|0);c[d>>2]=5388;b=c[a+148>>2]|0;e=a+140|0;f=a+144|0;if(b|0)do{b=b+-1|0;tb[c[(c[e>>2]|0)+(b<<2)>>2]&0](0,d,c[(c[f>>2]|0)+(b<<2)>>2]|0)}while((b|0)!=0);b=c[a+136>>2]|0;g=b+4|0;d=c[g>>2]|0;c[g>>2]=d+-1;if(!d)ob[c[(c[b>>2]|0)+8>>2]&127](b);wf(c[e>>2]|0);wf(c[f>>2]|0);wf(c[a+156>>2]|0);wf(c[a+168>>2]|0);return}function dd(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;c[a>>2]=1524;d=a+108|0;c[d>>2]=1544;Tc(a+8|0);c[d>>2]=5388;b=c[a+148>>2]|0;e=a+140|0;f=a+144|0;if(b|0)do{b=b+-1|0;tb[c[(c[e>>2]|0)+(b<<2)>>2]&0](0,d,c[(c[f>>2]|0)+(b<<2)>>2]|0)}while((b|0)!=0);b=c[a+136>>2]|0;g=b+4|0;d=c[g>>2]|0;c[g>>2]=d+-1;if(!d)ob[c[(c[b>>2]|0)+8>>2]&127](b);wf(c[e>>2]|0);wf(c[f>>2]|0);wf(c[a+156>>2]|0);wf(c[a+168>>2]|0);wf(a);return}function ed(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;a=a+(c[(c[a>>2]|0)+-12>>2]|0)|0;c[a>>2]=1524;d=a+108|0;c[d>>2]=1544;Tc(a+8|0);c[d>>2]=5388;a=c[d+40>>2]|0;e=d+32|0;b=d+36|0;if(a|0)do{a=a+-1|0;tb[c[(c[e>>2]|0)+(a<<2)>>2]&0](0,d,c[(c[b>>2]|0)+(a<<2)>>2]|0)}while((a|0)!=0);a=c[d+28>>2]|0;g=a+4|0;f=c[g>>2]|0;c[g>>2]=f+-1;if(f|0){g=c[e>>2]|0;wf(g);g=c[b>>2]|0;wf(g);g=d+48|0;g=c[g>>2]|0;wf(g);g=d+60|0;g=c[g>>2]|0;wf(g);return}ob[c[(c[a>>2]|0)+8>>2]&127](a);g=c[e>>2]|0;wf(g);g=c[b>>2]|0;wf(g);g=d+48|0;g=c[g>>2]|0;wf(g);g=d+60|0;g=c[g>>2]|0;wf(g);return}function fd(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;d=a+(c[(c[a>>2]|0)+-12>>2]|0)|0;c[d>>2]=1524;e=d+108|0;c[e>>2]=1544;Tc(d+8|0);c[e>>2]=5388;a=c[e+40>>2]|0;f=e+32|0;b=e+36|0;if(a|0)do{a=a+-1|0;tb[c[(c[f>>2]|0)+(a<<2)>>2]&0](0,e,c[(c[b>>2]|0)+(a<<2)>>2]|0)}while((a|0)!=0);a=c[e+28>>2]|0;h=a+4|0;g=c[h>>2]|0;c[h>>2]=g+-1;if(g|0){h=c[f>>2]|0;wf(h);h=c[b>>2]|0;wf(h);h=e+48|0;h=c[h>>2]|0;wf(h);h=e+60|0;h=c[h>>2]|0;wf(h);wf(d);return}ob[c[(c[a>>2]|0)+8>>2]&127](a);h=c[f>>2]|0;wf(h);h=c[b>>2]|0;wf(h);h=e+48|0;h=c[h>>2]|0;wf(h);h=e+60|0;h=c[h>>2]|0;wf(h);wf(d);return}
function gd(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0.0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0;aa=i;i=i+64|0;Y=aa+48|0;Z=aa+36|0;_=aa+24|0;$=aa;I=aa+12|0;K=c[b>>2]|0;J=K+(a<<5)+8|0;K=K+(a<<5)+12|0;j=c[J>>2]|0;if((c[K>>2]|0)==(j|0)){i=aa;return}L=(d|0)/-2|0;M=Z+4|0;N=Z+8|0;O=Y+4|0;A=L-((T(g,d)|0)/100|0)|0;B=(d*6|0)/10|0;C=_+4|0;D=Z+8|0;E=Y+8|0;F=$+4|0;H=I+4|0;x=a-e|0;y=(x|0)>-1;z=_+4|0;u=f+a|0;v=b+4|0;w=_+4|0;s=+(d|0)/1.0e3;s=s*(s*6.283185307179586)*.3;t=_+4|0;r=0;g=j;a:while(1){q=g+(r*96|0)|0;e=g+(r*96|0)+56|0;o=g+(r*96|0)+60|0;p=c[e>>2]|0;fc(Y,p+(((((c[o>>2]|0)-p|0)/12|0)+-1|0)*12|0)|0,L);c[Z>>2]=0;c[M>>2]=0;c[N>>2]=0;p=c[O>>2]|0;Mb(Z,c[Y>>2]|0,p);a=c[e>>2]|0;if((((c[o>>2]|0)-a|0)/12|0)>>>0>1){fc($,a,A);fc(I,(c[e>>2]|0)+12|0,B);pc(_,$,I);k=c[I>>2]|0;if(k|0){e=c[H>>2]|0;if((e|0)!=(k|0)){do{a=e;e=e+-12|0;d=c[e>>2]|0;j=d;if(d|0){a=a+-8|0;f=c[a>>2]|0;if((f|0)!=(d|0))c[a>>2]=f+(~((f+-16-j|0)>>>4)<<4);wf(d)}}while((e|0)!=(k|0));c[H>>2]=k}wf(k)}k=c[$>>2]|0;if(k|0){e=c[F>>2]|0;if((e|0)!=(k|0)){do{a=e;e=e+-12|0;d=c[e>>2]|0;j=d;if(d|0){a=a+-8|0;f=c[a>>2]|0;if((f|0)!=(d|0))c[a>>2]=f+(~((f+-16-j|0)>>>4)<<4);wf(d)}}while((e|0)!=(k|0));c[F>>2]=k}wf(k)}j=c[C>>2]|0;a=c[_>>2]|0;d=a;if((j|0)!=(a|0)){f=0;e=a;k=d;m=d;n=j;l=a;a=j;while(1){d=e;o=d+(f*12|0)|0;if((p|0)==(c[E>>2]|0)){Ob(Y,o);d=m;j=n}else{c[p>>2]=0;l=p+4|0;c[l>>2]=0;c[p+8>>2]=0;k=d+(f*12|0)+4|0;e=(c[k>>2]|0)-(c[o>>2]|0)|0;j=e>>4;if(j|0){if(j>>>0>268435455){g=28;break a}a=(e|0)==0?1:e;e=vf(a)|0;b:do if(!e)while(1){e=c[5972]|0;c[5972]=e+0;if(!e){d=0;break b}ub[e&3]();e=vf(a)|0;if(e|0){d=e;break}}else d=e;while(0);c[l>>2]=d;c[p>>2]=d;c[p+8>>2]=d+(j<<4);a=c[o>>2]|0;e=(c[k>>2]|0)-a|0;if((e|0)>0){Vm(d|0,a|0,e|0)|0;c[l>>2]=d+(e>>4<<4)}}c[O>>2]=(c[O>>2]|0)+12;j=c[C>>2]|0;l=c[_>>2]|0;d=l;k=d;e=l;a=j}f=f+1|0;if(f>>>0>=((a-e|0)/12|0)>>>0)break;m=d;p=c[O>>2]|0;n=j}if((a|0)==(e|0))a=e;else{n=0;f=k;while(1){d=e;l=d+(n*12|0)|0;m=c[M>>2]|0;if((m|0)==(c[D>>2]|0))Ob(Z,l);else{c[m>>2]=0;k=m+4|0;c[k>>2]=0;c[m+8>>2]=0;j=d+(n*12|0)+4|0;e=(c[j>>2]|0)-(c[l>>2]|0)|0;d=e>>4;if(d|0){if(d>>>0>268435455){g=42;break a}a=(e|0)==0?1:e;e=vf(a)|0;c:do if(!e)while(1){e=c[5972]|0;c[5972]=e+0;if(!e){f=0;break c}ub[e&3]();e=vf(a)|0;if(e|0){f=e;break}}else f=e;while(0);c[k>>2]=f;c[m>>2]=f;c[m+8>>2]=f+(d<<4);a=c[l>>2]|0;e=(c[j>>2]|0)-a|0;if((e|0)>0){Vm(f|0,a|0,e|0)|0;c[k>>2]=f+(e>>4<<4)}}c[M>>2]=(c[M>>2]|0)+12;e=c[_>>2]|0;f=e;a=c[C>>2]|0}n=n+1|0;if(n>>>0>=((a-e|0)/12|0)>>>0){k=f;break}}}}else{a=j;e=j;k=d}l=e;if(e|0){if((a|0)!=(l|0)){do{e=a;a=a+-12|0;d=c[a>>2]|0;j=d;if(d|0){e=e+-8|0;f=c[e>>2]|0;if((f|0)!=(d|0))c[e>>2]=f+(~((f+-16-j|0)>>>4)<<4);wf(d)}}while((a|0)!=(l|0));c[C>>2]=l;e=k}wf(e)}}if(y?(Q=c[b>>2]|0,P=Q+(x<<5)+8|0,Q=Q+(x<<5)+12|0,R=c[Q>>2]|0,S=c[P>>2]|0,(R|0)!=(S|0)):0){m=g+(r*96|0)+16|0;n=g+(r*96|0)+24|0;o=g+(r*96|0)+8|0;l=0;f=S;a=R;while(1){e=f;k=m;d=c[k+4>>2]|0;p=e+(l*96|0)|0;j=c[p+4>>2]|0;if(((!((d|0)<(j|0)|((d|0)==(j|0)?(c[k>>2]|0)>>>0<(c[p>>2]|0)>>>0:0))?(k=q,d=c[k+4>>2]|0,p=e+(l*96|0)+16|0,j=c[p+4>>2]|0,!((d|0)>(j|0)|((d|0)==(j|0)?(c[k>>2]|0)>>>0>(c[p>>2]|0)>>>0:0))):0)?(k=n,d=c[k+4>>2]|0,p=e+(l*96|0)+8|0,j=c[p+4>>2]|0,!((d|0)<(j|0)|((d|0)==(j|0)?(c[k>>2]|0)>>>0<(c[p>>2]|0)>>>0:0))):0)?(k=o,d=c[k+4>>2]|0,p=e+(l*96|0)+24|0,j=c[p+4>>2]|0,!((d|0)>(j|0)|((d|0)==(j|0)?(c[k>>2]|0)>>>0>(c[p>>2]|0)>>>0:0))):0){k=c[e+(l*96|0)+56>>2]|0;pc(_,Z,k+(((((c[e+(l*96|0)+60>>2]|0)-k|0)/12|0)+-1|0)*12|0)|0);k=c[_>>2]|0;e=c[z>>2]|0;Mb(Z,k,e);if(k|0){if((e|0)!=(k|0)){do{a=e;e=e+-12|0;d=c[e>>2]|0;j=d;if(d|0){a=a+-8|0;f=c[a>>2]|0;if((f|0)!=(d|0))c[a>>2]=f+(~((f+-16-j|0)>>>4)<<4);wf(d)}}while((e|0)!=(k|0));c[z>>2]=k}wf(k)}e=c[P>>2]|0;a=c[Q>>2]|0}else e=f;l=l+1|0;if(l>>>0>=((a-e|0)/96|0)>>>0)break;else f=e}}p=c[b>>2]|0;e=p;if((u|0)<((c[v>>2]|0)-p>>5|0)?(U=e+(u<<5)+8|0,V=e+(u<<5)+12|0,W=c[V>>2]|0,X=c[U>>2]|0,(W|0)!=(X|0)):0){m=g+(r*96|0)+16|0;n=g+(r*96|0)+24|0;o=g+(r*96|0)+8|0;l=0;f=X;a=W;while(1){e=f;k=m;d=c[k+4>>2]|0;p=e+(l*96|0)|0;j=c[p+4>>2]|0;if(((!((d|0)<(j|0)|((d|0)==(j|0)?(c[k>>2]|0)>>>0<(c[p>>2]|0)>>>0:0))?(k=q,d=c[k+4>>2]|0,p=e+(l*96|0)+16|0,j=c[p+4>>2]|0,!((d|0)>(j|0)|((d|0)==(j|0)?(c[k>>2]|0)>>>0>(c[p>>2]|0)>>>0:0))):0)?(k=n,d=c[k+4>>2]|0,p=e+(l*96|0)+8|0,j=c[p+4>>2]|0,!((d|0)<(j|0)|((d|0)==(j|0)?(c[k>>2]|0)>>>0<(c[p>>2]|0)>>>0:0))):0)?(k=o,d=c[k+4>>2]|0,p=e+(l*96|0)+24|0,j=c[p+4>>2]|0,!((d|0)>(j|0)|((d|0)==(j|0)?(c[k>>2]|0)>>>0>(c[p>>2]|0)>>>0:0))):0){k=c[e+(l*96|0)+56>>2]|0;pc(_,Y,k+(((((c[e+(l*96|0)+60>>2]|0)-k|0)/12|0)+-1|0)*12|0)|0);k=c[_>>2]|0;e=c[w>>2]|0;Mb(Y,k,e);if(k|0){if((e|0)!=(k|0)){do{a=e;e=e+-12|0;d=c[e>>2]|0;j=d;if(d|0){a=a+-8|0;f=c[a>>2]|0;if((f|0)!=(d|0))c[a>>2]=f+(~((f+-16-j|0)>>>4)<<4);wf(d)}}while((e|0)!=(k|0));c[w>>2]=k}wf(k)}e=c[U>>2]|0;a=c[V>>2]|0}else e=f;l=l+1|0;if(l>>>0>=((a-e|0)/96|0)>>>0)break;else f=e}}p=g+(r*96|0)+68|0;qc(_,Y,Z);if((p|0)!=(_|0))Mb(p,c[_>>2]|0,c[t>>2]|0);e=c[_>>2]|0;if(e|0){a=c[t>>2]|0;if((a|0)!=(e|0)){do{f=a+-12|0;c[t>>2]=f;d=c[f>>2]|0;j=d;if(!d)a=f;else{a=a+-8|0;f=c[a>>2]|0;if((f|0)!=(d|0))c[a>>2]=f+(~((f+-16-j|0)>>>4)<<4);wf(d);a=c[t>>2]|0}}while((a|0)!=(e|0));e=c[_>>2]|0}wf(e)}o=g+(r*96|0)+72|0;e=c[o>>2]|0;g=c[p>>2]|0;if((e|0)!=(g|0)){a=0;do{q=g;j=c[q+(a*12|0)>>2]|0;q=(c[q+(a*12|0)+4>>2]|0)-j|0;d=q>>4;if((q|0)<48)h=0.0;else{n=d+-1|0;l=j+(n<<4)|0;n=j+(n<<4)+8|0;f=0;h=0.0;k=c[l+4>>2]|0;l=c[l>>2]|0;m=c[n+4>>2]|0;n=c[n>>2]|0;do{ea=j+(f<<4)|0;da=l;l=c[ea>>2]|0;ca=k;k=c[ea+4>>2]|0;ea=j+(f<<4)+8|0;ba=n;n=c[ea>>2]|0;q=m;m=c[ea+4>>2]|0;h=h+(+(da>>>0)+4294967296.0*+(ca|0)+(+(l>>>0)+4294967296.0*+(k|0)))*(+(ba>>>0)+4294967296.0*+(q|0)-(+(n>>>0)+4294967296.0*+(m|0)));f=f+1|0}while((f|0)<(d|0));h=h*-.5}if(+G(+h)/1.0e3/1.0e3<s){Pc(p,a);a=a+-1|0;g=c[p>>2]|0;e=c[o>>2]|0}a=a+1|0}while(a>>>0<((e-g|0)/12|0)>>>0)}j=c[Z>>2]|0;if(j|0){g=c[M>>2]|0;if((g|0)!=(j|0)){do{e=g;g=g+-12|0;f=c[g>>2]|0;d=f;if(f|0){e=e+-8|0;a=c[e>>2]|0;if((a|0)!=(f|0))c[e>>2]=a+(~((a+-16-d|0)>>>4)<<4);wf(f)}}while((g|0)!=(j|0));c[M>>2]=j}wf(j)}j=c[Y>>2]|0;if(j|0){g=c[O>>2]|0;if((g|0)!=(j|0)){do{e=g;g=g+-12|0;f=c[g>>2]|0;d=f;if(f|0){e=e+-8|0;a=c[e>>2]|0;if((a|0)!=(f|0))c[e>>2]=a+(~((a+-16-d|0)>>>4)<<4);wf(f)}}while((g|0)!=(j|0));c[O>>2]=j}wf(j)}r=r+1|0;g=c[J>>2]|0;if(r>>>0>=(((c[K>>2]|0)-g|0)/96|0)>>>0){g=3;break}}if((g|0)==3){i=aa;return}else if((g|0)==28)Bl();else if((g|0)==42)Bl()}function hd(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0.0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0;X=i;i=i+64|0;S=X+48|0;T=X+36|0;U=X+24|0;V=X+12|0;W=X;L=c[b>>2]|0;K=L+(a<<5)+8|0;L=L+(a<<5)+12|0;g=c[K>>2]|0;if((c[L>>2]|0)==(g|0)){i=X;return}D=(d|0)/-2|0;E=T+4|0;F=T+8|0;H=S+4|0;I=U+4|0;J=U+8|0;z=a-e|0;A=(z|0)>-1;B=V+4|0;C=V+4|0;t=f+a|0;u=b+4|0;v=V+4|0;w=V+4|0;x=V+4|0;y=W+4|0;s=0;d=g;do{p=d+(s*96|0)|0;q=c[d+(s*96|0)+56>>2]|0;fc(S,q+(((((c[d+(s*96|0)+60>>2]|0)-q|0)/12|0)+-1|0)*12|0)|0,D);c[T>>2]=0;c[E>>2]=0;c[F>>2]=0;q=c[S>>2]|0;r=c[H>>2]|0;Mb(T,q,r);c[U>>2]=0;c[I>>2]=0;c[J>>2]=0;Mb(U,q,r);if(A?(Q=c[b>>2]|0,P=Q+(z<<5)+8|0,Q=Q+(z<<5)+12|0,R=c[P>>2]|0,(c[Q>>2]|0)!=(R|0)):0){m=d+(s*96|0)+16|0;n=d+(s*96|0)+24|0;o=d+(s*96|0)+8|0;l=0;e=R;do{q=m;j=c[q+4>>2]|0;r=e+(l*96|0)|0;k=c[r+4>>2]|0;do if(((!((j|0)<(k|0)|((j|0)==(k|0)?(c[q>>2]|0)>>>0<(c[r>>2]|0)>>>0:0))?(q=p,j=c[q+4>>2]|0,r=e+(l*96|0)+16|0,k=c[r+4>>2]|0,!((j|0)>(k|0)|((j|0)==(k|0)?(c[q>>2]|0)>>>0>(c[r>>2]|0)>>>0:0))):0)?(q=n,j=c[q+4>>2]|0,r=e+(l*96|0)+8|0,k=c[r+4>>2]|0,!((j|0)<(k|0)|((j|0)==(k|0)?(c[q>>2]|0)>>>0<(c[r>>2]|0)>>>0:0))):0)?(q=o,j=c[q+4>>2]|0,r=e+(l*96|0)+24|0,k=c[r+4>>2]|0,!((j|0)>(k|0)|((j|0)==(k|0)?(c[q>>2]|0)>>>0>(c[r>>2]|0)>>>0:0))):0){a=c[e+(l*96|0)+56>>2]|0;e=((c[e+(l*96|0)+60>>2]|0)-a|0)/12|0;if(e>>>0>1){pc(V,T,a+((e+-2|0)*12|0)|0);k=c[V>>2]|0;e=c[B>>2]|0;Mb(T,k,e);if(k|0){if((e|0)!=(k|0)){do{a=e;e=e+-12|0;g=c[e>>2]|0;j=g;if(g|0){a=a+-8|0;f=c[a>>2]|0;if((f|0)!=(g|0))c[a>>2]=f+(~((f+-16-j|0)>>>4)<<4);wf(g)}}while((e|0)!=(k|0));c[B>>2]=k}wf(k)}break}else{pc(V,T,a+((e+-1|0)*12|0)|0);k=c[V>>2]|0;e=c[C>>2]|0;Mb(T,k,e);if(k|0){if((e|0)!=(k|0)){do{a=e;e=e+-12|0;g=c[e>>2]|0;j=g;if(g|0){a=a+-8|0;f=c[a>>2]|0;if((f|0)!=(g|0))c[a>>2]=f+(~((f+-16-j|0)>>>4)<<4);wf(g)}}while((e|0)!=(k|0));c[C>>2]=k}wf(k)}break}}while(0);l=l+1|0;e=c[P>>2]|0}while(l>>>0<(((c[Q>>2]|0)-e|0)/96|0)>>>0)}r=c[b>>2]|0;e=r;if((t|0)<((c[u>>2]|0)-r>>5|0)?(M=e+(t<<5)+8|0,N=e+(t<<5)+12|0,O=c[M>>2]|0,(c[N>>2]|0)!=(O|0)):0){m=d+(s*96|0)+16|0;n=d+(s*96|0)+24|0;o=d+(s*96|0)+8|0;l=0;e=O;do{q=m;j=c[q+4>>2]|0;r=e+(l*96|0)|0;k=c[r+4>>2]|0;do if(((!((j|0)<(k|0)|((j|0)==(k|0)?(c[q>>2]|0)>>>0<(c[r>>2]|0)>>>0:0))?(q=p,j=c[q+4>>2]|0,r=e+(l*96|0)+16|0,k=c[r+4>>2]|0,!((j|0)>(k|0)|((j|0)==(k|0)?(c[q>>2]|0)>>>0>(c[r>>2]|0)>>>0:0))):0)?(q=n,j=c[q+4>>2]|0,r=e+(l*96|0)+8|0,k=c[r+4>>2]|0,!((j|0)<(k|0)|((j|0)==(k|0)?(c[q>>2]|0)>>>0<(c[r>>2]|0)>>>0:0))):0)?(q=o,j=c[q+4>>2]|0,r=e+(l*96|0)+24|0,k=c[r+4>>2]|0,!((j|0)>(k|0)|((j|0)==(k|0)?(c[q>>2]|0)>>>0>(c[r>>2]|0)>>>0:0))):0){a=c[e+(l*96|0)+56>>2]|0;e=((c[e+(l*96|0)+60>>2]|0)-a|0)/12|0;if(e>>>0>1){pc(V,U,a+((e+-2|0)*12|0)|0);k=c[V>>2]|0;e=c[v>>2]|0;Mb(U,k,e);if(k|0){if((e|0)!=(k|0)){do{a=e;e=e+-12|0;g=c[e>>2]|0;j=g;if(g|0){a=a+-8|0;f=c[a>>2]|0;if((f|0)!=(g|0))c[a>>2]=f+(~((f+-16-j|0)>>>4)<<4);wf(g)}}while((e|0)!=(k|0));c[v>>2]=k}wf(k)}break}else{pc(V,U,a+((e+-1|0)*12|0)|0);k=c[V>>2]|0;e=c[w>>2]|0;Mb(U,k,e);if(k|0){if((e|0)!=(k|0)){do{a=e;e=e+-12|0;g=c[e>>2]|0;j=g;if(g|0){a=a+-8|0;f=c[a>>2]|0;if((f|0)!=(g|0))c[a>>2]=f+(~((f+-16-j|0)>>>4)<<4);wf(g)}}while((e|0)!=(k|0));c[w>>2]=k}wf(k)}break}}while(0);l=l+1|0;e=c[M>>2]|0}while(l>>>0<(((c[N>>2]|0)-e|0)/96|0)>>>0)}qc(V,U,T);a=c[x>>2]|0;e=c[V>>2]|0;if((a|0)!=(e|0)){g=0;q=e;j=e;r=a;f=e;k=a;while(1){p=q;l=c[p+(g*12|0)>>2]|0;p=(c[p+(g*12|0)+4>>2]|0)-l|0;a=p>>4;if((p|0)<48)h=0.0;else{p=a+-1|0;n=l+(p<<4)|0;p=l+(p<<4)+8|0;e=0;h=0.0;m=c[n+4>>2]|0;n=c[n>>2]|0;o=c[p+4>>2]|0;p=c[p>>2]|0;do{aa=l+(e<<4)|0;$=n;n=c[aa>>2]|0;_=m;m=c[aa+4>>2]|0;aa=l+(e<<4)+8|0;Z=p;p=c[aa>>2]|0;Y=o;o=c[aa+4>>2]|0;h=h+(+($>>>0)+4294967296.0*+(_|0)+(+(n>>>0)+4294967296.0*+(m|0)))*(+(Z>>>0)+4294967296.0*+(Y|0)-(+(p>>>0)+4294967296.0*+(o|0)));e=e+1|0}while((e|0)<(a|0));h=h*-.5}if(+G(+h)/1.0e3/1.0e3<3.0){Pc(V,g);a=c[x>>2]|0;f=c[V>>2]|0;g=g+-1|0;j=f;e=f;k=a}else{e=q;a=r}g=g+1|0;if(g>>>0>=((k-e|0)/12|0)>>>0)break;else{q=e;r=a}}}pc(W,S,V);d=d+(s*96|0)+80|0;if((d|0)!=(W|0))Mb(d,c[W>>2]|0,c[y>>2]|0);d=c[W>>2]|0;if(d|0){e=c[y>>2]|0;if((e|0)!=(d|0)){do{a=e+-12|0;c[y>>2]=a;f=c[a>>2]|0;g=f;if(!f)e=a;else{e=e+-8|0;a=c[e>>2]|0;if((a|0)!=(f|0))c[e>>2]=a+(~((a+-16-g|0)>>>4)<<4);wf(f);e=c[y>>2]|0}}while((e|0)!=(d|0));d=c[W>>2]|0}wf(d)}j=c[V>>2]|0;if(j|0){d=c[x>>2]|0;if((d|0)!=(j|0)){do{e=d;d=d+-12|0;f=c[d>>2]|0;g=f;if(f|0){e=e+-8|0;a=c[e>>2]|0;if((a|0)!=(f|0))c[e>>2]=a+(~((a+-16-g|0)>>>4)<<4);wf(f)}}while((d|0)!=(j|0));c[x>>2]=j}wf(j)}j=c[U>>2]|0;if(j|0){d=c[I>>2]|0;if((d|0)!=(j|0)){do{e=d;d=d+-12|0;f=c[d>>2]|0;g=f;if(f|0){e=e+-8|0;a=c[e>>2]|0;if((a|0)!=(f|0))c[e>>2]=a+(~((a+-16-g|0)>>>4)<<4);wf(f)}}while((d|0)!=(j|0));c[I>>2]=j}wf(j)}j=c[T>>2]|0;if(j|0){d=c[E>>2]|0;if((d|0)!=(j|0)){do{e=d;d=d+-12|0;f=c[d>>2]|0;g=f;if(f|0){e=e+-8|0;a=c[e>>2]|0;if((a|0)!=(f|0))c[e>>2]=a+(~((a+-16-g|0)>>>4)<<4);wf(f)}}while((d|0)!=(j|0));c[E>>2]=j}wf(j)}j=c[S>>2]|0;if(j|0){d=c[H>>2]|0;if((d|0)!=(j|0)){do{e=d;d=d+-12|0;f=c[d>>2]|0;g=f;if(f|0){e=e+-8|0;a=c[e>>2]|0;if((a|0)!=(f|0))c[e>>2]=a+(~((a+-16-g|0)>>>4)<<4);wf(f)}}while((d|0)!=(j|0));c[H>>2]=j}wf(j)}s=s+1|0;d=c[K>>2]|0}while(s>>>0<(((c[L>>2]|0)-d|0)/96|0)>>>0);i=X;return}function id(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0.0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0.0,A=0,B=0,C=0,D=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0;ea=i;i=i+80|0;aa=ea+64|0;ba=ea;ca=ea+52|0;da=ea+40|0;Y=(b|0)>0;if((e|0)<=0){i=ea;return}L=((d|0)/2|0)+b|0;M=a+144|0;N=a+72|0;O=a+76|0;P=a+88|0;Q=ca+4|0;R=aa+4|0;V=a+36|0;W=a+40|0;X=ba+4|0;y=a+44|0;z=+(T(T(d,-100)|0,d)|0);A=da+4|0;B=ba+4|0;C=ba+8|0;D=ca+4|0;I=da+4|0;J=ba+4|0;K=ca+4|0;x=0;a:while(1){p=L+(T(x,d)|0)|0;fc(aa,M,p);b=c[O>>2]|0;a=c[N>>2]|0;if((b|0)!=(a|0)){o=0;do{v=a;w=c[v+(o*12|0)>>2]|0;h=w;if((c[v+(o*12|0)+4>>2]|0)!=(w|0)?(Z=h+8|0,_=h+12|0,$=c[Z>>2]|0,(c[_>>2]|0)!=($|0)):0){m=0;b=$;do{if(Y){c[ba>>2]=0;c[B>>2]=0;c[C>>2]=0;Ob(ba,c[b+(m*96|0)+32>>2]|0);fc(da,ba,p);qc(ca,aa,da);l=c[ca>>2]|0;b=c[D>>2]|0;Mb(aa,l,b);if(l|0){if((b|0)!=(l|0)){do{a=b;b=b+-12|0;j=c[b>>2]|0;k=j;if(j|0){a=a+-8|0;h=c[a>>2]|0;if((h|0)!=(j|0))c[a>>2]=h+(~((h+-16-k|0)>>>4)<<4);wf(j)}}while((b|0)!=(l|0));c[D>>2]=l}wf(l)}l=c[da>>2]|0;if(l|0){b=c[I>>2]|0;if((b|0)!=(l|0)){do{a=b;b=b+-12|0;j=c[b>>2]|0;k=j;if(j|0){a=a+-8|0;h=c[a>>2]|0;if((h|0)!=(j|0))c[a>>2]=h+(~((h+-16-k|0)>>>4)<<4);wf(j)}}while((b|0)!=(l|0));c[I>>2]=l}wf(l)}l=c[ba>>2]|0;if(l|0){b=c[B>>2]|0;if((b|0)!=(l|0)){do{a=b;b=b+-12|0;k=c[b>>2]|0;j=k;if(k|0){a=a+-8|0;h=c[a>>2]|0;if((h|0)!=(k|0))c[a>>2]=h+(~((h+-16-j|0)>>>4)<<4);wf(k)}}while((b|0)!=(l|0));c[B>>2]=l}wf(l)}}else{fc(ca,b+(m*96|0)+32|0,p);qc(ba,aa,ca);l=c[ba>>2]|0;b=c[J>>2]|0;Mb(aa,l,b);if(l|0){if((b|0)!=(l|0)){do{a=b;b=b+-12|0;j=c[b>>2]|0;k=j;if(j|0){a=a+-8|0;h=c[a>>2]|0;if((h|0)!=(j|0))c[a>>2]=h+(~((h+-16-k|0)>>>4)<<4);wf(j)}}while((b|0)!=(l|0));c[J>>2]=l}wf(l)}l=c[ca>>2]|0;if(l|0){b=c[K>>2]|0;if((b|0)!=(l|0)){do{a=b;b=b+-12|0;j=c[b>>2]|0;k=j;if(j|0){a=a+-8|0;h=c[a>>2]|0;if((h|0)!=(j|0))c[a>>2]=h+(~((h+-16-k|0)>>>4)<<4);wf(j)}}while((b|0)!=(l|0));c[K>>2]=l}wf(l)}}m=m+1|0;b=c[Z>>2]|0}while(m>>>0<(((c[_>>2]|0)-b|0)/96|0)>>>0);a=c[N>>2]|0;b=c[O>>2]|0}o=o+1|0}while(o>>>0<((b-a|0)/12|0)>>>0)}od(ba,P,g);fc(da,ba,p);qc(ca,aa,da);l=c[ca>>2]|0;b=c[Q>>2]|0;Mb(aa,l,b);if(l|0){if((b|0)!=(l|0)){do{a=b;b=b+-12|0;j=c[b>>2]|0;k=j;if(j|0){a=a+-8|0;h=c[a>>2]|0;if((h|0)!=(j|0))c[a>>2]=h+(~((h+-16-k|0)>>>4)<<4);wf(j)}}while((b|0)!=(l|0));c[Q>>2]=l}wf(l)}l=c[da>>2]|0;if(l|0){b=c[A>>2]|0;if((b|0)!=(l|0)){do{a=b;b=b+-12|0;j=c[b>>2]|0;k=j;if(j|0){a=a+-8|0;h=c[a>>2]|0;if((h|0)!=(j|0))c[a>>2]=h+(~((h+-16-k|0)>>>4)<<4);wf(j)}}while((b|0)!=(l|0));c[A>>2]=l}wf(l)}j=c[R>>2]|0;a=c[aa>>2]|0;k=a;l=j;b=a;if((j|0)!=(a|0)){h=0;m=k;do{p=c[k+(h*12|0)>>2]|0;w=(c[k+(h*12|0)+4>>2]|0)-p|0;o=w>>4;if((w|0)>=48){t=o+-1|0;r=p+(t<<4)|0;t=p+(t<<4)+8|0;k=0;n=0.0;q=c[r+4>>2]|0;r=c[r>>2]|0;s=c[t+4>>2]|0;t=c[t>>2]|0;do{ga=p+(k<<4)|0;fa=r;r=c[ga>>2]|0;u=q;q=c[ga+4>>2]|0;ga=p+(k<<4)+8|0;v=t;t=c[ga>>2]|0;w=s;s=c[ga+4>>2]|0;n=n+(+(fa>>>0)+4294967296.0*+(u|0)+(+(r>>>0)+4294967296.0*+(q|0)))*(+(v>>>0)+4294967296.0*+(w|0)-(+(t>>>0)+4294967296.0*+(s|0)));k=k+1|0}while((k|0)<(o|0));n=n*-.5;if(n<0.0&n>z){Pc(aa,h);l=c[R>>2]|0;a=c[aa>>2]|0;h=h+-1|0;b=a;m=a;j=l}}h=h+1|0;k=a}while(h>>>0<((j-a|0)/12|0)>>>0);if((j|0)==(a|0))w=l;else{q=0;while(1){h=a;o=h+(q*12|0)|0;p=c[W>>2]|0;if((p|0)==(c[y>>2]|0)){Ob(V,o);h=j}else{c[p>>2]=0;l=p+4|0;c[l>>2]=0;c[p+8>>2]=0;k=h+(q*12|0)+4|0;b=(c[k>>2]|0)-(c[o>>2]|0)|0;j=b>>4;if(j|0){if(j>>>0>268435455){b=81;break a}a=(b|0)==0?1:b;b=vf(a)|0;b:do if(!b)while(1){b=c[5972]|0;c[5972]=b+0;if(!b){h=0;break b}ub[b&3]();b=vf(a)|0;if(b|0){h=b;break}}else h=b;while(0);c[l>>2]=h;c[p>>2]=h;c[p+8>>2]=h+(j<<4);a=c[o>>2]|0;b=(c[k>>2]|0)-a|0;if((b|0)>0){Vm(h|0,a|0,b|0)|0;c[l>>2]=h+(b>>4<<4)}}c[W>>2]=(c[W>>2]|0)+12;l=c[R>>2]|0;a=c[aa>>2]|0;b=a;m=a;h=l}q=q+1|0;if(q>>>0>=((h-a|0)/12|0)>>>0)break;else j=h}w=l;k=a}}else{m=k;w=l}a=c[W>>2]|0;h=c[V>>2]|0;v=h;if((a|0)==(h|0))a=0;else{u=(a-h|0)/12|0;t=0;a=0;h=0;do{fa=c[v+(t*12|0)+4>>2]|0;ga=c[v+(t*12|0)>>2]|0;s=fa-ga>>4;j=s+-1|0;r=ga;if((fa|0)!=(ga|0)){q=r+(j<<4)+8|0;o=r+(j<<4)|0;j=0;l=c[o>>2]|0;o=c[o+4>>2]|0;p=c[q>>2]|0;q=c[q+4>>2]|0;do{ja=r+(j<<4)|0;fa=l;l=c[ja>>2]|0;ga=o;o=c[ja+4>>2]|0;ja=r+(j<<4)+8|0;ha=p;p=c[ja>>2]|0;ia=q;q=c[ja+4>>2]|0;ga=Km(fa|0,ga|0,l|0,o|0)|0;fa=E;ia=Km(ha|0,ia|0,p|0,q|0)|0;ha=E;fa=Ym(ga|0,fa|0,ga|0,fa|0)|0;ga=E;ha=Ym(ia|0,ha|0,ia|0,ha|0)|0;ga=Om(ha|0,E|0,fa|0,ga|0)|0;n=+H(+(+(ga>>>0)+4294967296.0*+(E|0)));a=Om(~~n>>>0|0,(+G(n)>=1.0?(n>0.0?~~+U(+F(n/4294967296.0),4294967295.0)>>>0:~~+S((n-+(~~n>>>0))/4294967296.0)>>>0):0)|0,a|0,h|0)|0;h=E;j=j+1|0}while(j>>>0<s>>>0)}t=t+1|0}while(t>>>0<u>>>0)}x=x+1|0;e=((a|0)<(f|0)&((x|0)>=(e|0)&(a|0)>0)&1)+e|0;a=c[ba>>2]|0;if(!a)m=k;else{h=c[X>>2]|0;if((h|0)!=(a|0)){do{j=h+-12|0;c[X>>2]=j;k=c[j>>2]|0;l=k;if(!k)h=j;else{h=h+-8|0;j=c[h>>2]|0;if((j|0)!=(k|0))c[h>>2]=j+(~((j+-16-l|0)>>>4)<<4);wf(k);h=c[X>>2]|0}}while((h|0)!=(a|0));a=c[ba>>2]|0}wf(a)}if(m|0){if((w|0)==(m|0))b=m;else{j=w;do{a=j;j=j+-12|0;k=c[j>>2]|0;l=k;if(k|0){a=a+-8|0;h=c[a>>2]|0;if((h|0)!=(k|0))c[a>>2]=h+(~((h+-16-l|0)>>>4)<<4);wf(k)}}while((j|0)!=(m|0));c[R>>2]=m}wf(b)}if((x|0)>=(e|0)){b=3;break}}if((b|0)==3){i=ea;return}else if((b|0)==81)Bl()}function jd(b,d,e,f,g,h,j,k,l,m){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;j=j|0;k=k|0;l=l|0;m=m|0;var n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,I=0,J=0.0;I=i;i=i+48|0;n=I+24|0;o=I;kd(n,d,e,f,g,h);kd(o,d,j,k,l,m);p=c[n+16>>2]|0;if((p|0)>=0?(p|0)==(c[o+16>>2]|0):0){c[b+8>>2]=p;C=c[n+20>>2]|0;c[b+12>>2]=C;z=c[o+20>>2]|0;c[b+16>>2]=z;D=b+20|0;a[D>>0]=1;if((C|0)==(z|0)){C=Km(e|0,f|0,j|0,k|0)|0;e=E;D=Km(g|0,h|0,l|0,m|0)|0;f=E;g=Ym(C|0,e|0,C|0,e|0)|0;h=E;f=Ym(D|0,f|0,D|0,f|0)|0;h=Om(f|0,E|0,g|0,h|0)|0;J=+H(+(+(h>>>0)+4294967296.0*+(E|0)));h=+G(J)>=1.0?(J>0.0?~~+U(+F(J/4294967296.0),4294967295.0)>>>0:~~+S((J-+(~~J>>>0))/4294967296.0)>>>0):0;c[b>>2]=~~J>>>0;c[b+4>>2]=h;i=I;return}A=c[d+28>>2]|0;B=c[A+(p*12|0)>>2]|0;d=B+(C<<4)|0;r=c[d>>2]|0;d=c[d+4>>2]|0;n=B+(C<<4)+8|0;s=c[n>>2]|0;n=c[n+4>>2]|0;y=Km(r|0,d|0,e|0,f|0)|0;q=E;u=Km(s|0,n|0,g|0,h|0)|0;o=E;o=Ym(u|0,o|0,u|0,o|0)|0;u=E;q=Ym(y|0,q|0,y|0,q|0)|0;q=Om(o|0,u|0,q|0,E|0)|0;J=+H(+(+(q>>>0)+4294967296.0*+(E|0)));q=~~J>>>0;u=+G(J)>=1.0?(J>0.0?~~+U(+F(J/4294967296.0),4294967295.0)>>>0:~~+S((J-+(~~J>>>0))/4294967296.0)>>>0):0;A=(c[A+(p*12|0)+4>>2]|0)-B>>4;o=((C+1|0)>>>0)%(A>>>0)|0;if((o|0)==(z|0)){p=u;o=s}else{w=d;v=s;t=n;p=u;while(1){d=B+(o<<4)|0;s=c[d>>2]|0;d=c[d+4>>2]|0;n=B+(o<<4)+8|0;u=c[n>>2]|0;n=c[n+4>>2]|0;y=Km(r|0,w|0,s|0,d|0)|0;x=E;v=Km(v|0,t|0,u|0,n|0)|0;w=E;x=Ym(y|0,x|0,y|0,x|0)|0;y=E;w=Ym(v|0,w|0,v|0,w|0)|0;y=Om(w|0,E|0,x|0,y|0)|0;J=+H(+(+(y>>>0)+4294967296.0*+(E|0)));q=Om(~~J>>>0|0,(+G(J)>=1.0?(J>0.0?~~+U(+F(J/4294967296.0),4294967295.0)>>>0:~~+S((J-+(~~J>>>0))/4294967296.0)>>>0):0)|0,q|0,p|0)|0;p=E;o=((o+1|0)>>>0)%(A>>>0)|0;if((o|0)==(z|0)){r=s;o=u;break}else{r=s;w=d;v=u;t=n}}}x=Km(r|0,d|0,j|0,k|0)|0;y=E;u=Km(o|0,n|0,l|0,m|0)|0;r=E;y=Ym(x|0,y|0,x|0,y|0)|0;x=E;r=Ym(u|0,r|0,u|0,r|0)|0;x=Om(r|0,E|0,y|0,x|0)|0;J=+H(+(+(x>>>0)+4294967296.0*+(E|0)));x=Om(~~J>>>0|0,(+G(J)>=1.0?(J>0.0?~~+U(+F(J/4294967296.0),4294967295.0)>>>0:~~+S((J-+(~~J>>>0))/4294967296.0)>>>0):0)|0,q|0,p|0)|0;y=E;q=B+(z<<4)|0;r=c[q>>2]|0;q=c[q+4>>2]|0;u=B+(z<<4)+8|0;p=c[u>>2]|0;u=c[u+4>>2]|0;k=Km(r|0,q|0,j|0,k|0)|0;o=E;n=Km(p|0,u|0,l|0,m|0)|0;d=E;d=Ym(n|0,d|0,n|0,d|0)|0;n=E;o=Ym(k|0,o|0,k|0,o|0)|0;o=Om(d|0,n|0,o|0,E|0)|0;J=+H(+(+(o>>>0)+4294967296.0*+(E|0)));o=~~J>>>0;n=+G(J)>=1.0?(J>0.0?~~+U(+F(J/4294967296.0),4294967295.0)>>>0:~~+S((J-+(~~J>>>0))/4294967296.0)>>>0):0;d=((z+1|0)>>>0)%(A>>>0)|0;if((d|0)==(C|0))d=u;else{w=r;while(1){s=B+(d<<4)|0;r=c[s>>2]|0;s=c[s+4>>2]|0;v=B+(d<<4)+8|0;t=c[v>>2]|0;v=c[v+4>>2]|0;m=Km(w|0,q|0,r|0,s|0)|0;l=E;j=Km(p|0,u|0,t|0,v|0)|0;k=E;l=Ym(m|0,l|0,m|0,l|0)|0;m=E;k=Ym(j|0,k|0,j|0,k|0)|0;m=Om(k|0,E|0,l|0,m|0)|0;J=+H(+(+(m>>>0)+4294967296.0*+(E|0)));o=Om(~~J>>>0|0,(+G(J)>=1.0?(J>0.0?~~+U(+F(J/4294967296.0),4294967295.0)>>>0:~~+S((J-+(~~J>>>0))/4294967296.0)>>>0):0)|0,o|0,n|0)|0;n=E;d=((d+1|0)>>>0)%(A>>>0)|0;if((d|0)==(C|0)){q=s;p=t;d=v;break}else{w=r;q=s;p=t;u=v}}}C=Km(r|0,q|0,e|0,f|0)|0;f=E;e=Km(p|0,d|0,g|0,h|0)|0;h=E;f=Ym(C|0,f|0,C|0,f|0)|0;g=E;h=Ym(e|0,h|0,e|0,h|0)|0;h=Om(f|0,g|0,h|0,E|0)|0;J=+H(+(+(h>>>0)+4294967296.0*+(E|0)));n=Om(~~J>>>0|0,(+G(J)>=1.0?(J>0.0?~~+U(+F(J/4294967296.0),4294967295.0)>>>0:~~+S((J-+(~~J>>>0))/4294967296.0)>>>0):0)|0,o|0,n|0)|0;o=E;if((y|0)<(o|0)|(y|0)==(o|0)&x>>>0<n>>>0){a[D>>0]=1;c[b>>2]=x;c[b+4>>2]=y;i=I;return}else{a[D>>0]=0;c[b>>2]=n;c[b+4>>2]=o;i=I;return}}c[b>>2]=-1;c[b+4>>2]=-1;i=I;return}function kd(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,I=0,J=0,K=0,L=0,M=0,N=0.0,O=0,P=0,Q=0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;h=c[b+32>>2]|0;b=c[b+28>>2]|0;z=b;a:do if((h|0)!=(b|0)){y=(h-b|0)/12|0;b=0;b:while(1){u=c[z+(b*12|0)+4>>2]|0;v=c[z+(b*12|0)>>2]|0;x=u-v>>4;h=x+-1|0;w=v;if((u|0)!=(v|0)){v=w+(h<<4)+8|0;t=w+(h<<4)|0;h=0;s=c[t>>2]|0;t=c[t+4>>2]|0;u=c[v>>2]|0;v=c[v+4>>2]|0;do{k=w+(h<<4)|0;i=s;s=c[k>>2]|0;j=t;t=c[k+4>>2]|0;k=w+(h<<4)+8|0;m=u;u=c[k>>2]|0;n=v;v=c[k+4>>2]|0;k=Km(s|0,t|0,i|0,j|0)|0;l=E;o=Km(u|0,v|0,m|0,n|0)|0;p=E;r=Ym(k|0,l|0,k|0,l|0)|0;q=E;O=Ym(o|0,p|0,o|0,p|0)|0;q=Om(O|0,E|0,r|0,q|0)|0;N=+H(+(+(q>>>0)+4294967296.0*+(E|0)));q=~~N>>>0;r=+G(N)>=1.0?(N>0.0?~~+U(+F(N/4294967296.0),4294967295.0)>>>0:~~+S((N-+(~~N>>>0))/4294967296.0)>>>0):0;if((((r|0)>0|(r|0)==0&q>>>0>1?(L=Km(d|0,e|0,i|0,j|0)|0,O=E,Q=Km(f|0,g|0,m|0,n|0)|0,P=E,O=Ym(L|0,O|0,k|0,l|0)|0,L=E,P=Ym(Q|0,P|0,o|0,p|0)|0,L=Om(P|0,E|0,O|0,L|0)|0,L=Rm(L|0,E|0,q|0,r|0)|0,O=E,!((O|0)<0|((O|0)>(r|0)|(O|0)==(r|0)&L>>>0>q>>>0))):0)?(D=Sm(0,L|0,32)|0,I=E,M=Ym(D|0,I|0,k|0,l|0)|0,A=E,I=Ym(D|0,I|0,o|0,p|0)|0,D=E,B=Sm(0,q|0,32)|0,C=E,A=Rm(M|0,A|0,B|0,C|0)|0,M=E,C=Rm(I|0,D|0,B|0,C|0)|0,B=E,M=Om(A|0,M|0,i|0,j|0)|0,A=E,B=Om(C|0,B|0,m|0,n|0)|0,C=E,D=Km(M|0,A|0,d|0,e|0)|0,I=E,J=Km(B|0,C|0,f|0,g|0)|0,K=E,Q=Om(D|0,I|0,100,0)|0,P=E,!(P>>>0>0|(P|0)==0&Q>>>0>200)):0)?(O=Om(J|0,K|0,100,0)|0,r=E,q=Ym(J|0,K|0,J|0,K|0)|0,P=E,Q=Ym(D|0,I|0,D|0,I|0)|0,Q=Om(q|0,P|0,Q|0,E|0)|0,P=E,(r>>>0<0|(r|0)==0&O>>>0<201)&(P>>>0<0|(P|0)==0&Q>>>0<10001)):0)break b;h=h+1|0}while(h>>>0<x>>>0)}b=b+1|0;if(b>>>0>=y>>>0)break a}Q=a;c[Q>>2]=M;c[Q+4>>2]=A;Q=a+8|0;c[Q>>2]=B;c[Q+4>>2]=C;c[a+16>>2]=b;c[a+20>>2]=h;return}while(0);c[a+16>>2]=-1;return}function ld(a,b){a=a|0;b=b|0;return (c[a>>2]|0)-(c[b>>2]|0)|0}function md(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;i=a+4|0;j=c[a>>2]|0;k=(c[i>>2]|0)-j|0;h=k>>4;d=h+1|0;if(d>>>0>268435455)Bl();l=a+8|0;f=(c[l>>2]|0)-j|0;g=f>>3;g=f>>4>>>0<134217727?(g>>>0<d>>>0?d:g):268435455;if(!g)d=0;else{if(g>>>0>268435455){l=Fa(4)|0;c[l>>2]=8316;$a(l|0,1336,91)}e=g<<4;e=(e|0)==0?1:e;d=vf(e)|0;a:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break a}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0)}f=d+(h<<4)|0;c[f>>2]=c[b>>2];c[f+4>>2]=c[b+4>>2];c[f+8>>2]=c[b+8>>2];c[f+12>>2]=c[b+12>>2];e=f+(0-h<<4)|0;if((k|0)>0)Vm(e|0,j|0,k|0)|0;c[a>>2]=e;c[i>>2]=f+16;c[l>>2]=d+(g<<4);if(!j)return;wf(j);return}function nd(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var i=0,j=0,k=0.0,l=0,m=0,n=0,o=0;if((e|0)<0|(e|0)==0&d>>>0<1|((g|0)<0|(g|0)==0&f>>>0<1)){m=0;return m|0}j=c[b+12>>2]|0;i=c[j+44>>2]|0;n=i+-1|0;o=((n|0)<0)<<31>>31;if(!((o|0)>(e|0)|(o|0)==(e|0)&n>>>0>d>>>0)){o=0;return o|0}o=(c[j+48>>2]|0)+-1|0;n=((o|0)<0)<<31>>31;if(!((n|0)>(g|0)|(n|0)==(g|0)&o>>>0>f>>>0)){o=0;return o|0}o=Ym(i|0,((i|0)<0)<<31>>31|0,f|0,g|0)|0;d=Om(o|0,E|0,d|0,e|0)|0;if(c[(c[b+36>>2]|0)+(d<<2)>>2]|0){o=0;return o|0}i=c[j+52>>2]|0;f=c[i+(d*12|0)+4>>2]|0;i=c[i+(d*12|0)>>2]|0;d=(f|0)==(i|0);j=i;a:do if(!(a[b+32>>0]|0)){if(d){o=0;return o|0}if(+h[j+8>>3]<+h[b+16>>3]){o=0;return o|0}if(((c[j>>2]|0)-(c[b+28>>2]|0)|0)<(c[b+24>>2]|0)){o=0;return o|0}}else{if(d){o=0;return o|0}k=+h[b+16>>3];g=b+28|0;e=b+24|0;i=f-i>>4;d=0;while(1){if(+h[j+(d<<4)+8>>3]>=k?(l=c[g>>2]|0,m=c[e>>2]|0,((c[j+(d<<4)>>2]|0)-l|0)>=(m|0)):0){if(!d)break a;if(((c[j+(d+-1<<4)>>2]|0)+l|0)<(m|0))break a}d=d+2|0;if(d>>>0>=i>>>0){d=0;break}}return d|0}while(0);o=1;return o|0}function od(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,F=0,G=0,H=0,I=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0;P=i;i=i+32|0;O=P;L=P+16|0;c[b>>2]=0;M=b+4|0;c[M>>2]=0;c[b+8>>2]=0;N=b+12|0;c[N>>2]=d;c[b+24>>2]=e;a[b+32>>0]=a[d+8>>0]|0;if(!(a[d>>0]|0)){i=P;return}h[b+16>>3]=+J(+(+(90-(c[d+4>>2]|0)|0)/180.0*3.141592653589793))+-.01;c[b+28>>2]=c[d+16>>2];I=d+44|0;j=c[I>>2]|0;K=d+48|0;g=c[K>>2]|0;f=T(g,j)|0;f=f>>>0>1073741823?-1:f<<2;f=(f|0)==0?1:f;e=vf(f)|0;a:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break a}ub[e&3]();e=vf(f)|0}while(!(e|0));while(0);H=b+36|0;c[H>>2]=e;Mm(e|0,0,T(j<<2,g)|0)|0;do if((g|0)>1){B=L+4|0;C=L+8|0;D=L+12|0;A=O+8|0;z=O+8|0;F=b+8|0;G=L+4|0;y=1;e=g;f=j;b:while(1){if((f|0)>1){x=((y|0)<0)<<31>>31;w=1;e=f;while(1){f=((w|0)<0)<<31>>31;if(nd(b,w,f,y,x)|0?(v=(T(e,y)|0)+w|0,(c[(c[H>>2]|0)+(v<<2)>>2]|0)==0):0){c[5353]=(c[5353]|0)+1;u=ic(b)|0;c[L>>2]=B;c[B>>2]=0;c[C>>2]=0;c[D>>2]=0;v=u+4|0;t=u+8|0;s=w;e=f;r=y;p=x;q=w;n=f;c:while(1){l=c[5353]|0;f=c[(c[N>>2]|0)+44>>2]|0;f=Ym(f|0,((f|0)<0)<<31>>31|0,r|0,p|0)|0;f=Om(f|0,E|0,q|0,n|0)|0;m=c[H>>2]|0;c[m+(f<<2)>>2]=l;f=Om(q|0,n|0,1,0)|0;g=E;if(nd(b,f,g,r,p)|0)while(1){j=c[(c[N>>2]|0)+44>>2]|0;j=Ym(j|0,((j|0)<0)<<31>>31|0,r|0,p|0)|0;j=Om(j|0,E|0,f|0,g|0)|0;c[m+(j<<2)>>2]=l;j=Om(f|0,g|0,1,0)|0;k=E;if(nd(b,j,k,r,p)|0){f=j;g=k}else{o=f;l=g;break}}else{o=q;l=n}g=c[N>>2]|0;k=c[g+40>>2]|0;j=((k|0)<0)<<31>>31;f=Ym(k|0,j|0,q|0,n|0)|0;m=E;j=Ym(k|0,j|0,r|0,p|0)|0;Q=g+24|0;R=c[Q>>2]|0;Q=c[Q+4>>2]|0;g=g+32|0;j=Om(c[g>>2]|0,c[g+4>>2]|0,j|0,E|0)|0;g=E;k=(k|0)/2|0;k=Km(R|0,Q|0,k|0,((k|0)<0)<<31>>31|0)|0;m=Om(k|0,E|0,f|0,m|0)|0;f=O;c[f>>2]=m;c[f+4>>2]=E;f=A;c[f>>2]=j;c[f+4>>2]=g;f=c[L>>2]|0;g=f+4|0;j=c[g>>2]|0;if((j|0)==(c[f+8>>2]|0))Tb(f,O);else{c[j>>2]=c[O>>2];c[j+4>>2]=c[O+4>>2];c[j+8>>2]=c[O+8>>2];c[j+12>>2]=c[O+12>>2];c[g>>2]=(c[g>>2]|0)+16}k=c[N>>2]|0;R=c[k+40>>2]|0;f=((R|0)<0)<<31>>31;g=Ym(R|0,f|0,o|0,l|0)|0;Q=E;f=Ym(R|0,f|0,r|0,p|0)|0;R=E;m=k+24|0;k=k+32|0;j=c[k>>2]|0;k=c[k+4>>2]|0;m=Om(g|0,Q|0,c[m>>2]|0,c[m+4>>2]|0)|0;Q=E;R=Om(j|0,k|0,f|0,R|0)|0;f=O;c[f>>2]=m;c[f+4>>2]=Q;f=z;c[f>>2]=R;c[f+4>>2]=E;f=c[v>>2]|0;if((f|0)==(c[t>>2]|0))Tb(u,O);else{c[f>>2]=c[O>>2];c[f+4>>2]=c[O+4>>2];c[f+8>>2]=c[O+8>>2];c[f+12>>2]=c[O+12>>2];c[v>>2]=(c[v>>2]|0)+16}m=Om(r|0,p|0,1,0)|0;p=E;d:do if(nd(b,s,e,m,p)|0){j=n;k=q;f=s}else{j=n;k=q;f=s;while(1){if((j|0)>(l|0)|(j|0)==(l|0)&k>>>0>o>>>0)break d;e=Om(k|0,j|0,1,0)|0;g=E;if(nd(b,e,g,m,p)|0){j=g;k=e;f=e;e=g;break}else{j=g;k=e;f=e;e=g}}}while(0);if((j|0)>(l|0)|(j|0)==(l|0)&k>>>0>o>>>0)break;R=Om(k|0,j|0,-1,-1)|0;if(!(nd(b,R,E,m,p)|0)){s=f;r=m;q=k;n=j;continue}while(1){if(!((j|0)>0|(j|0)==0&k>>>0>1)){s=f;r=m;q=k;n=j;continue c}f=Om(k|0,j|0,-1,-1)|0;g=E;R=Om(k|0,j|0,-2,-1)|0;if(nd(b,R,E,m,p)|0){j=g;k=f;e=g}else{s=f;e=g;r=m;q=f;n=g;continue c}}}f=c[L>>2]|0;e=(c[f+4>>2]|0)-(c[f>>2]|0)>>4;if(e|0){g=0;do{e=(c[f>>2]|0)+(e+~g<<4)|0;c[O>>2]=c[e>>2];c[O+4>>2]=c[e+4>>2];c[O+8>>2]=c[e+8>>2];c[O+12>>2]=c[e+12>>2];e=c[v>>2]|0;if((e|0)==(c[t>>2]|0))Tb(u,O);else{c[e>>2]=c[O>>2];c[e+4>>2]=c[O+4>>2];c[e+8>>2]=c[O+8>>2];c[e+12>>2]=c[O+12>>2];c[v>>2]=(c[v>>2]|0)+16}g=g+1|0;f=c[L>>2]|0;e=(c[f+4>>2]|0)-(c[f>>2]|0)>>4}while(e>>>0>g>>>0)}j=c[M>>2]|0;if((j|0)==(c[F>>2]|0))Ob(b,u);else{c[j>>2]=0;l=j+4|0;c[l>>2]=0;c[j+8>>2]=0;e=(c[v>>2]|0)-(c[u>>2]|0)|0;k=e>>4;if(k|0){if(k>>>0>268435455){f=32;break b}f=(e|0)==0?1:e;e=vf(f)|0;e:do if(!e)while(1){e=c[5972]|0;c[5972]=e+0;if(!e){g=0;break e}ub[e&3]();e=vf(f)|0;if(e|0){g=e;break}}else g=e;while(0);c[l>>2]=g;c[j>>2]=g;c[j+8>>2]=g+(k<<4);f=c[u>>2]|0;e=(c[v>>2]|0)-f|0;if((e|0)>0){Vm(g|0,f|0,e|0)|0;c[l>>2]=g+(e>>4<<4)}}c[M>>2]=(c[M>>2]|0)+12}e=c[G>>2]|0;f=e;if(e|0){g=c[C>>2]|0;if((g|0)!=(e|0))c[C>>2]=g+(~((g+-16-f|0)>>>4)<<4);wf(e)}e=c[I>>2]|0}w=w+1|0;if((w|0)>=(e|0))break}f=e;e=c[K>>2]|0}y=y+1|0;if((y|0)>=(e|0)){f=9;break}}if((f|0)==9){e=c[H>>2]|0;if(!e)break;else{f=52;break}}else if((f|0)==32)Bl()}else f=52;while(0);if((f|0)==52)wf(e);fc(O,b,c[d+12>>2]|0);if((b|0)==(O|0))e=O;else{Mb(b,c[O>>2]|0,c[O+4>>2]|0);e=O}e=c[e>>2]|0;if(e|0){l=O+4|0;f=c[l>>2]|0;if((f|0)!=(e|0)){do{g=f+-12|0;c[l>>2]=g;j=c[g>>2]|0;k=j;if(!j)f=g;else{f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j);f=c[l>>2]|0}}while((f|0)!=(e|0));e=c[O>>2]|0}wf(e)}i=P;return}function pd(b,d,e){b=b|0;d=d|0;e=+e;var f=0,g=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0,s=0,t=0,u=0,v=0.0,w=0,x=0,y=0,z=0,A=0.0,B=0.0,C=0,D=0,E=0.0,F=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0;P=i;i=i+16|0;D=P+7|0;C=P;a[D>>0]=0;a[D+1>>0]=0;a[D+2>>0]=0;a[D+3>>0]=0;a[D+4>>0]=0;a[D+5>>0]=0;a[D+6>>0]=0;a[C>>0]=0;a[C+1>>0]=0;a[C+2>>0]=0;a[C+3>>0]=0;a[C+4>>0]=0;a[C+5>>0]=0;a[C+6>>0]=0;N=+h[d>>3]-+h[b+40>>3];O=+G(+N);M=O>0.0?O:0.0;E=+h[d+8>>3]-+h[b+48>>3];F=+G(+E);M=M<F?F:M;I=+h[d+16>>3]-+h[b+56>>3];J=+G(+I);M=M<J?J:M;K=+h[d+24>>3]-+h[b+64>>3];L=+G(+K);M=M<L?L:M;if(M<=0.0){i=P;return}m=e<.01?.01:e;B=+H(+(O*O+F*F+J*J));B=B==0.0?L:B;j=m*N/B;e=+G(+j);if(e>600.0){e=600.0/e;e=e<1.0?e:1.0}else e=1.0;n=m*E/B;g=+G(+n);if(g>600.0){A=600.0/g;e=A<e?A:e}k=m*I/B;l=+G(+k);if(l>40.0){A=40.0/l;e=A<e?A:e}g=m*K/B;o=+G(+g);if(o>25.0){A=25.0/o;e=A<e?A:e}if(e<1.0){j=j*e;g=g*e;m=m*e;n=n*e;k=k*e;l=l*e;e=o*e}else e=o;p=O/B*3.0e3>9.0e3;A=p?9.0e3:3.0e3;q=F/B*A>9.0e3;A=q?9.0e3:A;r=J/B*A>100.0;A=r?100.0:A;s=L/B*A>1.0e4;A=s?1.0e4:A;o=l>.2?.2:10.0;o=e>2.5&o>2.5?2.5:o;o=m<o?m:o;x=b+72|0;y=b+76|0;t=c[y>>2]|0;z=c[x>>2]|0;u=t;f=b+32|0;if((t|0)!=(z|0)?(v=+h[f>>3],v>.0001):0){l=j-+h[b>>3];e=n-+h[b+8>>3];e=+H(+(l*l+e*e));e=e>20.0?20.0/e:1.0;l=+G(+(k-+h[b+16>>3]));if(l>.4){l=.4/l;e=l<e?l:e}l=+G(+(g-+h[b+24>>3]));if(l>5.0){l=5.0/l;e=l<e?l:e}l=m*e;l=l<v?l:v}else l=o;e=+H(+(2.5000000000000005e-03-B*(A*-2.0)));v=e<l?e:l;w=m<=e&1;h[b>>3]=j;h[b+8>>3]=n;h[b+16>>3]=k;h[b+24>>3]=g;h[f>>3]=m;f=b+40|0;c[f>>2]=c[d>>2];c[f+4>>2]=c[d+4>>2];c[f+8>>2]=c[d+8>>2];c[f+12>>2]=c[d+12>>2];c[f+16>>2]=c[d+16>>2];c[f+20>>2]=c[d+20>>2];c[f+24>>2]=c[d+24>>2];c[f+28>>2]=c[d+28>>2];k=m*(v/m);j=m*(o/m);g=k;o=m;e=s?1.0e4:r?100.0:p|q?9.0e3:3.0e3;o=o*o;g=(o-g*g)/(e*2.0);n=j;e=B-g-(n*n-o)/(-e*2.0);if(e<0.0){if(A==0.0)e=0.0;else e=(j*j+(B*(A*2.0)-k*k))/(A*4.0);g=e<0.0?0.0:e;e=0.0;g=B<g?B:g}e=g+e;d=b+80|0;p=c[d>>2]|0;if((u|0)!=(p|0)){a[u>>0]=1;b=u+1|0;a[b>>0]=a[D>>0]|0;a[b+1>>0]=a[D+1>>0]|0;a[b+2>>0]=a[D+2>>0]|0;a[b+3>>0]=a[D+3>>0]|0;a[b+4>>0]=a[D+4>>0]|0;a[b+5>>0]=a[D+5>>0]|0;a[b+6>>0]=a[D+6>>0]|0;h[u+8>>3]=g;h[u+16>>3]=e;h[u+24>>3]=k;h[u+32>>3]=j;h[u+40>>3]=v;h[u+48>>3]=l;a[u+56>>0]=w;D=u+57|0;a[D>>0]=a[C>>0]|0;a[D+1>>0]=a[C+1>>0]|0;a[D+2>>0]=a[C+2>>0]|0;a[D+3>>0]=a[C+3>>0]|0;a[D+4>>0]=a[C+4>>0]|0;a[D+5>>0]=a[C+5>>0]|0;a[D+6>>0]=a[C+6>>0]|0;h[u+64>>3]=m;h[u+72>>3]=M;h[u+80>>3]=B;h[u+88>>3]=A;h[u+96>>3]=N;h[u+104>>3]=E;h[u+112>>3]=I;h[u+120>>3]=K;h[u+128>>3]=O;h[u+136>>3]=F;h[u+144>>3]=J;h[u+152>>3]=L;c[y>>2]=(c[y>>2]|0)+160;i=P;return}t=t-z|0;s=(t|0)/160|0;f=s+1|0;if(f>>>0>26843545)Bl();u=z;b=(p-z|0)/160|0;r=b<<1;r=b>>>0<13421772?(r>>>0<f>>>0?f:r):26843545;if(!r)q=0;else{if(r>>>0>26843545){P=Fa(4)|0;c[P>>2]=8316;$a(P|0,1336,91)}p=r*160|0;p=(p|0)==0?1:p;f=vf(p)|0;a:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break a}ub[f&3]();f=vf(p)|0}while(!(f|0));while(0);q=f}p=q+(s*160|0)|0;a[p>>0]=1;f=p+1|0;a[f>>0]=a[D>>0]|0;a[f+1>>0]=a[D+1>>0]|0;a[f+2>>0]=a[D+2>>0]|0;a[f+3>>0]=a[D+3>>0]|0;a[f+4>>0]=a[D+4>>0]|0;a[f+5>>0]=a[D+5>>0]|0;a[f+6>>0]=a[D+6>>0]|0;h[q+(s*160|0)+8>>3]=g;h[q+(s*160|0)+16>>3]=e;h[q+(s*160|0)+24>>3]=k;h[q+(s*160|0)+32>>3]=j;h[q+(s*160|0)+40>>3]=v;h[q+(s*160|0)+48>>3]=l;a[q+(s*160|0)+56>>0]=w;f=p+57|0;a[f>>0]=a[C>>0]|0;a[f+1>>0]=a[C+1>>0]|0;a[f+2>>0]=a[C+2>>0]|0;a[f+3>>0]=a[C+3>>0]|0;a[f+4>>0]=a[C+4>>0]|0;a[f+5>>0]=a[C+5>>0]|0;a[f+6>>0]=a[C+6>>0]|0;h[q+(s*160|0)+64>>3]=m;h[q+(s*160|0)+72>>3]=M;h[q+(s*160|0)+80>>3]=B;h[q+(s*160|0)+88>>3]=A;h[q+(s*160|0)+96>>3]=N;h[q+(s*160|0)+104>>3]=E;h[q+(s*160|0)+112>>3]=I;h[q+(s*160|0)+120>>3]=K;h[q+(s*160|0)+128>>3]=O;h[q+(s*160|0)+136>>3]=F;h[q+(s*160|0)+144>>3]=J;h[q+(s*160|0)+152>>3]=L;f=p+(((t|0)/-160|0)*160|0)|0;if((t|0)>0)Vm(f|0,u|0,t|0)|0;c[x>>2]=f;c[y>>2]=p+160;c[d>>2]=q+(r*160|0);if(!z){i=P;return}wf(u);i=P;return}function qd(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0.0,ca=0.0,da=0.0,ea=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0,oa=0.0,pa=0.0,qa=0.0,ra=0.0,sa=0.0;aa=i;i=i+160|0;Y=aa+40|0;Z=aa+80|0;r=aa+36|0;_=aa;W=pf(d,14064)|0;X=W+74|0;U=a[X>>0]|0;a[X>>0]=U+255|U;U=W+8|0;V=W+4|0;f=c[V>>2]|0;d=(c[U>>2]|0)-f|0;if((d|0)>0){j=d>>>0<80?d:80;Vm(Z|0,f|0,j|0)|0;c[V>>2]=f+j;d=80-j|0;if(d|0){f=Z+j|0;$=3}}else{d=80;f=Z;$=3}a:do if(($|0)==3){l=W+32|0;m=W+20|0;n=W+44|0;o=W+36|0;p=W+16|0;q=W+28|0;while(1){T=a[X>>0]|0;a[X>>0]=T+255|T;if((c[m>>2]|0)>>>0>(c[n>>2]|0)>>>0)lb[c[o>>2]&31](W,0,0)|0;c[p>>2]=0;c[q>>2]=0;c[m>>2]=0;j=c[W>>2]|0;if(j&20|0){$=7;break}k=c[n>>2]|0;c[U>>2]=k;c[V>>2]=k;k=lb[c[l>>2]&31](W,f,d)|0;if((k+1|0)>>>0<2)break;d=d-k|0;if(!d)break a;else f=f+k|0}if(($|0)==7?j&4|0:0)c[W>>2]=j|32;if((0-d|0)>>>0>=80){mf(W)|0;$=0;i=aa;return $|0}}while(0);f=a[X>>0]|0;a[X>>0]=f+255|f;f=c[V>>2]|0;d=(c[U>>2]|0)-f|0;if((d|0)>0){j=d>>>0<4?d:4;Vm(r|0,f|0,j|0)|0;c[V>>2]=f+j;d=4-j|0;if(d|0){f=r+j|0;$=15}}else{d=4;f=r;$=15}b:do if(($|0)==15){l=W+32|0;m=W+20|0;n=W+44|0;o=W+36|0;p=W+16|0;q=W+28|0;while(1){T=a[X>>0]|0;a[X>>0]=T+255|T;if((c[m>>2]|0)>>>0>(c[n>>2]|0)>>>0)lb[c[o>>2]&31](W,0,0)|0;c[p>>2]=0;c[q>>2]=0;c[m>>2]=0;j=c[W>>2]|0;if(j&20|0){$=19;break}k=c[n>>2]|0;c[U>>2]=k;c[V>>2]=k;k=lb[c[l>>2]&31](W,f,d)|0;if((k+1|0)>>>0<2)break;d=d-k|0;if(!d)break b;else f=f+k|0}if(($|0)==19?j&4|0:0)c[W>>2]=j|32;if((4-d&-4|0)!=4){mf(W)|0;$=0;i=aa;return $|0}}while(0);k=Y+4|0;l=b+4|0;c[Y>>2]=0;c[Y+4>>2]=0;c[Y+8>>2]=0;d=c[l>>2]|0;if(d>>>0>=(c[b+8>>2]|0)>>>0){Cc(b,Y);d=c[Y>>2]|0;f=d;if(d|0){j=c[k>>2]|0;if((j|0)!=(d|0))c[k>>2]=j+(~(((j+-36-f|0)>>>0)/36|0)*36|0);wf(d)}}else{c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[Y+8>>2]=0;c[k>>2]=0;c[Y>>2]=0;c[l>>2]=(c[l>>2]|0)+12}d=c[b>>2]|0;f=(((c[l>>2]|0)-d|0)/12|0)+-1|0;B=c[r>>2]|0;c:do if(B|0){C=_+4|0;D=_+8|0;E=e+24|0;F=e+48|0;G=e+8|0;H=e+32|0;I=e+56|0;J=e+16|0;K=e+40|0;L=e+64|0;M=_+12|0;N=_+16|0;O=_+20|0;P=_+24|0;Q=_+28|0;R=_+32|0;x=Y+4|0;A=Y+8|0;u=Y+12|0;w=Y+16|0;z=Y+20|0;t=Y+24|0;v=Y+28|0;y=Y+32|0;S=d+(f*12|0)+4|0;T=d+(f*12|0)+8|0;m=d+(f*12|0)|0;n=W+32|0;o=W+20|0;p=W+44|0;q=W+36|0;r=W+16|0;s=W+28|0;l=0;d:while(1){f=a[X>>0]|0;a[X>>0]=f+255|f;f=c[V>>2]|0;d=(c[U>>2]|0)-f|0;if((d|0)>0){j=d>>>0<12?d:12;Vm(Z|0,f|0,j|0)|0;c[V>>2]=f+j;d=12-j|0;if(d|0){j=Z+j|0;$=35}}else{d=12;j=Z;$=35}e:do if(($|0)==35){while(1){$=0;k=a[X>>0]|0;a[X>>0]=k+255|k;if((c[o>>2]|0)>>>0>(c[p>>2]|0)>>>0)lb[c[q>>2]&31](W,0,0)|0;c[r>>2]=0;c[s>>2]=0;c[o>>2]=0;f=c[W>>2]|0;if(f&20|0){$=38;break}k=c[p>>2]|0;c[U>>2]=k;c[V>>2]=k;k=lb[c[n>>2]&31](W,j,d)|0;if((k+1|0)>>>0<2)break;d=d-k|0;if(!d)break e;else{j=j+k|0;$=35}}if(($|0)==38?($=0,f&4|0):0)c[W>>2]=f|32;if((0-d|0)>>>0>=12){$=43;break d}}while(0);f=a[X>>0]|0;a[X>>0]=f+255|f;f=c[V>>2]|0;d=(c[U>>2]|0)-f|0;if((d|0)>0){j=d>>>0<36?d:36;Vm(_|0,f|0,j|0)|0;c[V>>2]=f+j;d=36-j|0;if(d|0){j=_+j|0;$=46}}else{d=36;j=_;$=46}f:do if(($|0)==46){while(1){$=0;k=a[X>>0]|0;a[X>>0]=k+255|k;if((c[o>>2]|0)>>>0>(c[p>>2]|0)>>>0)lb[c[q>>2]&31](W,0,0)|0;c[r>>2]=0;c[s>>2]=0;c[o>>2]=0;f=c[W>>2]|0;if(f&20|0){$=49;break}k=c[p>>2]|0;c[U>>2]=k;c[V>>2]=k;k=lb[c[n>>2]&31](W,j,d)|0;if((k+1|0)>>>0<2)break;d=d-k|0;if(!d)break f;else{j=j+k|0;$=46}}if(($|0)==49?($=0,f&4|0):0)c[W>>2]=f|32;if((0-d|0)>>>0>=36){$=54;break d}}while(0);sa=+g[_>>2];ra=+g[C>>2];qa=+g[D>>2];ma=+h[e>>3];la=+h[E>>3];ka=+h[F>>3];ja=+h[G>>3];ia=+h[H>>3];ha=+h[I>>3];ga=+h[J>>3];ea=+h[K>>3];ca=+h[L>>3];pa=+g[M>>2];oa=+g[N>>2];na=+g[O>>2];fa=+g[P>>2];da=+g[Q>>2];ba=+g[R>>2];c[Y>>2]=~~((sa*ma+ra*la+qa*ka)*1.0e3)>>>0;c[x>>2]=~~((sa*ja+ra*ia+qa*ha)*1.0e3)>>>0;c[A>>2]=~~((sa*ga+ra*ea+qa*ca)*1.0e3)>>>0;c[u>>2]=~~((ma*pa+la*oa+ka*na)*1.0e3)>>>0;c[w>>2]=~~((ja*pa+ia*oa+ha*na)*1.0e3)>>>0;c[z>>2]=~~((ga*pa+ea*oa+ca*na)*1.0e3)>>>0;c[t>>2]=~~((ma*fa+la*da+ka*ba)*1.0e3)>>>0;c[v>>2]=~~((ja*fa+ia*da+ha*ba)*1.0e3)>>>0;c[y>>2]=~~((ga*fa+ea*da+ca*ba)*1.0e3)>>>0;d=c[S>>2]|0;if(d>>>0<(c[T>>2]|0)>>>0){f=Y;j=d+36|0;do{c[d>>2]=c[f>>2];d=d+4|0;f=f+4|0}while((d|0)<(j|0));c[S>>2]=(c[S>>2]|0)+36}else Dc(m,Y);f=a[X>>0]|0;a[X>>0]=f+255|f;f=c[V>>2]|0;d=(c[U>>2]|0)-f|0;if((d|0)>0){j=(d|0)==1?1:2;Vm(Z|0,f|0,j|0)|0;c[V>>2]=f+j;d=2-j|0;if(d|0){j=Z+j|0;$=60}}else{d=2;j=Z;$=60}g:do if(($|0)==60){while(1){$=0;k=a[X>>0]|0;a[X>>0]=k+255|k;if((c[o>>2]|0)>>>0>(c[p>>2]|0)>>>0)lb[c[q>>2]&31](W,0,0)|0;c[r>>2]=0;c[s>>2]=0;c[o>>2]=0;f=c[W>>2]|0;if(f&20|0){$=63;break}k=c[p>>2]|0;c[U>>2]=k;c[V>>2]=k;k=lb[c[n>>2]&31](W,j,d)|0;if((k+1|0)>>>0<2)break;d=d-k|0;if(!d)break g;else{j=j+k|0;$=60}}if(($|0)==63?($=0,f&4|0):0)c[W>>2]=f|32;if((2-d&-2|0)!=2){$=68;break d}}while(0);l=l+1|0;if(l>>>0>=B>>>0)break c}if(($|0)==43){mf(W)|0;$=0;i=aa;return $|0}else if(($|0)==54)mf(W)|0;else if(($|0)==68)mf(W)|0;$=0;i=aa;return $|0}while(0);mf(W)|0;$=b;i=aa;return $|0}function rd(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;i=i+16|0;e=d;c[e>>2]=b;Qe(1928,a,e)|0;if((c[487]|0)>>>0>(c[489]|0)>>>0?(lb[c[1964>>2]&31](1928,0,0)|0,(c[487]|0)==0):0){i=d;return}a=c[483]|0;b=c[484]|0;if(a>>>0<b>>>0)lb[c[1968>>2]&31](1928,a-b|0,1)|0;c[486]=0;c[489]=0;c[487]=0;c[484]=0;c[483]=0;i=d;return}function sd(a,b){a=a|0;b=b|0;var d=0,e=0;e=i;i=i+16|0;d=e;if((c[5355]|0)<1){i=e;return}c[d>>2]=b;Qe(1928,a,d)|0;if(!((c[487]|0)>>>0>(c[489]|0)>>>0?(lb[c[1964>>2]&31](1928,0,0)|0,!(c[487]|0)):0)){a=c[483]|0;d=c[484]|0;if(a>>>0<d>>>0)lb[c[1968>>2]&31](1928,a-d|0,1)|0;c[486]=0;c[489]=0;c[487]=0;c[484]=0;c[483]=0}i=e;return}function td(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+80|0;o=r+32|0;q=r+24|0;n=r;d=r+40|0;m=r+64|0;c[m>>2]=b;b=c[a>>2]|0;if((b|0)==-1){i=r;return}c[d>>2]=b;c[d+4>>2]=m;c[d+8>>2]=4;c[d+12>>2]=0;c[d+16>>2]=0;c[d+20>>2]=0;c[n>>2]=11;c[n+4>>2]=d;e=wa(102,n|0)|0;a:do if(e>>>0<=4294963200){if((e|0)>=1){g=n+4|0;h=n+8|0;j=n+12|0;k=n+16|0;l=n+20|0;f=4;d=m;while(1){b=f;f=f-e|0;if((f|0)<=0){p=20;break}d=d+b|0;c[n>>2]=c[a>>2];c[g>>2]=d;c[h>>2]=f;c[j>>2]=0;c[k>>2]=0;c[l>>2]=0;c[o>>2]=11;c[o+4>>2]=n;e=wa(102,o|0)|0;if(e>>>0>4294963200)break;if((e|0)<1)break a}if((p|0)==20){i=r;return}if(!(c[5356]|0))b=21468;else b=c[(en()|0)+64>>2]|0;c[b>>2]=0-e}}else{if(!(c[5356]|0))b=21468;else b=c[(en()|0)+64>>2]|0;c[b>>2]=0-e}while(0);b=c[a>>2]|0;if((b|0)==-1){i=r;return}c[q>>2]=b;b=bb(6,q|0)|0;b=(b|0)==-4?-115:b;if(b>>>0>4294963200){if(!(c[5356]|0))d=21468;else d=c[(en()|0)+64>>2]|0;c[d>>2]=0-b}c[a>>2]=-1;i=r;return}function ud(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+64|0;o=r+32|0;q=r+24|0;n=r;e=r+40|0;f=c[a>>2]|0;if(!((d|0)>0&(f|0)!=-1)){i=r;return}c[e>>2]=f;c[e+4>>2]=b;c[e+8>>2]=d;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;c[n>>2]=11;c[n+4>>2]=e;g=wa(102,n|0)|0;a:do if(g>>>0<=4294963200){if((g|0)>=1){h=n+4|0;j=n+8|0;k=n+12|0;l=n+16|0;m=n+20|0;f=b;while(1){e=d;d=d-g|0;if((d|0)<=0){p=20;break}f=f+e|0;c[n>>2]=c[a>>2];c[h>>2]=f;c[j>>2]=d;c[k>>2]=0;c[l>>2]=0;c[m>>2]=0;c[o>>2]=11;c[o+4>>2]=n;g=wa(102,o|0)|0;if(g>>>0>4294963200)break;if((g|0)<1)break a}if((p|0)==20){i=r;return}if(!(c[5356]|0))e=21468;else e=c[(en()|0)+64>>2]|0;c[e>>2]=0-g}}else{if(!(c[5356]|0))e=21468;else e=c[(en()|0)+64>>2]|0;c[e>>2]=0-g}while(0);e=c[a>>2]|0;if((e|0)==-1){i=r;return}c[q>>2]=e;e=bb(6,q|0)|0;e=(e|0)==-4?-115:e;if(e>>>0>4294963200){if(!(c[5356]|0))f=21468;else f=c[(en()|0)+64>>2]|0;c[f>>2]=0-e}c[a>>2]=-1;i=r;return}function vd(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;c[b>>2]=1624;e=b+8|0;d=c[e>>2]|0;if(d|0)do{m=d;d=c[d+16>>2]|0;wf(m);c[e>>2]=d}while((d|0)!=0);c[b+4>>2]=0;l=b+16|0;m=b+20|0;h=c[m>>2]|0;i=c[l>>2]|0;f=i;j=h;if((h|0)==(i|0)){e=f;g=j;d=j}else{k=0;e=f;d=j;g=j;do{e=c[e+(k<<2)>>2]|0;if(e){wf(e);h=c[m>>2]|0;f=c[l>>2]|0;g=h;i=f;d=g}k=k+1|0;e=i}while(k>>>0<h-i>>2>>>0);h=i}if((g|0)!=(e|0)){d=g+(~((g+-4-h|0)>>>2)<<2)|0;c[m>>2]=d}a[b+12>>0]=0;a[b+29>>0]=0;if(!f)return;if((d|0)!=(f|0))c[m>>2]=d+(~((d+-4-f|0)>>>2)<<2);wf(f);return}function wd(a){a=a|0;vd(a);wf(a);return}function xd(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0;e=b+8|0;d=c[e>>2]|0;if(d|0)do{j=d;d=c[d+16>>2]|0;wf(j);c[e>>2]=d}while((d|0)!=0);c[b+4>>2]=0;i=b+16|0;j=b+20|0;e=c[j>>2]|0;g=c[i>>2]|0;f=g;d=e;if((e|0)!=(g|0)){h=0;do{f=c[f+(h<<2)>>2]|0;if(f){wf(f);d=c[j>>2]|0;g=c[i>>2]|0;e=d}h=h+1|0;f=g}while(h>>>0<e-g>>2>>>0);e=g}if((d|0)==(f|0)){j=b+12|0;a[j>>0]=0;b=b+29|0;a[b>>0]=0;return}c[j>>2]=d+(~((d+-4-e|0)>>>2)<<2);j=b+12|0;a[j>>0]=0;b=b+29|0;a[b>>0]=0;return}function yd(a){a=a|0;var b=0,d=0;b=c[a+8>>2]|0;c[a+4>>2]=b;if(!b)return;do{a=c[b+8>>2]|0;if(a|0){d=a+16|0;c[d>>2]=c[a>>2];c[d+4>>2]=c[a+4>>2];c[d+8>>2]=c[a+8>>2];c[d+12>>2]=c[a+12>>2];c[a+76>>2]=1;c[a+92>>2]=-1}a=c[b+12>>2]|0;if(a|0){d=a+16|0;c[d>>2]=c[a>>2];c[d+4>>2]=c[a+4>>2];c[d+8>>2]=c[a+8>>2];c[d+12>>2]=c[a+12>>2];c[a+76>>2]=2;c[a+92>>2]=-1}b=c[b+16>>2]|0}while((b|0)!=0);return}function zd(a){a=a|0;Gd(a);vd(a+92|0);return}function Ad(a){a=a|0;Gd(a);vd(a+92|0);wf(a);return}function Bd(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;p=i;i=i+16|0;o=p;n=a+(c[(c[a>>2]|0)+-12>>2]|0)|0;b=c[n+8>>2]|0;c[n+4>>2]=b;if(b|0)do{d=c[b+8>>2]|0;if(d|0){n=d+16|0;c[n>>2]=c[d>>2];c[n+4>>2]=c[d+4>>2];c[n+8>>2]=c[d+8>>2];c[n+12>>2]=c[d+12>>2];c[d+76>>2]=1;c[d+92>>2]=-1}d=c[b+12>>2]|0;if(d|0){n=d+16|0;c[n>>2]=c[d>>2];c[n+4>>2]=c[d+4>>2];c[n+8>>2]=c[d+8>>2];c[n+12>>2]=c[d+12>>2];c[d+76>>2]=2;c[d+92>>2]=-1}b=c[b+16>>2]|0}while((b|0)!=0);k=a+56|0;l=a+60|0;Hd(c[l>>2]|0);m=a+64|0;c[m>>2]=0;c[k>>2]=l;c[l>>2]=0;c[a+68>>2]=0;c[a+72>>2]=0;b=c[a+(c[(c[a>>2]|0)+-12>>2]|0)+8>>2]|0;if(!b){i=p;return}n=l;j=a+60|0;d=0;while(1){h=b;g=c[h>>2]|0;h=c[h+4>>2]|0;do if(d){while(1){e=d+16|0;a=c[e>>2]|0;e=c[e+4>>2]|0;if((e|0)<(h|0)|(e|0)==(h|0)&a>>>0<g>>>0){a=c[d>>2]|0;if(!a){a=12;break}else d=a}else{if(!((e|0)>(h|0)|(e|0)==(h|0)&a>>>0>g>>>0)){a=17;break}e=d+4|0;a=c[e>>2]|0;if(!a){a=16;break}else d=a}}if((a|0)==12){c[o>>2]=d;f=d;e=d;break}else if((a|0)==16){c[o>>2]=d;f=d;break}else if((a|0)==17){c[o>>2]=d;f=d;e=o;break}}else{c[o>>2]=l;f=n;e=l}while(0);if(!(c[e>>2]|0)){d=vf(24)|0;if(!d)do{d=c[5972]|0;c[5972]=d+0;ub[d&3]();d=vf(24)|0}while(!(d|0));a=d+16|0;c[a>>2]=g;c[a+4>>2]=h;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=f;c[e>>2]=d;a=c[c[k>>2]>>2]|0;if(a){c[k>>2]=a;d=c[e>>2]|0}Jc(c[j>>2]|0,d);c[m>>2]=(c[m>>2]|0)+1}b=c[b+16>>2]|0;if(!b)break;d=c[l>>2]|0}i=p;return}function Cd(b){b=b|0;var d=0,e=0,f=0,g=0,j=0,k=0,l=0.0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0.0,D=0.0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,T=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0.0,ea=0.0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0.0;ra=i;i=i+32|0;ma=ra+20|0;Z=ra;_=ra+16|0;ob[c[(c[b>>2]|0)+8>>2]&127](b);if(!(c[b+(c[(c[b>>2]|0)+-12>>2]|0)+4>>2]|0)){b=0;i=ra;return b|0}V=b+56|0;f=c[V>>2]|0;j=f+16|0;g=c[j>>2]|0;j=c[j+4>>2]|0;d=c[f+4>>2]|0;if(!d){e=f;while(1){d=c[e+8>>2]|0;if((c[d>>2]|0)==(e|0))break;else e=d}}else while(1){e=c[d>>2]|0;if(!e)break;else d=e}c[V>>2]=d;Q=b+64|0;c[Q>>2]=(c[Q>>2]|0)+-1;R=b+60|0;Id(c[R>>2]|0,f);wf(f);B=b+28|0;H=b+32|0;I=b+72|0;J=b+68|0;qa=b+20|0;K=b+24|0;pa=b+16|0;la=b+90|0;L=b+40|0;M=b+44|0;N=b+48|0;O=b+60|0;P=O;A=g;z=j;a:while(1){e=c[(c[b>>2]|0)+-12>>2]|0;d=c[b+e+4>>2]|0;b:do if(d|0)do{y=d;if(!((c[y>>2]|0)==(A|0)?(c[y+4>>2]|0)==(z|0):0))break b;x=c[d+8>>2]|0;y=c[d+12>>2]|0;c[b+e+4>>2]=c[d+16>>2];w=(x|0)!=0;do if(!w){ee(b,y);fe(b,y);if(ge(b,y)|0)v=Qd(b,y,y)|0;else v=0}else{ee(b,x);if(!y){fe(b,x);if(ge(b,x)|0)k=Qd(b,x,x)|0;else k=0;j=x+40|0;g=c[j>>2]|0;j=c[j+4>>2]|0;d=c[O>>2]|0;do if(d){while(1){e=d+16|0;f=c[e>>2]|0;e=c[e+4>>2]|0;if((e|0)<(j|0)|(e|0)==(j|0)&f>>>0<g>>>0){e=c[d>>2]|0;if(!e){ka=17;break}else d=e}else{if(!((e|0)>(j|0)|(e|0)==(j|0)&f>>>0>g>>>0)){ka=22;break}f=d+4|0;e=c[f>>2]|0;if(!e){ka=21;break}else d=e}}if((ka|0)==17){ka=0;c[ma>>2]=d;e=d;f=d;break}else if((ka|0)==21){ka=0;c[ma>>2]=d;e=d;break}else if((ka|0)==22){ka=0;c[ma>>2]=d;e=d;f=ma;break}}else{c[ma>>2]=O;e=P;f=O}while(0);if(!(c[f>>2]|0)){d=vf(24)|0;c:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break c}ub[d&3]();d=vf(24)|0}while(!(d|0));while(0);v=d+16|0;c[v>>2]=g;c[v+4>>2]=j;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=e;c[f>>2]=d;e=c[c[V>>2]>>2]|0;if(e){c[V>>2]=e;d=c[f>>2]|0}Jc(c[R>>2]|0,d);c[Q>>2]=(c[Q>>2]|0)+1}v=k;break}if(!(c[J>>2]|0)){c[y+112>>2]=0;c[y+108>>2]=0;c[J>>2]=y}else{p=y+40|0;q=y+32|0;r=y+64|0;s=y+8|0;e=x+108|0;d=c[e>>2]|0;d:do if(!d){f=x;d=0}else{u=y+16|0;t=c[u>>2]|0;u=c[u+4>>2]|0;f=x;while(1){j=d+16|0;g=c[j>>2]|0;j=c[j+4>>2]|0;do if((t|0)==(g|0)&(u|0)==(j|0)){j=p;g=c[j>>2]|0;j=c[j+4>>2]|0;m=d+40|0;k=c[m>>2]|0;m=c[m+4>>2]|0;if((j|0)>(m|0)|(j|0)==(m|0)&g>>>0>k>>>0){m=q;o=c[m>>2]|0;m=c[m+4>>2]|0;v=d;n=c[v>>2]|0;v=c[v+4>>2]|0;D=+h[d+64>>3];k=d+8|0;k=Km(g|0,j|0,c[k>>2]|0,c[k+4>>2]|0)|0;D=D*(+(k>>>0)+4294967296.0*+(E|0));D=D+(D<0.0?-.5:.5);v=Om(~~D>>>0|0,(+G(D)>=1.0?(D>0.0?~~+U(+F(D/4294967296.0),4294967295.0)>>>0:~~+S((D-+(~~D>>>0))/4294967296.0)>>>0):0)|0,n|0,v|0)|0;n=E;if((m|0)<(n|0)|(m|0)==(n|0)&o>>>0<v>>>0)break d;else break}o=d+32|0;n=c[o>>2]|0;o=c[o+4>>2]|0;if((g|0)==(k|0)&(j|0)==(m|0)){j=q;g=c[j+4>>2]|0;j=c[j>>2]|0}else{j=y;g=c[j>>2]|0;j=c[j+4>>2]|0;D=+h[r>>3];v=s;v=Km(k|0,m|0,c[v>>2]|0,c[v+4>>2]|0)|0;D=D*(+(v>>>0)+4294967296.0*+(E|0));D=D+(D<0.0?-.5:.5);j=Om(~~D>>>0|0,(+G(D)>=1.0?(D>0.0?~~+U(+F(D/4294967296.0),4294967295.0)>>>0:~~+S((D-+(~~D>>>0))/4294967296.0)>>>0):0)|0,g|0,j|0)|0;g=E}if((o|0)>(g|0)|(o|0)==(g|0)&n>>>0>j>>>0)break d}else if((u|0)<(j|0)|(u|0)==(j|0)&t>>>0<g>>>0)break d;while(0);e=d+108|0;f=c[e>>2]|0;if(!f){f=d;d=0;break}else{v=d;d=f;f=v}}}while(0);c[y+108>>2]=d;d=c[e>>2]|0;if(d|0)c[d+112>>2]=y;c[y+112>>2]=f;c[e>>2]=y}fe(b,x);c[y+84>>2]=c[x+84>>2];c[y+88>>2]=c[x+88>>2];if(ge(b,x)|0)k=Zd(b,x,y,x)|0;else k=0;j=x+40|0;g=c[j>>2]|0;j=c[j+4>>2]|0;d=c[O>>2]|0;do if(d){while(1){f=d+16|0;e=c[f>>2]|0;f=c[f+4>>2]|0;if((f|0)<(j|0)|(f|0)==(j|0)&e>>>0<g>>>0){e=c[d>>2]|0;if(!e){ka=53;break}else d=e}else{if(!((f|0)>(j|0)|(f|0)==(j|0)&e>>>0>g>>>0)){ka=58;break}f=d+4|0;e=c[f>>2]|0;if(!e){ka=57;break}else d=e}}if((ka|0)==53){ka=0;c[ma>>2]=d;e=d;f=d;break}else if((ka|0)==57){ka=0;c[ma>>2]=d;e=d;break}else if((ka|0)==58){ka=0;c[ma>>2]=d;e=d;f=ma;break}}else{c[ma>>2]=O;e=P;f=O}while(0);if(!(c[f>>2]|0)){d=vf(24)|0;e:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break e}ub[d&3]();d=vf(24)|0}while(!(d|0));while(0);v=d+16|0;c[v>>2]=g;c[v+4>>2]=j;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=e;c[f>>2]=d;e=c[c[V>>2]>>2]|0;if(e){c[V>>2]=e;d=c[f>>2]|0}Jc(c[R>>2]|0,d);c[Q>>2]=(c[Q>>2]|0)+1}v=k}while(0);if(y|0){k=y+56|0;u=k;do if((c[u>>2]|0)==0&(c[u+4>>2]|0)==0){d=c[I>>2]|0;if(!d){c[I>>2]=y;c[y+120>>2]=0;c[y+116>>2]=0;break}else{c[y+116>>2]=d;c[y+120>>2]=0;c[d+120>>2]=y;c[I>>2]=y;break}}else{j=y+40|0;g=c[j>>2]|0;j=c[j+4>>2]|0;d=c[O>>2]|0;do if(d){while(1){f=d+16|0;e=c[f>>2]|0;f=c[f+4>>2]|0;if((f|0)<(j|0)|(f|0)==(j|0)&e>>>0<g>>>0){e=c[d>>2]|0;if(!e){ka=76;break}else d=e}else{if(!((f|0)>(j|0)|(f|0)==(j|0)&e>>>0>g>>>0)){ka=81;break}f=d+4|0;e=c[f>>2]|0;if(!e){ka=80;break}else d=e}}if((ka|0)==76){ka=0;c[ma>>2]=d;e=d;f=d;break}else if((ka|0)==80){ka=0;c[ma>>2]=d;e=d;break}else if((ka|0)==81){ka=0;c[ma>>2]=d;e=d;f=ma;break}}else{c[ma>>2]=O;e=P;f=O}while(0);if(!(c[f>>2]|0)){d=vf(24)|0;f:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break f}ub[d&3]();d=vf(24)|0}while(!(d|0));while(0);u=d+16|0;c[u>>2]=g;c[u+4>>2]=j;c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=e;c[f>>2]=d;e=c[c[V>>2]>>2]|0;if(e){c[V>>2]=e;d=c[f>>2]|0}Jc(c[R>>2]|0,d);c[Q>>2]=(c[Q>>2]|0)+1}}while(0);if(w){if(((v|0?(w=k,(c[w>>2]|0)==0&(c[w+4>>2]|0)==0):0)?($=c[H>>2]|0,aa=c[B>>2]|0,($|0)!=(aa|0)):0)?c[y+80>>2]|0:0){u=y+32|0;t=0;d=$;e=aa;do{f=c[e+(t<<2)>>2]|0;s=c[f>>2]|0;f=f+8|0;j=s+8|0;g=c[j>>2]|0;j=c[j+4>>2]|0;m=y;k=c[m>>2]|0;m=c[m+4>>2]|0;o=u;n=c[o>>2]|0;o=c[o+4>>2]|0;p=(j|0)<(o|0)|(j|0)==(o|0)&g>>>0<n>>>0;do if(((j|0)>(m|0)|(j|0)==(m|0)&g>>>0>k>>>0)^p){r=f;q=c[r>>2]|0;r=c[r+4>>2]|0;w=(r|0)>(m|0)|(r|0)==(m|0)&q>>>0>k>>>0;if(!((p^((o|0)<(r|0)|(o|0)==(r|0)&n>>>0<q>>>0))&((w^((r|0)<(o|0)|(r|0)==(o|0)&q>>>0<n>>>0))&(((m|0)>(j|0)|(m|0)==(j|0)&k>>>0>g>>>0)^w)))){ka=101;break}if((g|0)==(k|0)&(j|0)==(m|0)&((q|0)==(n|0)&(r|0)==(o|0))){ka=101;break}if((g|0)==(n|0)&(j|0)==(o|0)&((q|0)==(k|0)&(r|0)==(m|0)))ka=101}else ka=101;while(0);if((ka|0)==101){ka=0;c[Z>>2]=c[f>>2];c[Z+4>>2]=c[f+4>>2];c[Z+8>>2]=c[f+8>>2];c[Z+12>>2]=c[f+12>>2];d=vf(24)|0;g:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break g}ub[d&3]();d=vf(24)|0}while(!(d|0));while(0);e=d+8|0;c[ma>>2]=d;c[d>>2]=s;c[d+4>>2]=v;c[e>>2]=c[Z>>2];c[e+4>>2]=c[Z+4>>2];c[e+8>>2]=c[Z+8>>2];c[e+12>>2]=c[Z+12>>2];e=c[qa>>2]|0;if((e|0)==(c[K>>2]|0))Rd(pa,ma);else{c[e>>2]=d;c[qa>>2]=(c[qa>>2]|0)+4}e=c[B>>2]|0;d=c[H>>2]|0}t=t+1|0}while(t>>>0<d-e>>2>>>0)}do if((((((c[x+92>>2]|0)>-1?(ba=c[x+112>>2]|0,ba|0):0)?(u=ba+16|0,w=x,(c[u>>2]|0)==(c[w>>2]|0)?(c[u+4>>2]|0)==(c[w+4>>2]|0):0):0)?(c[ba+92>>2]|0)>-1:0)?Sd(ba,x,(a[b+(c[(c[b>>2]|0)+-12>>2]|0)+12>>0]|0)!=0)|0:0)?c[x+80>>2]|0:0){if(!(c[ba+80>>2]|0))break;e=Qd(b,ba,x)|0;d=x+32|0;c[Z>>2]=c[d>>2];c[Z+4>>2]=c[d+4>>2];c[Z+8>>2]=c[d+8>>2];c[Z+12>>2]=c[d+12>>2];d=vf(24)|0;h:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break h}ub[d&3]();d=vf(24)|0}while(!(d|0));while(0);w=d+8|0;c[ma>>2]=d;c[d>>2]=v;c[d+4>>2]=e;c[w>>2]=c[Z>>2];c[w+4>>2]=c[Z+4>>2];c[w+8>>2]=c[Z+8>>2];c[w+12>>2]=c[Z+12>>2];e=c[qa>>2]|0;if((e|0)==(c[K>>2]|0))Rd(pa,ma);else{c[e>>2]=d;c[qa>>2]=(c[qa>>2]|0)+4}}while(0);g=x+108|0;d=c[g>>2]|0;if((d|0)!=(y|0)){do if((((c[y+92>>2]|0)>-1?(ca=c[y+112>>2]|0,(c[ca+92>>2]|0)>-1):0)?Sd(ca,y,(a[b+(c[(c[b>>2]|0)+-12>>2]|0)+12>>0]|0)!=0)|0:0)?(c[y+80>>2]|0)!=0:0){if(!(c[ca+80>>2]|0))break;f=Qd(b,ca,y)|0;d=y+32|0;c[Z>>2]=c[d>>2];c[Z+4>>2]=c[d+4>>2];c[Z+8>>2]=c[d+8>>2];c[Z+12>>2]=c[d+12>>2];d=vf(24)|0;i:do if(!d)while(1){d=c[5972]|0;c[5972]=d+0;if(!d){e=0;break i}ub[d&3]();d=vf(24)|0;if(d|0){e=d;break}}else e=d;while(0);d=e+8|0;c[ma>>2]=e;c[e>>2]=v;c[e+4>>2]=f;c[d>>2]=c[Z>>2];c[d+4>>2]=c[Z+4>>2];c[d+8>>2]=c[Z+8>>2];c[d+12>>2]=c[Z+12>>2];d=c[qa>>2]|0;if((d|0)==(c[K>>2]|0))Rd(pa,ma);else{c[d>>2]=e;c[qa>>2]=(c[qa>>2]|0)+4}d=c[g>>2]|0}while(0);if(!((d|0)==0|(d|0)==(y|0))){e=x+16|0;do{Wd(b,y,d,e,0);d=c[d+108>>2]|0}while((d|0)!=(y|0))}}}}e=c[(c[b>>2]|0)+-12>>2]|0;d=c[b+e+4>>2]|0}while((d|0)!=0);while(0);d=c[H>>2]|0;e=c[B>>2]|0;if((d|0)!=(e|0)){g=0;do{f=c[e+(g<<2)>>2]|0;if(f){wf(f);e=c[B>>2]|0;d=c[H>>2]|0}g=g+1|0;f=d-e>>2}while(g>>>0<f>>>0);if(!((d|0)==(e|0)|(f|0)==0))c[H>>2]=d+(~((d+-4-e|0)>>>2)<<2)}d=c[I>>2]|0;if(d|0)do{e=d+120|0;f=c[e>>2]|0;g=d+116|0;j=c[g>>2]|0;if(!f)c[I>>2]=j;else c[f+116>>2]=j;if(j|0)c[j+120>>2]=f;c[g>>2]=0;c[e>>2]=0;Jd(b,d,0);d=c[I>>2]|0}while((d|0)!=0);f=c[Q>>2]|0;if(!f){ka=154;break}g=c[V>>2]|0;d=g+16|0;t=A;A=c[d>>2]|0;u=z;z=c[d+4>>2]|0;d=c[g+4>>2]|0;if(!d){e=g;while(1){d=c[e+8>>2]|0;if((c[d>>2]|0)==(e|0))break;else e=d}}else while(1){e=c[d>>2]|0;if(!e)break;else d=e}c[V>>2]=d;c[Q>>2]=f+-1;Id(c[R>>2]|0,g);wf(g);d=c[J>>2]|0;j:do if(d|0){c[I>>2]=d;e=d;do{c[e+120>>2]=c[e+112>>2];f=e;e=c[e+108>>2]|0;c[f+116>>2]=e;y=f+40|0;if((c[y>>2]|0)==(A|0)?(c[y+4>>2]|0)==(z|0):0){j=f+32|0;g=c[j>>2]|0;j=c[j+4>>2]|0}else{g=f;j=c[g>>2]|0;g=c[g+4>>2]|0;D=+h[f+64>>3];y=f+8|0;y=Km(A|0,z|0,c[y>>2]|0,c[y+4>>2]|0)|0;D=D*(+(y>>>0)+4294967296.0*+(E|0));D=D+(D<0.0?-.5:.5);g=Om(~~D>>>0|0,(+G(D)>=1.0?(D>0.0?~~+U(+F(D/4294967296.0),4294967295.0)>>>0:~~+S((D-+(~~D>>>0))/4294967296.0)>>>0):0)|0,j|0,g|0)|0;j=E}y=f+16|0;c[y>>2]=g;c[y+4>>2]=j}while((e|0)!=0);while(1){f=c[d+116>>2]|0;if(!f)e=0;else{e=0;do{n=d+16|0;m=c[n>>2]|0;n=c[n+4>>2]|0;p=f+16|0;o=c[p>>2]|0;p=c[p+4>>2]|0;if((n|0)>(p|0)|(n|0)==(p|0)&m>>>0>o>>>0){do if(!(Sd(d,f,(a[b+(c[(c[b>>2]|0)+-12>>2]|0)+12>>0]|0)!=0)|0)?(da=+h[d+64>>3],ea=+h[f+64>>3],!(da==ea)):0){y=d+48|0;do if(!((c[y>>2]|0)==0&(c[y+4>>2]|0)==0)){y=f+48|0;if((c[y>>2]|0)==0&(c[y+4>>2]|0)==0){g=f;j=c[g>>2]|0;g=c[g+4>>2]|0;y=d+56|0;k=d+8|0;e=c[k>>2]|0;k=c[k+4>>2]|0;if((c[y>>2]|0)==0&(c[y+4>>2]|0)==0)break;y=d;D=(+(j>>>0)+4294967296.0*+(g|0))/da+(+(e>>>0)+4294967296.0*+(k|0)-(+((c[y>>2]|0)>>>0)+4294967296.0*+(c[y+4>>2]|0))/da);D=D+(D<0.0?-.5:.5);e=~~D>>>0;k=+G(D)>=1.0?(D>0.0?~~+U(+F(D/4294967296.0),4294967295.0)>>>0:~~+S((D-+(~~D>>>0))/4294967296.0)>>>0):0;break}e=d;k=d+8|0;l=+((c[e>>2]|0)>>>0)+4294967296.0*+(c[e+4>>2]|0)-da*(+((c[k>>2]|0)>>>0)+4294967296.0*+(c[k+4>>2]|0));k=f;e=f+8|0;C=+((c[k>>2]|0)>>>0)+4294967296.0*+(c[k+4>>2]|0)-ea*(+((c[e>>2]|0)>>>0)+4294967296.0*+(c[e+4>>2]|0));D=(C-l)/(da-ea);sa=D+(D<0.0?-.5:.5);e=~~sa>>>0;k=+G(sa)>=1.0?(sa>0.0?~~+U(+F(sa/4294967296.0),4294967295.0)>>>0:~~+S((sa-+(~~sa>>>0))/4294967296.0)>>>0):0;if(+G(+da)<+G(+ea)){sa=l+da*D;sa=sa+(sa<0.0?-.5:.5);j=~~sa>>>0;g=+G(sa)>=1.0?(sa>0.0?~~+U(+F(sa/4294967296.0),4294967295.0)>>>0:~~+S((sa-+(~~sa>>>0))/4294967296.0)>>>0):0;break}else{sa=C+ea*D;sa=sa+(sa<0.0?-.5:.5);j=~~sa>>>0;g=+G(sa)>=1.0?(sa>0.0?~~+U(+F(sa/4294967296.0),4294967295.0)>>>0:~~+S((sa-+(~~sa>>>0))/4294967296.0)>>>0):0;break}}else{g=d;j=c[g>>2]|0;g=c[g+4>>2]|0;y=f+56|0;k=f+8|0;e=c[k>>2]|0;k=c[k+4>>2]|0;if((c[y>>2]|0)==0&(c[y+4>>2]|0)==0)break;y=f;sa=(+(j>>>0)+4294967296.0*+(g|0))/ea+(+(e>>>0)+4294967296.0*+(k|0)-(+((c[y>>2]|0)>>>0)+4294967296.0*+(c[y+4>>2]|0))/ea);sa=sa+(sa<0.0?-.5:.5);e=~~sa>>>0;k=+G(sa)>=1.0?(sa>0.0?~~+U(+F(sa/4294967296.0),4294967295.0)>>>0:~~+S((sa-+(~~sa>>>0))/4294967296.0)>>>0):0}while(0);p=d+40|0;o=c[p>>2]|0;p=c[p+4>>2]|0;n=f+40|0;m=c[n>>2]|0;n=c[n+4>>2]|0;if(!((k|0)<(p|0)|(k|0)==(p|0)&e>>>0<o>>>0|((k|0)<(n|0)|(k|0)==(n|0)&e>>>0<m>>>0)))break;g=(p|0)>(n|0)|(p|0)==(n|0)&o>>>0>m>>>0;e=g?o:m;g=g?p:n;if(+G(+da)<+G(+ea))if((o|0)==(e|0)&(p|0)==(g|0)){y=d+32|0;k=g;j=c[y>>2]|0;g=c[y+4>>2]|0;break}else{j=d;k=c[j>>2]|0;j=c[j+4>>2]|0;y=d+8|0;y=Km(e|0,g|0,c[y>>2]|0,c[y+4>>2]|0)|0;sa=da*(+(y>>>0)+4294967296.0*+(E|0));sa=sa+(sa<0.0?-.5:.5);j=Om(~~sa>>>0|0,(+G(sa)>=1.0?(sa>0.0?~~+U(+F(sa/4294967296.0),4294967295.0)>>>0:~~+S((sa-+(~~sa>>>0))/4294967296.0)>>>0):0)|0,k|0,j|0)|0;k=g;g=E;break}else if((m|0)==(e|0)&(n|0)==(g|0)){y=f+32|0;k=g;j=c[y>>2]|0;g=c[y+4>>2]|0;break}else{j=f;k=c[j>>2]|0;j=c[j+4>>2]|0;y=f+8|0;y=Km(e|0,g|0,c[y>>2]|0,c[y+4>>2]|0)|0;sa=ea*(+(y>>>0)+4294967296.0*+(E|0));sa=sa+(sa<0.0?-.5:.5);j=Om(~~sa>>>0|0,(+G(sa)>=1.0?(sa>0.0?~~+U(+F(sa/4294967296.0),4294967295.0)>>>0:~~+S((sa-+(~~sa>>>0))/4294967296.0)>>>0):0)|0,k|0,j|0)|0;k=g;g=E;break}}else ka=169;while(0);if((ka|0)==169){ka=0;e=f+8|0;q=c[e>>2]|0;e=c[e+4>>2]|0;k=d+8|0;r=c[k>>2]|0;k=c[k+4>>2]|0;s=(e|0)>(k|0)|(e|0)==(k|0)&q>>>0>r>>>0;g=s?f:d;j=c[g>>2]|0;g=c[g+4>>2]|0;y=Om(o|0,p|0,1,0)|0;x=E;if((n|0)>(x|0)|(n|0)==(x|0)&m>>>0>y>>>0){ka=187;break a}else{k=s?e:k;e=s?q:r}}do if((k|0)>(u|0)|(k|0)==(u|0)&e>>>0>t>>>0){l=+h[d+64>>3];sa=+G(+l);C=+h[f+64>>3];if(sa>+G(+C)){y=f+40|0;if((c[y>>2]|0)==(t|0)?(c[y+4>>2]|0)==(u|0):0){m=f+32|0;j=c[m>>2]|0;m=c[m+4>>2]|0;e=t;k=u;break}else{j=f;m=c[j>>2]|0;j=c[j+4>>2]|0;e=f+8|0;e=Km(t|0,u|0,c[e>>2]|0,c[e+4>>2]|0)|0;sa=C*(+(e>>>0)+4294967296.0*+(E|0));sa=sa+(sa<0.0?-.5:.5);j=Om(~~sa>>>0|0,(+G(sa)>=1.0?(sa>0.0?~~+U(+F(sa/4294967296.0),4294967295.0)>>>0:~~+S((sa-+(~~sa>>>0))/4294967296.0)>>>0):0)|0,m|0,j|0)|0;m=E;e=t;k=u;break}}else{y=d+40|0;if((c[y>>2]|0)==(t|0)?(c[y+4>>2]|0)==(u|0):0){m=d+32|0;j=c[m>>2]|0;m=c[m+4>>2]|0;e=t;k=u;break}else{j=d;m=c[j>>2]|0;j=c[j+4>>2]|0;e=d+8|0;e=Km(t|0,u|0,c[e>>2]|0,c[e+4>>2]|0)|0;sa=l*(+(e>>>0)+4294967296.0*+(E|0));sa=sa+(sa<0.0?-.5:.5);j=Om(~~sa>>>0|0,(+G(sa)>=1.0?(sa>0.0?~~+U(+F(sa/4294967296.0),4294967295.0)>>>0:~~+S((sa-+(~~sa>>>0))/4294967296.0)>>>0):0)|0,m|0,j|0)|0;m=E;e=t;k=u;break}}}else m=g;while(0);g=vf(24)|0;k:do if(!g)do{g=c[5972]|0;c[5972]=g+0;if(!g){g=0;break k}ub[g&3]();g=vf(24)|0}while(!(g|0));while(0);p=g;c[g>>2]=d;c[g+4>>2]=f;y=g+8|0;c[y>>2]=j;c[y+4>>2]=m;y=g+16|0;c[y>>2]=e;c[y+4>>2]=k;e=c[M>>2]|0;y=c[N>>2]|0;g=y;do if((e|0)==(y|0)){o=c[L>>2]|0;n=e-o|0;m=n>>2;e=m+1|0;if(e>>>0>1073741823){ka=219;break a}y=g-o|0;k=y>>1;k=y>>2>>>0<536870911?(k>>>0<e>>>0?e:k):1073741823;if(!k)e=0;else{if(k>>>0>1073741823){ka=222;break a}g=k<<2;g=(g|0)==0?1:g;e=vf(g)|0;l:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break l}ub[e&3]();e=vf(g)|0}while(!(e|0));while(0)}j=e+(m<<2)|0;c[j>>2]=p;g=j+(0-m<<2)|0;if((n|0)>0)Vm(g|0,o|0,n|0)|0;c[L>>2]=g;c[M>>2]=j+4;c[N>>2]=e+(k<<2);if(!o)break;wf(o)}else{c[e>>2]=p;c[M>>2]=(c[M>>2]|0)+4}while(0);ae(b,d,f);e=1}else d=f;f=c[d+116>>2]|0}while((f|0)!=0)}d=c[d+120>>2]|0;if(!d)break;c[d+116>>2]=0;if(!e)break;d=c[I>>2]|0}c[I>>2]=0;d=c[M>>2]|0;e=c[L>>2]|0;f=e;g=d;switch(d-e>>2|0){case 0:break j;case 1:{f=d;g=e;break}default:{d=c[J>>2]|0;c[I>>2]=d;if(d|0)do{c[d+120>>2]=c[d+112>>2];y=d;d=c[d+108>>2]|0;c[y+116>>2]=d}while((d|0)!=0);c[ma>>2]=13;$d(f,g,ma);d=c[M>>2]|0;e=c[L>>2]|0;n=d-e>>2;if(!n){f=d;g=e}else{d=0;k=e;while(1){j=k+(d<<2)|0;m=c[j>>2]|0;f=c[m>>2]|0;e=c[f+116>>2]|0;g=c[m+4>>2]|0;if((e|0)!=(g|0))if((c[f+120>>2]|0)==(g|0))e=g;else{e=d;do{e=e+1|0;if(e>>>0>=n>>>0)break;g=c[k+(e<<2)>>2]|0;f=c[g>>2]|0;g=c[g+4>>2]|0;if((c[f+116>>2]|0)==(g|0))break}while((c[f+120>>2]|0)!=(g|0));if((e|0)==(n|0)){fa=0;break a}e=k+(e<<2)|0;c[j>>2]=c[e>>2];c[e>>2]=m;e=c[(c[L>>2]|0)+(d<<2)>>2]|0;f=c[e>>2]|0;e=c[e+4>>2]|0}ae(b,f,e);d=d+1|0;if(d>>>0>=n>>>0)break;k=c[L>>2]|0}f=c[M>>2]|0;g=c[L>>2]|0}}}d=g;if((f|0)==(g|0)){e=g;f=g}else{g=0;do{d=c[d+(g<<2)>>2]|0;y=d+4|0;Wd(b,c[d>>2]|0,c[y>>2]|0,d+8|0,1);Xd(b,c[d>>2]|0,c[y>>2]|0);if(d|0)wf(d);g=g+1|0;e=c[M>>2]|0;f=c[L>>2]|0;d=f}while(g>>>0<e-f>>2>>>0)}if((e|0)!=(d|0))c[M>>2]=e+(~((e+-4-f|0)>>>2)<<2);c[I>>2]=0}while(0);d=c[J>>2]|0;c[_>>2]=d;if(d|0)do{ka=d+40|0;m:do if((c[ka>>2]|0)==(A|0)?(c[ka+4>>2]|0)==(z|0):0){e=c[d+104>>2]|0;do if(!e){e=c[d+96>>2]|0;f=e+32|0;j=d+32|0;g=c[j>>2]|0;j=c[j+4>>2]|0;f=(c[f>>2]|0)==(g|0)?(c[f+4>>2]|0)==(j|0):0;if((f?(ka=e+40|0,(c[ka>>2]|0)==(A|0)?(c[ka+4>>2]|0)==(z|0):0):0)?(c[e+104>>2]|0)==0:0){T=e;ka=267}else ka=264;if((((ka|0)==264?(ka=0,W=c[d+100>>2]|0,y=W+32|0,(c[y>>2]|0)==(g|0)?(c[y+4>>2]|0)==(j|0):0):0)?(y=W+40|0,(c[y>>2]|0)==(A|0)?(c[y+4>>2]|0)==(z|0):0):0)?(c[W+104>>2]|0)==0:0){T=W;ka=267}if(((ka|0)==267?(0,(c[T+92>>2]|0)!=-2):0)?(ka=T+56|0,(c[ka>>2]|0)==0&(c[ka+4>>2]|0)==0):0)break;p=d+112|0;q=c[p>>2]|0;if((f?(ka=e+40|0,(c[ka>>2]|0)==(A|0)?(c[ka+4>>2]|0)==(z|0):0):0)?(c[e+104>>2]|0)==0:0)ka=275;else ka=272;do if((ka|0)==272){e=c[d+100>>2]|0;ka=e+32|0;if((c[ka>>2]|0)==(g|0)?(c[ka+4>>2]|0)==(j|0):0){ka=e+40|0;if(!((c[ka>>2]|0)==(A|0)?(c[ka+4>>2]|0)==(z|0):0)){ka=278;break}if(!(c[e+104>>2]|0))ka=275;else ka=278}else ka=278}while(0);do if((ka|0)==275){ka=0;j=e+92|0;if((c[j>>2]|0)==-2)ka=278;else{n=e+108|0;o=e+112|0;if((c[n>>2]|0)==(c[o>>2]|0)?(y=e+56|0,!((c[y>>2]|0)==0&(c[y+4>>2]|0)==0)):0){ka=278;break}m=d+108|0;f=c[m>>2]|0;if((f|0)!=(e|0)&(f|0)!=0){g=d+32|0;do{Wd(b,d,f,g,1);Xd(b,d,f);f=c[m>>2]|0}while((f|0)!=(e|0)&(f|0)!=0)}g=c[d+92>>2]|0;if((g|0)!=-1){if((g|0)<=-1){ka=312;break a}if((c[j>>2]|0)<=-1){ka=312;break a}Wd(b,d,e,d+32|0,0);break}if((c[j>>2]|0)!=-1){ka=312;break a}g=c[p>>2]|0;j=(g|0)!=0;k=(f|0)!=0;if(!(!(k|j)?(c[J>>2]|0)!=(d|0):0)){if(j)c[g+108>>2]=f;else c[J>>2]=f;if(k)c[f+112>>2]=g;c[m>>2]=0;c[p>>2]=0}d=c[o>>2]|0;f=c[n>>2]|0;g=(d|0)!=0;j=(f|0)!=0;if(!(g|j)?(c[J>>2]|0)!=(e|0):0)break;if(g)c[d+108>>2]=f;else c[J>>2]=f;if(j)c[f+112>>2]=d;c[n>>2]=0;c[o>>2]=0}}while(0);do if((ka|0)==278){ka=0;if((c[d+92>>2]|0)>-1){Qd(b,d,d+32|0)|0;g=c[p>>2]|0}else g=q;e=d+108|0;f=c[e>>2]|0;j=(g|0)!=0;k=(f|0)!=0;if(!(j|k)?(c[J>>2]|0)!=(d|0):0)break;if(j)c[g+108>>2]=f;else c[J>>2]=f;if(k)c[f+112>>2]=g;c[e>>2]=0;c[p>>2]=0}while(0);if(!q){d=c[J>>2]|0;c[_>>2]=d;break m}else{d=c[q+108>>2]|0;c[_>>2]=d;break m}}else{ka=e+56|0;if((c[ka>>2]|0)==0&(c[ka+4>>2]|0)==0){Pd(b,_);d=c[_>>2]|0;if((c[d+92>>2]|0)>-1)Qd(b,d,d)|0;e=c[I>>2]|0;if(!e){c[I>>2]=d;c[d+120>>2]=0;c[d+116>>2]=0;ka=343;break m}else{c[d+116>>2]=e;c[d+120>>2]=0;c[e+120>>2]=d;c[I>>2]=d;ka=343;break m}}}while(0);f=d+32|0;e=c[f>>2]|0;f=c[f+4>>2]|0;ka=342}else{e=d;f=c[e>>2]|0;e=c[e+4>>2]|0;sa=+h[d+64>>3];ka=d+8|0;ka=Km(A|0,z|0,c[ka>>2]|0,c[ka+4>>2]|0)|0;sa=sa*(+(ka>>>0)+4294967296.0*+(E|0));sa=sa+(sa<0.0?-.5:.5);e=Om(~~sa>>>0|0,(+G(sa)>=1.0?(sa>0.0?~~+U(+F(sa/4294967296.0),4294967295.0)>>>0:~~+S((sa-+(~~sa>>>0))/4294967296.0)>>>0):0)|0,f|0,e|0)|0;f=E;ka=342}while(0);if((ka|0)==342){y=d+16|0;c[y>>2]=e;c[y+4>>2]=f;y=d+24|0;c[y>>2]=A;c[y+4>>2]=z;ka=343}if((ka|0)==343){ka=0;do if(((((a[la>>0]|0)!=0?(X=c[d+112>>2]|0,(c[d+92>>2]|0)>-1):0)?(X|0)!=0&(c[d+80>>2]|0)!=0:0)?(c[X+92>>2]|0)>-1:0)?(x=X+16|0,Y=d+16|0,y=Y,(c[x>>2]|0)==(c[y>>2]|0)?(c[x+4>>2]|0)==(c[y+4>>2]|0):0):0){if(!(c[X+80>>2]|0))break;j=Qd(b,X,Y)|0;g=Qd(b,d,Y)|0;d=c[_>>2]|0;e=d+16|0;c[Z>>2]=c[e>>2];c[Z+4>>2]=c[e+4>>2];c[Z+8>>2]=c[e+8>>2];c[Z+12>>2]=c[e+12>>2];e=vf(24)|0;n:do if(!e)while(1){e=c[5972]|0;c[5972]=e+0;if(!e){f=0;break n}ub[e&3]();e=vf(24)|0;if(e|0){f=e;break}}else f=e;while(0);e=f+8|0;c[ma>>2]=f;c[f>>2]=j;c[f+4>>2]=g;c[e>>2]=c[Z>>2];c[e+4>>2]=c[Z+4>>2];c[e+8>>2]=c[Z+8>>2];c[e+12>>2]=c[Z+12>>2];e=c[qa>>2]|0;if((e|0)==(c[K>>2]|0))Rd(pa,ma);else{c[e>>2]=f;c[qa>>2]=(c[qa>>2]|0)+4}}while(0);d=c[d+108>>2]|0;c[_>>2]=d}}while((d|0)!=0);d=c[I>>2]|0;if(d|0)do{e=d+120|0;f=c[e>>2]|0;g=d+116|0;j=c[g>>2]|0;if(!f)c[I>>2]=j;else c[f+116>>2]=j;if(j|0)c[j+120>>2]=f;c[g>>2]=0;c[e>>2]=0;Jd(b,d,1);d=c[I>>2]|0}while((d|0)!=0);d=c[J>>2]|0;c[_>>2]=d;if(d|0)do{y=d+40|0;o:do if(((c[y>>2]|0)==(A|0)?(c[y+4>>2]|0)==(z|0):0)?(c[d+104>>2]|0)!=0:0){if((c[d+92>>2]|0)>-1)k=Qd(b,d,d+32|0)|0;else k=0;Pd(b,_);d=c[_>>2]|0;e=c[d+112>>2]|0;j=c[d+108>>2]|0;do if(e|0){x=e+16|0;y=d;if(!((c[x>>2]|0)==(c[y>>2]|0)?(c[x+4>>2]|0)==(c[y+4>>2]|0):0))break;g=e+24|0;f=c[g>>2]|0;g=c[g+4>>2]|0;y=d+8|0;if(!((k|0)!=0&((f|0)==(c[y>>2]|0)?(g|0)==(c[y+4>>2]|0):0)))break;if((c[e+92>>2]|0)<=-1)break;y=e+40|0;x=c[y+4>>2]|0;if(!((g|0)>(x|0)|((g|0)==(x|0)?f>>>0>(c[y>>2]|0)>>>0:0)))break;if(!(Sd(d,e,(a[b+(c[(c[b>>2]|0)+-12>>2]|0)+12>>0]|0)!=0)|0))break;if(!(c[d+80>>2]|0))break;if(!(c[e+80>>2]|0))break;g=Qd(b,e,d)|0;e=d+32|0;c[Z>>2]=c[e>>2];c[Z+4>>2]=c[e+4>>2];c[Z+8>>2]=c[e+8>>2];c[Z+12>>2]=c[e+12>>2];e=vf(24)|0;p:do if(!e)while(1){e=c[5972]|0;c[5972]=e+0;if(!e){f=0;break p}ub[e&3]();e=vf(24)|0;if(e|0){f=e;break}}else f=e;while(0);e=f+8|0;c[ma>>2]=f;c[f>>2]=k;c[f+4>>2]=g;c[e>>2]=c[Z>>2];c[e+4>>2]=c[Z+4>>2];c[e+8>>2]=c[Z+8>>2];c[e+12>>2]=c[Z+12>>2];e=c[qa>>2]|0;if((e|0)==(c[K>>2]|0))Rd(pa,ma);else{c[e>>2]=f;c[qa>>2]=(c[qa>>2]|0)+4}break o}while(0);if(j){x=j+16|0;y=d;if(!((c[x>>2]|0)==(c[y>>2]|0)?(c[x+4>>2]|0)==(c[y+4>>2]|0):0))break;f=j+24|0;e=c[f>>2]|0;f=c[f+4>>2]|0;y=d+8|0;if(!((k|0)!=0&((e|0)==(c[y>>2]|0)?(f|0)==(c[y+4>>2]|0):0)))break;if((c[j+92>>2]|0)<=-1)break;y=j+40|0;x=c[y+4>>2]|0;if(!((f|0)>(x|0)|((f|0)==(x|0)?e>>>0>(c[y>>2]|0)>>>0:0)))break;if(!(Sd(d,j,(a[b+(c[(c[b>>2]|0)+-12>>2]|0)+12>>0]|0)!=0)|0))break;if(!(c[d+80>>2]|0))break;if(!(c[j+80>>2]|0))break;g=Qd(b,j,d)|0;e=d+32|0;c[Z>>2]=c[e>>2];c[Z+4>>2]=c[e+4>>2];c[Z+8>>2]=c[e+8>>2];c[Z+12>>2]=c[e+12>>2];e=vf(24)|0;q:do if(!e)while(1){e=c[5972]|0;c[5972]=e+0;if(!e){f=0;break q}ub[e&3]();e=vf(24)|0;if(e|0){f=e;break}}else f=e;while(0);e=f+8|0;c[ma>>2]=f;c[f>>2]=k;c[f+4>>2]=g;c[e>>2]=c[Z>>2];c[e+4>>2]=c[Z+4>>2];c[e+8>>2]=c[Z+8>>2];c[e+12>>2]=c[Z+12>>2];e=c[qa>>2]|0;if((e|0)==(c[K>>2]|0))Rd(pa,ma);else{c[e>>2]=f;c[qa>>2]=(c[qa>>2]|0)+4}}}while(0);d=c[d+108>>2]|0;c[_>>2]=d}while((d|0)!=0);if(c[Q>>2]|0)continue;if(!(c[b+(c[(c[b>>2]|0)+-12>>2]|0)+4>>2]|0)){ka=154;break}}if((ka|0)==154){Z=b+4|0;_=b+8|0;e=c[_>>2]|0;f=c[Z>>2]|0;d=f;if((e|0)!=(f|0)){o=b+88|0;p=e-f>>2;m=0;do{g=c[d+(m<<2)>>2]|0;n=c[g+16>>2]|0;if(n|0?(a[g+5>>0]|0)==0:0){j=a[g+4>>0]|0;k=a[o>>0]|0;l=0.0;g=n;do{ca=c[g+28>>2]|0;fa=ca+8|0;ba=g+8|0;fa=Om(c[ba>>2]|0,c[ba+4>>2]|0,c[fa>>2]|0,c[fa+4>>2]|0)|0;sa=+(fa>>>0)+4294967296.0*+(E|0);ca=ca+16|0;fa=g+16|0;fa=Km(c[ca>>2]|0,c[ca+4>>2]|0,c[fa>>2]|0,c[fa+4>>2]|0)|0;l=l+sa*(+(fa>>>0)+4294967296.0*+(E|0));g=c[g+24>>2]|0}while((g|0)!=(n|0));if(((k^j)&255|0)==(l*.5>0.0|0)){g=n;do{ca=g+24|0;fa=g;g=c[ca>>2]|0;fa=fa+28|0;c[ca>>2]=c[fa>>2];c[fa>>2]=g}while((g|0)!=(n|0))}}m=m+1|0}while(m>>>0<p>>>0)}g=c[b+16>>2]|0;if((g|0)!=(c[qa>>2]|0)){V=b+4|0;W=b+12|0;X=b+89|0;Y=b+88|0;T=0;e=g;while(1){N=c[e+(T<<2)>>2]|0;f=c[N>>2]|0;R=c[d+(c[f>>2]<<2)>>2]|0;while(1){e=c[d+(c[R>>2]<<2)>>2]|0;if((R|0)==(e|0))break;else R=e}P=N+4|0;g=c[P>>2]|0;M=c[d+(c[g>>2]<<2)>>2]|0;while(1){e=c[d+(c[M>>2]<<2)>>2]|0;if((M|0)==(e|0))break;else M=e}Q=R+16|0;r:do if(c[Q>>2]|0?(ga=M+16|0,c[ga>>2]|0):0){L=(R|0)==(M|0);s:do if(L){O=R;K=R}else{d=R;while(1){d=c[d+8>>2]|0;if((d|0)==(M|0)){O=M;K=M;break s}if(!d){d=M;break}}do{d=c[d+8>>2]|0;if((d|0)==(R|0)){O=M;K=R;break s}}while((d|0)!=0);K=Nd(R,M)|0;O=M;f=c[N>>2]|0;g=c[P>>2]|0}while(0);B=f+8|0;t=f+16|0;e=c[t>>2]|0;t=c[t+4>>2]|0;z=N+16|0;y=c[z>>2]|0;z=c[z+4>>2]|0;do if((e|0)==(y|0)&(t|0)==(z|0)){k=N+8|0;j=c[k>>2]|0;k=c[k+4>>2]|0;fa=B;if((((j|0)==(c[fa>>2]|0)?(k|0)==(c[fa+4>>2]|0):0)?(fa=g+8|0,(j|0)==(c[fa>>2]|0)?(k|0)==(c[fa+4>>2]|0):0):0)?(fa=g+16|0,(e|0)==(c[fa>>2]|0)?(t|0)==(c[fa+4>>2]|0):0):0){d=f;do{d=c[d+24>>2]|0;if((d|0)==(f|0)){d=f;break}fa=d+8|0;if(!((c[fa>>2]|0)==(j|0)?(c[fa+4>>2]|0)==(k|0):0))break;fa=d+16|0}while((c[fa>>2]|0)==(e|0)?(c[fa+4>>2]|0)==(t|0):0);m=d+16|0;d=c[m+4>>2]|0;m=(d|0)>(t|0)|((d|0)==(t|0)?(c[m>>2]|0)>>>0>e>>>0:0);d=g;do{d=c[d+24>>2]|0;if((d|0)==(g|0)){d=g;break}fa=d+8|0;if(!((c[fa>>2]|0)==(j|0)?(c[fa+4>>2]|0)==(k|0):0))break;fa=d+16|0}while((c[fa>>2]|0)==(e|0)?(c[fa+4>>2]|0)==(t|0):0);fa=d+16|0;ca=c[fa+4>>2]|0;if(!(m^((ca|0)>(t|0)|((ca|0)==(t|0)?(c[fa>>2]|0)>>>0>e>>>0:0))))break r;d=vf(32)|0;t:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break t}ub[d&3]();d=vf(32)|0}while(!(d|0));while(0);fa=d+8|0;c[fa>>2]=c[B>>2];c[fa+4>>2]=c[B+4>>2];c[fa+8>>2]=c[B+8>>2];c[fa+12>>2]=c[B+12>>2];c[d>>2]=c[f>>2];if(m){j=f+28|0;e=c[j>>2]|0;c[d+28>>2]=e;k=d+24|0;c[k>>2]=f;c[e+24>>2]=d;c[j>>2]=d;e=vf(32)|0;u:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break u}ub[e&3]();e=vf(32)|0}while(!(e|0));while(0);fa=e+8|0;ca=g+8|0;c[fa>>2]=c[ca>>2];c[fa+4>>2]=c[ca+4>>2];c[fa+8>>2]=c[ca+8>>2];c[fa+12>>2]=c[ca+12>>2];c[e>>2]=c[g>>2];fa=g+24|0;ca=c[fa>>2]|0;c[e+24>>2]=ca;c[ca+28>>2]=e;c[j>>2]=g;c[fa>>2]=f;c[k>>2]=e;c[e+28>>2]=d;c[N>>2]=f;c[P>>2]=d;break}else{j=f+24|0;e=c[j>>2]|0;c[d+24>>2]=e;k=d+28|0;c[k>>2]=f;c[e+28>>2]=d;c[j>>2]=d;e=vf(32)|0;v:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break v}ub[e&3]();e=vf(32)|0}while(!(e|0));while(0);fa=e+8|0;ca=g+8|0;c[fa>>2]=c[ca>>2];c[fa+4>>2]=c[ca+4>>2];c[fa+8>>2]=c[ca+8>>2];c[fa+12>>2]=c[ca+12>>2];c[e>>2]=c[g>>2];fa=g+28|0;ca=c[fa>>2]|0;c[e+28>>2]=ca;c[ca+24>>2]=e;c[j>>2]=g;c[fa>>2]=f;c[k>>2]=e;c[e+24>>2]=d;c[N>>2]=f;c[P>>2]=d;break}}else I=f;while(1){d=c[I+28>>2]|0;fa=d+16|0;if((d|0)==(g|0)|((d|0)==(f|0)|((c[fa>>2]|0)!=(e|0)?1:(c[fa+4>>2]|0)!=(t|0)))){d=t;break}else I=d}while(1){j=c[f+24>>2]|0;k=j+16|0;ca=e;e=c[k>>2]|0;fa=d;d=c[k+4>>2]|0;k=(j|0)==(I|0);if(!((j|0)!=(g|0)&((k|((e|0)!=(ca|0)|(d|0)!=(fa|0)))^1)))break;else f=j}B=I+16|0;H=f+16|0;if(k|(j|0)==(g|0))break r;k=g+16|0;j=c[k>>2]|0;k=c[k+4>>2]|0;d=g;while(1){e=c[d+28>>2]|0;fa=e+16|0;if((e|0)==(f|0)|((e|0)==(g|0)|((c[fa>>2]|0)!=(j|0)?1:(c[fa+4>>2]|0)!=(k|0)))){e=k;break}else d=e}while(1){k=c[g+24>>2]|0;m=k+16|0;ca=j;j=c[m>>2]|0;fa=e;e=c[m+4>>2]|0;m=(k|0)==(d|0);if(!((k|0)!=(I|0)&((m|((j|0)!=(ca|0)|(e|0)!=(fa|0)))^1)))break;else g=k}e=d+16|0;s=g+16|0;if(m|(k|0)==(I|0))break r;r=I+8|0;y=r;x=c[y>>2]|0;y=c[y+4>>2]|0;q=f+8|0;u=q;t=c[u>>2]|0;u=c[u+4>>2]|0;f=d+8|0;A=f;z=c[A>>2]|0;A=c[A+4>>2]|0;p=g+8|0;w=p;v=c[w>>2]|0;w=c[w+4>>2]|0;g=(y|0)<(u|0)|(y|0)==(u|0)&x>>>0<t>>>0;j=(A|0)<(w|0)|(A|0)==(w|0)&z>>>0<v>>>0;do if(g)if(j){n=(y|0)<(A|0)|(y|0)==(A|0)&x>>>0<z>>>0;o=(w|0)<(u|0)|(w|0)==(u|0)&v>>>0<t>>>0;k=n?A:y;m=o?w:u;n=n?z:x;o=o?v:t;break}else{n=(y|0)<(w|0)|(y|0)==(w|0)&x>>>0<v>>>0;o=(A|0)<(u|0)|(A|0)==(u|0)&z>>>0<t>>>0;k=n?w:y;m=o?A:u;n=n?v:x;o=o?z:t;break}else if(j){n=(u|0)<(A|0)|(u|0)==(A|0)&t>>>0<z>>>0;o=(w|0)<(y|0)|(w|0)==(y|0)&v>>>0<x>>>0;k=n?A:u;m=o?w:y;n=n?z:t;o=o?v:x;break}else{n=(u|0)<(w|0)|(u|0)==(w|0)&t>>>0<v>>>0;o=(A|0)<(y|0)|(A|0)==(y|0)&z>>>0<x>>>0;k=n?w:u;m=o?A:y;n=n?v:t;o=o?z:x;break}while(0);if(!((k|0)<(m|0)|(k|0)==(m|0)&n>>>0<o>>>0))break r;do if((y|0)<(k|0)|(y|0)==(k|0)&x>>>0<n>>>0|((y|0)>(m|0)|(y|0)==(m|0)&x>>>0>o>>>0))if((A|0)<(k|0)|(A|0)==(k|0)&z>>>0<n>>>0|((A|0)>(m|0)|(A|0)==(m|0)&z>>>0>o>>>0)){e=(u|0)<(k|0)|(u|0)==(k|0)&t>>>0<n>>>0|((u|0)>(m|0)|(u|0)==(m|0)&t>>>0>o>>>0);J=e?j:g;f=e?p:q;e=e?s:H;break}else{J=(A|0)>(w|0)|(A|0)==(w|0)&z>>>0>v>>>0;break}else{J=(y|0)>(u|0)|(y|0)==(u|0)&x>>>0>t>>>0;f=r;e=B}while(0);s=f;r=c[s>>2]|0;s=c[s+4>>2]|0;q=e;p=c[q>>2]|0;q=c[q+4>>2]|0;c[N>>2]=I;c[P>>2]=d;o=(y|0)<(u|0)|(y|0)==(u|0)&x>>>0<=t>>>0;m=(A|0)<(w|0)|(A|0)==(w|0)&z>>>0<=v>>>0;if(!(o^m))break r;do if(o){e=I;while(1){f=c[e+24>>2]|0;j=f+8|0;g=c[j>>2]|0;j=c[j+4>>2]|0;if((j|0)>(s|0)|(j|0)==(s|0)&g>>>0>r>>>0)break;ka=e+8|0;fa=c[ka+4>>2]|0;if((j|0)<(fa|0)|((j|0)==(fa|0)?g>>>0<(c[ka>>2]|0)>>>0:0))break;ka=f+16|0;if((c[ka>>2]|0)==(p|0)?(c[ka+4>>2]|0)==(q|0):0)e=f;else break}if(J){j=e+8|0;j=((c[j>>2]|0)==(r|0)?(c[j+4>>2]|0)==(s|0):0)?e:f}else j=e;e=vf(32)|0;w:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break w}ub[e&3]();e=vf(32)|0}while(!(e|0));while(0);f=e+8|0;k=j+8|0;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];c[f+8>>2]=c[k+8>>2];c[f+12>>2]=c[k+12>>2];k=c[j>>2]|0;c[e>>2]=k;if(J){ka=j+28|0;fa=c[ka>>2]|0;c[e+28>>2]=fa;c[e+24>>2]=j;c[fa+24>>2]=e;c[ka>>2]=e}else{ka=j+24|0;fa=c[ka>>2]|0;c[e+24>>2]=fa;c[e+28>>2]=j;c[fa+28>>2]=e;c[ka>>2]=e}ka=f;g=e+16|0;if(((c[ka>>2]|0)==(r|0)?(c[ka+4>>2]|0)==(s|0):0)?(ka=g,(c[ka>>2]|0)==(p|0)?(c[ka+4>>2]|0)==(q|0):0):0){f=e;n=j;break}c[f>>2]=r;c[f+4>>2]=s;f=g;c[f>>2]=p;c[f+4>>2]=q;f=vf(32)|0;x:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break x}ub[f&3]();f=vf(32)|0}while(!(f|0));while(0);ka=f+8|0;c[ka>>2]=r;c[ka+4>>2]=s;ka=f+16|0;c[ka>>2]=p;c[ka+4>>2]=q;c[f>>2]=k;if(J){n=e+28|0;ka=c[n>>2]|0;c[f+28>>2]=ka;c[f+24>>2]=e;c[ka+24>>2]=f;c[n>>2]=f;n=e;break}else{n=e+24|0;ka=c[n>>2]|0;c[f+24>>2]=ka;c[f+28>>2]=e;c[ka+28>>2]=f;c[n>>2]=f;n=e;break}}else{e=I;while(1){f=c[e+24>>2]|0;j=f+8|0;g=c[j>>2]|0;j=c[j+4>>2]|0;if((j|0)<(s|0)|(j|0)==(s|0)&g>>>0<r>>>0)break;ka=e+8|0;fa=c[ka+4>>2]|0;if((j|0)>(fa|0)|((j|0)==(fa|0)?g>>>0>(c[ka>>2]|0)>>>0:0))break;ka=f+16|0;if((c[ka>>2]|0)==(p|0)?(c[ka+4>>2]|0)==(q|0):0)e=f;else break}if(J)j=e;else{j=e+8|0;j=((c[j>>2]|0)==(r|0)?(c[j+4>>2]|0)==(s|0):0)?e:f}e=vf(32)|0;y:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break y}ub[e&3]();e=vf(32)|0}while(!(e|0));while(0);f=e+8|0;k=j+8|0;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];c[f+8>>2]=c[k+8>>2];c[f+12>>2]=c[k+12>>2];k=c[j>>2]|0;c[e>>2]=k;if(J){ka=j+24|0;fa=c[ka>>2]|0;c[e+24>>2]=fa;c[e+28>>2]=j;c[fa+28>>2]=e;c[ka>>2]=e}else{ka=j+28|0;fa=c[ka>>2]|0;c[e+28>>2]=fa;c[e+24>>2]=j;c[fa+24>>2]=e;c[ka>>2]=e}ka=f;g=e+16|0;if(((c[ka>>2]|0)==(r|0)?(c[ka+4>>2]|0)==(s|0):0)?(ka=g,(c[ka>>2]|0)==(p|0)?(c[ka+4>>2]|0)==(q|0):0):0){f=e;n=j;break}c[f>>2]=r;c[f+4>>2]=s;f=g;c[f>>2]=p;c[f+4>>2]=q;f=vf(32)|0;z:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break z}ub[f&3]();f=vf(32)|0}while(!(f|0));while(0);ka=f+8|0;c[ka>>2]=r;c[ka+4>>2]=s;ka=f+16|0;c[ka>>2]=p;c[ka+4>>2]=q;c[f>>2]=k;if(J){n=e+24|0;ka=c[n>>2]|0;c[f+24>>2]=ka;c[f+28>>2]=e;c[ka+28>>2]=f;c[n>>2]=f;n=e;break}else{n=e+28|0;ka=c[n>>2]|0;c[f+28>>2]=ka;c[f+24>>2]=e;c[ka+24>>2]=f;c[n>>2]=f;n=e;break}}while(0);do if(m){while(1){e=c[d+24>>2]|0;j=e+8|0;g=c[j>>2]|0;j=c[j+4>>2]|0;if((j|0)>(s|0)|(j|0)==(s|0)&g>>>0>r>>>0)break;ka=d+8|0;fa=c[ka+4>>2]|0;if((j|0)<(fa|0)|((j|0)==(fa|0)?g>>>0<(c[ka>>2]|0)>>>0:0))break;ka=e+16|0;if((c[ka>>2]|0)==(p|0)?(c[ka+4>>2]|0)==(q|0):0)d=e;else break}if(J){ka=d+8|0;d=((c[ka>>2]|0)==(r|0)?(c[ka+4>>2]|0)==(s|0):0)?d:e}e=vf(32)|0;A:do if(!e)while(1){e=c[5972]|0;c[5972]=e+0;if(!e){k=0;break A}ub[e&3]();e=vf(32)|0;if(e|0){k=e;break}}else k=e;while(0);e=k+8|0;j=d+8|0;c[e>>2]=c[j>>2];c[e+4>>2]=c[j+4>>2];c[e+8>>2]=c[j+8>>2];c[e+12>>2]=c[j+12>>2];j=c[d>>2]|0;c[k>>2]=j;if(J){ka=d+28|0;fa=c[ka>>2]|0;c[k+28>>2]=fa;c[k+24>>2]=d;c[fa+24>>2]=k;c[ka>>2]=k}else{ka=d+24|0;fa=c[ka>>2]|0;c[k+24>>2]=fa;c[k+28>>2]=d;c[fa+28>>2]=k;c[ka>>2]=k}ka=e;g=k+16|0;if(((c[ka>>2]|0)==(r|0)?(c[ka+4>>2]|0)==(s|0):0)?(ka=g,(c[ka>>2]|0)==(p|0)?(c[ka+4>>2]|0)==(q|0):0):0){e=k;ka=546;break}c[e>>2]=r;c[e+4>>2]=s;e=g;c[e>>2]=p;c[e+4>>2]=q;e=vf(32)|0;B:do if(!e)do{d=c[5972]|0;c[5972]=d+0;if(!d){e=0;break B}ub[d&3]();e=vf(32)|0}while(!(e|0));while(0);ka=e+8|0;c[ka>>2]=r;c[ka+4>>2]=s;ka=e+16|0;c[ka>>2]=p;c[ka+4>>2]=q;c[e>>2]=j;if(J){ka=k+28|0;fa=c[ka>>2]|0;c[e+28>>2]=fa;c[e+24>>2]=k;c[fa+24>>2]=e;c[ka>>2]=e;if(o){d=k;ka=547;break}else{d=k;ka=548;break}}else{ka=k+24|0;fa=c[ka>>2]|0;c[e+24>>2]=fa;c[e+28>>2]=k;c[fa+28>>2]=e;c[ka>>2]=e;if(o){d=k;ka=548;break}else{d=k;ka=547;break}}}else{while(1){e=c[d+24>>2]|0;j=e+8|0;g=c[j>>2]|0;j=c[j+4>>2]|0;if((j|0)<(s|0)|(j|0)==(s|0)&g>>>0<r>>>0)break;ka=d+8|0;fa=c[ka+4>>2]|0;if((j|0)>(fa|0)|((j|0)==(fa|0)?g>>>0>(c[ka>>2]|0)>>>0:0))break;ka=e+16|0;if((c[ka>>2]|0)==(p|0)?(c[ka+4>>2]|0)==(q|0):0)d=e;else break}if(!J){ka=d+8|0;d=((c[ka>>2]|0)==(r|0)?(c[ka+4>>2]|0)==(s|0):0)?d:e}e=vf(32)|0;C:do if(!e)while(1){e=c[5972]|0;c[5972]=e+0;if(!e){k=0;break C}ub[e&3]();e=vf(32)|0;if(e|0){k=e;break}}else k=e;while(0);e=k+8|0;j=d+8|0;c[e>>2]=c[j>>2];c[e+4>>2]=c[j+4>>2];c[e+8>>2]=c[j+8>>2];c[e+12>>2]=c[j+12>>2];j=c[d>>2]|0;c[k>>2]=j;if(J){ka=d+24|0;fa=c[ka>>2]|0;c[k+24>>2]=fa;c[k+28>>2]=d;c[fa+28>>2]=k;c[ka>>2]=k}else{ka=d+28|0;fa=c[ka>>2]|0;c[k+28>>2]=fa;c[k+24>>2]=d;c[fa+24>>2]=k;c[ka>>2]=k}ka=e;g=k+16|0;if(((c[ka>>2]|0)==(r|0)?(c[ka+4>>2]|0)==(s|0):0)?(ka=g,(c[ka>>2]|0)==(p|0)?(c[ka+4>>2]|0)==(q|0):0):0){e=k;ka=546;break}c[e>>2]=r;c[e+4>>2]=s;e=g;c[e>>2]=p;c[e+4>>2]=q;e=vf(32)|0;D:do if(!e)do{d=c[5972]|0;c[5972]=d+0;if(!d){e=0;break D}ub[d&3]();e=vf(32)|0}while(!(e|0));while(0);ka=e+8|0;c[ka>>2]=r;c[ka+4>>2]=s;ka=e+16|0;c[ka>>2]=p;c[ka+4>>2]=q;c[e>>2]=j;if(J){ka=k+24|0;fa=c[ka>>2]|0;c[e+24>>2]=fa;c[e+28>>2]=k;c[fa+28>>2]=e;c[ka>>2]=e;if(o){d=k;ka=547;break}else{d=k;ka=548;break}}else{ka=k+28|0;fa=c[ka>>2]|0;c[e+28>>2]=fa;c[e+24>>2]=k;c[fa+24>>2]=e;c[ka>>2]=e;if(o){d=k;ka=548;break}else{d=k;ka=547;break}}}while(0);if((ka|0)==546)if(o^J)ka=548;else ka=547;if((ka|0)==547){ka=0;c[n+28>>2]=d;c[d+24>>2]=n;c[f+24>>2]=e;c[e+28>>2]=f;break}else if((ka|0)==548){ka=0;c[n+24>>2]=d;c[d+28>>2]=n;c[f+28>>2]=e;c[e+24>>2]=f;break}}else{A=f+24|0;j=c[A>>2]|0;d=j+8|0;m=d;k=c[m>>2]|0;m=c[m+4>>2]|0;s=B;r=c[s>>2]|0;s=c[s+4>>2]|0;E:do if((k|0)==(r|0)&(m|0)==(s|0))do{fa=j+16|0;if((j|0)==(f|0)|((c[fa>>2]|0)!=(e|0)?1:(c[fa+4>>2]|0)!=(t|0)))break E;j=c[j+24>>2]|0;d=j+8|0;fa=d}while((c[fa>>2]|0)==(k|0)?(c[fa+4>>2]|0)==(m|0):0);while(0);fa=j+16|0;ca=c[fa+4>>2]|0;if(!((ca|0)>(t|0)|((ca|0)==(t|0)?(c[fa>>2]|0)>>>0>e>>>0:0))?(ca=d,fa=d+8|0,ia=N+8|0,ha=c[ia>>2]|0,ia=c[ia+4>>2]|0,ja=a[b+(c[(c[b>>2]|0)+-12>>2]|0)+12>>0]|0,Md(r,s,e,t,c[ca>>2]|0,c[ca+4>>2]|0,c[fa>>2]|0,c[fa+4>>2]|0,ha,ia,y,z,ja<<24>>24!=0)|0):0){o=ja;p=ha;q=ia;v=0}else{j=f;ka=554}if((ka|0)==554){while(1){ka=0;j=c[j+28>>2]|0;k=j+8|0;d=c[k>>2]|0;k=c[k+4>>2]|0;n=j+16|0;m=c[n>>2]|0;n=c[n+4>>2]|0;if(!((d|0)==(r|0)&(k|0)==(s|0)))break;if((j|0)==(f|0)|((m|0)!=(e|0)|(n|0)!=(t|0)))break;else ka=554}if((n|0)>(t|0)|(n|0)==(t|0)&m>>>0>e>>>0)break r;q=N+8|0;p=c[q>>2]|0;q=c[q+4>>2]|0;o=a[b+(c[(c[b>>2]|0)+-12>>2]|0)+12>>0]|0;if(Md(r,s,e,t,d,k,m,n,p,q,y,z,o<<24>>24!=0)|0)v=1;else break r}w=g+24|0;d=c[w>>2]|0;e=d+8|0;x=g+8|0;m=e;k=c[m>>2]|0;m=c[m+4>>2]|0;s=x;r=c[s>>2]|0;s=c[s+4>>2]|0;u=g+16|0;t=c[u>>2]|0;u=c[u+4>>2]|0;F:do if((k|0)==(r|0)&(m|0)==(s|0))do{fa=d+16|0;if((d|0)==(g|0)|((c[fa>>2]|0)!=(t|0)?1:(c[fa+4>>2]|0)!=(u|0)))break F;d=c[d+24>>2]|0;e=d+8|0;fa=e}while((c[fa>>2]|0)==(k|0)?(c[fa+4>>2]|0)==(m|0):0);while(0);fa=d+16|0;ca=c[fa+4>>2]|0;if(!((ca|0)>(u|0)|((ca|0)==(u|0)?(c[fa>>2]|0)>>>0>t>>>0:0))?(ca=e,fa=e+8|0,Md(r,s,t,u,c[ca>>2]|0,c[ca+4>>2]|0,c[fa>>2]|0,c[fa+4>>2]|0,p,q,y,z,o<<24>>24!=0)|0):0)e=0;else{d=g;ka=563}if((ka|0)==563){while(1){ka=0;d=c[d+28>>2]|0;k=d+8|0;e=c[k>>2]|0;k=c[k+4>>2]|0;n=d+16|0;m=c[n>>2]|0;n=c[n+4>>2]|0;if(!((e|0)==(r|0)&(k|0)==(s|0)))break;if((d|0)==(g|0)|((m|0)!=(t|0)|(n|0)!=(u|0)))break;else ka=563}if((n|0)>(u|0)|(n|0)==(u|0)&m>>>0>t>>>0)break r;if(Md(r,s,t,u,e,k,m,n,p,q,y,z,o<<24>>24!=0)|0)e=1;else break r}if((j|0)==(d|0)|((j|0)==(f|0)|(d|0)==(g|0)))break r;if(!((R|0)!=(O|0)|v^e))break r;d=vf(32)|0;G:do if(!d)while(1){d=c[5972]|0;c[5972]=d+0;if(!d){k=0;break G}ub[d&3]();d=vf(32)|0;if(d|0){k=d;break}}else k=d;while(0);fa=k+8|0;c[fa>>2]=c[B>>2];c[fa+4>>2]=c[B+4>>2];c[fa+8>>2]=c[B+8>>2];c[fa+12>>2]=c[B+12>>2];c[k>>2]=c[f>>2];if(v){e=f+28|0;d=c[e>>2]|0;c[k+28>>2]=d;j=k+24|0;c[j>>2]=f;c[d+24>>2]=k;c[e>>2]=k;d=vf(32)|0;H:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break H}ub[d&3]();d=vf(32)|0}while(!(d|0));while(0);fa=d+8|0;c[fa>>2]=c[x>>2];c[fa+4>>2]=c[x+4>>2];c[fa+8>>2]=c[x+8>>2];c[fa+12>>2]=c[x+12>>2];c[d>>2]=c[g>>2];fa=c[w>>2]|0;c[d+24>>2]=fa;c[fa+28>>2]=d;c[e>>2]=g;c[w>>2]=f;c[j>>2]=d;c[d+28>>2]=k;c[N>>2]=f;c[P>>2]=k;break}else{d=c[A>>2]|0;c[k+24>>2]=d;e=k+28|0;c[e>>2]=f;c[d+28>>2]=k;c[A>>2]=k;d=vf(32)|0;I:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break I}ub[d&3]();d=vf(32)|0}while(!(d|0));while(0);fa=d+8|0;c[fa>>2]=c[x>>2];c[fa+4>>2]=c[x+4>>2];c[fa+8>>2]=c[x+8>>2];c[fa+12>>2]=c[x+12>>2];c[d>>2]=c[g>>2];fa=g+28|0;ca=c[fa>>2]|0;c[d+28>>2]=ca;c[ca+24>>2]=d;c[A>>2]=g;c[fa>>2]=f;c[e>>2]=d;c[d+24>>2]=k;c[N>>2]=f;c[P>>2]=k;break}}while(0);if(!L){c[ga>>2]=0;c[O+20>>2]=0;c[M>>2]=c[R>>2];a[R+4>>0]=a[K+4>>0]|0;d=O+8|0;if((K|0)==(O|0))c[R+8>>2]=c[d>>2];c[d>>2]=R;if(!(a[X>>0]|0))break;d=c[_>>2]|0;e=c[Z>>2]|0;g=e;if((d|0)==(e|0))break;e=d-e>>2;d=0;while(1){f=(c[g+(d<<2)>>2]|0)+8|0;if((c[f>>2]|0)==(O|0))c[f>>2]=R;d=d+1|0;if(d>>>0>=e>>>0)break r}}c[Q>>2]=c[N>>2];c[R+20>>2]=0;d=vf(24)|0;J:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break J}ub[d&3]();d=vf(24)|0}while(!(d|0));while(0);c[ma>>2]=d;a[d+4>>0]=0;a[d+5>>0]=0;e=d+8|0;c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;e=c[_>>2]|0;if((e|0)==(c[W>>2]|0)){Kd(Z,ma);r=c[_>>2]|0}else{c[e>>2]=d;r=(c[_>>2]|0)+4|0;c[_>>2]=r}q=c[Z>>2]|0;g=r-q|0;u=g>>2;n=u+-1|0;c[d>>2]=n;o=c[P>>2]|0;c[d+16>>2]=o;t=o;f=c[d>>2]|0;e=t;do{c[e>>2]=f;e=c[e+28>>2]|0}while((e|0)!=(t|0));s=q;p=(a[X>>0]|0)==0;if(!((g|0)==4|p)){j=R+4|0;g=0;do{f=c[s+(g<<2)>>2]|0;k=c[f+16>>2]|0;do if(k|0){m=f+8|0;e=c[m>>2]|0;K:do if(!e)e=0;else while(1){if(c[e+16>>2]|0)break K;e=c[e+8>>2]|0;if(!e){e=0;break}}while(0);if((e|0)!=(R|0))break;if((a[f+4>>0]|0)==(a[j>>0]|0))break;else e=k;do{fa=e+8|0;f=e+16|0;f=Ld(c[fa>>2]|0,c[fa+4>>2]|0,c[f>>2]|0,c[f+4>>2]|0,t)|0;if((f|0)>-1){ka=600;break}e=c[e+24>>2]|0}while((e|0)!=(k|0));if((ka|0)==600?(ka=0,(f|0)==0):0)break;c[m>>2]=d}while(0);g=g+1|0}while(g>>>0<n>>>0)}j=c[Q>>2]|0;e=t;do{fa=e+8|0;f=e+16|0;f=Ld(c[fa>>2]|0,c[fa+4>>2]|0,c[f>>2]|0,c[f+4>>2]|0,j)|0;if((f|0)>-1){ka=606;break}e=c[e+24>>2]|0}while((e|0)!=(t|0));if((ka|0)==606?(ka=0,(f|0)==0):0){e=j;while(1){ka=e+8|0;g=e+16|0;g=Ld(c[ka>>2]|0,c[ka+4>>2]|0,c[g>>2]|0,c[g+4>>2]|0,t)|0;if((g|0)>-1){ka=618;break}e=c[e+24>>2]|0;if((e|0)==(j|0)){ka=617;break}}if((ka|0)==617){ka=0;f=R+4|0;e=a[f>>0]|0;a[d+4>>0]=e}else if((ka|0)==618){ka=0;f=R+4|0;e=a[f>>0]|0;a[d+4>>0]=e;if(!g){c[d+8>>2]=c[R+8>>2];if((r|0)==(q|0)|p)break;else j=0;while(1){e=c[s+(j<<2)>>2]|0;k=c[e+16>>2]|0;do if(k|0){f=e+8|0;if((c[f>>2]|0)==(R|0))e=k;else break;do{fa=e+8|0;g=e+16|0;g=Ld(c[fa>>2]|0,c[fa+4>>2]|0,c[g>>2]|0,c[g+4>>2]|0,t)|0;if((g|0)>-1){ka=632;break}e=c[e+24>>2]|0}while((e|0)!=(k|0));if((ka|0)==632?(ka=0,(g|0)==0):0)break;c[f>>2]=d}while(0);j=j+1|0;if(j>>>0>=u>>>0)break r}}}g=e^1;a[f>>0]=g;fa=R+8|0;c[d+8>>2]=c[fa>>2];c[fa>>2]=d;if(!((r|0)==(q|0)|p)){e=0;do{f=(c[s+(e<<2)>>2]|0)+8|0;if((c[f>>2]|0)==(R|0))c[f>>2]=d;e=e+1|0}while(e>>>0<u>>>0)}e=(a[Y>>0]^g)&255;if(!j)break;else{l=0.0;d=j}do{ca=c[d+28>>2]|0;fa=ca+8|0;ba=d+8|0;fa=Om(c[ba>>2]|0,c[ba+4>>2]|0,c[fa>>2]|0,c[fa+4>>2]|0)|0;sa=+(fa>>>0)+4294967296.0*+(E|0);ca=ca+16|0;fa=d+16|0;fa=Km(c[ca>>2]|0,c[ca+4>>2]|0,c[fa>>2]|0,c[fa+4>>2]|0)|0;l=l+sa*(+(fa>>>0)+4294967296.0*+(E|0));d=c[d+24>>2]|0}while((d|0)!=(j|0));if((e|0)==(l*.5>0.0|0))d=j;else break;while(1){ca=d+24|0;fa=d;d=c[ca>>2]|0;fa=fa+28|0;c[ca>>2]=c[fa>>2];c[fa>>2]=d;if((d|0)==(j|0))break r}}g=a[R+4>>0]^1;a[d+4>>0]=g;c[d+8>>2]=R;if(!((r|0)==(q|0)|p)){e=0;do{f=(c[s+(e<<2)>>2]|0)+8|0;if((c[f>>2]|0)==(d|0))c[f>>2]=R;e=e+1|0}while(e>>>0<u>>>0)}e=(a[Y>>0]^g)&255;if(o|0){l=0.0;d=t;do{ca=c[d+28>>2]|0;fa=ca+8|0;ba=d+8|0;fa=Om(c[ba>>2]|0,c[ba+4>>2]|0,c[fa>>2]|0,c[fa+4>>2]|0)|0;sa=+(fa>>>0)+4294967296.0*+(E|0);ca=ca+16|0;fa=d+16|0;fa=Km(c[ca>>2]|0,c[ca+4>>2]|0,c[fa>>2]|0,c[fa+4>>2]|0)|0;l=l+sa*(+(fa>>>0)+4294967296.0*+(E|0));d=c[d+24>>2]|0}while((d|0)!=(t|0));if((e|0)==(l*.5>0.0|0)){d=t;do{ca=d+24|0;fa=d;d=c[ca>>2]|0;fa=fa+28|0;c[ca>>2]=c[fa>>2];c[fa>>2]=d}while((d|0)!=(t|0))}}}while(0);d=T+1|0;e=c[pa>>2]|0;if(d>>>0>=(c[qa>>2]|0)-e>>2>>>0)break;T=d;d=c[V>>2]|0}d=c[Z>>2]|0;e=c[_>>2]|0;f=d}if((e|0)!=(f|0)){I=0;g=d;while(1){g=c[g+(I<<2)>>2]|0;H=g+16|0;d=c[H>>2]|0;k=d;if((d|0)!=0?(a[g+5>>0]|0)==0:0){c[g+20>>2]=0;j=d+28|0;g=c[j>>2]|0;L:do if((g|0)==(d|0)){e=k;ka=652}else{f=0;e=k;while(1){s=d+24|0;p=c[s>>2]|0;B=p;if((g|0)==(p|0)){e=g;ka=653;break L}u=d+8|0;t=c[u>>2]|0;u=c[u+4>>2]|0;w=p+8|0;v=c[w>>2]|0;w=c[w+4>>2]|0;x=(t|0)==(v|0)&(u|0)==(w|0);if(x?(ja=d+16|0,ka=p+16|0,(c[ja>>2]|0)==(c[ka>>2]|0)?(c[ja+4>>2]|0)==(c[ka+4>>2]|0):0):0)ka=666;else ka=657;M:do if((ka|0)==657){ka=0;z=g+8|0;y=c[z>>2]|0;z=c[z+4>>2]|0;A=(t|0)==(y|0)&(u|0)==(z|0);if(A){o=d+16|0;n=c[o>>2]|0;o=c[o+4>>2]|0;m=g+16|0;k=c[m>>2]|0;m=c[m+4>>2]|0;if((n|0)==(k|0)&(o|0)==(m|0)){ka=666;break}else r=o}else{m=g+16|0;r=d+16|0;k=c[m>>2]|0;m=c[m+4>>2]|0;n=c[r>>2]|0;r=c[r+4>>2]|0}q=p+16|0;p=c[q>>2]|0;q=c[q+4>>2]|0;o=b+(c[(c[b>>2]|0)+-12>>2]|0)|0;do if(Md(y,z,k,m,t,u,n,r,v,w,p,q,(a[o+12>>0]|0)!=0)|0){if(!(a[o+28>>0]|0)){ka=666;break M}o=(y|0)==(v|0)&(z|0)==(w|0);if(o&((k|0)==(p|0)&(m|0)==(q|0))|A&((k|0)==(n|0)&(m|0)==(r|0))|x&((p|0)==(n|0)&(q|0)==(r|0))){ka=666;break M}if(o)if(((r|0)>(m|0)|(r|0)==(m|0)&n>>>0>k>>>0)^((r|0)<(q|0)|(r|0)==(q|0)&n>>>0<p>>>0)){ka=666;break M}else break;else if(((u|0)>(z|0)|(u|0)==(z|0)&t>>>0>y>>>0)^((u|0)<(w|0)|(u|0)==(w|0)&t>>>0<v>>>0)){ka=666;break M}else break}while(0);if((d|0)==(f|0))break L;f=(f|0)==0?d:f;e=B}while(0);if((ka|0)==666){c[g+24>>2]=B;c[(c[s>>2]|0)+28>>2]=c[j>>2];ka=c[j>>2]|0;wf(e);f=0;e=ka}d=e;j=d+28|0;g=c[j>>2]|0;if((g|0)==(d|0)){ka=652;break}}}while(0);if((ka|0)==652){ka=0;if(!e)d=0;else{e=d;ka=653}}if((ka|0)==653){ka=0;c[e+24>>2]=0;do{ja=d;d=c[d+24>>2]|0;wf(ja)}while((d|0)!=0);d=0}c[H>>2]=d;d=c[Z>>2]|0;e=c[_>>2]|0}else d=f;I=I+1|0;if(I>>>0>=e-d>>2>>>0)break;else{g=d;f=d}}if(!((a[la>>0]|0)==0|(e|0)==(d|0))){y=b+12|0;x=0;while(1){t=c[d+(x<<2)>>2]|0;x=x+1|0;u=t+16|0;f=c[u>>2]|0;N:do if(f){v=t+4|0;w=t+8|0;s=f;g=f;j=e;f=e;while(1){o=s+24|0;e=c[o>>2]|0;if((e|0)==(g|0)){e=j;break N}p=s+8|0;q=s+16|0;r=s+28|0;n=e;e=j;do{ja=p;la=n+8|0;O:do if(((((c[ja>>2]|0)==(c[la>>2]|0)?(c[ja+4>>2]|0)==(c[la+4>>2]|0):0)?(ja=q,la=n+16|0,(c[ja>>2]|0)==(c[la>>2]|0)?(c[ja+4>>2]|0)==(c[la+4>>2]|0):0):0)?(c[n+24>>2]|0)!=(s|0):0)?(na=n+28|0,oa=c[na>>2]|0,(oa|0)!=(s|0)):0){d=c[r>>2]|0;c[r>>2]=oa;c[oa+24>>2]=s;c[na>>2]=d;c[d+24>>2]=n;c[u>>2]=s;d=vf(24)|0;P:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break P}ub[d&3]();d=vf(24)|0}while(!(d|0));while(0);c[ma>>2]=d;a[d+4>>0]=0;a[d+5>>0]=0;la=d+8|0;c[la>>2]=0;c[la+4>>2]=0;c[la+8>>2]=0;c[la+12>>2]=0;if((f|0)==(c[y>>2]|0)){Kd(Z,ma);m=c[_>>2]|0;e=m;k=d}else{c[f>>2]=d;m=(c[_>>2]|0)+4|0;c[_>>2]=m;e=m;k=c[ma>>2]|0}d=c[Z>>2]|0;g=(e-d>>2)+-1|0;c[k>>2]=g;c[k+16>>2]=n;f=n;do{c[f>>2]=g;f=c[f+28>>2]|0}while((f|0)!=(n|0));g=c[u>>2]|0;f=n;do{la=f+8|0;j=f+16|0;j=Ld(c[la>>2]|0,c[la+4>>2]|0,c[j>>2]|0,c[j+4>>2]|0,g)|0;if((j|0)>-1){ka=693;break}f=c[f+24>>2]|0}while((f|0)!=(n|0));do if((ka|0)==693){ka=0;if(!j)f=g;else break;while(1){la=f+8|0;j=f+16|0;j=Ld(c[la>>2]|0,c[la+4>>2]|0,c[j>>2]|0,c[j+4>>2]|0,n)|0;if((j|0)>-1){ka=698;break}f=c[f+24>>2]|0;if((f|0)==(g|0)){ka=697;break}}do if((ka|0)==697){ka=0;f=a[v>>0]|0;a[k+4>>0]=f}else if((ka|0)==698){ka=0;f=a[v>>0]|0;a[k+4>>0]=f;if(j|0)break;c[k+8>>2]=c[w>>2];j=s;f=m;break O}while(0);a[v>>0]=f^1;c[k+8>>2]=c[w>>2];c[w>>2]=k;j=s;f=m;break O}while(0);a[k+4>>0]=a[v>>0]^1;c[k+8>>2]=t;j=s;f=m}else j=n;while(0);n=c[j+24>>2]|0}while((n|0)!=(g|0));s=c[o>>2]|0;if((s|0)==(g|0))break;else j=e}}while(0);if(x>>>0>=e-d>>2>>>0){fa=1;break}}}else fa=1}else fa=1}else if((ka|0)==187){k=Fa(16)|0;c[k>>2]=1712;j=k+4|0;c[j>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;Q:do if(!1){d=14309;ka=190}else{d=14309;e=14309;while(1){if(!(a[d>>0]|0)){d=e;break Q}d=d+1|0;e=d;if(!(e&3)){ka=190;break}}}while(0);if((ka|0)==190){while(1){e=c[d>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))d=d+4|0;else break}if((e&255)<<24>>24)do d=d+1|0;while((a[d>>0]|0)!=0)}g=d-14309|0;if(g>>>0>4294967279)Il();if(g>>>0<11){a[k+15>>0]=g;if(!g){ra=j;ra=ra+g|0;a[ra>>0]=0;$a(k|0,72,21)}else d=j}else{f=g+16&-16;e=(f|0)==0?1:f;d=vf(e)|0;R:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break R}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0);c[j>>2]=d;c[k+12>>2]=f|-2147483648;c[k+8>>2]=g}Vm(d|0,14309,g|0)|0;ra=d;ra=ra+g|0;a[ra>>0]=0;$a(k|0,72,21)}else if((ka|0)==219)Bl();else if((ka|0)==222){ra=Fa(4)|0;c[ra>>2]=8316;$a(ra|0,1336,91)}else if((ka|0)==312){k=Fa(16)|0;c[k>>2]=1712;j=k+4|0;c[j>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;S:do if(!2){d=14294;ka=315}else{d=14294;e=14294;while(1){if(!(a[d>>0]|0)){d=e;break S}d=d+1|0;e=d;if(!(e&3)){ka=315;break}}}while(0);if((ka|0)==315){while(1){e=c[d>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))d=d+4|0;else break}if((e&255)<<24>>24)do d=d+1|0;while((a[d>>0]|0)!=0)}g=d-14294|0;if(g>>>0>4294967279)Il();if(g>>>0<11){a[k+15>>0]=g;if(!g){ra=j;ra=ra+g|0;a[ra>>0]=0;$a(k|0,72,21)}else d=j}else{f=g+16&-16;e=(f|0)==0?1:f;d=vf(e)|0;T:do if(!d)do{d=c[5972]|0;c[5972]=d+0;if(!d){d=0;break T}ub[d&3]();d=vf(e)|0}while(!(d|0));while(0);c[j>>2]=d;c[k+12>>2]=f|-2147483648;c[k+8>>2]=g}Vm(d|0,14294,g|0)|0;ra=d;ra=ra+g|0;a[ra>>0]=0;$a(k|0,72,21)}d=c[qa>>2]|0;e=c[pa>>2]|0;if((d|0)!=(e|0)){g=0;do{f=c[e+(g<<2)>>2]|0;if(f){wf(f);e=c[pa>>2]|0;d=c[qa>>2]|0}g=g+1|0;f=d-e>>2}while(g>>>0<f>>>0);if(!((d|0)==(e|0)|(f|0)==0))c[qa>>2]=d+(~((d+-4-e|0)>>>2)<<2)}j=b+28|0;k=b+32|0;d=c[k>>2]|0;e=c[j>>2]|0;if((d|0)==(e|0)){b=fa;i=ra;return b|0}else g=0;do{f=c[e+(g<<2)>>2]|0;if(f){wf(f);e=c[j>>2]|0;d=c[k>>2]|0}g=g+1|0;f=d-e>>2}while(g>>>0<f>>>0);if((d|0)==(e|0)|(f|0)==0){b=fa;i=ra;return b|0}c[k>>2]=d+(~((d+-4-e|0)>>>2)<<2);b=fa;i=ra;return b|0}function Dd(a){a=a|0;a=a+(c[(c[a>>2]|0)+-12>>2]|0)|0;Gd(a);vd(a+92|0);return}function Ed(a){a=a|0;a=a+(c[(c[a>>2]|0)+-12>>2]|0)|0;Gd(a);vd(a+92|0);wf(a);return}function Fd(a){a=a|0;Bd(a+(c[(c[a>>2]|0)+-20>>2]|0)|0);return}function Gd(a){a=a|0;var b=0,d=0,e=0,f=0;c[a>>2]=1652;e=a+92|0;c[e>>2]=1688;xd(e);e=a+60|0;Hd(c[e>>2]|0);c[a+64>>2]=0;c[a+56>>2]=e;c[e>>2]=0;e=c[a+40>>2]|0;f=e;if(e|0){b=a+44|0;d=c[b>>2]|0;if((d|0)!=(e|0))c[b>>2]=d+(~((d+-4-f|0)>>>2)<<2);wf(e)}b=c[a+28>>2]|0;d=b;if(b|0){e=a+32|0;f=c[e>>2]|0;if((f|0)!=(b|0))c[e>>2]=f+(~((f+-4-d|0)>>>2)<<2);wf(b)}b=c[a+16>>2]|0;d=b;if(b|0){e=a+20|0;f=c[e>>2]|0;if((f|0)!=(b|0))c[e>>2]=f+(~((f+-4-d|0)>>>2)<<2);wf(b)}e=c[a+4>>2]|0;if(!e)return;b=a+8|0;d=c[b>>2]|0;if((d|0)!=(e|0))c[b>>2]=d+(~((d+-4-e|0)>>>2)<<2);wf(e);return}function Hd(a){a=a|0;if(!a)return;else{Hd(c[a>>2]|0);Hd(c[a+4>>2]|0);wf(a);return}}function Id(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;f=c[d>>2]|0;if(f){e=c[d+4>>2]|0;if(!e){g=d;e=d;n=6}else while(1){f=c[e>>2]|0;if(!f){n=4;break}else e=f}}else{e=d;n=4}if((n|0)==4){f=c[e+4>>2]|0;if(!f){k=e+8|0;m=0;l=e;f=0;j=e}else{g=e;n=6}}if((n|0)==6){k=g+8|0;c[f+8>>2]=c[k>>2];m=1;l=g;j=e}e=c[k>>2]|0;g=c[e>>2]|0;if((g|0)==(l|0)){c[e>>2]=f;if((l|0)==(b|0)){b=f;g=0}else g=c[e+4>>2]|0}else c[e+4>>2]=f;h=l+12|0;i=(a[h>>0]|0)!=0;if((l|0)!=(d|0)){n=d+8|0;e=c[n>>2]|0;c[k>>2]=e;if((c[c[n>>2]>>2]|0)==(d|0))c[e>>2]=l;else c[e+4>>2]=l;e=c[d>>2]|0;c[j>>2]=e;c[e+8>>2]=l;e=c[d+4>>2]|0;c[l+4>>2]=e;if(e|0)c[e+8>>2]=l;a[h>>0]=a[d+12>>0]|0;b=(b|0)==(d|0)?l:b}if(!(i&(b|0)!=0))return;if(m){a[f+12>>0]=1;return}else k=g;while(1){i=k+8|0;j=c[i>>2]|0;e=k+12|0;f=(a[e>>0]|0)!=0;if((c[j>>2]|0)==(k|0)){if(f)i=k;else{a[e>>0]=1;a[j+12>>0]=0;g=k+4|0;e=c[g>>2]|0;c[j>>2]=e;if(e|0)c[e+8>>2]=j;h=j+8|0;c[i>>2]=c[h>>2];f=c[h>>2]|0;if((c[f>>2]|0)==(j|0)){c[f>>2]=k;e=c[j>>2]|0}else c[f+4>>2]=k;c[g>>2]=j;c[h>>2]=k;i=e;b=(b|0)==(j|0)?k:b}f=c[i>>2]|0;e=(f|0)==0;if(!e?(a[f+12>>0]|0)==0:0){e=i;b=f;n=74;break}g=i+4|0;h=c[g>>2]|0;if(h|0?(o=h+12|0,(a[o>>0]|0)==0):0){n=66;break}a[i+12>>0]=0;e=c[i+8>>2]|0;f=e+12|0;if((e|0)==(b|0)|(a[f>>0]|0)==0){n=63;break}n=c[e+8>>2]|0;e=(c[n>>2]|0)==(e|0)?n+4|0:n}else{if(f)h=k;else{a[e>>0]=1;a[j+12>>0]=0;n=j+4|0;g=c[n>>2]|0;e=c[g>>2]|0;c[n>>2]=e;if(e|0)c[e+8>>2]=j;e=j+8|0;c[g+8>>2]=c[e>>2];f=c[e>>2]|0;if((c[f>>2]|0)==(j|0))c[f>>2]=g;else c[f+4>>2]=g;c[g>>2]=j;c[e>>2]=g;n=c[k>>2]|0;h=c[n+4>>2]|0;b=(b|0)==(n|0)?k:b}g=c[h>>2]|0;if(g|0?(p=g+12|0,(a[p>>0]|0)==0):0){n=37;break}e=c[h+4>>2]|0;if(e|0?(a[e+12>>0]|0)==0:0){f=h;b=e;n=45;break}a[h+12>>0]=0;e=c[h+8>>2]|0;if((e|0)==(b|0)){n=35;break}if(!(a[e+12>>0]|0)){b=e;n=35;break}n=c[e+8>>2]|0;e=(c[n>>2]|0)==(e|0)?n+4|0:n}k=c[e>>2]|0}do if((n|0)==35){a[b+12>>0]=1;return}else if((n|0)==37){b=c[h+4>>2]|0;if(b|0?(a[b+12>>0]|0)==0:0){f=h;n=45;break}a[p>>0]=1;a[h+12>>0]=0;f=g+4|0;b=c[f>>2]|0;c[h>>2]=b;if(b|0)c[b+8>>2]=h;b=h+8|0;c[g+8>>2]=c[b>>2];e=c[b>>2]|0;if((c[e>>2]|0)==(h|0))c[e>>2]=g;else c[e+4>>2]=g;c[f>>2]=h;c[b>>2]=g;f=g;b=h;n=45}else if((n|0)==63){a[f>>0]=1;return}else if((n|0)==66){if(!e?(a[f+12>>0]|0)==0:0){e=i;b=f;n=74;break}a[o>>0]=1;a[i+12>>0]=0;b=c[h>>2]|0;c[g>>2]=b;if(b|0)c[b+8>>2]=i;b=i+8|0;c[h+8>>2]=c[b>>2];e=c[b>>2]|0;if((c[e>>2]|0)==(i|0))c[e>>2]=h;else c[e+4>>2]=h;c[h>>2]=i;c[b>>2]=h;e=h;b=i;n=74}while(0);if((n|0)==45){g=c[f+8>>2]|0;p=g+12|0;a[f+12>>0]=a[p>>0]|0;a[p>>0]=1;a[b+12>>0]=1;p=g+4|0;f=c[p>>2]|0;b=c[f>>2]|0;c[p>>2]=b;if(b|0)c[b+8>>2]=g;b=g+8|0;c[f+8>>2]=c[b>>2];e=c[b>>2]|0;if((c[e>>2]|0)==(g|0))c[e>>2]=f;else c[e+4>>2]=f;c[f>>2]=g;c[b>>2]=f;return}else if((n|0)==74){h=c[e+8>>2]|0;f=h+12|0;a[e+12>>0]=a[f>>0]|0;a[f>>0]=1;a[b+12>>0]=1;f=c[h>>2]|0;g=f+4|0;b=c[g>>2]|0;c[h>>2]=b;if(b|0)c[b+8>>2]=h;b=h+8|0;c[f+8>>2]=c[b>>2];e=c[b>>2]|0;if((c[e>>2]|0)==(h|0))c[e>>2]=f;else c[e+4>>2]=f;c[g>>2]=h;c[b>>2]=f;return}}
function vc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0,z=0,A=0,B=0,C=0,D=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,ab=0,cb=0,eb=0,fb=0,hb=0,ib=0,jb=0,kb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Kb=0,Nb=0,Pb=0,Qb=0,Rb=0,Sb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0.0,cc=0.0;ac=i;i=i+1776|0;$b=ac+608|0;_b=ac+512|0;Nb=ac+504|0;Zb=ac+488|0;Yb=ac+472|0;Kb=ac+448|0;Ib=ac+432|0;ob=ac+424|0;zb=ac+400|0;yb=ac+376|0;xb=ac+352|0;wb=ac+328|0;vb=ac+304|0;tb=ac+280|0;sb=ac+256|0;rb=ac+232|0;qb=ac+216|0;pb=ac+200|0;fb=ac+184|0;Ab=ac+168|0;eb=ac+152|0;La=ac+144|0;Ka=ac+136|0;Ja=ac+120|0;Ia=ac+112|0;ga=ac+104|0;fa=ac+96|0;da=ac+88|0;ca=ac+80|0;ba=ac+72|0;ia=ac+64|0;ha=ac+56|0;ea=ac+48|0;aa=ac+40|0;cb=ac+1656|0;Ma=ac+632|0;Na=ac;Ha=ac+616|0;kb=ac+1752|0;mb=ac+1740|0;nb=ac+1728|0;hb=ac+1716|0;ib=ac+1704|0;jb=ac+1692|0;db(cb|0,0)|0;Xb=b+656|0;db(cb|0,0)|0;h[Xb>>3]=+(c[cb>>2]|0)+ +(c[cb+4>>2]|0)/1.0e6;Ga=e+4|0;m=c[Ga>>2]|0;n=c[e>>2]|0;q=n;a:do if((m-n|0)==12){k=(a[n+11>>0]|0)<0;if(k)l=c[q>>2]|0;else l=n;if((a[l>>0]|0)==36){if(k)n=c[q>>2]|0;k=vf(12)|0;b:do if(!k)do{k=c[5972]|0;c[5972]=k+0;if(!k){k=0;break b}ub[k&3]();k=vf(12)|0}while(!(k|0));while(0);v=k+4|0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;if(!(a[n>>0]|0))ca=k;else{w=k+8|0;y=cb+4|0;z=cb+8|0;A=b+664|0;B=Na+4|0;C=Na+8|0;D=b+648|0;I=Ma+12|0;J=Ma+24|0;K=cb+12|0;L=cb+24|0;M=cb+4|0;N=Na;O=cb+8|0;P=cb+12|0;Q=cb+16|0;R=cb+20|0;V=cb+4|0;W=cb+8|0;X=cb+12|0;Y=cb+16|0;Z=cb+20|0;_=Ma;l=0;m=0;o=0;while(1){c[cb>>2]=0;c[cb+4>>2]=0;c[cb+8>>2]=0;if(m>>>0>=o>>>0){Cc(k,cb);m=c[cb>>2]|0;o=m;if(m|0){p=c[y>>2]|0;if((p|0)!=(m|0))c[y>>2]=p+(~(((p+-36-o|0)>>>0)/36|0)*36|0);wf(m)}}else{c[m>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[z>>2]=0;c[y>>2]=0;c[cb>>2]=0;c[v>>2]=(c[v>>2]|0)+12}q=c[k>>2]|0;r=(((c[v>>2]|0)-q|0)/12|0)+-1|0;td(A,1);c[Ma>>2]=0;m=c[A>>2]|0;if((m|0)==-1)o=0;else{c[cb>>2]=m;c[M>>2]=_;c[O>>2]=4;c[P>>2]=0;c[Q>>2]=0;c[R>>2]=0;c[aa>>2]=12;c[aa+4>>2]=cb;p=wa(102,aa|0)|0;c:do if(p>>>0<=4294963200)if((p|0)<1)Vb=26;else{m=4;o=Ma;while(1){m=m-p|0;if((m|0)<=0)break c;o=o+p|0;c[cb>>2]=c[A>>2];c[V>>2]=o;c[W>>2]=m;c[X>>2]=0;c[Y>>2]=0;c[Z>>2]=0;c[ia>>2]=12;c[ia+4>>2]=cb;p=wa(102,ia|0)|0;if(p>>>0>4294963200)break;if((p|0)<1){Vb=26;break c}}if(!(c[5356]|0))m=21468;else m=c[(en()|0)+64>>2]|0;c[m>>2]=0-p;Vb=26}else{if(!(c[5356]|0))m=21468;else m=c[(en()|0)+64>>2]|0;c[m>>2]=0-p;Vb=26}while(0);if((Vb|0)==26?(Vb=0,sd(14170,ea),$=c[A>>2]|0,($|0)!=-1):0){c[ha>>2]=$;m=bb(6,ha|0)|0;m=(m|0)==-4?-115:m;if(m>>>0>4294963200){if(!(c[5356]|0))o=21468;else o=c[(en()|0)+64>>2]|0;c[o>>2]=0-m}c[A>>2]=-1}o=c[Ma>>2]|0}c[ba>>2]=o;sd(11073,ba);m=q;if(o|0){t=m+(r*12|0)+4|0;u=m+(r*12|0)+8|0;s=m+(r*12|0)|0;m=0;r=o;do{o=c[A>>2]|0;d:do if((o|0)!=-1){c[cb>>2]=o;c[M>>2]=N;c[O>>2]=12;c[P>>2]=0;c[Q>>2]=0;c[R>>2]=0;c[ca>>2]=12;c[ca+4>>2]=cb;q=wa(102,ca|0)|0;e:do if(q>>>0<=4294963200){if((q|0)>=1){o=12;p=Na;while(1){o=o-q|0;if((o|0)<=0)break d;p=p+q|0;c[cb>>2]=c[A>>2];c[V>>2]=p;c[W>>2]=o;c[X>>2]=0;c[Y>>2]=0;c[Z>>2]=0;c[ga>>2]=12;c[ga+4>>2]=cb;q=wa(102,ga|0)|0;if(q>>>0>4294963200)break;if((q|0)<1)break e}if(!(c[5356]|0))o=21468;else o=c[(en()|0)+64>>2]|0;c[o>>2]=0-q}}else{if(!(c[5356]|0))o=21468;else o=c[(en()|0)+64>>2]|0;c[o>>2]=0-q}while(0);sd(14170,da);o=c[A>>2]|0;if((o|0)!=-1){c[fa>>2]=o;o=bb(6,fa|0)|0;o=(o|0)==-4?-115:o;if(o>>>0>4294963200){if(!(c[5356]|0))p=21468;else p=c[(en()|0)+64>>2]|0;c[p>>2]=0-o}c[A>>2]=-1}}while(0);cc=+g[Na>>2];bc=+g[B>>2];x=+g[C>>2];o=m+1|0;Fb=c[D>>2]|0;Gb=~~((cc*+h[Fb+272>>3]+bc*+h[Fb+296>>3]+x*+h[Fb+320>>3])*1.0e3)>>>0;Ub=~~((cc*+h[Fb+280>>3]+bc*+h[Fb+304>>3]+x*+h[Fb+328>>3])*1.0e3)>>>0;c[Ma+(m*12|0)>>2]=~~((cc*+h[Fb+264>>3]+bc*+h[Fb+288>>3]+x*+h[Fb+312>>3])*1.0e3)>>>0;c[Ma+(m*12|0)+4>>2]=Gb;c[Ma+(m*12|0)+8>>2]=Ub;if((o|0)==3){c[cb>>2]=c[Ma>>2];c[cb+4>>2]=c[Ma+4>>2];c[cb+8>>2]=c[Ma+8>>2];c[K>>2]=c[I>>2];c[K+4>>2]=c[I+4>>2];c[K+8>>2]=c[I+8>>2];c[L>>2]=c[J>>2];c[L+4>>2]=c[J+4>>2];c[L+8>>2]=c[J+8>>2];m=c[t>>2]|0;if(m>>>0<(c[u>>2]|0)>>>0){q=cb;ja=m+36|0;do{c[m>>2]=c[q>>2];m=m+4|0;q=q+4|0}while((m|0)<(ja|0));c[t>>2]=(c[t>>2]|0)+36}else Dc(s,cb);m=0}else m=o;r=r+-1|0}while((r|0)!=0)}l=l+1|0;if(!(a[n+l>>0]|0)){ca=k;break a}m=c[v>>2]|0;o=c[w>>2]|0}}}else Vb=67}else Vb=67;while(0);f:do if((Vb|0)==67){k=vf(12)|0;g:do if(!k)do{k=c[5972]|0;c[5972]=k+0;if(!k){k=0;break g}ub[k&3]();k=vf(12)|0}while(!(k|0));while(0);Ea=k+4|0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;if((m|0)==(n|0))ca=k;else{la=k+8|0;ma=cb+4|0;na=cb+8|0;oa=b+648|0;pa=cb+4|0;qa=cb+8|0;ra=Ha+4|0;sa=Ha+8|0;ta=Na+12|0;ua=Na+24|0;va=cb+12|0;xa=cb+24|0;ya=Ha+5|0;za=cb+4|0;Aa=cb+8|0;Ba=Na+8|0;Ca=Na+16|0;ga=cb+4|0;ka=cb+8|0;da=cb+12|0;fa=cb+16|0;ia=cb+20|0;ca=cb+24|0;ea=cb+28|0;ha=cb+32|0;Da=(k|0)==0;ba=0;h:while(1){l=q+(ba*12|0)|0;m=a[l+11>>0]|0;n=m<<24>>24<0;o=c[q+(ba*12|0)+4>>2]|0;p=m&255;do if(((n?o:p)|0)==1){if(n)l=c[l>>2]|0;else o=p;p=o>>>0>1;m=p?1:o;i:do if(!m)Vb=79;else{n=17162;while(1){if((a[l>>0]|0)!=(a[n>>0]|0))break i;m=m+-1|0;if(!m){Vb=79;break}else{l=l+1|0;n=n+1|0}}}while(0);if((Vb|0)==79?(Vb=0,(o|0)!=0&(p^1)):0){c[cb>>2]=0;c[cb+4>>2]=0;c[cb+8>>2]=0;l=c[Ea>>2]|0;if(l>>>0>=(c[la>>2]|0)>>>0){Cc(k,cb);l=c[cb>>2]|0;m=l;if(l|0){n=c[ma>>2]|0;if((n|0)!=(l|0))c[ma>>2]=n+(~(((n+-36-m|0)>>>0)/36|0)*36|0);wf(l)}}else{c[l>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[na>>2]=0;c[ma>>2]=0;c[cb>>2]=0;c[Ea>>2]=(c[Ea>>2]|0)+12}break}m=c[e>>2]|0;l=m;m=a[m+(ba*12|0)+11>>0]|0;Vb=88}else{l=q;Vb=88}while(0);if((Vb|0)==88){Vb=0;l=l+(ba*12|0)|0;if(m<<24>>24<0)l=c[l>>2]|0;c[Ia>>2]=l;sd(11116,Ia);l=(c[e>>2]|0)+(ba*12|0)|0;if((a[l+11>>0]|0)<0)l=c[l>>2]|0;B=c[oa>>2]|0;aa=B+264|0;o=l;j:do if(!(o&3)){m=l;Vb=97}else{m=l;n=o;while(1){if(!(a[m>>0]|0)){m=n;break j}m=m+1|0;n=m;if(!(n&3)){Vb=97;break}}}while(0);if((Vb|0)==97){while(1){n=c[m>>2]|0;if(!((n&-2139062144^-2139062144)&n+-16843009))m=m+4|0;else break}if((n&255)<<24>>24)do m=m+1|0;while((a[m>>0]|0)!=0)}m=1-o+m|0;while(1){if(!m){Vb=172;break}m=m+-1|0;n=l+m|0;if((a[n>>0]|0)==46){Vb=105;break}}if((Vb|0)==105){Vb=0;if(n){p=14073;do{n=n+1|0;p=p+1|0;m=a[n>>0]|0;o=a[p>>0]|0}while(!(m<<24>>24==0?1:m<<24>>24!=o<<24>>24));if(m<<24>>24==o<<24>>24){w=pf(l,17171)|0;k:do if(w){y=w+74|0;z=a[y>>0]|0;a[y>>0]=z+255|z;z=w+8|0;A=w+4|0;n=c[A>>2]|0;m=(c[z>>2]|0)-n|0;if((m|0)>0){o=m>>>0<5?m:5;Vm(Ha|0,n|0,o|0)|0;c[A>>2]=n+o;m=5-o|0;if(!m)Vb=119;else{n=Ha+o|0;Vb=111}}else{m=5;n=Ha;Vb=111}l:do if((Vb|0)==111){Vb=0;q=w+32|0;r=w+20|0;s=w+44|0;t=w+36|0;u=w+16|0;v=w+28|0;while(1){Ub=a[y>>0]|0;a[y>>0]=Ub+255|Ub;if((c[r>>2]|0)>>>0>(c[s>>2]|0)>>>0)lb[c[t>>2]&31](w,0,0)|0;c[u>>2]=0;c[v>>2]=0;c[r>>2]=0;o=c[w>>2]|0;if(o&20|0){Vb=115;break}p=c[s>>2]|0;c[z>>2]=p;c[A>>2]=p;p=lb[c[q>>2]&31](w,n,m)|0;if((p+1|0)>>>0<2)break;m=m-p|0;if(!m){Vb=119;break l}else n=n+p|0}if((Vb|0)==115?(Vb=0,o&4|0):0)c[w>>2]=o|32;mf(w)|0;if((0-m|0)>>>0>=5){l=0;break k}}while(0);if((Vb|0)==119){Vb=0;mf(w)|0}a[ya>>0]=0;n=a[Ha>>0]|0;m:do if(!(n<<24>>24)){m=14067;Vb=122}else{m=14067;q=Ha;while(1){p=a[m>>0]|0;o=n<<24>>24;if(!(p<<24>>24)){n=0;m=o;Vb=127;break m}o=(o+-65|0)>>>0<26?o|32:o;n=p<<24>>24;n=(n+-65|0)>>>0<26?n|32:n;if((o|0)!=(n|0))break;q=q+1|0;m=m+1|0;n=a[q>>0]|0;if(!(n<<24>>24)){Vb=122;break m}}m=o-n|0}while(0);if((Vb|0)==122){n=a[m>>0]|0;m=0;Vb=127}if((Vb|0)==127){Vb=0;m=m-(n<<24>>24)|0}if(m|0){l=qd(k,l,aa)|0;break};c[cb>>2]=0;c[cb+4>>2]=0;c[cb+8>>2]=0;m=c[Ea>>2]|0;do if(m>>>0<(c[la>>2]|0)>>>0){c[m>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[Aa>>2]=0;c[za>>2]=0;c[cb>>2]=0;c[Ea>>2]=(c[Ea>>2]|0)+12}else{Cc(k,cb);m=c[cb>>2]|0;if(!m)break;n=c[za>>2]|0;if((n|0)!=(m|0))c[za>>2]=n+(~(((n+-36-m|0)>>>0)/36|0)*36|0);wf(m)}while(0);I=c[k>>2]|0;D=(((c[Ea>>2]|0)-I|0)/12|0)+-1|0;R=pf(l,14041)|0;V=B+288|0;W=B+312|0;X=B+272|0;Y=B+296|0;Z=B+320|0;_=B+280|0;$=B+304|0;A=B+328|0;B=I+(D*12|0)+4|0;C=I+(D*12|0)+8|0;D=I+(D*12|0)|0;I=R+74|0;J=R+8|0;K=R+4|0;L=R+32|0;M=R+20|0;N=R+44|0;O=R+36|0;P=R+16|0;Q=R+28|0;m=0;w=0;n=0;y=0;o=0;z=0;p=0;n:while(1){o:while(1){v=m;p:while(1){do{t=Ma;u=1024;q:while(1){q=a[I>>0]|0;q=(q+255|q)&255;a[I>>0]=q;Ub=c[K>>2]|0;m=Ub;r:do if(((c[J>>2]|0)-Ub|0)<=0){r=1;s=t;m=q;while(1){Ub=m<<24>>24;a[I>>0]=Ub+255|Ub;if((c[M>>2]|0)>>>0>(c[N>>2]|0)>>>0)lb[c[O>>2]&31](R,0,0)|0;c[P>>2]=0;c[Q>>2]=0;c[M>>2]=0;m=c[R>>2]|0;if(m&20|0){Vb=145;break}q=c[N>>2]|0;c[J>>2]=q;c[K>>2]=q;q=lb[c[L>>2]&31](R,s,r)|0;if((q+1|0)>>>0<2)break;m=r-q|0;if(!m)break r;r=m;s=s+q|0;m=a[I>>0]|0}do if((Vb|0)==145){Vb=0;if(!(m&4))break;c[R>>2]=m|32}while(0);if((r|0)==1)break n}else{a[t>>0]=a[m>>0]|0;c[K>>2]=m+1}while(0);switch(a[t>>0]|0){case 13:case 10:break q;default:{}}u=u+-1|0;if(!u)break n;else t=t+1|0}a[t>>0]=0;c[Ja>>2]=Na;c[Ja+4>>2]=Ba;c[Ja+8>>2]=Ca}while((qf(Ma,14044,Ja)|0)!=3);m=v+1|0;switch(v|0){case 1:break o;case 0:break p;case 2:break;default:{v=m;continue p}}x=+h[Na>>3];bc=+h[Ba>>3];cc=+h[Ca>>3];Gb=~~((x*+h[aa>>3]+bc*+h[V>>3]+cc*+h[W>>3])*1.0e3)>>>0;Ub=~~((x*+h[X>>3]+bc*+h[Y>>3]+cc*+h[Z>>3])*1.0e3)>>>0;m=~~((x*+h[_>>3]+bc*+h[$>>3]+cc*+h[A>>3])*1.0e3)>>>0;c[cb>>2]=n;c[ga>>2]=o;c[ka>>2]=p;c[da>>2]=w;c[fa>>2]=y;c[ia>>2]=z;c[ca>>2]=Gb;c[ea>>2]=Ub;c[ha>>2]=m;m=c[B>>2]|0;if(m>>>0<(c[C>>2]|0)>>>0){q=cb;ja=m+36|0;do{c[m>>2]=c[q>>2];m=m+4|0;q=q+4|0}while((m|0)<(ja|0));c[B>>2]=(c[B>>2]|0)+36}else Dc(D,cb);v=0}x=+h[Na>>3];bc=+h[Ba>>3];cc=+h[Ca>>3];n=~~((x*+h[aa>>3]+bc*+h[V>>3]+cc*+h[W>>3])*1.0e3)>>>0;o=~~((x*+h[X>>3]+bc*+h[Y>>3]+cc*+h[Z>>3])*1.0e3)>>>0;p=~~((x*+h[_>>3]+bc*+h[$>>3]+cc*+h[A>>3])*1.0e3)>>>0}x=+h[Na>>3];bc=+h[Ba>>3];cc=+h[Ca>>3];w=~~((x*+h[aa>>3]+bc*+h[V>>3]+cc*+h[W>>3])*1.0e3)>>>0;y=~~((x*+h[X>>3]+bc*+h[Y>>3]+cc*+h[Z>>3])*1.0e3)>>>0;z=~~((x*+h[_>>3]+bc*+h[$>>3]+cc*+h[A>>3])*1.0e3)>>>0}mf(R)|0;if(!Da){m=c[Ea>>2]|0;Gb=c[k>>2]|0;Ub=((m-Gb|0)/12|0)+-1|0;if((c[Gb+(Ub*12|0)+4>>2]|0)!=(c[Gb+(Ub*12|0)>>2]|0)){l=k;break}q=m+-12|0;do{n=m+-12|0;c[Ea>>2]=n;o=c[n>>2]|0;p=o;if(!o)m=n;else{m=m+-8|0;n=c[m>>2]|0;if((n|0)!=(o|0))c[m>>2]=n+(~(((n+-36-p|0)>>>0)/36|0)*36|0);wf(o);m=c[Ea>>2]|0}}while((m|0)!=(q|0));l=qd(k,l,aa)|0}else l=0}else l=0;while(0)}else Vb=172}else Vb=172}if((Vb|0)==172){Vb=0;if(!((a[l>>0]|0)==35&(c[5354]|0)!=0))break;K=B+288|0;L=B+312|0;M=B+272|0;N=B+296|0;O=B+320|0;P=B+280|0;Q=B+304|0;J=B+328|0;while(1){l=l+1|0;c[cb>>2]=0;c[cb+4>>2]=0;c[cb+8>>2]=0;m=c[Ea>>2]|0;if(m>>>0>=(c[la>>2]|0)>>>0){Cc(k,cb);m=c[cb>>2]|0;n=m;if(m|0){o=c[pa>>2]|0;if((o|0)!=(m|0))c[pa>>2]=o+(~(((o+-36-n|0)>>>0)/36|0)*36|0);wf(m)}}else{c[m>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[qa>>2]=0;c[pa>>2]=0;c[cb>>2]=0;c[Ea>>2]=(c[Ea>>2]|0)+12}B=c[k>>2]|0;C=(((c[Ea>>2]|0)-B|0)/12|0)+-1|0;w=c[5354]|0;y=w+74|0;z=a[y>>0]|0;a[y>>0]=z+255|z;z=w+8|0;A=w+4|0;n=c[A>>2]|0;m=(c[z>>2]|0)-n|0;if((m|0)>0){o=m>>>0<4?m:4;Vm(Ma|0,n|0,o|0)|0;c[A>>2]=n+o;m=4-o|0;if(m|0){n=Ma+o|0;Vb=182}}else{m=4;n=Ma;Vb=182}s:do if((Vb|0)==182){Vb=0;q=w+32|0;r=w+20|0;s=w+44|0;t=w+36|0;u=w+16|0;v=w+28|0;while(1){Ub=a[y>>0]|0;a[y>>0]=Ub+255|Ub;if((c[r>>2]|0)>>>0>(c[s>>2]|0)>>>0)lb[c[t>>2]&31](w,0,0)|0;c[u>>2]=0;c[v>>2]=0;c[r>>2]=0;o=c[w>>2]|0;if(o&20|0){Vb=186;break}p=c[s>>2]|0;c[z>>2]=p;c[A>>2]=p;p=lb[c[q>>2]&31](w,n,m)|0;if((p+1|0)>>>0<2)break;m=m-p|0;if(!m)break s;else n=n+p|0}if((Vb|0)==186?(Vb=0,o&4|0):0)c[w>>2]=o|32;if((m|0)==4){Vb=191;break h}}while(0);n=c[Ma>>2]|0;c[Ka>>2]=n;sd(14078,Ka);if(n|0){D=B+(C*12|0)+4|0;I=B+(C*12|0)+8|0;C=B+(C*12|0)|0;m=0;B=n;do{w=c[5354]|0;y=w+74|0;z=a[y>>0]|0;a[y>>0]=z+255|z;z=w+8|0;A=w+4|0;o=c[A>>2]|0;n=(c[z>>2]|0)-o|0;if((n|0)>0){p=n>>>0<12?n:12;Vm(Ha|0,o|0,p|0)|0;c[A>>2]=o+p;n=12-p|0;if(n|0){o=Ha+p|0;Vb=197}}else{n=12;o=Ha;Vb=197}t:do if((Vb|0)==197){Vb=0;q=w+32|0;r=w+20|0;s=w+44|0;t=w+36|0;u=w+16|0;v=w+28|0;while(1){Ub=a[y>>0]|0;a[y>>0]=Ub+255|Ub;if((c[r>>2]|0)>>>0>(c[s>>2]|0)>>>0)lb[c[t>>2]&31](w,0,0)|0;c[u>>2]=0;c[v>>2]=0;c[r>>2]=0;p=c[w>>2]|0;if(p&20|0){Vb=201;break}p=c[s>>2]|0;c[z>>2]=p;c[A>>2]=p;p=lb[c[q>>2]&31](w,o,n)|0;if((p+1|0)>>>0<2)break;n=n-p|0;if(!n)break t;else o=o+p|0}do if((Vb|0)==201){Vb=0;if(!(p&4))break;c[w>>2]=p|32}while(0);if((12-n|0)>>>0<3){Vb=212;break h}}while(0);x=+g[Ha>>2];bc=+g[ra>>2];cc=+g[sa>>2];n=m+1|0;Gb=~~((x*+h[M>>3]+bc*+h[N>>3]+cc*+h[O>>3])*1.0e3)>>>0;Ub=~~((x*+h[P>>3]+bc*+h[Q>>3]+cc*+h[J>>3])*1.0e3)>>>0;c[Na+(m*12|0)>>2]=~~((x*+h[aa>>3]+bc*+h[K>>3]+cc*+h[L>>3])*1.0e3)>>>0;c[Na+(m*12|0)+4>>2]=Gb;c[Na+(m*12|0)+8>>2]=Ub;if((n|0)==3){c[cb>>2]=c[Na>>2];c[cb+4>>2]=c[Na+4>>2];c[cb+8>>2]=c[Na+8>>2];c[va>>2]=c[ta>>2];c[va+4>>2]=c[ta+4>>2];c[va+8>>2]=c[ta+8>>2];c[xa>>2]=c[ua>>2];c[xa+4>>2]=c[ua+4>>2];c[xa+8>>2]=c[ua+8>>2];m=c[D>>2]|0;if(m>>>0<(c[I>>2]|0)>>>0){q=cb;ja=m+36|0;do{c[m>>2]=c[q>>2];m=m+4|0;q=q+4|0}while((m|0)<(ja|0));c[D>>2]=(c[D>>2]|0)+36}else Dc(C,cb);m=0}else m=n;B=B+-1|0;c[Ma>>2]=B}while((B|0)!=0)}if((a[l>>0]|0)!=35){l=k;break}}}if(!l)break}l=ba+1|0;q=c[e>>2]|0;if(l>>>0>=(((c[Ga>>2]|0)-q|0)/12|0)>>>0){ca=k;break f}else ba=l}f=(c[e>>2]|0)+(ba*12|0)|0;if((a[f+11>>0]|0)<0)f=c[f>>2]|0;c[La>>2]=f;rd(11141,La);$b=0;i=ac;return $b|0}}while(0);db(cb|0,0)|0;cc=+(c[cb>>2]|0)+ +(c[cb+4>>2]|0)/1.0e6-+h[Xb>>3];db(cb|0,0)|0;h[Xb>>3]=+(c[cb>>2]|0)+ +(c[cb+4>>2]|0)/1.0e6;h[eb>>3]=cc;sd(11167,eb);sd(11195,Ab);k=vf(48)|0;u:do if(!k)while(1){k=c[5972]|0;c[5972]=k+0;if(!k){Eb=0;break u}ub[k&3]();k=vf(48)|0;if(k|0){Eb=k;break}}else Eb=k;while(0);Ub=b+648|0;$=c[Ub>>2]|0;_=c[$+336>>2]|0;aa=c[$+340>>2]|0;$=c[$+344>>2]|0;c[Eb>>2]=0;M=Eb+4|0;c[M>>2]=0;N=Eb+8|0;c[N>>2]=0;Fb=Eb+24|0;Gb=Eb+36|0;ba=ca+4|0;k=c[ca>>2]|0;v:do if((c[ba>>2]|0)!=(k|0)){O=Eb;P=eb+4|0;Q=eb+8|0;R=eb+4|0;V=Ab+4|0;W=Ab+4|0;X=R;Y=cb+4|0;Z=cb+8|0;L=0;w:while(1){J=k;I=J+(L*12|0)|0;J=J+(L*12|0)+4|0;m=c[J>>2]|0;l=c[I>>2]|0;Db=m-l|0;k=(Db|0)/36|0;n=k*3|0;if(!Db){o=0;p=0;k=m}else{if(n>>>0>178956970){Vb=227;break}l=k*72|0;l=(l|0)==0?1:l;k=vf(l)|0;x:do if(!k)do{k=c[5972]|0;c[5972]=k+0;if(!k){k=0;break x}ub[k&3]();k=vf(l)|0}while(!(k|0));while(0);o=k;p=k+(n*24|0)|0;l=c[I>>2]|0;k=c[J>>2]|0}Db=k-l|0;m=(Db|0)/36|0;if(!Db){l=0;k=0}else{if(m>>>0>178956970){Vb=234;break}l=m*24|0;k=vf(l)|0;y:do if(!k)do{k=c[5972]|0;c[5972]=k+0;if(!k){k=0;break y}ub[k&3]();k=vf(l)|0}while(!(k|0));while(0);l=k+(m*24|0)|0}c[P>>2]=0;c[Q>>2]=0;c[eb>>2]=R;db(Ab|0,0)|0;x=+(c[Ab>>2]|0)+ +(c[V>>2]|0)/1.0e6;if((c[J>>2]|0)!=(c[I>>2]|0)){D=0;r=o;C=k;n=k;while(1){do if(((D>>>0)%1e3|0|0)==0?(db(Ab|0,0)|0,!((a[23892]|0)==0?1:!(+(c[Ab>>2]|0)+ +(c[W>>2]|0)/1.0e6-x>2.0))):0){Vb=((c[J>>2]|0)-(c[I>>2]|0)|0)/36|0;c[fb>>2]=11575;c[fb+4>>2]=D+1;c[fb+8>>2]=Vb;lf(1928,14126,fb);if((c[487]|0)>>>0>(c[489]|0)>>>0?(lb[c[1964>>2]&31](1928,0,0)|0,(c[487]|0)==0):0){B=0;A=p;break}k=c[483]|0;m=c[484]|0;if(k>>>0<m>>>0)lb[c[1968>>2]&31](1928,k-m|0,1)|0;c[486]=0;c[489]=0;c[487]=0;c[484]=0;c[483]=0;B=0;A=p}else{B=0;A=p}while(0);while(1){y=c[I>>2]|0;u=c[y+(D*36|0)+(B*12|0)>>2]|0;v=c[y+(D*36|0)+(B*12|0)+4>>2]|0;y=c[y+(D*36|0)+(B*12|0)+8>>2]|0;q=Om(u|0,((u|0)<0)<<31>>31|0,15,0)|0;q=Rm(q|0,E|0,30,0)|0;z=E;Vb=Om(v|0,((v|0)<0)<<31>>31|0,15,0)|0;Vb=Rm(Vb|0,E|0,30,0)|0;Vb=_m(Vb|0,E|0,10)|0;z=E^z;s=Om(y|0,((y|0)<0)<<31>>31|0,15,0)|0;s=Rm(s|0,E|0,30,0)|0;s=_m(s|0,E|0,20)|0;s=Vb^q^s;z=o;q=0;while(1){k=c[R>>2]|0;do if(k){while(1){m=c[k+16>>2]|0;if(s>>>0<m>>>0){m=c[k>>2]|0;if(!m){Vb=255;break}else k=m}else{if(m>>>0>=s>>>0){Vb=260;break}p=k+4|0;m=c[p>>2]|0;if(!m){Vb=259;break}else k=m}}if((Vb|0)==255){c[Ab>>2]=k;m=k;p=k;break}else if((Vb|0)==259){c[Ab>>2]=k;m=k;break}else if((Vb|0)==260){c[Ab>>2]=k;m=k;p=Ab;break}}else{c[Ab>>2]=R;m=X;p=R}while(0);k=c[p>>2]|0;if(!k){k=vf(32)|0;z:do if(!k)do{k=c[5972]|0;c[5972]=k+0;if(!k){k=0;break z}ub[k&3]();k=vf(32)|0}while(!(k|0));while(0);c[k+16>>2]=s;c[k+20>>2]=0;c[k+24>>2]=0;c[k+28>>2]=0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=m;c[p>>2]=k;m=c[c[eb>>2]>>2]|0;if(!m)m=k;else{c[eb>>2]=m;m=c[p>>2]|0}Jc(c[P>>2]|0,m);c[Q>>2]=(c[Q>>2]|0)+1}if(q>>>0>=(c[k+24>>2]|0)-(c[k+20>>2]|0)>>2>>>0){Vb=308;break}k=c[R>>2]|0;do if(k){while(1){m=c[k+16>>2]|0;if(s>>>0<m>>>0){m=c[k>>2]|0;if(!m){Vb=273;break}else k=m}else{if(m>>>0>=s>>>0){Vb=278;break}p=k+4|0;m=c[p>>2]|0;if(!m){Vb=277;break}else k=m}}if((Vb|0)==273){c[Ab>>2]=k;m=k;p=k;break}else if((Vb|0)==277){c[Ab>>2]=k;m=k;break}else if((Vb|0)==278){c[Ab>>2]=k;m=k;p=Ab;break}}else{c[Ab>>2]=R;m=X;p=R}while(0);k=c[p>>2]|0;if(!k){k=vf(32)|0;A:do if(!k)do{k=c[5972]|0;c[5972]=k+0;if(!k){k=0;break A}ub[k&3]();k=vf(32)|0}while(!(k|0));while(0);c[k+16>>2]=s;c[k+20>>2]=0;c[k+24>>2]=0;c[k+28>>2]=0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=m;c[p>>2]=k;m=c[c[eb>>2]>>2]|0;if(!m)m=k;else{c[eb>>2]=m;m=c[p>>2]|0}Jc(c[P>>2]|0,m);c[Q>>2]=(c[Q>>2]|0)+1}p=c[(c[k+20>>2]|0)+(q<<2)>>2]|0;k=(c[z+(p*24|0)>>2]|0)-u|0;m=(c[z+(p*24|0)+4>>2]|0)-v|0;p=(c[z+(p*24|0)+8>>2]|0)-y|0;if(!((k+30|0)>>>0>60|(m+30|0)>>>0>60|(p+30|0)>>>0>60)?(Db=((k|0)<0)<<31>>31,Db=Ym(k|0,Db|0,k|0,Db|0)|0,Cb=E,Vb=((m|0)<0)<<31>>31,Vb=Ym(m|0,Vb|0,m|0,Vb|0)|0,Cb=Om(Vb|0,E|0,Db|0,Cb|0)|0,Db=E,Vb=((p|0)<0)<<31>>31,Vb=Ym(p|0,Vb|0,p|0,Vb|0)|0,Vb=Om(Cb|0,Db|0,Vb|0,E|0)|0,Db=E,Db>>>0<0|(Db|0)==0&Vb>>>0<901):0){Vb=289;break}q=q+1|0}do if((Vb|0)==289){Vb=0;k=c[R>>2]|0;do if(k){while(1){m=c[k+16>>2]|0;if(s>>>0<m>>>0){m=c[k>>2]|0;if(!m){Vb=292;break}else k=m}else{if(m>>>0>=s>>>0){Vb=297;break}p=k+4|0;m=c[p>>2]|0;if(!m){Vb=296;break}else k=m}}if((Vb|0)==292){Vb=0;c[Ab>>2]=k;m=k;p=k;break}else if((Vb|0)==296){Vb=0;c[Ab>>2]=k;m=k;break}else if((Vb|0)==297){Vb=0;c[Ab>>2]=k;m=k;p=Ab;break}}else{c[Ab>>2]=R;m=X;p=R}while(0);k=c[p>>2]|0;if(!k){k=vf(32)|0;B:do if(!k)do{k=c[5972]|0;c[5972]=k+0;if(!k){k=0;break B}ub[k&3]();k=vf(32)|0}while(!(k|0));while(0);c[k+16>>2]=s;c[k+20>>2]=0;c[k+24>>2]=0;c[k+28>>2]=0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=m;c[p>>2]=k;m=c[c[eb>>2]>>2]|0;if(!m)m=k;else{c[eb>>2]=m;m=c[p>>2]|0}Jc(c[P>>2]|0,m);c[Q>>2]=(c[Q>>2]|0)+1}k=c[(c[k+20>>2]|0)+(q<<2)>>2]|0;p=A;q=o}else if((Vb|0)==308){Vb=0;k=c[R>>2]|0;do if(k){while(1){m=c[k+16>>2]|0;if(s>>>0<m>>>0){m=c[k>>2]|0;if(!m){Vb=311;break}else k=m}else{if(m>>>0>=s>>>0){Vb=316;break}p=k+4|0;m=c[p>>2]|0;if(!m){Vb=315;break}else k=m}}if((Vb|0)==311){Vb=0;c[Ab>>2]=k;q=k;p=k;break}else if((Vb|0)==315){Vb=0;c[Ab>>2]=k;q=k;break}else if((Vb|0)==316){Vb=0;c[Ab>>2]=k;q=k;p=Ab;break}}else{c[Ab>>2]=R;q=X;p=R}while(0);k=c[p>>2]|0;if(!k){k=vf(32)|0;C:do if(!k)while(1){k=c[5972]|0;c[5972]=k+0;if(!k){m=0;break C}ub[k&3]();k=vf(32)|0;if(k|0){m=k;break}}else m=k;while(0);c[m+16>>2]=s;c[m+20>>2]=0;c[m+24>>2]=0;c[m+28>>2]=0;c[m>>2]=0;c[m+4>>2]=0;c[m+8>>2]=q;c[p>>2]=m;k=c[c[eb>>2]>>2]|0;if(!k)k=m;else{c[eb>>2]=k;k=c[p>>2]|0}Jc(c[P>>2]|0,k);c[Q>>2]=(c[Q>>2]|0)+1;k=m}w=(r-o|0)/24|0;c[Ab>>2]=w;m=k+24|0;p=c[m>>2]|0;if(p>>>0<(c[k+28>>2]|0)>>>0){c[p>>2]=w;c[m>>2]=p+4}else Kc(k+20|0,Ab);t=r;if(t>>>0<A>>>0){k=r;c[r>>2]=u;c[k+4>>2]=v;c[k+8>>2]=y;k=t+12|0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;k=w;r=t+24|0;p=A;q=o;break}k=w+1|0;if(k>>>0>178956970){Vb=331;break w}Db=(A-o|0)/24|0;p=Db<<1;p=Db>>>0<89478485?(p>>>0<k>>>0?k:p):178956970;if(!p)k=0;else{if(p>>>0>178956970){Vb=334;break w}m=p*24|0;m=(m|0)==0?1:m;k=vf(m)|0;D:do if(!k)do{k=c[5972]|0;c[5972]=k+0;if(!k){k=0;break D}ub[k&3]();k=vf(m)|0}while(!(k|0));while(0)}m=k+(w*24|0)|0;q=m;p=k+(p*24|0)|0;c[m>>2]=u;c[k+(w*24|0)+4>>2]=v;c[k+(w*24|0)+8>>2]=y;Db=k+(w*24|0)+12|0;r=m+24|0;c[Db>>2]=0;c[Db+4>>2]=0;c[Db+8>>2]=0;if((t|0)==(z|0))k=z;else{s=t;k=q;while(1){Db=m+-24|0;Cb=s;s=s+-24|0;c[Db>>2]=c[s>>2];c[Db+4>>2]=c[s+4>>2];c[Db+8>>2]=c[s+8>>2];Db=m+-12|0;q=Cb+-12|0;c[Db>>2]=0;Bb=m+-8|0;c[Bb>>2]=0;c[m+-4>>2]=0;c[Db>>2]=c[q>>2];Db=Cb+-8|0;c[Bb>>2]=c[Db>>2];Cb=Cb+-4|0;c[m+-4>>2]=c[Cb>>2];c[Cb>>2]=0;c[Db>>2]=0;c[q>>2]=0;m=k+-24|0;q=m;if((s|0)==(z|0)){k=t;break}else k=q}}v=o;if((k|0)!=(v|0))do{m=c[k+-12>>2]|0;s=m;if(m|0){t=k+-8|0;u=c[t>>2]|0;if((u|0)!=(m|0))c[t>>2]=u+(~((u+-4-s|0)>>>2)<<2);wf(m)}k=k+-24|0}while((k|0)!=(v|0));if(!o){k=w;break}wf(o);k=w}while(0);c[cb+(B<<2)>>2]=k;B=B+1|0;if(B>>>0>=3)break;else{A=p;o=q}}z=c[cb>>2]|0;o=c[Y>>2]|0;do if((z|0)!=(o|0)?(Oa=c[Z>>2]|0,!((z|0)==(Oa|0)|(o|0)==(Oa|0))):0){A=q;v=A+(z*24|0)+12|0;w=A+(z*24|0)+16|0;k=c[w>>2]|0;m=c[v>>2]|0;y=k;u=m;if(((k|0)!=(m|0)?(Pa=c[A+(o*24|0)+16>>2]|0,Qa=c[A+(o*24|0)+12>>2]|0,Ra=k-m>>2,Sa=Qa,(Pa|0)!=(Qa|0)):0)?(Cb=c[A+(Oa*24|0)+16>>2]|0,Db=c[A+(Oa*24|0)+12>>2]|0,Ta=Pa-Qa>>2,Ua=Db,Va=Cb-Db>>2,(Cb|0)!=(Db|0)):0){k=0;s=0;do{t=c[u+(s<<2)>>2]|0;o=0;do{if((t|0)==(c[Sa+(o<<2)>>2]|0)){m=0;do{k=k|(t|0)==(c[Ua+(m<<2)>>2]|0);m=m+1|0}while(m>>>0<Va>>>0)}o=o+1|0}while(o>>>0<Ta>>>0);s=s+1|0}while(s>>>0<Ra>>>0);if(k){m=C;break}}t=n-C|0;s=(t|0)/24|0;c[Ab>>2]=s;if(y>>>0<(c[A+(z*24|0)+20>>2]|0)>>>0){c[y>>2]=s;c[w>>2]=y+4}else Kc(v,Ab);k=c[Y>>2]|0;c[Ab>>2]=s;m=A+(k*24|0)+16|0;o=c[m>>2]|0;if(o>>>0<(c[A+(k*24|0)+20>>2]|0)>>>0){c[o>>2]=s;c[m>>2]=o+4}else Kc(A+(k*24|0)+12|0,Ab);k=c[Z>>2]|0;c[Ab>>2]=s;m=A+(k*24|0)+16|0;o=c[m>>2]|0;if(o>>>0<(c[A+(k*24|0)+20>>2]|0)>>>0){c[o>>2]=s;c[m>>2]=o+4}else Kc(A+(k*24|0)+12|0,Ab);if((n|0)!=(l|0)){m=n;c[m>>2]=c[cb>>2];c[m+4>>2]=c[cb+4>>2];c[m+8>>2]=c[cb+8>>2];c[m+12>>2]=c[cb+12>>2];c[m+16>>2]=c[cb+16>>2];c[m+20>>2]=c[cb+20>>2];m=C;n=n+24|0;break}k=s+1|0;if(k>>>0>178956970){Vb=372;break w}Db=(l-C|0)/24|0;m=Db<<1;m=Db>>>0<89478485?(m>>>0<k>>>0?k:m):178956970;if(!m)k=0;else{if(m>>>0>178956970){Vb=375;break w}l=m*24|0;l=(l|0)==0?1:l;k=vf(l)|0;E:do if(!k)do{k=c[5972]|0;c[5972]=k+0;if(!k){k=0;break E}ub[k&3]();k=vf(l)|0}while(!(k|0));while(0)}Db=k+(s*24|0)|0;l=k+(m*24|0)|0;c[Db>>2]=c[cb>>2];c[Db+4>>2]=c[cb+4>>2];c[Db+8>>2]=c[cb+8>>2];c[Db+12>>2]=c[cb+12>>2];c[Db+16>>2]=c[cb+16>>2];c[Db+20>>2]=c[cb+20>>2];n=Db+24|0;k=Db+(((t|0)/-24|0)*24|0)|0;m=k;if((t|0)>0)Vm(k|0,C|0,t|0)|0;if(!C)break;wf(C)}else m=C;while(0);D=D+1|0;if(D>>>0>=(((c[J>>2]|0)-(c[I>>2]|0)|0)/36|0)>>>0){K=m;break}else{o=q;C=m}}D=K;if((n|0)==(K|0)){u=l;t=K}else{I=q;J=(n-K|0)/24|0;C=0;while(1){A=c[D+(C*24|0)>>2]|0;s=c[D+(C*24|0)+4>>2]|0;B=c[I+(A*24|0)+16>>2]|0;A=c[I+(A*24|0)+12>>2]|0;y=A;F:do if((B|0)==(A|0)){t=2;m=0;o=I+(s*24|0)+16|0;k=I+(s*24|0)+12|0}else{z=B-A>>2;k=I+(s*24|0)+12|0;o=I+(s*24|0)+16|0;w=0;m=0;while(1){u=c[y+(w<<2)>>2]|0;G:do if((u|0)!=(C|0)?(Wa=c[o>>2]|0,Xa=c[k>>2]|0,Ya=Xa,(Wa|0)!=(Xa|0)):0){v=Wa-Xa>>2;s=0;while(1){Db=c[Ya+(s<<2)>>2]|0;Cb=(Db|0)==(C|0);Db=(u|0)==(Db|0);t=Cb?7:Db&1;m=Cb?m:Db?u:m;switch(t&7){case 4:break G;case 7:case 0:break;default:break F}s=s+1|0;if(s>>>0>=v>>>0)break G}}while(0);w=w+1|0;if(w>>>0>=z>>>0){t=2;break}}}while(0);c[D+(C*24|0)+12>>2]=(t|0)==2?-1:m;t=c[D+(C*24|0)+8>>2]|0;m=c[o>>2]|0;k=c[k>>2]|0;z=k;H:do if((m|0)==(k|0)){s=2;o=0;m=I+(t*24|0)+16|0;k=I+(t*24|0)+12|0}else{y=m-k>>2;k=I+(t*24|0)+12|0;m=I+(t*24|0)+16|0;w=0;o=0;while(1){u=c[z+(w<<2)>>2]|0;I:do if((u|0)!=(C|0)?(Za=c[m>>2]|0,_a=c[k>>2]|0,ab=_a,(Za|0)!=(_a|0)):0){v=Za-_a>>2;t=0;while(1){Db=c[ab+(t<<2)>>2]|0;Cb=(Db|0)==(C|0);Db=(u|0)==(Db|0);s=Cb?7:Db&1;o=Cb?o:Db?u:o;switch(s&7){case 4:break I;case 7:case 0:break;default:break H}t=t+1|0;if(t>>>0>=v>>>0)break I}}while(0);w=w+1|0;if(w>>>0>=y>>>0){s=2;break}}}while(0);c[D+(C*24|0)+16>>2]=(s|0)==2?-1:o;m=c[m>>2]|0;k=c[k>>2]|0;z=k;J:do if((m|0)==(k|0)){m=2;k=0}else{y=m-k>>2;w=0;k=0;v=A;while(1){s=c[z+(w<<2)>>2]|0;K:do if((s|0)!=(C|0)){t=v;if((B|0)==(v|0))m=B;else{u=B-v>>2;o=0;while(1){Db=c[t+(o<<2)>>2]|0;Cb=(Db|0)==(C|0);Db=(s|0)==(Db|0);m=Cb?7:Db&1;k=Cb?k:Db?s:k;switch(m&7){case 4:{m=v;break K}case 7:case 0:break;default:break J}o=o+1|0;if(o>>>0>=u>>>0){m=v;break K}}}}else m=v;while(0);w=w+1|0;if(w>>>0>=y>>>0){m=2;break}else v=m}}while(0);c[D+(C*24|0)+20>>2]=(m|0)==2?-1:k;C=C+1|0;if(C>>>0>=J>>>0){u=l;t=K;break}}}}else{u=l;r=o;q=o;t=k;n=k}Lc(c[R>>2]|0);k=c[M>>2]|0;Db=c[N>>2]|0;l=Db;if(k>>>0>=Db>>>0){m=c[Eb>>2]|0;s=(k-m|0)/28|0;k=s+1|0;if(k>>>0>153391689){Vb=415;break}Db=(l-m|0)/28|0;m=Db<<1;m=Db>>>0<76695844?(m>>>0<k>>>0?k:m):153391689;if(!m)k=0;else{if(m>>>0>153391689){Vb=418;break}l=m*28|0;l=(l|0)==0?1:l;k=vf(l)|0;L:do if(!k)do{k=c[5972]|0;c[5972]=k+0;if(!k){k=0;break L}ub[k&3]();k=vf(l)|0}while(!(k|0));while(0)}l=k+(s*28|0)|0;o=k+(m*28|0)|0;c[l>>2]=O;c[k+(s*28|0)+12>>2]=0;c[k+(s*28|0)+4>>2]=q;c[k+(s*28|0)+8>>2]=r;c[k+(s*28|0)+12>>2]=p;c[k+(s*28|0)+24>>2]=0;c[k+(s*28|0)+16>>2]=t;c[k+(s*28|0)+20>>2]=n;c[k+(s*28|0)+24>>2]=u;n=l+28|0;m=c[Eb>>2]|0;k=c[M>>2]|0;if((k|0)==(m|0)){k=m;m=k}else{do{Bb=k;k=k+-28|0;c[l+-28>>2]=c[k>>2];Db=l+-24|0;Cb=Bb+-24|0;c[Db>>2]=0;Na=l+-20|0;c[Na>>2]=0;c[l+-16>>2]=0;c[Db>>2]=c[Cb>>2];Db=Bb+-20|0;c[Na>>2]=c[Db>>2];Na=Bb+-16|0;c[l+-16>>2]=c[Na>>2];c[Na>>2]=0;c[Db>>2]=0;c[Cb>>2]=0;Cb=l+-12|0;Db=Bb+-12|0;c[Cb>>2]=0;Na=l+-8|0;c[Na>>2]=0;c[l+-4>>2]=0;c[Cb>>2]=c[Db>>2];Cb=Bb+-8|0;c[Na>>2]=c[Cb>>2];Bb=Bb+-4|0;c[l+-4>>2]=c[Bb>>2];c[Bb>>2]=0;c[Cb>>2]=0;c[Db>>2]=0;l=l+-28|0}while((k|0)!=(m|0));m=c[Eb>>2]|0;k=c[M>>2]|0}c[Eb>>2]=l;c[M>>2]=n;c[N>>2]=o;t=m;if((k|0)!=(t|0))do{l=c[k+-12>>2]|0;n=l;if(l|0){o=k+-8|0;p=c[o>>2]|0;if((p|0)!=(l|0))c[o>>2]=p+(~(((p+-24-n|0)>>>0)/24|0)*24|0);wf(l)}r=k+-24|0;l=c[r>>2]|0;if(l|0){s=k+-20|0;n=c[s>>2]|0;if((n|0)!=(l|0)){do{o=n+-24|0;c[s>>2]=o;p=c[n+-12>>2]|0;q=p;if(!p)n=o;else{n=n+-8|0;o=c[n>>2]|0;if((o|0)!=(p|0))c[n>>2]=o+(~((o+-4-q|0)>>>2)<<2);wf(p);n=c[s>>2]|0}}while((n|0)!=(l|0));l=c[r>>2]|0}wf(l)}k=k+-28|0}while((k|0)!=(t|0));if(m|0)wf(m)}else{c[k>>2]=O;c[k+4>>2]=q;c[k+8>>2]=r;c[k+12>>2]=p;c[k+16>>2]=t;c[k+20>>2]=n;c[k+24>>2]=u;c[M>>2]=(c[M>>2]|0)+28}k=c[ca>>2]|0;L=L+1|0;if(L>>>0>=(((c[ba>>2]|0)-k|0)/12|0)>>>0){Pb=Eb;Qb=M;break v}}if((Vb|0)==227){ac=Fa(4)|0;c[ac>>2]=8316;$a(ac|0,1336,91)}else if((Vb|0)==234){ac=Fa(4)|0;c[ac>>2]=8316;$a(ac|0,1336,91)}else if((Vb|0)==331)Bl();else if((Vb|0)==334){ac=Fa(4)|0;c[ac>>2]=8316;$a(ac|0,1336,91)}else if((Vb|0)==372)Bl();else if((Vb|0)==375){ac=Fa(4)|0;c[ac>>2]=8316;$a(ac|0,1336,91)}else if((Vb|0)==415)Bl();else if((Vb|0)==418){ac=Fa(4)|0;c[ac>>2]=8316;$a(ac|0,1336,91)}}else{Pb=Eb;Qb=M}while(0);Ec(Ab,ca);c[Fb>>2]=c[Ab>>2];c[Fb+4>>2]=c[Ab+4>>2];c[Fb+8>>2]=c[Ab+8>>2];Fc(Ab,ca);c[Gb>>2]=c[Ab>>2];c[Gb+4>>2]=c[Ab+4>>2];c[Gb+8>>2]=c[Ab+8>>2];m=c[Fb>>2]|0;n=c[Gb>>2]|0;Cb=Eb+28|0;o=c[Cb>>2]|0;y=Eb+40|0;p=c[y>>2]|0;z=Eb+32|0;q=c[z>>2]|0;t=q+$|0;k=c[(c[5352]|0)+348>>2]|0;l=(k|0)==1;v=l?((n+m|0)/2|0)-_|0:0;u=l?((p+o|0)/2|0)-aa|0:0;t=l?t:(k|0)==2?0:t;k=c[Qb>>2]|0;l=c[Pb>>2]|0;w=l;if((k|0)==(l|0)){l=p;k=q}else{n=(k-l|0)/28|0;m=0;do{k=c[w+(m*28|0)+8>>2]|0;l=c[w+(m*28|0)+4>>2]|0;o=l;if((k|0)!=(l|0)){l=(k-l|0)/24|0;k=0;do{Db=o+(k*24|0)|0;c[Db>>2]=(c[Db>>2]|0)-v;Db=o+(k*24|0)+4|0;c[Db>>2]=(c[Db>>2]|0)-u;Db=o+(k*24|0)+8|0;c[Db>>2]=(c[Db>>2]|0)-t;k=k+1|0}while(k>>>0<l>>>0)}m=m+1|0}while(m>>>0<n>>>0);m=c[Fb>>2]|0;n=c[Gb>>2]|0;o=c[Cb>>2]|0;l=c[y>>2]|0;k=c[z>>2]|0}s=Eb+44|0;fb=c[s>>2]|0;Db=Eb+12|0;c[Db>>2]=n-m;Bb=Eb+16|0;c[Bb>>2]=l-o;r=Eb+20|0;c[r>>2]=fb-k;c[Fb>>2]=m-v;c[Cb>>2]=o-u;c[z>>2]=k-t;c[Gb>>2]=n-v;c[y>>2]=l-u;c[s>>2]=fb-t;k=c[ba>>2]|0;fb=c[ca>>2]|0;m=fb;M:do if((k|0)!=(fb|0)){n=mb+4|0;o=nb+8|0;p=ib+4|0;q=jb+8|0;l=0;k=w;while(1){fb=((c[m+(l*12|0)+4>>2]|0)-(c[m+(l*12|0)>>2]|0)|0)/36|0;eb=((c[k+(l*28|0)+20>>2]|0)-(c[k+(l*28|0)+16>>2]|0)|0)/24|0;c[pb>>2]=fb;c[pb+4>>2]=eb;h[pb+8>>3]=+(eb>>>0)/+(fb>>>0)*100.0;sd(11230,pb);fb=c[ca>>2]|0;fb=(((c[fb+(l*12|0)+4>>2]|0)-(c[fb+(l*12|0)>>2]|0)|0)/36|0)*3|0;eb=c[Eb>>2]|0;eb=((c[eb+(l*28|0)+8>>2]|0)-(c[eb+(l*28|0)+4>>2]|0)|0)/24|0;c[qb>>2]=fb;c[qb+4>>2]=eb;h[qb+8>>3]=+(eb>>>0)/+(fb>>>0)*100.0;sd(11263,qb);cc=+(c[Bb>>2]|0)/1.0e3;bc=+(c[r>>2]|0)/1.0e3;h[rb>>3]=+(c[Db>>2]|0)/1.0e3;h[rb+8>>3]=cc;h[rb+16>>3]=bc;sd(11298,rb);bc=+(c[Cb>>2]|0)/1.0e3;cc=+(c[z>>2]|0)/1.0e3;h[sb>>3]=+(c[Fb>>2]|0)/1.0e3;h[sb+8>>3]=bc;h[sb+16>>3]=cc;sd(11316,sb);cc=+(c[y>>2]|0)/1.0e3;bc=+(c[s>>2]|0)/1.0e3;h[tb>>3]=+(c[Gb>>2]|0)/1.0e3;h[tb+8>>3]=cc;h[tb+16>>3]=bc;sd(11334,tb);Ec(kb,ca);bc=+(c[kb>>2]|0)/1.0e3;Ec(mb,ca);cc=+(c[n>>2]|0)/1.0e3;Ec(nb,ca);x=+(c[o>>2]|0)/1.0e3;h[vb>>3]=bc;h[vb+8>>3]=cc;h[vb+16>>3]=x;sd(11316,vb);Fc(hb,ca);x=+(c[hb>>2]|0)/1.0e3;Fc(ib,ca);cc=+(c[p>>2]|0)/1.0e3;Fc(jb,ca);bc=+(c[q>>2]|0)/1.0e3;h[wb>>3]=x;h[wb+8>>3]=cc;h[wb+16>>3]=bc;sd(11334,wb);fb=c[Ub>>2]|0;bc=+h[fb+288>>3];cc=+h[fb+312>>3];h[xb>>3]=+h[fb+264>>3];h[xb+8>>3]=bc;h[xb+16>>3]=cc;sd(11352,xb);fb=c[Ub>>2]|0;cc=+h[fb+296>>3];bc=+h[fb+320>>3];h[yb>>3]=+h[fb+272>>3];h[yb+8>>3]=cc;h[yb+16>>3]=bc;sd(11352,yb);fb=c[Ub>>2]|0;bc=+h[fb+304>>3];cc=+h[fb+328>>3];h[zb>>3]=+h[fb+280>>3];h[zb+8>>3]=bc;h[zb+16>>3]=cc;sd(11352,zb);if(+(c[Db>>2]|0)/1.0e3>1.0e4){Vb=459;break}if(+(c[Bb>>2]|0)/1.0e3>1.0e4){Vb=459;break}l=l+1|0;if(+(c[r>>2]|0)/1.0e3>1.0e4){Vb=459;break}k=c[ba>>2]|0;fb=c[ca>>2]|0;m=fb;if(l>>>0>=((k-fb|0)/12|0)>>>0){j=k;f=m;break M}k=c[Eb>>2]|0}if((Vb|0)==459){rd(11372,ob);gb(1)}}else{j=k;f=m}while(0);if(f|0){if((j|0)!=(f|0)){do{k=j+-12|0;c[ba>>2]=k;l=c[k>>2]|0;m=l;if(!l)j=k;else{j=j+-8|0;k=c[j>>2]|0;if((k|0)!=(l|0))c[j>>2]=k+(~(((k+-36-m|0)>>>0)/36|0)*36|0);wf(l);j=c[ba>>2]|0}}while((j|0)!=(f|0));f=c[ca>>2]|0}wf(f)}wf(ca);db(Ab|0,0)|0;cc=+(c[Ab>>2]|0)+ +(c[Ab+4>>2]|0)/1.0e6-+h[Xb>>3];db(Ab|0,0)|0;h[Xb>>3]=+(c[Ab>>2]|0)+ +(c[Ab+4>>2]|0)/1.0e6;h[Ib>>3]=cc;sd(11410,Ib);sd(11434,Kb);f=c[Pb>>2]|0;N:do if((c[Qb>>2]|0)==(f|0)){Rb=0;Sb=0}else{jb=Ib+4|0;kb=Ib+8|0;mb=Ib+12|0;nb=Ib+4|0;ib=Kb+8|0;Za=Kb+12|0;cb=Kb+16|0;fb=Kb+20|0;hb=Kb+8|0;Ya=Kb+12|0;ab=Kb+16|0;eb=Kb+20|0;ob=Ib+4|0;pb=Ib+8|0;qb=Ib+12|0;_a=Kb+8|0;rb=Ib+4|0;Xa=0;Wa=0;o=0;n=0;O:while(1){j=vf(36)|0;P:do if(!j)do{j=c[5972]|0;c[5972]=j+0;if(!j){j=0;break P}ub[j&3]();j=vf(36)|0}while(!(j|0));while(0);Ua=c[Ub>>2]|0;Ra=c[Ua+12>>2]|0;Sa=(c[Ua+16>>2]|0)-((Ra|0)/2|0)|0;Ua=c[Ua+352>>2]|0;Ta=Ua&16;Ua=(Ua&4|0)==0;c[j>>2]=0;Va=j+4|0;c[Va>>2]=0;L=j+8|0;c[L>>2]=0;p=j+12|0;M=j+24|0;N=f+(Xa*28|0)|0;q=(c[N>>2]|0)+12|0;c[p>>2]=c[q>>2];c[p+4>>2]=c[q+4>>2];c[p+8>>2]=c[q+8>>2];N=(c[N>>2]|0)+24|0;c[M>>2]=c[N>>2];c[M+4>>2]=c[N+4>>2];c[M+8>>2]=c[N+8>>2];M=((c[j+20>>2]|0)-Sa|0)/(Ra|0)|0;N=M+1|0;c[Nb>>2]=N;sd(14024,Nb);p=c[Va>>2]|0;q=c[j>>2]|0;s=(p-q|0)/52|0;l=q;k=p;Q:do if(N>>>0>s>>>0){l=N-s|0;m=c[L>>2]|0;if(((m-p|0)/52|0)>>>0>=l>>>0)while(1){c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;c[k+20>>2]=0;c[k+24>>2]=0;c[k+12>>2]=k+16;Ab=k+28|0;c[Ab>>2]=0;c[Ab+4>>2]=0;c[Ab+8>>2]=0;c[Ab+12>>2]=0;c[Ab+16>>2]=0;c[Ab+20>>2]=0;k=(c[Va>>2]|0)+52|0;c[Va>>2]=k;l=l+-1|0;if(!l)break Q}if(N>>>0>82595524){Vb=516;break O}Ab=(m-q|0)/52|0;r=Ab<<1;r=Ab>>>0<41297762?(r>>>0<N>>>0?N:r):82595524;if(!r)k=0;else{if(r>>>0>82595524){Vb=519;break O}m=r*52|0;m=(m|0)==0?1:m;k=vf(m)|0;R:do if(!k)do{k=c[5972]|0;c[5972]=k+0;if(!k){k=0;break R}ub[k&3]();k=vf(m)|0}while(!(k|0));while(0)}q=k+(s*52|0)|0;p=q;K=p;m=q;do{c[m>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;c[m+16>>2]=0;c[m+20>>2]=0;c[m+24>>2]=0;c[m+12>>2]=m+16;Ab=m+28|0;c[Ab>>2]=0;c[Ab+4>>2]=0;c[Ab+8>>2]=0;c[Ab+12>>2]=0;c[Ab+16>>2]=0;c[Ab+20>>2]=0;m=K+52|0;K=m;l=l+-1|0}while((l|0)!=0);J=k+(r*52|0)|0;I=c[j>>2]|0;k=c[Va>>2]|0;if((k|0)==(I|0)){l=p;m=I;k=I}else{l=p;do{s=q+-52|0;D=k;k=k+-52|0;c[s>>2]=0;v=q+-48|0;c[v>>2]=0;c[q+-44>>2]=0;u=D+-48|0;p=(c[u>>2]|0)-(c[k>>2]|0)|0;t=(p|0)/40|0;do if(p|0){if(t>>>0>107374182){Vb=530;break O}m=vf(p)|0;S:do if(!m)while(1){m=c[5972]|0;c[5972]=m+0;if(!m){r=0;break S}ub[m&3]();m=vf(p)|0;if(m|0){r=m;break}}else r=m;while(0);c[v>>2]=r;c[s>>2]=r;c[q+-44>>2]=r+(t*40|0);p=c[k>>2]|0;m=(c[u>>2]|0)-p|0;if((m|0)<=0)break;Vm(r|0,p|0,m|0)|0;c[v>>2]=r+(((m>>>0)/40|0)*40|0)}while(0);w=q+-40|0;y=q+-36|0;c[y>>2]=0;z=q+-32|0;c[z>>2]=0;A=q+-36|0;c[w>>2]=A;m=c[D+-40>>2]|0;B=D+-36|0;C=A;T:do if((m|0)!=(B|0)){u=0;r=m;s=A;p=0;while(1){v=r+16|0;do if((A|0)!=(s|0)){if(!u){r=A;while(1){s=c[r+8>>2]|0;if((c[s>>2]|0)==(r|0))r=s;else{r=s;break}}}else{r=u;while(1){s=c[r+4>>2]|0;if(!s)break;else r=s}}t=c[v>>2]|0;if((c[r+16>>2]|0)<(t|0)){p=r;Vb=543;break}if(!p){c[Kb>>2]=C;s=A;r=C;break}while(1){r=c[p+16>>2]|0;if((t|0)<(r|0)){r=c[p>>2]|0;if(!r){Vb=549;break}else p=r}else{if((r|0)>=(t|0)){Vb=554;break}s=p+4|0;r=c[s>>2]|0;if(!r){Vb=553;break}else p=r}}if((Vb|0)==549){Vb=0;r=p;c[Kb>>2]=r;s=p;break}else if((Vb|0)==553){Vb=0;r=p;c[Kb>>2]=r;break}else if((Vb|0)==554){Vb=0;r=p;c[Kb>>2]=r;s=Kb;break}}else{p=C;Vb=543}while(0);do if((Vb|0)==543){Vb=0;if(!u){c[Kb>>2]=C;s=A;r=C;break}else{c[Kb>>2]=p;s=p+4|0;r=p;break}}while(0);if(!(c[s>>2]|0)){p=vf(24)|0;if(!p){do{p=c[5972]|0;c[5972]=p+0;if(!p){p=0;break}ub[p&3]();p=vf(24)|0}while(!(p|0));r=c[Kb>>2]|0}yb=v;zb=c[yb+4>>2]|0;Ab=p+16|0;c[Ab>>2]=c[yb>>2];c[Ab+4>>2]=zb;c[p>>2]=0;c[p+4>>2]=0;c[p+8>>2]=r;c[s>>2]=p;r=c[c[w>>2]>>2]|0;if(r){c[w>>2]=r;p=c[s>>2]|0}Jc(c[y>>2]|0,p);c[z>>2]=(c[z>>2]|0)+1}p=c[m+4>>2]|0;if(!p)while(1){p=c[m+8>>2]|0;if((c[p>>2]|0)==(m|0)){m=p;break}else m=p}else{m=p;while(1){p=c[m>>2]|0;if(!p)break;else m=p}}if((m|0)==(B|0))break T;p=c[A>>2]|0;u=p;r=m;s=c[w>>2]|0}}while(0);c[q+-28>>2]=c[D+-28>>2];m=q+-24|0;c[m>>2]=0;c[q+-20>>2]=0;c[q+-16>>2]=0;p=(q|0)==(D|0);if(!p)Mb(m,c[D+-24>>2]|0,c[D+-20>>2]|0);m=q+-12|0;c[m>>2]=0;c[q+-8>>2]=0;c[q+-4>>2]=0;if(!p)Mb(m,c[D+-12>>2]|0,c[D+-8>>2]|0);q=l+-52|0;l=q}while((k|0)!=(I|0));m=c[j>>2]|0;k=c[Va>>2]|0}c[j>>2]=l;c[Va>>2]=K;c[L>>2]=J;l=m;if((k|0)!=(l|0))do{k=k+-52|0;Hc(k)}while((k|0)!=(l|0));if(m|0)wf(m)}else if(N>>>0<s>>>0?(Hb=l+(N*52|0)|0,(k|0)!=(Hb|0)):0)do{Ab=k+-52|0;c[Va>>2]=Ab;Hc(Ab);k=c[Va>>2]|0}while((k|0)!=(Hb|0));while(0);if((M|0)>=0){l=c[j>>2]|0;k=0;do{c[l+(k*52|0)+24>>2]=(T(k,Ra)|0)+Sa;k=k+1|0}while((k|0)!=(N|0))}Oa=f+(Xa*28|0)+16|0;Pa=f+(Xa*28|0)+20|0;l=c[Pa>>2]|0;k=c[Oa>>2]|0;if((l|0)!=(k|0)){Qa=f+(Xa*28|0)+4|0;Na=0;do{Ja=k;La=c[Ja+(Na*24|0)>>2]|0;Ca=c[Qa>>2]|0;e=c[Ca+(La*24|0)>>2]|0;Ia=c[Ca+(La*24|0)+4>>2]|0;La=c[Ca+(La*24|0)+8>>2]|0;Ka=c[Ja+(Na*24|0)+4>>2]|0;Ea=c[Ca+(Ka*24|0)>>2]|0;Ha=c[Ca+(Ka*24|0)+4>>2]|0;Ka=c[Ca+(Ka*24|0)+8>>2]|0;Ja=c[Ja+(Na*24|0)+8>>2]|0;Da=c[Ca+(Ja*24|0)>>2]|0;Ga=c[Ca+(Ja*24|0)+4>>2]|0;Ja=c[Ca+(Ja*24|0)+8>>2]|0;Ca=(Ka|0)<(La|0)?Ka:La;Ca=(Ja|0)<(Ca|0)?Ja:Ca;Ma=(Ka|0)>(La|0)?Ka:La;m=(Ca-Sa|0)/(Ra|0)|0;Ma=(((Ja|0)>(Ma|0)?Ja:Ma)-Sa|0)/(Ra|0)|0;if((m|0)<=(Ma|0)){K=((e|0)<0)<<31>>31;L=Ea-e|0;M=((L|0)<0)<<31>>31;N=Ka-La|0;O=((N|0)<0)<<31>>31;P=((Ia|0)<0)<<31>>31;Q=Ha-Ia|0;R=((Q|0)<0)<<31>>31;V=Da-e|0;W=((V|0)<0)<<31>>31;X=Ja-La|0;Y=((X|0)<0)<<31>>31;Z=Ga-Ia|0;_=((Z|0)<0)<<31>>31;$=((Ea|0)<0)<<31>>31;aa=Da-Ea|0;ba=((aa|0)<0)<<31>>31;ca=Ja-Ka|0;da=((ca|0)<0)<<31>>31;ea=((Ha|0)<0)<<31>>31;fa=Ga-Ha|0;ga=((fa|0)<0)<<31>>31;ha=e-Ea|0;ia=((ha|0)<0)<<31>>31;ja=La-Ka|0;ka=((ja|0)<0)<<31>>31;la=Ia-Ha|0;ma=((la|0)<0)<<31>>31;na=((Da|0)<0)<<31>>31;oa=e-Da|0;pa=((oa|0)<0)<<31>>31;qa=La-Ja|0;ra=((qa|0)<0)<<31>>31;sa=((Ga|0)<0)<<31>>31;ta=Ia-Ga|0;ua=((ta|0)<0)<<31>>31;va=Ea-Da|0;xa=((va|0)<0)<<31>>31;ya=Ka-Ja|0;za=((ya|0)<0)<<31>>31;Aa=Ha-Ga|0;Ba=((Aa|0)<0)<<31>>31;while(1){k=(T(m,Ra)|0)+Sa|0;if(!((m|0)<0|(k|0)<(Ca|0))){l=(k|0)>(Ka|0);p=(k|0)>(Ja|0);do if(p|((k|0)<=(La|0)|l)){if(p&((k|0)<(La|0)&l)){J=k-La|0;I=((J|0)<0)<<31>>31;y=Ym(J|0,I|0,L|0,M|0)|0;y=Rm(y|0,E|0,N|0,O|0)|0;y=Om(y|0,E|0,e|0,K|0)|0;z=E;A=Ym(J|0,I|0,Q|0,R|0)|0;A=Rm(A|0,E|0,N|0,O|0)|0;A=Om(A|0,E|0,Ia|0,P|0)|0;B=E;C=Ym(J|0,I|0,V|0,W|0)|0;C=Rm(C|0,E|0,X|0,Y|0)|0;C=Om(C|0,E|0,e|0,K|0)|0;D=E;I=Ym(J|0,I|0,Z|0,_|0)|0;I=Rm(I|0,E|0,X|0,Y|0)|0;I=Om(I|0,E|0,Ia|0,P|0)|0;J=E;Vb=606;break}q=(k|0)>(La|0);if(!(p|((k|0)<=(Ka|0)|q))){J=k-Ka|0;I=((J|0)<0)<<31>>31;y=Ym(J|0,I|0,ha|0,ia|0)|0;y=Rm(y|0,E|0,ja|0,ka|0)|0;y=Om(y|0,E|0,Ea|0,$|0)|0;z=E;A=Ym(J|0,I|0,la|0,ma|0)|0;A=Rm(A|0,E|0,ja|0,ka|0)|0;A=Om(A|0,E|0,Ha|0,ea|0)|0;B=E;C=Ym(J|0,I|0,aa|0,ba|0)|0;C=Rm(C|0,E|0,ca|0,da|0)|0;C=Om(C|0,E|0,Ea|0,$|0)|0;D=E;I=Ym(J|0,I|0,fa|0,ga|0)|0;I=Rm(I|0,E|0,ca|0,da|0)|0;I=Om(I|0,E|0,Ha|0,ea|0)|0;J=E;Vb=606;break}if(p&((k|0)<(Ka|0)&q)){J=k-Ka|0;I=((J|0)<0)<<31>>31;y=Ym(J|0,I|0,aa|0,ba|0)|0;y=Rm(y|0,E|0,ca|0,da|0)|0;y=Om(y|0,E|0,Ea|0,$|0)|0;z=E;A=Ym(J|0,I|0,fa|0,ga|0)|0;A=Rm(A|0,E|0,ca|0,da|0)|0;A=Om(A|0,E|0,Ha|0,ea|0)|0;B=E;C=Ym(J|0,I|0,ha|0,ia|0)|0;C=Rm(C|0,E|0,ja|0,ka|0)|0;C=Om(C|0,E|0,Ea|0,$|0)|0;D=E;I=Ym(J|0,I|0,la|0,ma|0)|0;I=Rm(I|0,E|0,ja|0,ka|0)|0;I=Om(I|0,E|0,Ha|0,ea|0)|0;J=E;Vb=606;break}if(!(q|((k|0)<=(Ja|0)|l))){J=k-Ja|0;I=((J|0)<0)<<31>>31;y=Ym(J|0,I|0,va|0,xa|0)|0;y=Rm(y|0,E|0,ya|0,za|0)|0;y=Om(y|0,E|0,Da|0,na|0)|0;z=E;A=Ym(J|0,I|0,Aa|0,Ba|0)|0;A=Rm(A|0,E|0,ya|0,za|0)|0;A=Om(A|0,E|0,Ga|0,sa|0)|0;B=E;C=Ym(J|0,I|0,oa|0,pa|0)|0;C=Rm(C|0,E|0,qa|0,ra|0)|0;C=Om(C|0,E|0,Da|0,na|0)|0;D=E;I=Ym(J|0,I|0,ta|0,ua|0)|0;I=Rm(I|0,E|0,qa|0,ra|0)|0;I=Om(I|0,E|0,Ga|0,sa|0)|0;J=E;Vb=606;break}if(!(q&((k|0)<(Ja|0)&l)))break;J=k-Ja|0;I=((J|0)<0)<<31>>31;y=Ym(J|0,I|0,oa|0,pa|0)|0;y=Rm(y|0,E|0,qa|0,ra|0)|0;y=Om(y|0,E|0,Da|0,na|0)|0;z=E;A=Ym(J|0,I|0,ta|0,ua|0)|0;A=Rm(A|0,E|0,qa|0,ra|0)|0;A=Om(A|0,E|0,Ga|0,sa|0)|0;B=E;C=Ym(J|0,I|0,va|0,xa|0)|0;C=Rm(C|0,E|0,ya|0,za|0)|0;C=Om(C|0,E|0,Da|0,na|0)|0;D=E;I=Ym(J|0,I|0,Aa|0,Ba|0)|0;I=Rm(I|0,E|0,ya|0,za|0)|0;I=Om(I|0,E|0,Ga|0,sa|0)|0;J=E;Vb=606}else{J=k-La|0;I=((J|0)<0)<<31>>31;y=Ym(J|0,I|0,V|0,W|0)|0;y=Rm(y|0,E|0,X|0,Y|0)|0;y=Om(y|0,E|0,e|0,K|0)|0;z=E;A=Ym(J|0,I|0,Z|0,_|0)|0;A=Rm(A|0,E|0,X|0,Y|0)|0;A=Om(A|0,E|0,Ia|0,P|0)|0;B=E;C=Ym(J|0,I|0,L|0,M|0)|0;C=Rm(C|0,E|0,N|0,O|0)|0;C=Om(C|0,E|0,e|0,K|0)|0;D=E;I=Ym(J|0,I|0,Q|0,R|0)|0;I=Rm(I|0,E|0,N|0,O|0)|0;I=Om(I|0,E|0,Ia|0,P|0)|0;J=E;Vb=606}while(0);do if((Vb|0)==606){Vb=0;t=c[j>>2]|0;r=c[t+(m*52|0)+4>>2]|0;u=(r-(c[t+(m*52|0)>>2]|0)|0)/40|0;s=t+(m*52|0)+12|0;l=t+(m*52|0)+16|0;k=c[l>>2]|0;do if(k){while(1){l=c[k+16>>2]|0;if((Na|0)<(l|0)){l=c[k>>2]|0;if(!l){Vb=609;break}else k=l}else{if((l|0)>=(Na|0)){Vb=614;break}p=k+4|0;l=c[p>>2]|0;if(!l){Vb=613;break}else k=l}}if((Vb|0)==609){Vb=0;c[Kb>>2]=k;q=k;p=k;break}else if((Vb|0)==613){Vb=0;c[Kb>>2]=k;q=k;break}else if((Vb|0)==614){Vb=0;c[Kb>>2]=k;q=k;p=Kb;break}}else{c[Kb>>2]=l;q=l;p=l}while(0);k=c[p>>2]|0;if(!k){k=vf(24)|0;U:do if(!k)while(1){k=c[5972]|0;c[5972]=k+0;if(!k){l=0;break U}ub[k&3]();k=vf(24)|0;if(k|0){l=k;break}}else l=k;while(0);c[l+16>>2]=Na;c[l+20>>2]=0;c[l>>2]=0;c[l+4>>2]=0;c[l+8>>2]=q;c[p>>2]=l;k=c[c[s>>2]>>2]|0;if(!k)k=l;else{c[s>>2]=k;k=c[p>>2]|0}Jc(c[t+(m*52|0)+16>>2]|0,k);Ab=t+(m*52|0)+20|0;c[Ab>>2]=(c[Ab>>2]|0)+1;Ab=c[j>>2]|0;k=l;p=Ab;l=c[Ab+(m*52|0)+4>>2]|0}else{p=t;l=r}c[k+20>>2]=u;v=p+(m*52|0)+4|0;w=p+(m*52|0)+8|0;q=c[w>>2]|0;if((l|0)!=(q|0)){Ab=l;c[Ab>>2]=y;c[Ab+4>>2]=z;Ab=l+8|0;c[Ab>>2]=A;c[Ab+4>>2]=B;Ab=l+16|0;c[Ab>>2]=C;c[Ab+4>>2]=D;Ab=l+24|0;c[Ab>>2]=I;c[Ab+4>>2]=J;c[l+32>>2]=Na;a[l+36>>0]=0;Ab=l+37|0;a[Ab>>0]=a[Ib>>0]|0;a[Ab+1>>0]=a[Ib+1>>0]|0;a[Ab+2>>0]=a[Ib+2>>0]|0;c[v>>2]=(c[v>>2]|0)+40;break}s=p+(m*52|0)|0;t=c[s>>2]|0;u=(c[v>>2]|0)-t|0;r=(u|0)/40|0;k=r+1|0;if(k>>>0>107374182){Vb=626;break O}Ab=(q-t|0)/40|0;q=Ab<<1;q=Ab>>>0<53687091?(q>>>0<k>>>0?k:q):107374182;if(!q)p=0;else{if(q>>>0>107374182){Vb=629;break O}l=q*40|0;l=(l|0)==0?1:l;k=vf(l)|0;V:do if(!k)do{k=c[5972]|0;c[5972]=k+0;if(!k){k=0;break V}ub[k&3]();k=vf(l)|0}while(!(k|0));while(0);p=k}l=p+(r*40|0)|0;k=l;c[k>>2]=y;c[k+4>>2]=z;k=p+(r*40|0)+8|0;c[k>>2]=A;c[k+4>>2]=B;k=p+(r*40|0)+16|0;c[k>>2]=C;c[k+4>>2]=D;k=p+(r*40|0)+24|0;c[k>>2]=I;c[k+4>>2]=J;c[p+(r*40|0)+32>>2]=Na;a[p+(r*40|0)+36>>0]=0;k=p+(r*40|0)+37|0;a[k>>0]=a[Ib>>0]|0;a[k+1>>0]=a[Ib+1>>0]|0;a[k+2>>0]=a[Ib+2>>0]|0;k=l+(((u|0)/-40|0)*40|0)|0;if((u|0)>0)Vm(k|0,t|0,u|0)|0;c[s>>2]=k;c[v>>2]=l+40;c[w>>2]=p+(q*40|0);if(!t)break;wf(t)}while(0)}if((m|0)<(Ma|0))m=m+1|0;else break}k=c[Oa>>2]|0;l=c[Pa>>2]|0}Na=Na+1|0}while(Na>>>0<((l-k|0)/24|0)>>>0)}k=c[j>>2]|0;if((c[Va>>2]|0)!=(k|0)){oa=(Ta|0)==0;na=f+(Xa*28|0)+16|0;ma=0;f=k;do{la=f+(ma*52|0)|0;V=f+(ma*52|0)+4|0;l=c[V>>2]|0;p=c[la>>2]|0;m=p;k=l;if((l|0)!=(p|0)){D=f+(ma*52|0)+16|0;I=f+(ma*52|0)+12|0;J=D;K=f+(ma*52|0)+16|0;L=f+(ma*52|0)+20|0;M=f+(ma*52|0)+32|0;N=f+(ma*52|0)+36|0;O=f+(ma*52|0)+28|0;P=f+(ma*52|0)+44|0;Q=f+(ma*52|0)+48|0;R=f+(ma*52|0)+40|0;C=0;while(1){if(!(a[m+(C*40|0)+36>>0]|0)){c[Ib>>2]=ob;c[ob>>2]=0;c[pb>>2]=0;c[qb>>2]=0;$m(Kb|0,m+(C*40|0)|0,16)|0;Tb(ob,Kb);k=C;do{B=c[la>>2]|0;a[B+(k*40|0)+36>>0]=1;z=B+(k*40|0)+16|0;y=c[z>>2]|0;z=c[z+4>>2]|0;B=B+(k*40|0)+24|0;A=c[B>>2]|0;B=c[B+4>>2]|0;l=Kb;c[l>>2]=y;c[l+4>>2]=z;l=_a;c[l>>2]=A;c[l+4>>2]=B;l=c[Ib>>2]|0;m=l+4|0;p=c[m>>2]|0;if((p|0)==(c[l+8>>2]|0))Tb(l,Kb);else{c[p>>2]=c[Kb>>2];c[p+4>>2]=c[Kb+4>>2];c[p+8>>2]=c[Kb+8>>2];c[p+12>>2]=c[Kb+12>>2];c[m>>2]=(c[m>>2]|0)+16}v=c[(c[la>>2]|0)+(k*40|0)+32>>2]|0;w=c[na>>2]|0;u=0;l=0;k=-1;do{t=w+(v*24|0)+12+(u<<2)|0;s=c[t>>2]|0;do if((s|0)>-1){r=c[D>>2]|0;if(!r)break;else{m=D;q=r}W:while(1){p=q;while(1){if((c[p+16>>2]|0)>=(s|0))break;p=c[p+4>>2]|0;if(!p)break W}q=c[p>>2]|0;if(!q){m=p;break}else m=p}if((m|0)==(D|0))break;if((s|0)<(c[m+16>>2]|0))break;while(1){m=c[r+16>>2]|0;if((s|0)<(m|0)){m=c[r>>2]|0;if(!m){Vb=663;break}}else{if((m|0)>=(s|0)){Vb=668;break}p=r+4|0;m=c[p>>2]|0;if(!m){Vb=667;break}}r=m}if((Vb|0)==663){Vb=0;c[Kb>>2]=r;q=r}else if((Vb|0)==667){Vb=0;c[Kb>>2]=r;q=p}else if((Vb|0)==668){Vb=0;c[Kb>>2]=r;q=Kb}m=c[q>>2]|0;if(!m){p=r;m=vf(24)|0;X:do if(!m)do{m=c[5972]|0;c[5972]=m+0;if(!m){m=0;break X}ub[m&3]();m=vf(24)|0}while(!(m|0));while(0);c[m+16>>2]=c[t>>2];c[m+20>>2]=0;c[m>>2]=0;c[m+4>>2]=0;c[m+8>>2]=p;c[q>>2]=m;p=c[c[I>>2]>>2]|0;if(!p)p=m;else{c[I>>2]=p;p=c[q>>2]|0}Jc(c[K>>2]|0,p);c[L>>2]=(c[L>>2]|0)+1}q=c[m+20>>2]|0;r=c[la>>2]|0;m=r+(q*40|0)|0;q=r+(q*40|0)+8|0;r=c[q>>2]|0;q=c[q+4>>2]|0;m=Km(y|0,z|0,c[m>>2]|0,c[m+4>>2]|0)|0;p=E;q=Km(A|0,B|0,r|0,q|0)|0;r=E;Ab=Om(m|0,p|0,10,0)|0;zb=E;if(zb>>>0>0|(zb|0)==0&Ab>>>0>20)break;yb=Om(q|0,r|0,10,0)|0;xb=E;wb=Ym(q|0,r|0,q|0,r|0)|0;zb=E;Ab=Ym(m|0,p|0,m|0,p|0)|0;Ab=Om(wb|0,zb|0,Ab|0,E|0)|0;zb=E;if(!((xb>>>0<0|(xb|0)==0&yb>>>0<21)&(zb>>>0<0|(zb|0)==0&Ab>>>0<101)))break;m=c[D>>2]|0;do if(m){s=c[t>>2]|0;p=m;while(1){q=c[p+16>>2]|0;if((s|0)<(q|0)){q=c[p>>2]|0;if(!q){Vb=682;break}else p=q}else{if((q|0)>=(s|0)){Vb=687;break}r=p+4|0;q=c[r>>2]|0;if(!q){Vb=686;break}else p=q}}if((Vb|0)==682){Vb=0;c[Kb>>2]=p;q=p;r=p;break}else if((Vb|0)==686){Vb=0;c[Kb>>2]=p;q=p;break}else if((Vb|0)==687){Vb=0;c[Kb>>2]=p;q=p;r=Kb;break}}else{c[Kb>>2]=D;q=J;r=D}while(0);p=c[r>>2]|0;if(!p){p=vf(24)|0;Y:do if(!p)do{m=c[5972]|0;c[5972]=m+0;if(!m){p=0;break Y}ub[m&3]();p=vf(24)|0}while(!(p|0));while(0);c[p+16>>2]=c[t>>2];c[p+20>>2]=0;c[p>>2]=0;c[p+4>>2]=0;c[p+8>>2]=q;c[r>>2]=p;m=c[c[I>>2]>>2]|0;if(!m)m=p;else{c[I>>2]=m;m=c[r>>2]|0}Jc(c[K>>2]|0,m);c[L>>2]=(c[L>>2]|0)+1;m=c[D>>2]|0}l=l|(c[p+20>>2]|0)==(C|0);do if(m){r=c[t>>2]|0;while(1){p=c[m+16>>2]|0;if((r|0)<(p|0)){p=c[m>>2]|0;if(!p){Vb=700;break}else m=p}else{if((p|0)>=(r|0)){Vb=705;break}q=m+4|0;p=c[q>>2]|0;if(!p){Vb=704;break}else m=p}}if((Vb|0)==700){Vb=0;c[Kb>>2]=m;p=m;q=m;break}else if((Vb|0)==704){Vb=0;c[Kb>>2]=m;p=m;break}else if((Vb|0)==705){Vb=0;c[Kb>>2]=m;p=m;q=Kb;break}}else{c[Kb>>2]=D;p=J;q=D}while(0);m=c[q>>2]|0;if(!m){m=vf(24)|0;Z:do if(!m)do{m=c[5972]|0;c[5972]=m+0;if(!m){m=0;break Z}ub[m&3]();m=vf(24)|0}while(!(m|0));while(0);c[m+16>>2]=c[t>>2];c[m+20>>2]=0;c[m>>2]=0;c[m+4>>2]=0;c[m+8>>2]=p;c[q>>2]=m;p=c[c[I>>2]>>2]|0;if(!p)p=m;else{c[I>>2]=p;p=c[q>>2]|0}Jc(c[K>>2]|0,p);c[L>>2]=(c[L>>2]|0)+1}if(a[(c[la>>2]|0)+((c[m+20>>2]|0)*40|0)+36>>0]|0)break;k=c[D>>2]|0;do if(k){q=c[t>>2]|0;while(1){m=c[k+16>>2]|0;if((q|0)<(m|0)){m=c[k>>2]|0;if(!m){Vb=719;break}else k=m}else{if((m|0)>=(q|0)){Vb=724;break}p=k+4|0;m=c[p>>2]|0;if(!m){Vb=723;break}else k=m}}if((Vb|0)==719){Vb=0;c[Kb>>2]=k;m=k;p=k;break}else if((Vb|0)==723){Vb=0;c[Kb>>2]=k;m=k;break}else if((Vb|0)==724){Vb=0;c[Kb>>2]=k;m=k;p=Kb;break}}else{c[Kb>>2]=D;m=J;p=D}while(0);k=c[p>>2]|0;if(!k){k=vf(24)|0;_:do if(!k)do{k=c[5972]|0;c[5972]=k+0;if(!k){k=0;break _}ub[k&3]();k=vf(24)|0}while(!(k|0));while(0);c[k+16>>2]=c[t>>2];c[k+20>>2]=0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=m;c[p>>2]=k;m=c[c[I>>2]>>2]|0;if(!m)m=k;else{c[I>>2]=m;m=c[p>>2]|0}Jc(c[K>>2]|0,m);c[L>>2]=(c[L>>2]|0)+1}k=c[k+20>>2]|0}while(0);u=u+1|0}while((u|0)!=3)}while((k|0)!=-1);t=c[Ib>>2]|0;do if(l){p=c[M>>2]|0;if((p|0)==(c[N>>2]|0)){Ob(O,t);break}c[p>>2]=0;s=p+4|0;c[s>>2]=0;c[p+8>>2]=0;r=t+4|0;k=(c[r>>2]|0)-(c[t>>2]|0)|0;q=k>>4;do if(q|0){if(q>>>0>268435455){Vb=739;break O}l=(k|0)==0?1:k;k=vf(l)|0;$:do if(!k)while(1){k=c[5972]|0;c[5972]=k+0;if(!k){m=0;break $}ub[k&3]();k=vf(l)|0;if(k|0){m=k;break}}else m=k;while(0);c[s>>2]=m;c[p>>2]=m;c[p+8>>2]=m+(q<<4);l=c[t>>2]|0;k=(c[r>>2]|0)-l|0;if((k|0)<=0)break;Vm(m|0,l|0,k|0)|0;c[s>>2]=m+(k>>4<<4)}while(0);c[M>>2]=(c[M>>2]|0)+12}else{p=c[P>>2]|0;if((p|0)==(c[Q>>2]|0)){Ob(R,t);break}c[p>>2]=0;s=p+4|0;c[s>>2]=0;c[p+8>>2]=0;r=t+4|0;k=(c[r>>2]|0)-(c[t>>2]|0)|0;q=k>>4;do if(q|0){if(q>>>0>268435455){Vb=750;break O}l=(k|0)==0?1:k;k=vf(l)|0;aa:do if(!k)while(1){k=c[5972]|0;c[5972]=k+0;if(!k){m=0;break aa}ub[k&3]();k=vf(l)|0;if(k|0){m=k;break}}else m=k;while(0);c[s>>2]=m;c[p>>2]=m;c[p+8>>2]=m+(q<<4);l=c[t>>2]|0;k=(c[r>>2]|0)-l|0;if((k|0)<=0)break;Vm(m|0,l|0,k|0)|0;c[s>>2]=m+(k>>4<<4)}while(0);c[P>>2]=(c[P>>2]|0)+12}while(0);k=c[rb>>2]|0;l=k;if(k|0){m=c[pb>>2]|0;if((m|0)!=(k|0))c[pb>>2]=m+(~((m+-16-l|0)>>>4)<<4);wf(k)}k=c[V>>2]|0;p=c[la>>2]|0;l=k}C=C+1|0;m=p;if(C>>>0>=((l-p|0)/40|0)>>>0){l=p;break}}}if((k|0)!=(m|0))c[V>>2]=k+(~(((k+-40-l|0)>>>0)/40|0)*40|0);ia=f+(ma*52|0)+40|0;ja=f+(ma*52|0)+44|0;q=c[ja>>2]|0;m=c[ia>>2]|0;t=m;ka=f+(ma*52|0)+32|0;ga=f+(ma*52|0)+36|0;ha=f+(ma*52|0)+28|0;ba:do if((q|0)==(m|0)){m=q;B=q;A=t;z=t;y=q;w=t;s=t;r=t;u=t;l=q;k=t;p=q}else{Y=0;p=m;v=t;V=m;k=t;l=m;K=t;L=t;s=t;w=t;y=m;z=t;A=t;B=m;P=t;C=t;J=t;D=t;I=t;u=t;O=t;M=t;r=m;N=t;while(1){ca:do if((q|0)==(V|0)?1:(c[v+(Y*12|0)+4>>2]|0)==(c[v+(Y*12|0)>>2]|0)){Q=V;t=P}else{X=0;W=p;R=P;Q=C;P=M;M=V;q=V;da:while(1){Ab=c[v+(X*12|0)>>2]|0;p=Ab;do if((c[v+(X*12|0)+4>>2]|0)==(Ab|0)){p=W;C=Q;t=M}else{t=v+(Y*12|0)|0;C=v+(Y*12|0)+4|0;vb=c[t>>2]|0;wb=((c[C>>2]|0)-vb>>4)+-1|0;zb=vb+(wb<<4)|0;wb=vb+(wb<<4)+8|0;vb=c[wb>>2]|0;wb=c[wb+4>>2]|0;Ab=p;xb=p+8|0;yb=c[xb>>2]|0;xb=c[xb+4>>2]|0;Ab=Km(c[zb>>2]|0,c[zb+4>>2]|0,c[Ab>>2]|0,c[Ab+4>>2]|0)|0;zb=E;xb=Km(vb|0,wb|0,yb|0,xb|0)|0;yb=E;zb=Ym(Ab|0,zb|0,Ab|0,zb|0)|0;Ab=E;yb=Ym(xb|0,yb|0,xb|0,yb|0)|0;Ab=Om(yb|0,E|0,zb|0,Ab|0)|0;zb=E;if(!(zb>>>0<0|(zb|0)==0&Ab>>>0<400)){p=W;C=Q;t=M;break}if((Y|0)==(X|0))break da;else q=0;do{$m(Kb|0,p+(q<<4)|0,16)|0;k=v+(Y*12|0)+4|0;l=c[k>>2]|0;if((l|0)==(c[v+(Y*12|0)+8>>2]|0))Tb(v+(Y*12|0)|0,Kb);else{c[l>>2]=c[Kb>>2];c[l+4>>2]=c[Kb+4>>2];c[l+8>>2]=c[Kb+8>>2];c[l+12>>2]=c[Kb+12>>2];c[k>>2]=(c[k>>2]|0)+16}q=q+1|0;v=c[ia>>2]|0;m=v+(X*12|0)+4|0;k=c[m>>2]|0;l=c[v+(X*12|0)>>2]|0;p=l}while(q>>>0<k-l>>4>>>0);t=v;if((k|0)==(p|0)){p=t;q=t;k=v;l=t;K=v;L=v;s=v;w=v;y=t;z=v;A=v;B=t;R=v;C=v;J=v;D=v;I=v;u=v;O=v;P=v;r=t;N=v;m=t;break}c[m>>2]=k+(~((k+-16-l|0)>>>4)<<4);p=t;q=t;k=v;l=t;K=v;L=v;s=v;w=v;y=t;z=v;A=v;B=t;R=v;C=v;J=v;D=v;I=v;u=v;O=v;P=v;r=t;N=v;m=t}while(0);X=X+1|0;if(X>>>0>=(((c[ja>>2]|0)-q|0)/12|0)>>>0){Q=t;M=P;t=R;break ca}else{W=p;v=q;Q=C;M=t}}p=c[ka>>2]|0;if((p|0)==(c[ga>>2]|0))Ob(ha,t);else{c[p>>2]=0;r=p+4|0;c[r>>2]=0;c[p+8>>2]=0;k=(c[C>>2]|0)-(c[t>>2]|0)|0;q=k>>4;do if(q|0){if(q>>>0>268435455){Vb=772;break O}l=(k|0)==0?1:k;k=vf(l)|0;ea:do if(!k)while(1){k=c[5972]|0;c[5972]=k+0;if(!k){m=0;break ea}ub[k&3]();k=vf(l)|0;if(k|0){m=k;break}}else m=k;while(0);c[r>>2]=m;c[p>>2]=m;c[p+8>>2]=m+(q<<4);l=c[t>>2]|0;k=(c[C>>2]|0)-l|0;if((k|0)<=0)break;Vm(m|0,l|0,k|0)|0;c[r>>2]=m+(k>>4<<4)}while(0);c[ka>>2]=(c[ka>>2]|0)+12}t=c[ia>>2]|0;k=c[t+(Y*12|0)>>2]|0;l=t+(Y*12|0)+4|0;m=c[l>>2]|0;q=t;if((m|0)==(k|0)){p=q;m=q;Q=q;k=t;l=q;K=t;L=t;s=t;w=t;y=q;z=t;A=t;B=q;N=t;r=q;M=t;O=t;u=t;I=t;D=t;J=t;C=t;break}c[l>>2]=m+(~((m+-16-k|0)>>>4)<<4);p=q;m=q;Q=q;k=t;l=q;K=t;L=t;s=t;w=t;y=q;z=t;A=t;B=q;N=t;r=q;M=t;O=t;u=t;I=t;D=t;J=t;C=t}while(0);Y=Y+1|0;q=c[ja>>2]|0;if(Y>>>0>=((q-Q|0)/12|0)>>>0)break;else{v=Q;V=Q;P=t}}if((q|0)==(m|0)){r=L;u=K;break}else{$=N;m=q;_=M;fa=t;t=O;aa=I;ea=C;da=z;ca=y;ba=w}while(1){Y=(m-$|0)/12|0;X=_;Z=(m-X|0)/12|0;W=0;w=0;y=-1;z=-1;q=1e8;v=0;while(1){do if((c[$+(W*12|0)+4>>2]|0)==(c[$+(W*12|0)>>2]|0)){N=y;O=z}else{if((m|0)==(r|0)){N=y;O=z;r=m;break}R=_+(W*12|0)|0;V=_+(W*12|0)+4|0;Q=0;r=w;do{I=c[_+(Q*12|0)>>2]|0;C=(c[_+(Q*12|0)+4>>2]|0)-I>>4;do if(C){O=c[R>>2]|0;P=((c[V>>2]|0)-O>>4)+-1|0;N=O+(P<<4)|0;M=c[N>>2]|0;N=c[N+4>>2]|0;P=O+(P<<4)+8|0;O=c[P>>2]|0;P=c[P+4>>2]|0;zb=I;yb=I+8|0;Ab=c[yb>>2]|0;yb=c[yb+4>>2]|0;zb=Km(M|0,N|0,c[zb>>2]|0,c[zb+4>>2]|0)|0;w=E;yb=Km(O|0,P|0,Ab|0,yb|0)|0;Ab=E;w=Ym(zb|0,w|0,zb|0,w|0)|0;zb=E;Ab=Ym(yb|0,Ab|0,yb|0,Ab|0)|0;zb=Om(Ab|0,E|0,w|0,zb|0)|0;w=E;Ab=(w|0)<(v|0)|(w|0)==(v|0)&zb>>>0<q>>>0;q=Ab?zb:q;v=Ab?w:v;z=Ab?W:z;w=Ab?Q:y;r=r&(Ab^1);if((W|0)==(Q|0)){y=w;break}y=C+-1|0;yb=I+(y<<4)|0;y=I+(y<<4)+8|0;zb=c[y>>2]|0;y=c[y+4>>2]|0;yb=Km(M|0,N|0,c[yb>>2]|0,c[yb+4>>2]|0)|0;Ab=E;y=Km(O|0,P|0,zb|0,y|0)|0;zb=E;Ab=Ym(yb|0,Ab|0,yb|0,Ab|0)|0;yb=E;zb=Ym(y|0,zb|0,y|0,zb|0)|0;yb=Om(zb|0,E|0,Ab|0,yb|0)|0;Ab=E;zb=(Ab|0)<(v|0)|(Ab|0)==(v|0)&yb>>>0<q>>>0;r=r|zb;y=zb?Q:w;z=zb?W:z;q=zb?yb:q;v=zb?Ab:v}while(0);Q=Q+1|0}while(Q>>>0<Z>>>0);w=r;N=y;O=z;r=X}while(0);W=W+1|0;if(W>>>0>=Y>>>0)break;else{y=N;z=O}}if((v|0)>0|(v|0)==0&q>>>0>99999999){z=da;y=ca;w=ba;r=L;u=K;break ba}do if((O|0)!=(N|0)){if(!w){m=t+(N*12|0)+4|0;q=c[m>>2]|0;Ab=c[t+(N*12|0)>>2]|0;r=Ab;if((q|0)==(Ab|0)){M=r;w=ba;y=ca;z=da;C=fa;I=ea;v=aa;r=t}else{p=0;l=r;do{$m(Kb|0,l+(p<<4)|0,16)|0;k=t+(O*12|0)+4|0;l=c[k>>2]|0;if((l|0)==(c[t+(O*12|0)+8>>2]|0))Tb(t+(O*12|0)|0,Kb);else{c[l>>2]=c[Kb>>2];c[l+4>>2]=c[Kb+4>>2];c[l+8>>2]=c[Kb+8>>2];c[l+12>>2]=c[Kb+12>>2];c[k>>2]=(c[k>>2]|0)+16}p=p+1|0;t=c[ia>>2]|0;m=t+(N*12|0)+4|0;k=c[m>>2]|0;Ab=c[t+(N*12|0)>>2]|0;l=Ab}while(p>>>0<k-Ab>>4>>>0);r=t;q=k;M=l;p=r;k=t;l=r;K=t;L=t;s=t;w=t;y=r;z=t;A=t;B=r;C=t;I=t;J=t;D=t;v=t;u=t}if((q|0)==(M|0)){q=t;break}c[m>>2]=q+(~((q+-16-M|0)>>>4)<<4);q=t;break}zb=c[u+(O*12|0)+4>>2]|0;Ab=c[u+(O*12|0)>>2]|0;z=zb-Ab>>4;m=z+-1|0;y=Ab;if((zb|0)==(Ab|0)){I=0;C=0}else{w=y+(m<<4)+8|0;u=y+(m<<4)|0;r=0;t=c[u>>2]|0;u=c[u+4>>2]|0;v=c[w>>2]|0;w=c[w+4>>2]|0;q=0;m=0;do{wb=y+(r<<4)|0;zb=t;t=c[wb>>2]|0;Ab=u;u=c[wb+4>>2]|0;wb=y+(r<<4)+8|0;yb=v;v=c[wb>>2]|0;xb=w;w=c[wb+4>>2]|0;Ab=Km(zb|0,Ab|0,t|0,u|0)|0;zb=E;xb=Km(yb|0,xb|0,v|0,w|0)|0;yb=E;zb=Ym(Ab|0,zb|0,Ab|0,zb|0)|0;Ab=E;yb=Ym(xb|0,yb|0,xb|0,yb|0)|0;Ab=Om(yb|0,E|0,zb|0,Ab|0)|0;cc=+H(+(+(Ab>>>0)+4294967296.0*+(E|0)));q=Om(~~cc>>>0|0,(+G(cc)>=1.0?(cc>0.0?~~+U(+F(cc/4294967296.0),4294967295.0)>>>0:~~+S((cc-+(~~cc>>>0))/4294967296.0)>>>0):0)|0,q|0,m|0)|0;m=E;r=r+1|0}while(r>>>0<z>>>0);I=m;C=q}zb=c[aa+(N*12|0)+4>>2]|0;Ab=c[aa+(N*12|0)>>2]|0;z=zb-Ab>>4;m=z+-1|0;y=Ab;if((zb|0)==(Ab|0)){q=0;m=0}else{w=y+(m<<4)+8|0;u=y+(m<<4)|0;r=0;t=c[u>>2]|0;u=c[u+4>>2]|0;v=c[w>>2]|0;w=c[w+4>>2]|0;m=0;q=0;do{wb=y+(r<<4)|0;zb=t;t=c[wb>>2]|0;Ab=u;u=c[wb+4>>2]|0;wb=y+(r<<4)+8|0;yb=v;v=c[wb>>2]|0;xb=w;w=c[wb+4>>2]|0;Ab=Km(zb|0,Ab|0,t|0,u|0)|0;zb=E;xb=Km(yb|0,xb|0,v|0,w|0)|0;yb=E;zb=Ym(Ab|0,zb|0,Ab|0,zb|0)|0;Ab=E;yb=Ym(xb|0,yb|0,xb|0,yb|0)|0;Ab=Om(yb|0,E|0,zb|0,Ab|0)|0;cc=+H(+(+(Ab>>>0)+4294967296.0*+(E|0)));m=Om(~~cc>>>0|0,(+G(cc)>=1.0?(cc>0.0?~~+U(+F(cc/4294967296.0),4294967295.0)>>>0:~~+S((cc-+(~~cc>>>0))/4294967296.0)>>>0):0)|0,m|0,q|0)|0;q=E;r=r+1|0}while(r>>>0<z>>>0)}if((I|0)>(q|0)|(I|0)==(q|0)&C>>>0>m>>>0){m=(c[D+(N*12|0)+4>>2]|0)-(c[D+(N*12|0)>>2]|0)|0;q=c[ea+(N*12|0)>>2]|0;r=ea;if((m|0)>0){m=(m>>4)+-1|0;k=q;q=ea;do{k=k+(m<<4)|0;c[Kb>>2]=c[k>>2];c[Kb+4>>2]=c[k+4>>2];c[Kb+8>>2]=c[k+8>>2];c[Kb+12>>2]=c[k+12>>2];k=q+(O*12|0)+4|0;l=c[k>>2]|0;if((l|0)==(c[q+(O*12|0)+8>>2]|0))Tb(q+(O*12|0)|0,Kb);else{c[l>>2]=c[Kb>>2];c[l+4>>2]=c[Kb+4>>2];c[l+8>>2]=c[Kb+8>>2];c[l+12>>2]=c[Kb+12>>2];c[k>>2]=(c[k>>2]|0)+16}m=m+-1|0;q=c[ia>>2]|0;k=c[q+(N*12|0)>>2]|0}while((m|0)>-1);r=q;C=k;p=r;M=q;k=q;l=r;u=q;v=q;s=q;w=q;y=r;z=q;A=q;B=r;t=q}else{C=q;M=ea;u=K;v=L;w=ba;y=ca;z=da;t=fa}m=M+(N*12|0)+4|0;q=c[m>>2]|0;if((q|0)==(C|0)){K=u;L=v;C=t;I=M;J=M;D=M;v=M;u=M;q=M;break}c[m>>2]=q+(~((q+-16-C|0)>>>4)<<4);K=u;L=v;C=t;I=M;J=M;D=M;v=M;u=M;q=M;break}else{m=(c[D+(O*12|0)+4>>2]|0)-(c[D+(O*12|0)>>2]|0)|0;q=c[J+(O*12|0)>>2]|0;r=J;if((m|0)>0){m=(m>>4)+-1|0;k=q;q=J;do{k=k+(m<<4)|0;c[Kb>>2]=c[k>>2];c[Kb+4>>2]=c[k+4>>2];c[Kb+8>>2]=c[k+8>>2];c[Kb+12>>2]=c[k+12>>2];k=q+(N*12|0)+4|0;l=c[k>>2]|0;if((l|0)==(c[q+(N*12|0)+8>>2]|0))Tb(q+(N*12|0)|0,Kb);else{c[l>>2]=c[Kb>>2];c[l+4>>2]=c[Kb+4>>2];c[l+8>>2]=c[Kb+8>>2];c[l+12>>2]=c[Kb+12>>2];c[k>>2]=(c[k>>2]|0)+16}m=m+-1|0;q=c[ia>>2]|0;k=c[q+(O*12|0)>>2]|0}while((m|0)>-1);r=q;D=k;p=r;M=q;k=q;l=r;u=q;v=q;s=q;w=q;y=r;z=q;A=q;B=r;C=q;t=q}else{D=q;M=J;u=K;v=L;w=ba;y=ca;z=da;C=fa;t=ea}m=M+(O*12|0)+4|0;q=c[m>>2]|0;if((q|0)==(D|0)){K=u;L=v;I=t;J=M;D=M;v=M;u=M;q=M;break}c[m>>2]=q+(~((q+-16-D|0)>>>4)<<4);K=u;L=v;I=t;J=M;D=M;v=M;u=M;q=M;break}}else{q=fa+(O*12|0)|0;r=c[ka>>2]|0;if((r|0)==(c[ga>>2]|0))Ob(ha,q);else{c[r>>2]=0;t=r+4|0;c[t>>2]=0;c[r+8>>2]=0;s=fa+(O*12|0)+4|0;k=(c[s>>2]|0)-(c[q>>2]|0)|0;p=k>>4;do if(p|0){if(p>>>0>268435455){Vb=804;break O}l=(k|0)==0?1:k;k=vf(l)|0;fa:do if(!k)while(1){k=c[5972]|0;c[5972]=k+0;if(!k){m=0;break fa}ub[k&3]();k=vf(l)|0;if(k|0){m=k;break}}else m=k;while(0);c[t>>2]=m;c[r>>2]=m;c[r+8>>2]=m+(p<<4);l=c[q>>2]|0;k=(c[s>>2]|0)-l|0;if((k|0)<=0)break;Vm(m|0,l|0,k|0)|0;c[t>>2]=m+(k>>4<<4)}while(0);c[ka>>2]=(c[ka>>2]|0)+12}t=c[ia>>2]|0;m=c[t+(O*12|0)>>2]|0;k=t+(O*12|0)+4|0;l=c[k>>2]|0;q=t;if((l|0)==(m|0)){p=q;r=q;k=t;l=q;K=t;L=t;s=t;w=t;y=q;z=t;A=t;B=q;C=t;I=t;J=t;D=t;v=t;u=t;q=t;break}c[k>>2]=l+(~((l+-16-m|0)>>>4)<<4);p=q;r=q;k=t;l=q;K=t;L=t;s=t;w=t;y=q;z=t;A=t;B=q;C=t;I=t;J=t;D=t;v=t;u=t;q=t}while(0);m=c[ja>>2]|0;if((m|0)==(r|0)){m=r;r=L;u=K;break}else{$=q;_=q;fa=C;t=q;aa=v;ea=I;da=z;ca=y;ba=w}}}while(0);ga:do if(!Ua){O=f+(ma*52|0)+28|0;P=f+(ma*52|0)+28|0;if((m|0)==(B|0)){m=B;break}else{t=0;B=r}while(1){M=0;C=-1;J=-1;q=-1;r=-1;K=t;t=-1;D=2147483647;v=-1;while(1){do if((c[A+(M*12|0)+4>>2]|0)==(c[A+(M*12|0)>>2]|0)){N=C;L=q;I=u}else{yb=c[z+(M*12|0)>>2]|0;zb=yb;Ab=yb+8|0;l=((c[z+(M*12|0)+4>>2]|0)-yb>>4)+-1|0;k=yb+(l<<4)|0;l=yb+(l<<4)+8|0;jd(Kb,la,c[zb>>2]|0,c[zb+4>>2]|0,c[Ab>>2]|0,c[Ab+4>>2]|0,c[k>>2]|0,c[k+4>>2]|0,c[l>>2]|0,c[l+4>>2]|0);l=Kb;k=c[l>>2]|0;l=c[l+4>>2]|0;if(((l|0)>0|(l|0)==0&k>>>0>0)&((l|0)<(D|0)|(l|0)==(D|0)&k>>>0<v>>>0)){m=M;p=M;q=c[Za>>2]|0;r=c[cb>>2]|0;s=(a[fb>>0]&1)!=0;t=c[ib>>2]|0}else{m=C;p=J;s=K;k=v;l=D}C=c[ja>>2]|0;u=c[ia>>2]|0;w=u;if((C|0)==(u|0)){N=m;J=p;p=C;L=q;K=s;v=k;D=l;y=C;m=C;I=w;B=w;s=w;k=w;l=C;break}else{K=0;I=m;J=s;y=w;D=k;k=w;A=w;B=w;s=w;z=w;w=u;m=C}while(1){u=c[y+(K*12|0)+4>>2]|0;v=c[y+(K*12|0)>>2]|0;if((M|0)==(K|0)|(u|0)==(v|0)){u=I;y=J;v=D}else{Ab=c[y+(M*12|0)>>2]|0;zb=Ab;Ab=Ab+8|0;u=(u-v>>4)+-1|0;yb=v;k=yb+(u<<4)|0;u=yb+(u<<4)+8|0;jd(Kb,la,c[zb>>2]|0,c[zb+4>>2]|0,c[Ab>>2]|0,c[Ab+4>>2]|0,c[k>>2]|0,c[k+4>>2]|0,c[u>>2]|0,c[u+4>>2]|0);u=Kb;k=c[u>>2]|0;u=c[u+4>>2]|0;if(((u|0)>0|(u|0)==0&k>>>0>0)&((u|0)<(l|0)|(u|0)==(l|0)&k>>>0<D>>>0)){m=K;p=M;q=c[Ya>>2]|0;r=c[ab>>2]|0;s=(a[eb>>0]&1)!=0;t=c[hb>>2]|0;v=k;l=u}else{m=I;s=J;v=D}w=c[ia>>2]|0;z=w;u=m;y=s;m=c[ja>>2]|0;k=z;A=z;B=z;s=z}K=K+1|0;if(K>>>0>=((m-w|0)/12|0)>>>0){N=u;J=p;p=w;L=q;K=y;D=l;y=w;I=A;l=w;w=z;break}else{I=u;J=y;y=w;D=v}}}while(0);q=M+1|0;u=y;if(q>>>0<((m-y|0)/12|0)>>>0){M=q;C=N;q=L;A=u;z=u;u=I}else break}if((v|0)==-1&(D|0)==2147483647)break ga;m=(L|0)==(r|0);do if((J|0)==(N|0)){if(m){q=I+(J*12|0)|0;r=c[ka>>2]|0;if((r|0)==(c[ga>>2]|0))Ob(O,q);else{c[r>>2]=0;t=r+4|0;c[t>>2]=0;c[r+8>>2]=0;s=I+(J*12|0)+4|0;k=(c[s>>2]|0)-(c[q>>2]|0)|0;p=k>>4;do if(p|0){if(p>>>0>268435455){Vb=868;break O}l=(k|0)==0?1:k;k=vf(l)|0;ha:do if(!k)while(1){k=c[5972]|0;c[5972]=k+0;if(!k){m=0;break ha}ub[k&3]();k=vf(l)|0;if(k|0){m=k;break}}else m=k;while(0);c[t>>2]=m;c[r>>2]=m;c[r+8>>2]=m+(p<<4);l=c[q>>2]|0;k=(c[s>>2]|0)-l|0;if((k|0)<=0)break;Vm(m|0,l|0,k|0)|0;c[t>>2]=m+(k>>4<<4)}while(0);c[ka>>2]=(c[ka>>2]|0)+12}k=c[ia>>2]|0;p=c[k+(J*12|0)>>2]|0;l=k+(J*12|0)+4|0;m=c[l>>2]|0;q=k;if((m|0)==(p|0)){r=q;l=q;break}c[l>>2]=m+(~((m+-16-p|0)>>>4)<<4);r=q;l=q;break}if(K){q=ic(O)|0;s=q+4|0;u=q+8|0;l=L;k=c[O>>2]|0;do{k=(c[k+(t*12|0)>>2]|0)+(l<<4)|0;c[Kb>>2]=c[k>>2];c[Kb+4>>2]=c[k+4>>2];c[Kb+8>>2]=c[k+8>>2];c[Kb+12>>2]=c[k+12>>2];k=c[s>>2]|0;if((k|0)==(c[u>>2]|0))Tb(q,Kb);else{c[k>>2]=c[Kb>>2];c[k+4>>2]=c[Kb+4>>2];c[k+8>>2]=c[Kb+8>>2];c[k+12>>2]=c[Kb+12>>2];c[s>>2]=(c[s>>2]|0)+16}k=c[O>>2]|0;l=((l+1|0)>>>0)%((c[k+(t*12|0)+4>>2]|0)-(c[k+(t*12|0)>>2]|0)>>4>>>0)|0}while((l|0)!=(r|0));k=c[ia>>2]|0;l=c[k+(J*12|0)+4>>2]|0;m=c[k+(J*12|0)>>2]|0;p=l-m|0;if((p|0)>0){l=(p>>4)+-1|0;do{$m(Kb|0,m+(l<<4)|0,16)|0;k=c[s>>2]|0;if((k|0)==(c[u>>2]|0))Tb(q,Kb);else{c[k>>2]=c[Kb>>2];c[k+4>>2]=c[Kb+4>>2];c[k+8>>2]=c[Kb+8>>2];c[k+12>>2]=c[Kb+12>>2];c[s>>2]=(c[s>>2]|0)+16}l=l+-1|0;p=c[ia>>2]|0;m=c[p+(J*12|0)>>2]|0}while((l|0)>-1);k=p;l=c[p+(J*12|0)+4>>2]|0}p=k;if((l|0)==(m|0)){r=p;l=p;break}c[k+(J*12|0)+4>>2]=l+(~((l+-16-m|0)>>>4)<<4);r=p;l=p;break}s=c[ka>>2]|0;y=(s-(c[O>>2]|0)|0)/12|0;u=B+(J*12|0)|0;q=s;if((q|0)==(c[ga>>2]|0))Ob(O,u);else{c[q>>2]=0;w=q+4|0;c[w>>2]=0;c[q+8>>2]=0;v=B+(J*12|0)+4|0;k=(c[v>>2]|0)-(c[u>>2]|0)|0;p=k>>4;do if(p|0){if(p>>>0>268435455){Vb=896;break O}l=(k|0)==0?1:k;k=vf(l)|0;ia:do if(!k)while(1){k=c[5972]|0;c[5972]=k+0;if(!k){m=0;break ia}ub[k&3]();k=vf(l)|0;if(k|0){m=k;break}}else m=k;while(0);c[w>>2]=m;c[s>>2]=m;c[q+8>>2]=m+(p<<4);l=c[u>>2]|0;k=(c[v>>2]|0)-l|0;if((k|0)<=0)break;Vm(m|0,l|0,k|0)|0;c[w>>2]=m+(k>>4<<4)}while(0);c[ka>>2]=(c[ka>>2]|0)+12}k=r;l=c[O>>2]|0;do{m=(c[l+(t*12|0)>>2]|0)+(k<<4)|0;c[Kb>>2]=c[m>>2];c[Kb+4>>2]=c[m+4>>2];c[Kb+8>>2]=c[m+8>>2];c[Kb+12>>2]=c[m+12>>2];m=l+(y*12|0)+4|0;p=c[m>>2]|0;if((p|0)==(c[l+(y*12|0)+8>>2]|0))Tb(l+(y*12|0)|0,Kb);else{c[p>>2]=c[Kb>>2];c[p+4>>2]=c[Kb+4>>2];c[p+8>>2]=c[Kb+8>>2];c[p+12>>2]=c[Kb+12>>2];c[m>>2]=(c[m>>2]|0)+16}l=c[O>>2]|0;k=((k+1|0)>>>0)%((c[l+(t*12|0)+4>>2]|0)-(c[l+(t*12|0)>>2]|0)>>4>>>0)|0}while((k|0)!=(L|0));k=c[ia>>2]|0;p=c[k+(J*12|0)>>2]|0;l=k+(J*12|0)+4|0;m=c[l>>2]|0;q=k;if((m|0)==(p|0)){r=q;l=q;break}c[l>>2]=m+(~((m+-16-p|0)>>>4)<<4);r=q;l=q}else{if(m){r=s+(J*12|0)+4|0;m=c[r>>2]|0;Ab=c[s+(J*12|0)>>2]|0;q=Ab;if((m|0)!=(Ab|0)){p=0;k=q;do{$m(Kb|0,k+(p<<4)|0,16)|0;k=s+(N*12|0)+4|0;l=c[k>>2]|0;if((l|0)==(c[s+(N*12|0)+8>>2]|0))Tb(s+(N*12|0)|0,Kb);else{c[l>>2]=c[Kb>>2];c[l+4>>2]=c[Kb+4>>2];c[l+8>>2]=c[Kb+8>>2];c[l+12>>2]=c[Kb+12>>2];c[k>>2]=(c[k>>2]|0)+16}p=p+1|0;s=c[ia>>2]|0;l=s+(J*12|0)+4|0;m=c[l>>2]|0;Ab=c[s+(J*12|0)>>2]|0;k=Ab}while(p>>>0<m-Ab>>4>>>0);Ab=s;q=k;r=l;p=Ab;k=s;l=Ab}if((m|0)==(q|0)){r=p;break}c[r>>2]=m+(~((m+-16-q|0)>>>4)<<4);r=p;break}if(!K){p=r;l=c[P>>2]|0;k=w;do{l=(c[l+(t*12|0)>>2]|0)+(p<<4)|0;c[Kb>>2]=c[l>>2];c[Kb+4>>2]=c[l+4>>2];c[Kb+8>>2]=c[l+8>>2];c[Kb+12>>2]=c[l+12>>2];l=k+(N*12|0)+4|0;m=c[l>>2]|0;if((m|0)==(c[k+(N*12|0)+8>>2]|0))Tb(k+(N*12|0)|0,Kb);else{c[m>>2]=c[Kb>>2];c[m+4>>2]=c[Kb+4>>2];c[m+8>>2]=c[Kb+8>>2];c[m+12>>2]=c[Kb+12>>2];c[l>>2]=(c[l>>2]|0)+16}l=c[P>>2]|0;p=((p+1|0)>>>0)%((c[l+(t*12|0)+4>>2]|0)-(c[l+(t*12|0)>>2]|0)>>4>>>0)|0;k=c[ia>>2]|0}while((p|0)!=(L|0));p=c[k+(J*12|0)>>2]|0;l=c[k+(J*12|0)+4>>2]|0;m=l-p|0;if((m|0)>0){m=(m>>4)+-1|0;l=p;q=k;do{k=l+(m<<4)|0;c[Kb>>2]=c[k>>2];c[Kb+4>>2]=c[k+4>>2];c[Kb+8>>2]=c[k+8>>2];c[Kb+12>>2]=c[k+12>>2];k=q+(N*12|0)+4|0;l=c[k>>2]|0;if((l|0)==(c[q+(N*12|0)+8>>2]|0))Tb(q+(N*12|0)|0,Kb);else{c[l>>2]=c[Kb>>2];c[l+4>>2]=c[Kb+4>>2];c[l+8>>2]=c[Kb+8>>2];c[l+12>>2]=c[Kb+12>>2];c[k>>2]=(c[k>>2]|0)+16}m=m+-1|0;q=c[ia>>2]|0;l=c[q+(J*12|0)>>2]|0}while((m|0)>-1);p=l;k=q;l=c[q+(J*12|0)+4>>2]|0}m=k;if((l|0)==(p|0)){r=m;l=m;break}c[k+(J*12|0)+4>>2]=l+(~((l+-16-p|0)>>>4)<<4);r=m;l=m;break}c[Ib>>2]=jb;c[jb>>2]=0;c[kb>>2]=0;c[mb>>2]=0;p=L;k=c[P>>2]|0;l=jb;do{k=(c[k+(t*12|0)>>2]|0)+(p<<4)|0;c[Kb>>2]=c[k>>2];c[Kb+4>>2]=c[k+4>>2];c[Kb+8>>2]=c[k+8>>2];c[Kb+12>>2]=c[k+12>>2];k=l+4|0;m=c[k>>2]|0;if((m|0)==(c[l+8>>2]|0))Tb(l,Kb);else{c[m>>2]=c[Kb>>2];c[m+4>>2]=c[Kb+4>>2];c[m+8>>2]=c[Kb+8>>2];c[m+12>>2]=c[Kb+12>>2];c[k>>2]=(c[k>>2]|0)+16}k=c[P>>2]|0;p=((p+1|0)>>>0)%((c[k+(t*12|0)+4>>2]|0)-(c[k+(t*12|0)>>2]|0)>>4>>>0)|0;l=c[Ib>>2]|0}while((p|0)!=(r|0));k=(c[l+4>>2]|0)-(c[l>>2]|0)|0;ja:do if((k|0)>0){k=(k>>4)+-1|0;while(1){p=c[ia>>2]|0;l=(c[l>>2]|0)+(k<<4)|0;c[Kb>>2]=c[l>>2];c[Kb+4>>2]=c[l+4>>2];c[Kb+8>>2]=c[l+8>>2];c[Kb+12>>2]=c[l+12>>2];l=p+(N*12|0)+4|0;m=c[l>>2]|0;if((m|0)==(c[p+(N*12|0)+8>>2]|0))Tb(p+(N*12|0)|0,Kb);else{c[m>>2]=c[Kb>>2];c[m+4>>2]=c[Kb+4>>2];c[m+8>>2]=c[Kb+8>>2];c[m+12>>2]=c[Kb+12>>2];c[l>>2]=(c[l>>2]|0)+16}k=k+-1|0;if((k|0)<=-1)break ja;l=c[Ib>>2]|0}}while(0);l=c[ia>>2]|0;m=l+(J*12|0)+4|0;k=c[m>>2]|0;Ab=c[l+(J*12|0)>>2]|0;p=Ab;if((k|0)!=(Ab|0)){q=0;k=p;while(1){$m(Kb|0,k+(q<<4)|0,16)|0;k=l+(N*12|0)+4|0;m=c[k>>2]|0;if((m|0)==(c[l+(N*12|0)+8>>2]|0))Tb(l+(N*12|0)|0,Kb);else{c[m>>2]=c[Kb>>2];c[m+4>>2]=c[Kb+4>>2];c[m+8>>2]=c[Kb+8>>2];c[m+12>>2]=c[Kb+12>>2];c[k>>2]=(c[k>>2]|0)+16}q=q+1|0;l=c[ia>>2]|0;m=l+(J*12|0)+4|0;k=c[m>>2]|0;Ab=c[l+(J*12|0)>>2]|0;p=Ab;if(q>>>0>=k-Ab>>4>>>0)break;else k=p}}if((k|0)!=(p|0))c[m>>2]=k+(~((k+-16-p|0)>>>4)<<4);m=c[nb>>2]|0;p=m;if(m){k=c[kb>>2]|0;if((k|0)!=(m|0))c[kb>>2]=k+(~((k+-16-p|0)>>>4)<<4);wf(m);l=c[ia>>2]|0}r=l;k=l}while(0);m=c[ja>>2]|0;q=r;if((m|0)==(r|0)){m=r;break}else{p=r;t=K;A=q;z=q;y=r;w=q;s=q;B=q;u=q}}}while(0);if(!((m|0)==(l|0)|oa)){u=0;do{r=k+(u*12|0)|0;s=k+(u*12|0)+4|0;do if((c[s>>2]|0)!=(c[r>>2]|0)){p=c[ka>>2]|0;if((p|0)==(c[ga>>2]|0)){Ob(ha,r);break}c[p>>2]=0;t=p+4|0;c[t>>2]=0;c[p+8>>2]=0;k=(c[s>>2]|0)-(c[r>>2]|0)|0;q=k>>4;do if(q|0){if(q>>>0>268435455){Vb=966;break O}l=(k|0)==0?1:k;k=vf(l)|0;ka:do if(!k)while(1){k=c[5972]|0;c[5972]=k+0;if(!k){m=0;break ka}ub[k&3]();k=vf(l)|0;if(k|0){m=k;break}}else m=k;while(0);c[t>>2]=m;c[p>>2]=m;c[p+8>>2]=m+(q<<4);l=c[r>>2]|0;k=(c[s>>2]|0)-l|0;if((k|0)<=0)break;Vm(m|0,l|0,k|0)|0;c[t>>2]=m+(k>>4<<4)}while(0);c[ka>>2]=(c[ka>>2]|0)+12}while(0);u=u+1|0;k=c[ia>>2]|0}while(u>>>0<(((c[ja>>2]|0)-k|0)/12|0)>>>0)}y=f+(ma*52|0)+28|0;l=c[ka>>2]|0;k=c[y>>2]|0;if((l|0)!=(k|0)){m=0;while(1){r=k;s=c[r+(m*12|0)>>2]|0;r=(c[r+(m*12|0)+4>>2]|0)-s>>4;la:do if(r>>>0>1){u=s;w=s+8|0;p=0;q=1;t=c[u>>2]|0;u=c[u+4>>2]|0;v=c[w>>2]|0;w=c[w+4>>2]|0;do{wb=s+(q<<4)|0;zb=t;t=c[wb>>2]|0;Ab=u;u=c[wb+4>>2]|0;wb=s+(q<<4)+8|0;yb=v;v=c[wb>>2]|0;xb=w;w=c[wb+4>>2]|0;Ab=Km(t|0,u|0,zb|0,Ab|0)|0;zb=E;xb=Km(v|0,w|0,yb|0,xb|0)|0;yb=E;zb=Ym(Ab|0,zb|0,Ab|0,zb|0)|0;Ab=E;yb=Ym(xb|0,yb|0,xb|0,yb|0)|0;Ab=Om(yb|0,E|0,zb|0,Ab|0)|0;cc=+H(+(+(Ab>>>0)+4294967296.0*+(E|0)));p=Om(~~cc>>>0|0,(+G(cc)>=1.0?(cc>0.0?~~+U(+F(cc/4294967296.0),4294967295.0)>>>0:~~+S((cc-+(~~cc>>>0))/4294967296.0)>>>0):0)|0,p|0,0)|0;q=q+1|0;if((p|0)>1e3)break la}while(q>>>0<r>>>0);if((p|0)<1e3)Vb=985}else Vb=985;while(0);if((Vb|0)==985){Vb=0;Pc(y,m);m=m+-1|0;k=c[y>>2]|0;l=c[ka>>2]|0}m=m+1|0;if(m>>>0>=((l-k|0)/12|0)>>>0){l=k;break}}}m=f+(ma*52|0)+32|0;if((c[m>>2]|0)!=(l|0)){k=0;f=l;do{Oc(f+(k*12|0)|0);f=c[y>>2]|0;if((c[f+(k*12|0)+4>>2]|0)-(c[f+(k*12|0)>>2]|0)>>4>>>0<3){Pc(y,k);k=k+-1|0;f=c[y>>2]|0}k=k+1|0}while(k>>>0<(((c[m>>2]|0)-f|0)/12|0)>>>0)}ma=ma+1|0;f=c[j>>2]|0}while(ma>>>0<(((c[Va>>2]|0)-f|0)/52|0)>>>0)}p=j;f=o;if((f|0)==(n|0)){o=o-Wa|0;m=o>>2;f=m+1|0;if(f>>>0>1073741823){Vb=991;break}Ab=n-Wa|0;l=Ab>>1;l=Ab>>2>>>0<536870911?(l>>>0<f>>>0?f:l):1073741823;if(!l)f=0;else{if(l>>>0>1073741823){Vb=994;break}k=l<<2;k=(k|0)==0?1:k;f=vf(k)|0;ma:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break ma}ub[f&3]();f=vf(k)|0}while(!(f|0));while(0)}k=f+(m<<2)|0;n=f+(l<<2)|0;c[k>>2]=p;l=k+4|0;f=k+(0-m<<2)|0;k=f;if((o|0)>0)Vm(f|0,Wa|0,o|0)|0;if(!Wa)o=l;else{wf(Wa);o=l}}else{c[o>>2]=p;k=Wa;o=f+4|0}m=j+4|0;f=c[j>>2]|0;if((c[m>>2]|0)!=(f|0)){l=0;do{Ab=f;yc(b,11452,l,c[Ab+(l*52|0)+24>>2]|0,Ab+(l*52|0)+40|0);l=l+1|0;f=c[j>>2]|0}while(l>>>0<(((c[m>>2]|0)-f|0)/52|0)>>>0)}Xa=Xa+1|0;f=c[Pb>>2]|0;if(Xa>>>0>=(((c[Qb>>2]|0)-f|0)/28|0)>>>0){Rb=k;Sb=o;break N}else Wa=k}switch(Vb|0){case 516:{Bl();break}case 519:{ac=Fa(4)|0;c[ac>>2]=8316;$a(ac|0,1336,91)}case 530:{Bl();break}case 626:{Bl();break}case 629:{ac=Fa(4)|0;c[ac>>2]=8316;$a(ac|0,1336,91)}case 739:{Bl();break}case 750:{Bl();break}case 772:{Bl();break}case 804:{Bl();break}case 868:{Bl();break}case 896:{Bl();break}case 966:{Bl();break}case 991:{Bl();break}case 994:{ac=Fa(4)|0;c[ac>>2]=8316;$a(ac|0,1336,91)}}}while(0);db(Kb|0,0)|0;cc=+(c[Kb>>2]|0)+ +(c[Kb+4>>2]|0)/1.0e6-+h[Xb>>3];db(Kb|0,0)|0;h[Xb>>3]=+(c[Kb>>2]|0)+ +(c[Kb+4>>2]|0)/1.0e6;h[Yb>>3]=cc;sd(11464,Yb);sd(11488,Zb);q=c[Ub>>2]|0;n=c[q+152>>2]|0;o=(c[q+156>>2]|0)>0;p=c[q+164>>2]|0;q=c[q+168>>2]|0;f=d+88|0;a[f>>0]=0;if((n|0)>=0){a[f>>0]=1;ra=c[Fb>>2]|0;ua=d+112|0;f=ua;c[f>>2]=ra;c[f+4>>2]=((ra|0)<0)<<31>>31;f=c[Cb>>2]|0;ra=d+120|0;sa=ra;c[sa>>2]=f;c[sa+4>>2]=((f|0)<0)<<31>>31;sa=d+128|0;c[sa>>2]=200;f=((c[Db>>2]|0)/200|0)+1|0;ta=d+132|0;c[ta>>2]=f;m=((c[Bb>>2]|0)/200|0)+1|0;qa=d+136|0;c[qa>>2]=m;m=T(m,f)|0;l=m*12|0;k=m>>>0>357913941|l>>>0>4294967291?-1:l+4|0;k=(k|0)==0?1:k;j=vf(k)|0;na:do if(!j)do{j=c[5972]|0;c[5972]=j+0;if(!j){j=0;break na}ub[j&3]();j=vf(k)|0}while(!(j|0));while(0);c[j>>2]=m;j=j+4|0;if(m|0)Mm(j|0,0,l-(((l+-12|0)>>>0)%12|0)|0)|0;pa=d+140|0;c[pa>>2]=j;c[d+92>>2]=n;a[d+96>>0]=o&1;c[d+100>>2]=p;c[d+104>>2]=q;k=c[Qb>>2]|0;j=c[Pb>>2]|0;if((k|0)!=(j|0)){na=Zb+8|0;oa=Zb+8|0;ma=0;f=k;do{k=j;ka=k+(ma*28|0)+16|0;la=k+(ma*28|0)+20|0;l=c[ka>>2]|0;if((c[la>>2]|0)!=(l|0)){ja=k+(ma*28|0)+4|0;ia=0;f=l;do{ha=f;fa=c[ha+(ia*24|0)>>2]|0;$=c[ja>>2]|0;ca=c[$+(fa*24|0)>>2]|0;da=c[$+(fa*24|0)+4>>2]|0;fa=c[$+(fa*24|0)+8>>2]|0;aa=c[ha+(ia*24|0)+4>>2]|0;_=c[$+(aa*24|0)>>2]|0;Z=c[$+(aa*24|0)+4>>2]|0;aa=c[$+(aa*24|0)+8>>2]|0;ha=c[ha+(ia*24|0)+8>>2]|0;Hb=c[$+(ha*24|0)>>2]|0;ga=c[$+(ha*24|0)+4>>2]|0;ha=c[$+(ha*24|0)+8>>2]|0;$=_-ca|0;Ib=Z-da|0;b=aa-fa|0;Nb=Hb-ca|0;ba=ga-da|0;ea=ha-fa|0;Kb=(T(ea,Ib)|0)-(T(ba,b)|0)|0;ea=(T(Nb,b)|0)-(T(ea,$)|0)|0;Ib=(T(ba,$)|0)-(T(Nb,Ib)|0)|0;Nb=((Kb|0)<0)<<31>>31;Nb=Ym(Kb|0,Nb|0,Kb|0,Nb|0)|0;Kb=E;$=((ea|0)<0)<<31>>31;$=Ym(ea|0,$|0,ea|0,$|0)|0;ea=E;ba=((Ib|0)<0)<<31>>31;ba=Ym(Ib|0,ba|0,Ib|0,ba|0)|0;ba=Om(Nb|0,Kb|0,ba|0,E|0)|0;ea=Om(ba|0,E|0,$|0,ea|0)|0;x=+G(+(+(Ib|0)/+(~~+H(+(+(ea>>>0)+4294967296.0*+(E|0)))|0)));ea=ua;Ib=c[ea>>2]|0;ea=c[ea+4>>2]|0;ca=Km(ca|0,((ca|0)<0)<<31>>31|0,Ib|0,ea|0)|0;$=c[sa>>2]|0;ba=(($|0)<0)<<31>>31;ca=Rm(ca|0,E|0,$|0,ba|0)|0;Kb=ra;Nb=c[Kb>>2]|0;Kb=c[Kb+4>>2]|0;da=Km(da|0,((da|0)<0)<<31>>31|0,Nb|0,Kb|0)|0;da=Rm(da|0,E|0,$|0,ba|0)|0;_=Km(_|0,((_|0)<0)<<31>>31|0,Ib|0,ea|0)|0;_=Rm(_|0,E|0,$|0,ba|0)|0;Z=Km(Z|0,((Z|0)<0)<<31>>31|0,Nb|0,Kb|0)|0;Z=Rm(Z|0,E|0,$|0,ba|0)|0;ea=Km(Hb|0,((Hb|0)<0)<<31>>31|0,Ib|0,ea|0)|0;ea=Rm(ea|0,E|0,$|0,ba|0)|0;Kb=Km(ga|0,((ga|0)<0)<<31>>31|0,Nb|0,Kb|0)|0;ba=Rm(Kb|0,E|0,$|0,ba|0)|0;$=(ca|0)>(_|0);Kb=$?ca:_;Nb=$?da:Z;ga=$?fa:aa;ca=$?_:ca;da=$?Z:da;fa=$?aa:fa;aa=(Kb|0)>(ea|0);$=aa?Kb:ea;Z=aa?Nb:ba;_=aa?ga:ha;Kb=aa?ea:Kb;Nb=aa?ba:Nb;ga=aa?ha:ga;ha=(ca|0)>(Kb|0);aa=ha?ca:Kb;ba=ha?da:Nb;ea=ha?fa:ga;ca=ha?Kb:ca;da=ha?Nb:da;fa=ha?ga:fa;ga=((ca|0)<0)<<31>>31;ha=((aa|0)<0)<<31>>31;if((aa|0)>(ca|0)){s=((da|0)<0)<<31>>31;t=ba-da|0;u=((t|0)<0)<<31>>31;v=aa-ca|0;w=((v|0)<0)<<31>>31;y=Z-da|0;z=((y|0)<0)<<31>>31;A=$-ca|0;B=((A|0)<0)<<31>>31;C=((fa|0)<0)<<31>>31;D=ea-fa|0;I=((D|0)<0)<<31>>31;J=_-fa|0;K=((J|0)<0)<<31>>31;L=ca;M=ga;do{l=Km(L|0,M|0,ca|0,ga|0)|0;k=E;V=Ym(l|0,k|0,t|0,u|0)|0;V=Rm(V|0,E|0,v|0,w|0)|0;V=Om(V|0,E|0,da|0,s|0)|0;R=E;P=Ym(l|0,k|0,y|0,z|0)|0;P=Rm(P|0,E|0,A|0,B|0)|0;P=Om(P|0,E|0,da|0,s|0)|0;Q=E;f=Ym(l|0,k|0,D|0,I|0)|0;f=Rm(f|0,E|0,v|0,w|0)|0;f=Om(f|0,E|0,fa|0,C|0)|0;j=E;k=Ym(l|0,k|0,J|0,K|0)|0;k=Rm(k|0,E|0,A|0,B|0)|0;k=Om(k|0,E|0,fa|0,C|0)|0;l=E;m=(R|0)>(Q|0)|(R|0)==(Q|0)&V>>>0>P>>>0;N=m?P:V;O=m?Q:R;P=m?V:P;Q=m?R:Q;R=m?k:f;V=m?l:j;if((Q|0)>(O|0)|(Q|0)==(O|0)&P>>>0>N>>>0){f=Km((m?f:k)|0,(m?j:l)|0,R|0,V|0)|0;j=E;k=Km(P|0,Q|0,N|0,O|0)|0;l=E;m=N;n=O;do{o=c[ta>>2]|0;o=Ym(o|0,((o|0)<0)<<31>>31|0,m|0,n|0)|0;o=Om(o|0,E|0,L|0,M|0)|0;p=c[pa>>2]|0;q=Km(m|0,n|0,N|0,O|0)|0;q=Ym(q|0,E|0,f|0,j|0)|0;q=Rm(q|0,E|0,k|0,l|0)|0;q=Om(q|0,E|0,R|0,V|0)|0;c[Zb>>2]=q;h[oa>>3]=x;q=p+(o*12|0)+4|0;r=c[q>>2]|0;if(r>>>0<(c[p+(o*12|0)+8>>2]|0)>>>0){c[r>>2]=c[Zb>>2];c[r+4>>2]=c[Zb+4>>2];c[r+8>>2]=c[Zb+8>>2];c[r+12>>2]=c[Zb+12>>2];c[q>>2]=(c[q>>2]|0)+16}else md(p+(o*12|0)|0,Zb);m=Om(m|0,n|0,1,0)|0;n=E}while((n|0)<(Q|0)|(n|0)==(Q|0)&m>>>0<P>>>0)}L=Om(L|0,M|0,1,0)|0;M=E}while((M|0)<(ha|0)|(M|0)==(ha|0)&L>>>0<aa>>>0)}P=(($|0)<0)<<31>>31;if(($|0)>(aa|0)){Q=((ba|0)<0)<<31>>31;R=Z-ba|0;V=((R|0)<0)<<31>>31;W=$-aa|0;X=((W|0)<0)<<31>>31;Y=((da|0)<0)<<31>>31;D=Z-da|0;I=((D|0)<0)<<31>>31;J=$-ca|0;K=((J|0)<0)<<31>>31;L=((ea|0)<0)<<31>>31;M=_-ea|0;N=((M|0)<0)<<31>>31;O=((fa|0)<0)<<31>>31;s=_-fa|0;t=((s|0)<0)<<31>>31;u=aa;v=ha;do{j=Km(u|0,v|0,aa|0,ha|0)|0;f=E;C=Ym(j|0,f|0,R|0,V|0)|0;C=Rm(C|0,E|0,W|0,X|0)|0;C=Om(C|0,E|0,ba|0,Q|0)|0;B=E;l=Km(u|0,v|0,ca|0,ga|0)|0;k=E;z=Ym(l|0,k|0,D|0,I|0)|0;z=Rm(z|0,E|0,J|0,K|0)|0;z=Om(z|0,E|0,da|0,Y|0)|0;A=E;f=Ym(j|0,f|0,M|0,N|0)|0;f=Rm(f|0,E|0,W|0,X|0)|0;f=Om(f|0,E|0,ea|0,L|0)|0;j=E;k=Ym(l|0,k|0,s|0,t|0)|0;k=Rm(k|0,E|0,J|0,K|0)|0;k=Om(k|0,E|0,fa|0,O|0)|0;l=E;m=(B|0)>(A|0)|(B|0)==(A|0)&C>>>0>z>>>0;w=m?z:C;y=m?A:B;z=m?C:z;A=m?B:A;B=m?k:f;C=m?l:j;if((A|0)>(y|0)|(A|0)==(y|0)&z>>>0>w>>>0){f=Km((m?f:k)|0,(m?j:l)|0,B|0,C|0)|0;j=E;k=Km(z|0,A|0,w|0,y|0)|0;l=E;m=w;n=y;do{o=c[ta>>2]|0;o=Ym(o|0,((o|0)<0)<<31>>31|0,m|0,n|0)|0;o=Om(o|0,E|0,u|0,v|0)|0;p=c[pa>>2]|0;q=Km(m|0,n|0,w|0,y|0)|0;q=Ym(q|0,E|0,f|0,j|0)|0;q=Rm(q|0,E|0,k|0,l|0)|0;q=Om(q|0,E|0,B|0,C|0)|0;c[Zb>>2]=q;h[na>>3]=x;q=p+(o*12|0)+4|0;r=c[q>>2]|0;if(r>>>0<(c[p+(o*12|0)+8>>2]|0)>>>0){c[r>>2]=c[Zb>>2];c[r+4>>2]=c[Zb+4>>2];c[r+8>>2]=c[Zb+8>>2];c[r+12>>2]=c[Zb+12>>2];c[q>>2]=(c[q>>2]|0)+16}else md(p+(o*12|0)|0,Zb);m=Om(m|0,n|0,1,0)|0;n=E}while((n|0)<(A|0)|(n|0)==(A|0)&m>>>0<z>>>0)}u=Om(u|0,v|0,1,0)|0;v=E}while((v|0)<(P|0)|(v|0)==(P|0)&u>>>0<$>>>0)}ia=ia+1|0;f=c[ka>>2]|0}while(ia>>>0<(((c[la>>2]|0)-f|0)/24|0)>>>0);j=c[Pb>>2]|0;f=c[Qb>>2]|0}ma=ma+1|0}while(ma>>>0<((f-j|0)/28|0)>>>0);f=c[ta>>2]|0}if((f|0)>0){l=0;j=c[qa>>2]|0;do{if((j|0)>0){k=0;do{f=(T(k,f)|0)+l|0;Qb=c[pa>>2]|0;j=c[Qb+(f*12|0)>>2]|0;Ee(j,(c[Qb+(f*12|0)+4>>2]|0)-j>>4,16,12);k=k+1|0;j=c[qa>>2]|0;f=c[ta>>2]|0}while((k|0)<(j|0))}l=l+1|0}while((l|0)<(f|0))}Qb=(c[sa>>2]|0)/2|0;Pb=((Qb|0)<0)<<31>>31;Kb=ua;Kb=Om(Qb|0,Pb|0,c[Kb>>2]|0,c[Kb+4>>2]|0)|0;Nb=ua;c[Nb>>2]=Kb;c[Nb+4>>2]=E;Nb=ra;Pb=Om(c[Nb>>2]|0,c[Nb+4>>2]|0,Qb|0,Pb|0)|0;Qb=ra;c[Qb>>2]=Pb;c[Qb+4>>2]=E};c[d>>2]=c[Db>>2];c[d+4>>2]=c[Db+4>>2];c[d+8>>2]=c[Db+8>>2];Qb=d+12|0;c[Qb>>2]=c[Fb>>2];c[Qb+4>>2]=c[Fb+4>>2];c[Qb+8>>2]=c[Fb+8>>2];Qb=d+24|0;c[Qb>>2]=c[Gb>>2];c[Qb+4>>2]=c[Gb+4>>2];c[Qb+8>>2]=c[Gb+8>>2];Gc(Eb);wf(Eb);sd(11515,_b);oa:do if((Sb|0)!=(Rb|0)){Oa=d+72|0;Pa=_b+4|0;Qa=d+76|0;La=d+80|0;Ma=_b+8|0;Na=Rb;fa=Sb-Rb>>2;ga=_b+8|0;ha=_b+12|0;ia=_b+16|0;ka=_b+20|0;la=_b+24|0;ma=_b+20|0;na=_b+8|0;oa=_b+4|0;pa=_b+8|0;qa=Zb+4|0;ra=_b+8|0;sa=_b+16|0;ta=_b+24|0;ua=_b+32|0;va=_b+4|0;xa=Yb+4|0;ya=Yb+8|0;za=ra+24|0;Aa=_b+56|0;Ba=_b+60|0;Ca=_b+64|0;Da=_b+80|0;Ea=_b+84|0;e=_b+68|0;Ga=_b+72|0;Ha=_b+44|0;Ia=_b+48|0;Ja=_b+36|0;Ka=_b+4|0;ea=0;pa:while(1){c[_b>>2]=0;c[_b+4>>2]=0;c[_b+8>>2]=0;f=c[Qa>>2]|0;Sb=c[La>>2]|0;j=Sb;if(f>>>0>=Sb>>>0){k=c[Oa>>2]|0;n=(f-k|0)/12|0;f=n+1|0;if(f>>>0>357913941){Vb=1013;break}Sb=(j-k|0)/12|0;l=Sb<<1;l=Sb>>>0<178956970?(l>>>0<f>>>0?f:l):357913941;if(!l){f=0;j=0;k=0}else{if(l>>>0>357913941){Vb=1016;break}j=l*12|0;j=(j|0)==0?1:j;f=vf(j)|0;if(!f){do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break}ub[f&3]();f=vf(j)|0}while(!(f|0));j=c[_b>>2]|0;k=c[Pa>>2]|0}else{j=0;k=0}}o=f+(n*12|0)|0;m=o;p=f+(l*12|0)|0;c[f+(n*12|0)+8>>2]=0;c[o>>2]=j;c[f+(n*12|0)+4>>2]=k;c[f+(n*12|0)+8>>2]=c[Ma>>2];c[Ma>>2]=0;c[Pa>>2]=0;c[_b>>2]=0;n=o+12|0;l=c[Oa>>2]|0;f=c[Qa>>2]|0;if((f|0)==(l|0)){j=m;k=l;f=l}else{k=m;j=o;do{Sb=j+-12|0;Rb=f;f=f+-12|0;c[Sb>>2]=0;d=j+-8|0;c[d>>2]=0;c[j+-4>>2]=0;c[Sb>>2]=c[f>>2];Sb=Rb+-8|0;c[d>>2]=c[Sb>>2];Rb=Rb+-4|0;c[j+-4>>2]=c[Rb>>2];c[Rb>>2]=0;c[Sb>>2]=0;c[f>>2]=0;j=k+-12|0;k=j}while((f|0)!=(l|0));j=k;k=c[Oa>>2]|0;f=c[Qa>>2]|0}c[Oa>>2]=j;c[Qa>>2]=n;c[La>>2]=p;j=k;if((f|0)!=(j|0))do{f=f+-12|0;Bc(f)}while((f|0)!=(j|0));if(k|0)wf(k)}else{c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[Ma>>2]=0;c[Pa>>2]=0;c[_b>>2]=0;c[Qa>>2]=(c[Qa>>2]|0)+12}Bc(_b);f=c[Oa>>2]|0;aa=f+(ea*12|0)|0;ba=Na+(ea<<2)|0;l=c[ba>>2]|0;j=c[(c[Ub>>2]|0)+352>>2]|0;ca=l+4|0;if((c[ca>>2]|0)!=(c[l>>2]|0)){da=f+(ea*12|0)+4|0;Z=f+(ea*12|0)+8|0;_=(j&2|0)==0;$=(j&8|0)!=0;Y=(j&11|0)!=0;X=0;do{c[_b>>2]=0;c[_b+4>>2]=0;c[_b+8>>2]=0;c[_b+12>>2]=0;c[_b+16>>2]=0;c[_b+20>>2]=0;c[_b+24>>2]=0;c[_b+28>>2]=0;j=c[da>>2]|0;Sb=c[Z>>2]|0;k=Sb;do if(j>>>0<Sb>>>0){c[j>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;c[j+16>>2]=0;c[j+8>>2]=c[ga>>2];c[j+12>>2]=c[ha>>2];c[j+16>>2]=c[ia>>2];c[ia>>2]=0;c[ha>>2]=0;c[ga>>2]=0;f=j+20|0;c[f>>2]=0;c[j+24>>2]=0;c[j+28>>2]=0;if((j|0)!=(_b|0))Mb(f,c[ka>>2]|0,c[la>>2]|0);c[da>>2]=(c[da>>2]|0)+32}else{m=c[aa>>2]|0;o=j-m>>5;f=o+1|0;if(f>>>0>134217727){Vb=1037;break pa}Sb=k-m|0;n=Sb>>4;n=Sb>>5>>>0<67108863?(n>>>0<f>>>0?f:n):134217727;if(!n){f=0;k=0;m=0}else{if(n>>>0>134217727){Vb=1040;break pa}j=n<<5;j=(j|0)==0?1:j;f=vf(j)|0;qa:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break qa}ub[f&3]();f=vf(j)|0}while(!(f|0));while(0);m=_b;k=c[m>>2]|0;m=c[m+4>>2]|0}j=f+(o<<5)|0;v=f+(n<<5)|0;Sb=j;c[Sb>>2]=k;c[Sb+4>>2]=m;c[f+(o<<5)+16>>2]=0;c[f+(o<<5)+8>>2]=c[ga>>2];c[f+(o<<5)+12>>2]=c[ha>>2];c[f+(o<<5)+16>>2]=c[ia>>2];c[ia>>2]=0;c[ha>>2]=0;c[ga>>2]=0;k=f+(o<<5)+20|0;c[k>>2]=0;c[f+(o<<5)+24>>2]=0;c[f+(o<<5)+28>>2]=0;if((j|0)==(_b|0))f=_b;else{Mb(k,c[ka>>2]|0,c[la>>2]|0);f=j}u=f+32|0;t=c[aa>>2]|0;f=c[da>>2]|0;if((f|0)==(t|0)){f=t;t=f}else{do{s=f;f=f+-32|0;r=f;o=c[r+4>>2]|0;n=j+-32|0;c[n>>2]=c[r>>2];c[n+4>>2]=o;n=j+-24|0;o=s+-24|0;c[n>>2]=0;r=j+-20|0;c[r>>2]=0;c[j+-16>>2]=0;q=s+-20|0;m=(c[q>>2]|0)-(c[o>>2]|0)|0;p=(m|0)/96|0;do if(m|0){if(p>>>0>44739242){Vb=1051;break pa}k=vf(m)|0;ra:do if(!k)do{k=c[5972]|0;c[5972]=k+0;if(!k){k=0;break ra}ub[k&3]();k=vf(m)|0}while(!(k|0));while(0);c[r>>2]=k;c[n>>2]=k;c[j+-16>>2]=k+(p*96|0);m=c[o>>2]|0;n=c[q>>2]|0;if((m|0)==(n|0))break;do{Jb(k,m);m=m+96|0;k=(c[r>>2]|0)+96|0;c[r>>2]=k}while((m|0)!=(n|0))}while(0);k=j+-12|0;c[k>>2]=0;c[j+-8>>2]=0;c[j+-4>>2]=0;if((j|0)!=(s|0))Mb(k,c[s+-12>>2]|0,c[s+-8>>2]|0);j=j+-32|0}while((f|0)!=(t|0));t=c[aa>>2]|0;f=c[da>>2]|0}c[aa>>2]=j;c[da>>2]=u;c[Z>>2]=v;r=t;if((f|0)!=(r|0))do{p=f+-12|0;j=c[p>>2]|0;if(j|0){q=f+-8|0;k=c[q>>2]|0;if((k|0)!=(j|0)){do{m=k+-12|0;c[q>>2]=m;n=c[m>>2]|0;o=n;if(!n)k=m;else{k=k+-8|0;m=c[k>>2]|0;if((m|0)!=(n|0))c[k>>2]=m+(~((m+-16-o|0)>>>4)<<4);wf(n);k=c[q>>2]|0}}while((k|0)!=(j|0));j=c[p>>2]|0}wf(j)}m=f+-24|0;j=c[m>>2]|0;if(j|0){n=f+-20|0;k=c[n>>2]|0;if((k|0)!=(j|0)){do{Sb=k+-96|0;c[n>>2]=Sb;Lb(Sb);k=c[n>>2]|0}while((k|0)!=(j|0));j=c[m>>2]|0}wf(j)}f=f+-32|0}while((f|0)!=(r|0));if(!t)break;wf(t)}while(0);f=c[ma>>2]|0;if(f|0){j=c[la>>2]|0;if((j|0)!=(f|0)){do{k=j+-12|0;c[la>>2]=k;m=c[k>>2]|0;n=m;if(!m)j=k;else{j=j+-8|0;k=c[j>>2]|0;if((k|0)!=(m|0))c[j>>2]=k+(~((k+-16-n|0)>>>4)<<4);wf(m);j=c[la>>2]|0}}while((j|0)!=(f|0));f=c[ma>>2]|0}wf(f)}f=c[na>>2]|0;if(f|0){j=c[ha>>2]|0;if((j|0)!=(f|0)){do{Sb=j+-96|0;c[ha>>2]=Sb;Lb(Sb);j=c[ha>>2]|0}while((j|0)!=(f|0));f=c[na>>2]|0}wf(f)}w=c[l>>2]|0;f=c[w+(X*52|0)+24>>2]|0;y=c[aa>>2]|0;c[y+(X<<5)>>2]=f;c[y+(X<<5)+4>>2]=f;f=y+(X<<5)+20|0;j=w+(X*52|0)+40|0;if((f|0)!=(j|0))Mb(f,c[j>>2]|0,c[w+(X*52|0)+44>>2]|0);do if(!_){u=w+(X*52|0)+28|0;v=w+(X*52|0)+32|0;j=c[v>>2]|0;f=c[u>>2]|0;if((j|0)==(f|0))break;else t=0;do{s=f;n=c[s+(t*12|0)+4>>2]|0;s=c[s+(t*12|0)>>2]|0;Sb=n-s|0;m=Sb>>4;if((Sb|0)<48){if((s|0)!=(n|0))Vb=1102}else{r=m+-1|0;p=s+(r<<4)|0;r=s+(r<<4)+8|0;k=0;x=0.0;o=c[p+4>>2]|0;p=c[p>>2]|0;q=c[r+4>>2]|0;r=c[r>>2]|0;do{Pb=s+(k<<4)|0;Qb=p;p=c[Pb>>2]|0;d=o;o=c[Pb+4>>2]|0;Pb=s+(k<<4)+8|0;Rb=r;r=c[Pb>>2]|0;Sb=q;q=c[Pb+4>>2]|0;x=x+(+(Qb>>>0)+4294967296.0*+(d|0)+(+(p>>>0)+4294967296.0*+(o|0)))*(+(Rb>>>0)+4294967296.0*+(Sb|0)-(+(r>>>0)+4294967296.0*+(q|0)));k=k+1|0}while((k|0)<(m|0));if(!(!(x*-.5>=0.0)|(s|0)==(n|0)))Vb=1102}do if((Vb|0)==1102){Vb=0;k=n+-16|0;if(s>>>0<k>>>0){j=s;f=k}else break;do{c[_b>>2]=c[j>>2];c[_b+4>>2]=c[j+4>>2];c[_b+8>>2]=c[j+8>>2];c[_b+12>>2]=c[j+12>>2];c[j>>2]=c[f>>2];c[j+4>>2]=c[f+4>>2];c[j+8>>2]=c[f+8>>2];c[j+12>>2]=c[f+12>>2];c[f>>2]=c[_b>>2];c[f+4>>2]=c[_b+4>>2];c[f+8>>2]=c[_b+8>>2];c[f+12>>2]=c[_b+12>>2];j=j+16|0;f=f+-16|0}while(j>>>0<f>>>0);f=c[u>>2]|0;j=c[v>>2]|0}while(0);t=t+1|0}while(t>>>0<((j-f|0)/12|0)>>>0)}while(0);if($){fc(Zb,w+(X*52|0)+28|0,1e3);lc(_b,Zb,Y);p=c[_b>>2]|0;f=c[oa>>2]|0;c[pa>>2]=0;c[oa>>2]=0;c[_b>>2]=0;q=c[Zb>>2]|0;if(q|0){j=c[qa>>2]|0;if((j|0)!=(q|0)){do{k=j;j=j+-12|0;n=c[j>>2]|0;o=n;if(n|0){k=k+-8|0;m=c[k>>2]|0;if((m|0)!=(n|0))c[k>>2]=m+(~((m+-16-o|0)>>>4)<<4);wf(n)}}while((j|0)!=(q|0));c[qa>>2]=q}wf(q)}}else{lc(_b,w+(X*52|0)+28|0,Y);p=c[_b>>2]|0;f=c[Ka>>2]|0}Sb=f-p|0;R=(Sb|0)/12|0;if(!Sb)r=p;else{V=y+(X<<5)+8|0;W=y+(X<<5)+12|0;Q=y+(X<<5)+16|0;r=p;P=0;do{m=za;ja=m+64|0;do{c[m>>2]=0;m=m+4|0}while((m|0)<(ja|0));m=_b;c[m>>2]=0;c[m+4>>2]=-2147483648;m=ra;c[m>>2]=0;c[m+4>>2]=-2147483648;m=sa;c[m>>2]=0;c[m+4>>2]=-2147483648;m=ta;c[m>>2]=0;c[m+4>>2]=-2147483648;m=ua;ja=m+60|0;do{c[m>>2]=0;m=m+4|0}while((m|0)<(ja|0));n=c[W>>2]|0;Sb=c[Q>>2]|0;k=Sb;do if(n>>>0<Sb>>>0){c[n>>2]=c[_b>>2];c[n+4>>2]=c[_b+4>>2];c[n+8>>2]=c[_b+8>>2];c[n+12>>2]=c[_b+12>>2];c[n+16>>2]=c[_b+16>>2];c[n+20>>2]=c[_b+20>>2];c[n+24>>2]=c[_b+24>>2];c[n+28>>2]=c[_b+28>>2];j=n+32|0;c[j>>2]=0;c[n+36>>2]=0;c[n+40>>2]=0;k=(n|0)==(_b|0);if(!k)Mb(j,c[ua>>2]|0,c[Ja>>2]|0);j=n+44|0;c[j>>2]=0;c[n+48>>2]=0;c[n+52>>2]=0;if(!k)Mb(j,c[Ha>>2]|0,c[Ia>>2]|0);Sb=n+56|0;c[Sb>>2]=0;j=n+60|0;c[j>>2]=0;c[n+64>>2]=0;c[Sb>>2]=c[Aa>>2];c[j>>2]=c[Ba>>2];c[n+64>>2]=c[Ca>>2];c[Ca>>2]=0;c[Ba>>2]=0;c[Aa>>2]=0;j=n+68|0;c[j>>2]=0;c[n+72>>2]=0;c[n+76>>2]=0;if(!k)Mb(j,c[e>>2]|0,c[Ga>>2]|0);j=n+80|0;c[j>>2]=0;c[n+84>>2]=0;c[n+88>>2]=0;if(!k)Mb(j,c[Da>>2]|0,c[Ea>>2]|0);c[W>>2]=(c[W>>2]|0)+96}else{m=c[V>>2]|0;q=(n-m|0)/96|0;j=q+1|0;if(j>>>0>44739242){Vb=1145;break pa}Sb=(k-m|0)/96|0;n=Sb<<1;n=Sb>>>0<22369621?(n>>>0<j>>>0?j:n):44739242;if(!n)j=0;else{if(n>>>0>44739242){Vb=1148;break pa}k=n*96|0;k=(k|0)==0?1:k;j=vf(k)|0;sa:do if(!j)do{j=c[5972]|0;c[5972]=j+0;if(!j){j=0;break sa}ub[j&3]();j=vf(k)|0}while(!(j|0));while(0)}k=j+(q*96|0)|0;m=k;s=j+(n*96|0)|0;c[k>>2]=c[_b>>2];c[k+4>>2]=c[_b+4>>2];c[k+8>>2]=c[_b+8>>2];c[k+12>>2]=c[_b+12>>2];c[k+16>>2]=c[_b+16>>2];c[k+20>>2]=c[_b+20>>2];c[k+24>>2]=c[_b+24>>2];c[k+28>>2]=c[_b+28>>2];n=j+(q*96|0)+32|0;c[n>>2]=0;c[j+(q*96|0)+36>>2]=0;c[j+(q*96|0)+40>>2]=0;o=(k|0)==(_b|0);if(!o)Mb(n,c[ua>>2]|0,c[Ja>>2]|0);n=j+(q*96|0)+44|0;c[n>>2]=0;c[j+(q*96|0)+48>>2]=0;c[j+(q*96|0)+52>>2]=0;if(!o)Mb(n,c[Ha>>2]|0,c[Ia>>2]|0);Sb=j+(q*96|0)+56|0;c[Sb>>2]=0;n=j+(q*96|0)+60|0;c[n>>2]=0;c[j+(q*96|0)+64>>2]=0;c[Sb>>2]=c[Aa>>2];c[n>>2]=c[Ba>>2];c[j+(q*96|0)+64>>2]=c[Ca>>2];c[Ca>>2]=0;c[Ba>>2]=0;c[Aa>>2]=0;n=j+(q*96|0)+68|0;c[n>>2]=0;c[j+(q*96|0)+72>>2]=0;c[j+(q*96|0)+76>>2]=0;if(!o)Mb(n,c[e>>2]|0,c[Ga>>2]|0);n=j+(q*96|0)+80|0;c[n>>2]=0;c[j+(q*96|0)+84>>2]=0;c[j+(q*96|0)+88>>2]=0;if(!o)Mb(n,c[Da>>2]|0,c[Ea>>2]|0);o=k+96|0;n=c[V>>2]|0;j=c[W>>2]|0;if((j|0)==(n|0)){k=m;m=n;j=n}else{do{j=j+-96|0;Jb(k+-96|0,j);k=m+-96|0;m=k}while((j|0)!=(n|0));k=m;m=c[V>>2]|0;j=c[W>>2]|0}c[V>>2]=k;c[W>>2]=o;c[Q>>2]=s;k=m;if((j|0)!=(k|0))do{j=j+-96|0;Lb(j)}while((j|0)!=(k|0));if(!m)break;wf(m)}while(0);Lb(_b);k=c[V>>2]|0;m=k+(P*96|0)+32|0;j=r+(P*12|0)|0;do if($){q=c[j>>2]|0;u=k+(P*96|0)+36|0;s=c[u>>2]|0;if((s|0)==(c[k+(P*96|0)+40>>2]|0))Ob(m,q);else{c[s>>2]=0;t=s+4|0;c[t>>2]=0;c[s+8>>2]=0;o=q+4|0;j=(c[o>>2]|0)-(c[q>>2]|0)|0;n=j>>4;do if(n|0){if(n>>>0>268435455){Vb=1173;break pa}k=(j|0)==0?1:j;j=vf(k)|0;ta:do if(!j)while(1){j=c[5972]|0;c[5972]=j+0;if(!j){m=0;break ta}ub[j&3]();j=vf(k)|0;if(j|0){m=j;break}}else m=j;while(0);c[t>>2]=m;c[s>>2]=m;c[s+8>>2]=m+(n<<4);k=c[q>>2]|0;j=(c[o>>2]|0)-k|0;if((j|0)<=0)break;Vm(m|0,k|0,j|0)|0;c[t>>2]=m+(j>>4<<4)}while(0);c[u>>2]=(c[u>>2]|0)+12}j=(c[V>>2]|0)+(P*96|0)+32|0;fc(_b,j,-1e3);if((j|0)!=(_b|0))Mb(j,c[_b>>2]|0,c[va>>2]|0);j=c[_b>>2]|0;if(j|0){k=c[va>>2]|0;if((k|0)!=(j|0)){do{m=k+-12|0;c[va>>2]=m;n=c[m>>2]|0;o=n;if(!n)k=m;else{k=k+-8|0;m=c[k>>2]|0;if((m|0)!=(n|0))c[k>>2]=m+(~((m+-16-o|0)>>>4)<<4);wf(n);k=c[va>>2]|0}}while((k|0)!=(j|0));j=c[_b>>2]|0}wf(j)}}else{if((m|0)==(j|0))break;Mb(m,c[j>>2]|0,c[r+(P*12|0)+4>>2]|0)}while(0);k=c[V>>2]|0;j=k+(P*96|0)+32|0;c[Yb>>2]=0;c[xa>>2]=0;c[ya>>2]=0;if((Yb|0)!=(j|0))Mb(Yb,c[j>>2]|0,c[k+(P*96|0)+36>>2]|0);M=k+(P*96|0)|0;N=M;c[N>>2]=-1;c[N+4>>2]=2147483647;N=k+(P*96|0)+8|0;L=N;c[L>>2]=-1;c[L+4>>2]=2147483647;L=k+(P*96|0)+16|0;K=L;c[K>>2]=0;c[K+4>>2]=-2147483648;K=k+(P*96|0)+24|0;m=K;c[m>>2]=0;c[m+4>>2]=-2147483648;m=c[xa>>2]|0;j=c[Yb>>2]|0;O=j;k=m;if((m|0)!=(j|0)){J=(m-j|0)/12|0;I=0;z=0;w=-2147483648;v=0;u=-2147483648;t=-1;s=2147483647;q=-1;o=2147483647;while(1){m=c[O+(I*12|0)+4>>2]|0;n=c[O+(I*12|0)>>2]|0;D=n;if((m|0)==(n|0)){m=z;n=w}else{C=m-n>>4;B=0;A=w;while(1){w=D+(B<<4)|0;n=w;m=c[n>>2]|0;n=c[n+4>>2]|0;if((o|0)>(n|0)|(o|0)==(n|0)&q>>>0>m>>>0){q=M;c[q>>2]=m;c[q+4>>2]=n;q=m;o=n}y=D+(B<<4)+8|0;n=y;m=c[n>>2]|0;n=c[n+4>>2]|0;if((s|0)>(n|0)|(s|0)==(n|0)&t>>>0>m>>>0){t=N;c[t>>2]=m;c[t+4>>2]=n;t=m;s=n}n=w;m=c[n>>2]|0;n=c[n+4>>2]|0;if((u|0)<(n|0)|(u|0)==(n|0)&v>>>0<m>>>0){v=L;c[v>>2]=m;c[v+4>>2]=n;v=m;u=n}n=y;m=c[n>>2]|0;n=c[n+4>>2]|0;if((A|0)<(n|0)|(A|0)==(n|0)&z>>>0<m>>>0){Sb=K;c[Sb>>2]=m;c[Sb+4>>2]=n}else{m=z;n=A}B=B+1|0;if(B>>>0>=C>>>0)break;else{A=n;z=m}}}I=I+1|0;if(I>>>0>=J>>>0)break;else{z=m;w=n}}}if(j|0){if((k|0)!=(O|0)){while(1){j=k+-12|0;c[xa>>2]=j;m=c[j>>2]|0;n=m;if(m){j=k+-8|0;k=c[j>>2]|0;if((k|0)!=(m|0))c[j>>2]=k+(~((k+-16-n|0)>>>4)<<4);wf(m);j=c[xa>>2]|0}if((j|0)==(O|0))break;else k=j}j=c[Yb>>2]|0}wf(j)}P=P+1|0}while(P>>>0<R>>>0)}if(p|0){if((f|0)!=(r|0))do{k=f;f=f+-12|0;j=c[f>>2]|0;if(j|0){q=k+-8|0;k=c[q>>2]|0;if((k|0)!=(j|0)){do{m=k+-12|0;c[q>>2]=m;n=c[m>>2]|0;o=n;if(!n)k=m;else{k=k+-8|0;m=c[k>>2]|0;if((m|0)!=(n|0))c[k>>2]=m+(~((m+-16-o|0)>>>4)<<4);wf(n);k=c[q>>2]|0}}while((k|0)!=(j|0));j=c[f>>2]|0}wf(j)}}while((f|0)!=(r|0));wf(p)}X=X+1|0}while(X>>>0<(((c[ca>>2]|0)-(c[l>>2]|0)|0)/52|0)>>>0);l=c[ba>>2]|0}if(l|0){f=c[l>>2]|0;if(f|0){k=l+4|0;j=c[k>>2]|0;if((j|0)!=(f|0)){do{Sb=j+-52|0;c[k>>2]=Sb;Hc(Sb);j=c[k>>2]|0}while((j|0)!=(f|0));f=c[l>>2]|0}wf(f)}wf(l)}j=c[Oa>>2]|0;f=c[j+(ea*12|0)+4>>2]|0;j=c[j+(ea*12|0)>>2]|0;k=j;if((f|0)!=(j|0)){j=f-j>>5;f=0;do{Rb=c[Ub>>2]|0;Sb=k+(f<<5)+4|0;c[Sb>>2]=(c[Rb+216>>2]|0)+(c[Rb+204>>2]|0)+(c[Sb>>2]|0);f=f+1|0}while(f>>>0<j>>>0)}ea=ea+1|0;if(ea>>>0>=fa>>>0){Wb=Na;break oa}}if((Vb|0)==1013)Bl();else if((Vb|0)==1016){ac=Fa(4)|0;c[ac>>2]=8316;$a(ac|0,1336,91)}else if((Vb|0)==1037)Bl();else if((Vb|0)==1040){ac=Fa(4)|0;c[ac>>2]=8316;$a(ac|0,1336,91)}else if((Vb|0)==1051)Bl();else if((Vb|0)==1145)Bl();else if((Vb|0)==1148){ac=Fa(4)|0;c[ac>>2]=8316;$a(ac|0,1336,91)}else if((Vb|0)==1173)Bl()}else Wb=Rb;while(0);db(_b|0,0)|0;cc=+(c[_b>>2]|0)+ +(c[_b+4>>2]|0)/1.0e6-+h[Xb>>3];db(_b|0,0)|0;h[Xb>>3]=+(c[_b>>2]|0)+ +(c[_b+4>>2]|0)/1.0e6;h[$b>>3]=cc;sd(11542,$b);if(!Wb){$b=1;i=ac;return $b|0}wf(Wb);$b=1;i=ac;return $b|0}function wc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;h=a+144|0;b=c[h>>2]|0;if(b|0){i=a+148|0;d=c[i>>2]|0;if((d|0)!=(b|0)){e=d;while(1){d=e+-12|0;c[i>>2]=d;g=c[d>>2]|0;f=g;if(g){d=e+-8|0;e=c[d>>2]|0;if((e|0)!=(g|0))c[d>>2]=e+(~((e+-16-f|0)>>>4)<<4);wf(g);d=c[i>>2]|0}if((d|0)==(b|0))break;else e=d}b=c[h>>2]|0}wf(b)}h=c[a+140>>2]|0;if(h|0){i=h+-4|0;b=c[i>>2]|0;if(b|0){e=h+(b*12|0)|0;do{b=e;e=e+-12|0;f=c[e>>2]|0;g=f;if(f|0){b=b+-8|0;d=c[b>>2]|0;if((d|0)!=(f|0))c[b>>2]=d+(~((d+-16-g|0)>>>4)<<4);wf(f)}}while((e|0)!=(h|0))}wf(i)}e=a+72|0;b=c[e>>2]|0;if(b|0){f=a+76|0;d=c[f>>2]|0;if((d|0)!=(b|0)){do{l=d+-12|0;c[f>>2]=l;Bc(l);d=c[f>>2]|0}while((d|0)!=(b|0));b=c[e>>2]|0}wf(b)}k=a+60|0;b=c[k>>2]|0;if(b|0){l=a+64|0;d=c[l>>2]|0;if((d|0)!=(b|0)){do{i=d+-12|0;c[l>>2]=i;j=c[i>>2]|0;if(!j)d=i;else{h=d+-8|0;d=c[h>>2]|0;if((d|0)==(j|0))d=j;else{do{e=d+-12|0;c[h>>2]=e;f=c[e>>2]|0;g=f;if(!f)d=e;else{d=d+-8|0;e=c[d>>2]|0;if((e|0)!=(f|0))c[d>>2]=e+(~((e+-16-g|0)>>>4)<<4);wf(f);d=c[h>>2]|0}}while((d|0)!=(j|0));d=c[i>>2]|0}wf(d);d=c[l>>2]|0}}while((d|0)!=(b|0));b=c[k>>2]|0}wf(b)}h=a+48|0;b=c[h>>2]|0;if(b|0){i=a+52|0;d=c[i>>2]|0;if((d|0)!=(b|0)){do{e=d+-12|0;c[i>>2]=e;f=c[e>>2]|0;g=f;if(!f)d=e;else{d=d+-8|0;e=c[d>>2]|0;if((e|0)!=(f|0))c[d>>2]=e+(~((e+-16-g|0)>>>4)<<4);wf(f);d=c[i>>2]|0}}while((d|0)!=(b|0));b=c[h>>2]|0}wf(b)}i=a+36|0;b=c[i>>2]|0;if(!b)return;h=a+40|0;d=c[h>>2]|0;if((d|0)!=(b|0)){do{e=d+-12|0;c[h>>2]=e;f=c[e>>2]|0;g=f;if(!f)d=e;else{d=d+-8|0;e=c[d>>2]|0;if((e|0)!=(f|0))c[d>>2]=e+(~((e+-16-g|0)>>>4)<<4);wf(f);d=c[h>>2]|0}}while((d|0)!=(b|0));b=c[i>>2]|0}wf(b);return}
function nc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;y=i;i=i+16|0;w=y;x=a+12|0;u=a+16|0;a=c[x>>2]|0;if(((c[u>>2]|0)-a|0)<=0){i=y;return}v=w+4|0;q=w+8|0;r=w+8|0;s=b+4|0;t=b+8|0;p=0;a:while(1){o=c[a+(p<<2)>>2]|0;c[w>>2]=0;c[v>>2]=0;c[q>>2]=0;Ob(w,o);m=o+12|0;n=o+12|0;o=o+16|0;a=c[n>>2]|0;if(((c[o>>2]|0)-a|0)>0){l=0;do{f=c[a+(l<<2)>>2]|0;g=c[v>>2]|0;if((g|0)==(c[r>>2]|0))Ob(w,f);else{c[g>>2]=0;k=g+4|0;c[k>>2]=0;c[g+8>>2]=0;j=f+4|0;a=(c[j>>2]|0)-(c[f>>2]|0)|0;h=a>>4;if(h|0){if(h>>>0>268435455){a=13;break a}d=(a|0)==0?1:a;a=vf(d)|0;b:do if(!a)while(1){a=c[5972]|0;c[5972]=a+0;if(!a){e=0;break b}ub[a&3]();a=vf(d)|0;if(a|0){e=a;break}}else e=a;while(0);c[k>>2]=e;c[g>>2]=e;c[g+8>>2]=e+(h<<4);d=c[f>>2]|0;a=(c[j>>2]|0)-d|0;if((a|0)>0){Vm(e|0,d|0,a|0)|0;c[k>>2]=e+(a>>4<<4)}}c[v>>2]=(c[v>>2]|0)+12}nc(c[(c[m>>2]|0)+(l<<2)>>2]|0,b);l=l+1|0;a=c[n>>2]|0}while((l|0)<((c[o>>2]|0)-a>>2|0))}a=c[s>>2]|0;if((a|0)==(c[t>>2]|0))jc(b,w);else{c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;if((a|0)==(w|0))a=w;else{Mb(a,c[w>>2]|0,c[v>>2]|0);a=c[s>>2]|0}c[s>>2]=a+12}a=c[w>>2]|0;if(a|0){d=c[v>>2]|0;if((d|0)!=(a|0)){do{e=d+-12|0;c[v>>2]=e;f=c[e>>2]|0;g=f;if(!f)d=e;else{d=d+-8|0;e=c[d>>2]|0;if((e|0)!=(f|0))c[d>>2]=e+(~((e+-16-g|0)>>>4)<<4);wf(f);d=c[v>>2]|0}}while((d|0)!=(a|0));a=c[w>>2]|0}wf(a)}p=p+1|0;a=c[x>>2]|0;if((p|0)>=((c[u>>2]|0)-a>>2|0)){a=3;break}}if((a|0)==3){i=y;return}else if((a|0)==13)Bl()}function oc(a){a=a|0;var b=0,d=0;b=i;i=i+16|0;Ma(a|0)|0;if(Va(23880,2)|0)Zl(20301,b);a=Ra(c[5971]|0)|0;if((a|0?(d=c[a>>2]|0,d|0):0)?(b=d+48|0,(c[b>>2]&-256|0)==1126902528?(c[b+4>>2]|0)==1129074247:0):0)pm(c[d+12>>2]|0);d=c[2056]|0;c[2056]=d+0;pm(d)}function pc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+128|0;n=r;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;k=n+92|0;c[n+108>>2]=0;q=n+112|0;c[q>>2]=0;c[n+116>>2]=0;l=n+100|0;c[l>>2]=0;m=n+96|0;c[m>>2]=0;c[n>>2]=1652;c[k>>2]=1688;f=n+56|0;c[n+60>>2]=0;c[n+64>>2]=0;g=n+60|0;h=n+4|0;j=h+48|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(j|0));c[f>>2]=g;c[n+68>>2]=0;c[n+72>>2]=0;a[n+76>>0]=0;o=n+104|0;a[o>>0]=0;a[n+88>>0]=0;a[n+90>>0]=0;a[n+120>>0]=0;p=n+121|0;a[p>>0]=0;h=n+92|0;j=d+4|0;f=c[d>>2]|0;if((c[j>>2]|0)==(f|0))f=1652;else{g=0;do{ke(h,f+(g*12|0)|0,0);g=g+1|0;f=c[d>>2]|0}while(g>>>0<(((c[j>>2]|0)-f|0)/12|0)>>>0);f=c[n>>2]|0}h=n+(c[f+-12>>2]|0)|0;j=e+4|0;f=c[e>>2]|0;if((c[j>>2]|0)!=(f|0)){g=0;do{ke(h,f+(g*12|0)|0,1);g=g+1|0;f=c[e>>2]|0}while(g>>>0<(((c[j>>2]|0)-f|0)/12|0)>>>0)}le(n,2,b,0,0);Gd(n);c[k>>2]=1624;f=c[l>>2]|0;if(f|0)do{k=f;f=c[f+16>>2]|0;wf(k);c[l>>2]=f}while((f|0)!=0);c[m>>2]=0;l=n+108|0;d=c[q>>2]|0;b=c[l>>2]|0;h=b;e=d;if((d|0)==(b|0)){g=h;j=e;f=e}else{k=0;g=h;f=e;j=e;do{g=c[g+(k<<2)>>2]|0;if(g){wf(g);d=c[q>>2]|0;h=c[l>>2]|0;j=d;b=h;f=j}k=k+1|0;g=b}while(k>>>0<d-b>>2>>>0);d=b}if((j|0)!=(g|0)){f=j+(~((j+-4-d|0)>>>2)<<2)|0;c[q>>2]=f}a[o>>0]=0;a[p>>0]=0;if(!h){i=r;return}if((f|0)!=(h|0))c[q>>2]=f+(~((f+-4-h|0)>>>2)<<2);wf(h);i=r;return}function qc(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;r=i;i=i+128|0;n=r;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;k=n+92|0;c[n+108>>2]=0;q=n+112|0;c[q>>2]=0;c[n+116>>2]=0;l=n+100|0;c[l>>2]=0;m=n+96|0;c[m>>2]=0;c[n>>2]=1652;c[k>>2]=1688;f=n+56|0;c[n+60>>2]=0;c[n+64>>2]=0;g=n+60|0;h=n+4|0;j=h+48|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(j|0));c[f>>2]=g;c[n+68>>2]=0;c[n+72>>2]=0;a[n+76>>0]=0;o=n+104|0;a[o>>0]=0;a[n+88>>0]=0;a[n+90>>0]=0;a[n+120>>0]=0;p=n+121|0;a[p>>0]=0;h=n+92|0;j=d+4|0;f=c[d>>2]|0;if((c[j>>2]|0)==(f|0))f=1652;else{g=0;do{ke(h,f+(g*12|0)|0,0);g=g+1|0;f=c[d>>2]|0}while(g>>>0<(((c[j>>2]|0)-f|0)/12|0)>>>0);f=c[n>>2]|0}h=n+(c[f+-12>>2]|0)|0;j=e+4|0;f=c[e>>2]|0;if((c[j>>2]|0)!=(f|0)){g=0;do{ke(h,f+(g*12|0)|0,0);g=g+1|0;f=c[e>>2]|0}while(g>>>0<(((c[j>>2]|0)-f|0)/12|0)>>>0)}le(n,1,b,1,1);Gd(n);c[k>>2]=1624;f=c[l>>2]|0;if(f|0)do{k=f;f=c[f+16>>2]|0;wf(k);c[l>>2]=f}while((f|0)!=0);c[m>>2]=0;l=n+108|0;d=c[q>>2]|0;b=c[l>>2]|0;h=b;e=d;if((d|0)==(b|0)){g=h;j=e;f=e}else{k=0;g=h;f=e;j=e;do{g=c[g+(k<<2)>>2]|0;if(g){wf(g);d=c[q>>2]|0;h=c[l>>2]|0;j=d;b=h;f=j}k=k+1|0;g=b}while(k>>>0<d-b>>2>>>0);d=b}if((j|0)!=(g|0)){f=j+(~((j+-4-d|0)>>>2)<<2)|0;c[q>>2]=f}a[o>>0]=0;a[p>>0]=0;if(!h){i=r;return}if((f|0)!=(h|0))c[q>>2]=f+(~((f+-4-h|0)>>>2)<<2);wf(h);i=r;return}function rc(a){a=a|0;a=i;i=i+16|0;rd(9737,a);gb(1)}function sc(d,e){d=d|0;e=e|0;var f=0,g=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,xa=0,ya=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,La=0,Ma=0,Na=0.0;Ma=i;i=i+1680|0;Da=Ma+1664|0;Ca=Ma+1656|0;Ba=Ma+1648|0;Aa=Ma+1640|0;ya=Ma+1624|0;va=Ma+1616|0;ua=Ma+1608|0;ta=Ma+1600|0;sa=Ma+1592|0;ra=Ma+1552|0;qa=Ma+1544|0;pa=Ma+1536|0;oa=Ma+1528|0;na=Ma+1520|0;ma=Ma+1512|0;la=Ma+1504|0;ka=Ma+1496|0;ja=Ma+1488|0;ia=Ma+1480|0;ha=Ma+1456|0;w=Ma+1448|0;ga=Ma+1432|0;fa=Ma+1416|0;v=Ma+1408|0;u=Ma+1400|0;t=Ma+1392|0;s=Ma+1384|0;r=Ma+1376|0;q=Ma+1368|0;p=Ma+1360|0;A=Ma+1352|0;z=Ma+1344|0;y=Ma+1336|0;x=Ma+1328|0;o=Ma+1320|0;n=Ma+1312|0;xa=Ma+1296|0;Ja=Ma+752|0;Ea=Ma;Ka(8,98)|0;c[Ja>>2]=0;La=Ja+4|0;c[La>>2]=0;c[Ja+8>>2]=0;ca=Ja+264|0;h[ca>>3]=1.0;da=Ja+288|0;h[da>>3]=0.0;ea=Ja+312|0;h[ea>>3]=0.0;Y=Ja+272|0;h[Y>>3]=0.0;Z=Ja+296|0;h[Z>>3]=1.0;_=Ja+320|0;h[_>>3]=0.0;$=Ja+280|0;h[$>>3]=0.0;aa=Ja+304|0;h[aa>>3]=0.0;ba=Ja+328|0;h[ba>>3]=1.0;Fa=Ja+496|0;Ga=Ja+508|0;Ha=Ja+520|0;Ia=Ja+532|0;k=Fa;m=k+48|0;do{c[k>>2]=0;k=k+4|0}while((k|0)<(m|0));c[5352]=Ja;g=Ja+12|0;c[xa>>2]=11585;c[xa+4>>2]=g;l=Ja+8|0;Qc(Ja,xa);f=c[La>>2]|0;U=c[l>>2]|0;c[g>>2]=100;g=Ja+16|0;c[xa>>2]=11600;c[xa+4>>2]=g;if(f>>>0<U>>>0){T=xa;U=c[T+4>>2]|0;j=f;c[j>>2]=c[T>>2];c[j+4>>2]=U;j=(c[La>>2]|0)+8|0;c[La>>2]=j}else{Qc(Ja,xa);j=c[La>>2]|0}c[g>>2]=300;f=Ja+20|0;c[xa>>2]=11622;c[xa+4>>2]=f;if(j>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;g=j;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=2890;f=Ja+24|0;c[xa>>2]=11639;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=100;f=Ja+28|0;c[xa>>2]=11652;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=600;k=Ja+32|0;c[xa>>2]=11673;c[xa+4>>2]=k;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;f=g;c[f>>2]=c[T>>2];c[f+4>>2]=U;f=(c[La>>2]|0)+8|0;c[La>>2]=f}else{Qc(Ja,xa);f=c[La>>2]|0}c[k>>2]=400;g=Ja+36|0;c[xa>>2]=11688;c[xa+4>>2]=g;if(f>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;j=f;c[j>>2]=c[T>>2];c[j+4>>2]=U;j=(c[La>>2]|0)+8|0;c[La>>2]=j}else{Qc(Ja,xa);j=c[La>>2]|0}c[g>>2]=2;f=Ja+40|0;c[xa>>2]=11699;c[xa+4>>2]=f;if(j>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;g=j;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=6;f=Ja+44|0;c[xa>>2]=11713;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=6;f=Ja+48|0;c[xa>>2]=11725;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=6e3;f=Ja+52|0;c[xa>>2]=11739;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=1;f=Ja+56|0;c[xa>>2]=11754;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+104|0;c[xa>>2]=11769;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=4;f=Ja+108|0;c[xa>>2]=11790;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=20;f=Ja+112|0;c[xa>>2]=11808;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=50;f=Ja+116|0;c[xa>>2]=11819;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=50;f=Ja+120|0;c[xa>>2]=11831;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=50;f=Ja+124|0;c[xa>>2]=11843;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=150;f=Ja+128|0;c[xa>>2]=11853;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=2;j=Ja+132|0;c[xa>>2]=11870;c[xa+4>>2]=j;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[j>>2]=(c[k>>2]|0)*5;f=Ja+136|0;c[xa>>2]=11895;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=15;f=Ja+140|0;c[xa>>2]=11909;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=50;f=Ja+144|0;c[xa>>2]=11921;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+148|0;c[xa>>2]=11935;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+152|0;c[xa>>2]=11947;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=-1;f=Ja+156|0;c[xa>>2]=11960;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+160|0;c[xa>>2]=11978;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=c[j>>2];f=Ja+164|0;c[xa>>2]=11998;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=700;f=Ja+168|0;c[xa>>2]=12016;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=150;f=Ja+172|0;c[xa>>2]=12033;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=-1;f=Ja+60|0;c[xa>>2]=12049;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=4500;f=Ja+64|0;c[xa>>2]=12066;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+72|0;c[xa>>2]=12088;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=45;f=Ja+68|0;c[xa>>2]=12104;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=14500;f=Ja+76|0;c[xa>>2]=12135;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=1500;f=Ja+80|0;c[xa>>2]=12161;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=100;f=Ja+84|0;c[xa>>2]=12194;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+88|0;c[xa>>2]=12209;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=1;f=Ja+92|0;c[xa>>2]=12223;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+96|0;c[xa>>2]=12240;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+100|0;c[xa>>2]=12254;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;j=Ja+336|0;c[xa>>2]=12273;c[xa+4>>2]=j;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;f=g;c[f>>2]=c[T>>2];c[f+4>>2]=U;f=(c[La>>2]|0)+8|0;c[La>>2]=f}else{Qc(Ja,xa);f=c[La>>2]|0}c[xa>>2]=12290;c[xa+4>>2]=j;if(f>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[f>>2]=c[T>>2];c[f+4>>2]=U;f=(c[La>>2]|0)+8|0;c[La>>2]=f}else{Qc(Ja,xa);f=c[La>>2]|0}c[j>>2]=102500;j=Ja+340|0;c[xa>>2]=12295;c[xa+4>>2]=j;if(f>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[f>>2]=c[T>>2];c[f+4>>2]=U;f=(c[La>>2]|0)+8|0;c[La>>2]=f}else{Qc(Ja,xa);f=c[La>>2]|0}c[xa>>2]=12312;c[xa+4>>2]=j;if(f>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;g=f;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[j>>2]=102500;f=Ja+344|0;c[xa>>2]=12317;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+348|0;c[xa>>2]=12328;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=1;f=Ja+196|0;c[xa>>2]=12339;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=5e3;f=Ja+200|0;c[xa>>2]=12350;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=1e3;f=Ja+204|0;c[xa>>2]=12366;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+208|0;c[xa>>2]=12384;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+216|0;c[xa>>2]=12402;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+220|0;c[xa>>2]=12425;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+224|0;c[xa>>2]=12448;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+252|0;c[xa>>2]=12473;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+256|0;c[xa>>2]=12484;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+212|0;c[xa>>2]=12501;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+228|0;c[xa>>2]=12515;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+232|0;c[xa>>2]=12528;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+236|0;c[xa>>2]=12549;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+240|0;c[xa>>2]=12570;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+244|0;c[xa>>2]=12593;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+248|0;c[xa>>2]=12611;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+176|0;c[xa>>2]=12628;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=5;f=Ja+180|0;c[xa>>2]=12645;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=10;f=Ja+184|0;c[xa>>2]=12661;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+188|0;c[xa>>2]=12674;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=100;f=Ja+192|0;c[xa>>2]=12686;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=100;f=Ja+352|0;c[xa>>2]=12698;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+356|0;c[xa>>2]=12710;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+360|0;c[xa>>2]=12724;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+364|0;c[xa>>2]=12735;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}Mm(f|0,0,132)|0;f=Ja+376|0;c[xa>>2]=12747;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+380|0;c[xa>>2]=12767;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+384|0;c[xa>>2]=12787;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+388|0;c[xa>>2]=12807;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+392|0;c[xa>>2]=12827;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){T=xa;U=c[T+4>>2]|0;c[g>>2]=c[T>>2];c[g+4>>2]=U;g=(c[La>>2]|0)+8|0;c[La>>2]=g}else{Qc(Ja,xa);g=c[La>>2]|0}c[f>>2]=0;f=Ja+396|0;c[xa>>2]=12847;c[xa+4>>2]=f;if(g>>>0<(c[l>>2]|0)>>>0){S=xa;T=c[S+4>>2]|0;U=g;c[U>>2]=c[S>>2];c[U+4>>2]=T;c[La>>2]=(c[La>>2]|0)+8}else Qc(Ja,xa);c[f>>2]=0;a:do if(!3){f=12867;V=235}else{g=12867;f=12867;while(1){if(!(a[g>>0]|0))break a;g=g+1|0;f=g;if(!(f&3)){f=g;V=235;break}}}while(0);if((V|0)==235){while(1){g=c[f>>2]|0;if(!((g&-2139062144^-2139062144)&g+-16843009))f=f+4|0;else break}if((g&255)<<24>>24)do f=f+1|0;while((a[f>>0]|0)!=0)}m=f-12867|0;U=Fa+11|0;f=(a[U>>0]|0)<0;if(f)l=(c[Ja+504>>2]&2147483647)+-1|0;else l=10;do if(m>>>0<=l>>>0){f=f?c[Fa>>2]|0:Fa;if(m|0)Vm(f|0,12867,m|0)|0;a[f+m>>0]=0;if((a[U>>0]|0)<0){c[Ja+500>>2]=m;break}else{a[U>>0]=m;break}}else{if((-18-l|0)>>>0<(m-l|0)>>>0)Il();j=f?c[Fa>>2]|0:Fa;if(l>>>0<2147483623){k=l<<1;k=m>>>0<k>>>0?k:m;k=k>>>0<11?11:k+16&-16}else k=-17;g=(k|0)==0?1:k;f=vf(g)|0;b:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break b}ub[f&3]();f=vf(g)|0}while(!(f|0));while(0);if(m|0)Vm(f|0,12867,m|0)|0;if((l|0)!=10)wf(j);c[Fa>>2]=f;c[Ja+504>>2]=k|-2147483648;c[Ja+500>>2]=m;a[f+m>>0]=0}while(0);c:do if(!1){f=13153;V=263}else{g=13153;f=13153;while(1){if(!(a[g>>0]|0))break c;g=g+1|0;f=g;if(!(f&3)){f=g;V=263;break}}}while(0);if((V|0)==263){while(1){g=c[f>>2]|0;if(!((g&-2139062144^-2139062144)&g+-16843009))f=f+4|0;else break}if((g&255)<<24>>24)do f=f+1|0;while((a[f>>0]|0)!=0)}m=f-13153|0;T=Ga+11|0;f=(a[T>>0]|0)<0;if(f)l=(c[Ja+516>>2]&2147483647)+-1|0;else l=10;do if(m>>>0<=l>>>0){f=f?c[Ga>>2]|0:Ga;if(m|0)Vm(f|0,13153,m|0)|0;a[f+m>>0]=0;if((a[T>>0]|0)<0){c[Ja+512>>2]=m;break}else{a[T>>0]=m;break}}else{if((-18-l|0)>>>0<(m-l|0)>>>0)Il();j=f?c[Ga>>2]|0:Ga;if(l>>>0<2147483623){k=l<<1;k=m>>>0<k>>>0?k:m;k=k>>>0<11?11:k+16&-16}else k=-17;g=(k|0)==0?1:k;f=vf(g)|0;d:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break d}ub[f&3]();f=vf(g)|0}while(!(f|0));while(0);if(m|0)Vm(f|0,13153,m|0)|0;if((l|0)!=10)wf(j);c[Ga>>2]=f;c[Ja+516>>2]=k|-2147483648;c[Ja+512>>2]=m;a[f+m>>0]=0}while(0);R=Ea+8|0;I=Ea+80|0;c[I>>2]=0;J=Ea+84|0;c[J>>2]=0;c[Ea+88>>2]=0;f=Ea+96|0;S=Ea+396|0;k=Ea+560|0;c[k>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;c[k+20>>2]=0;c[k+24>>2]=0;c[k+28>>2]=0;k=Ea+600|0;m=k+44|0;do{c[k>>2]=0;k=k+4|0}while((k|0)<(m|0));L=Ea+16|0;c[L>>2]=0;c[L+4>>2]=0;c[L+8>>2]=0;c[L+12>>2]=0;c[S>>2]=0;c[S+4>>2]=0;c[S+8>>2]=0;c[S+12>>2]=0;c[S+16>>2]=0;c[S+20>>2]=0;h[Ea+32>>3]=4.5;h[Ea+64>>3]=0.0;h[Ea+72>>3]=-1.0e4;h[Ea+56>>3]=14.5;M=Ea+384|0;c[M>>2]=0;K=Ea+388|0;c[K>>2]=-1;O=Ea+424|0;c[Ea+368>>2]=0;Mm(O|0,0,136)|0;c[Ea+372>>2]=45;a[Ea+380>>0]=0;N=Ea+392|0;c[N>>2]=0;H=Ea+352|0;c[H>>2]=1162167621;c[H+4>>2]=1162167621;c[H+8>>2]=1162167621;c[H+12>>2]=1162167621;Mm(f|0,0,256)|0;c[R>>2]=2040;H=Ea+648|0;c[H>>2]=Ja;db(xa|0,0)|0;db(xa|0,0)|0;h[Ea+656>>3]=+(c[xa>>2]|0)+ +(c[xa+4>>2]|0)/1.0e6;Q=Ea+664|0;c[Q>>2]=-1;P=Ea+668|0;c[P>>2]=0;c[P+4>>2]=0;c[P+8>>2]=0;a[P+12>>0]=0;P=Ea+684|0;c[P>>2]=0;c[P+4>>2]=0;c[P+8>>2]=0;a[P+12>>0]=0;P=Ea+700|0;c[P>>2]=0;c[P+4>>2]=0;c[P+8>>2]=0;a[P+12>>0]=0;P=Ea+716|0;c[P>>2]=0;c[P+4>>2]=0;c[P+8>>2]=0;a[P+12>>0]=0;P=Ea+732|0;c[P>>2]=0;c[P+4>>2]=0;c[P+8>>2]=0;a[P+12>>0]=0;c[Ea+4>>2]=1;c[Ea>>2]=0;c[xa>>2]=0;P=xa+4|0;c[P>>2]=0;c[xa+8>>2]=0;c[n>>2]=9789;rd(9760,n);rd(9797,o);rd(17173,x);rd(9829,y);rd(9899,z);rd(9976,A);rd(10043,p);rd(17173,q);rd(10080,r);rd(10145,s);rd(10209,t);rd(10272,u);rd(17173,v);rd(10325,fa);rd(10399,ga);if(!(Sc(Ja,13764)|0)){c[w>>2]=13764;rd(10470,w)}e:do if((d|0)>1){f=1;do{c[ha>>2]=c[e+(f<<2)>>2];sd(10500,ha);f=f+1|0}while((f|0)!=(d|0));n=xa+8|0;o=ha+4|0;p=ha+8|0;q=ha+8|0;r=ha+11|0;s=ha+8|0;t=ha+4|0;u=fa+11|0;v=fa+9|0;w=ga+11|0;x=ga+8|0;y=ga+4|0;z=ha+4|0;A=ha+8|0;B=ha+12|0;C=ha+16|0;D=ha+20|0;E=ga+2|0;F=ga+4|0;G=ga;f=1;f:while(1){m=c[e+(f<<2)>>2]|0;g=a[m>>0]|0;g:do switch(g<<24>>24){case 45:{g=m+1|0;j=a[g>>0]|0;if(!(j<<24>>24))break g;while(1){j=j<<24>>24;h:do switch(j|0){case 104:{V=298;break f}case 118:{c[5355]=(c[5355]|0)+1;break}case 112:{a[23892]=1;break}case 103:{f=f+1|0;l=c[e+(f<<2)>>2]|0;while(1){k=a[l>>0]|0;j=k<<24>>24;m=l+1|0;if(k<<24>>24==32|(j+-9|0)>>>0<5)l=m;else break}switch(j|0){case 45:{j=1;V=305;break}case 43:{j=0;V=305;break}default:j=0}if((V|0)==305){V=0;l=m;k=a[m>>0]|0}m=(k<<24>>24)+-48|0;if(m>>>0<10){k=0;do{l=l+1|0;k=(k*10|0)-m|0;m=(a[l>>0]|0)+-48|0}while(m>>>0<10)}else k=0;l=j|0?k:0-k|0;c[fa>>2]=0;c[fa+4>>2]=0;c[fa+8>>2]=0;a[u>>0]=9;k=fa;j=10509;m=k+9|0;do{a[k>>0]=a[j>>0]|0;k=k+1|0;j=j+1|0}while((k|0)<(m|0));a[v>>0]=0;c[ha>>2]=2;c[z>>2]=1;c[A>>2]=0;c[A+4>>2]=0;c[A+8>>2]=0;c[A+12>>2]=0;c[ja>>2]=1;c[ja+4>>2]=ha;j=wa(102,ja|0)|0;if(j>>>0>4294963200){if(!(c[5356]|0))k=21468;else k=c[(en()|0)+64>>2]|0;c[k>>2]=0-j;j=-1}c[Q>>2]=j;c[ga>>2]=808464432;c[ga+4>>2]=808464432;c[ga+8>>2]=808464432;c[ga+12>>2]=808464432;b[ga>>1]=2;b[E>>1]=dn(l&65535|0)|0;c[F>>2]=za(((a[u>>0]|0)<0?c[fa>>2]|0:fa)|0)|0;c[ha>>2]=c[Q>>2];c[z>>2]=G;c[A>>2]=16;c[B>>2]=0;c[C>>2]=0;c[D>>2]=0;c[ka>>2]=3;c[ka+4>>2]=ha;k=wa(102,ka|0)|0;if(k>>>0<=4294963200){if((k|0)<0)V=317}else{if(!(c[5356]|0))j=21468;else j=c[(en()|0)+64>>2]|0;c[j>>2]=0-k;V=317}do if((V|0)==317){V=0;c[la>>2]=(a[u>>0]|0)<0?c[fa>>2]|0:fa;c[la+4>>2]=l;nf(0,la);j=c[Q>>2]|0;if((j|0)==-1)break;c[ma>>2]=j;j=bb(6,ma|0)|0;j=(j|0)==-4?-115:j;if(j>>>0>4294963200){if(!(c[5356]|0))k=21468;else k=c[(en()|0)+64>>2]|0;c[k>>2]=0-j}c[Q>>2]=-1}while(0);if((a[u>>0]|0)<0)wf(c[fa>>2]|0);break}case 98:{f=f+1|0;c[5354]=pf(c[e+(f<<2)>>2]|0,14064)|0;break}case 111:{f=f+1|0;j=e+(f<<2)|0;m=pf(c[j>>2]|0,17164)|0;c[R>>2]=m;if(!m){V=329;break f}c[na>>2]=9789;Wb(R,10519,na);if(!(c[R>>2]|0)){V=329;break f}break}case 99:{f=f+1|0;j=e+(f<<2)|0;if(Sc(Ja,c[j>>2]|0)|0)break h;c[pa>>2]=c[j>>2];rd(10585,pa);break}case 115:{f=f+1|0;l=e+(f<<2)|0;j=c[l>>2]|0;i:do if(!(j&3))V=335;else while(1){k=a[j>>0]|0;switch(k<<24>>24){case 0:case 61:break i;default:{}}j=j+1|0;if(!(j&3)){V=335;break i}}while(0);j:do if((V|0)==335){V=0;k=c[j>>2]|0;k:do if(!((k&-2139062144^-2139062144)&k+-16843009))do{if((k&-2139062144^-2139062144)&(k^1027423549)+-16843009|0)break k;j=j+4|0;k=c[j>>2]|0}while(!((k&-2139062144^-2139062144)&k+-16843009|0));while(0);while(1){k=a[j>>0]|0;switch(k<<24>>24){case 0:case 61:break j;default:j=j+1|0}}}while(0);if((j|0)==0|k<<24>>24!=61)break h;k=j+1|0;a[j>>0]=0;if(Rc(Ja,c[l>>2]|0,k)|0)break h;c[qa>>2]=c[l>>2];c[qa+4>>2]=k;rd(10613,qa);break}case 109:{f=f+1|0;m=c[e+(f<<2)>>2]|0;c[ra>>2]=ca;c[ra+4>>2]=Y;c[ra+8>>2]=$;c[ra+12>>2]=da;c[ra+16>>2]=Z;c[ra+20>>2]=aa;c[ra+24>>2]=ea;c[ra+28>>2]=_;c[ra+32>>2]=ba;qf(m,10639,ra)|0;break}case 45:{l=c[P>>2]|0;m=c[xa>>2]|0;k=m;j=l;if((l|0)!=(m|0))tc(Ea,xa);if((j|0)==(k|0))break h;do{j=j+-12|0;if((a[j+11>>0]|0)<0)wf(c[j>>2]|0)}while((j|0)!=(k|0));c[P>>2]=k;break}default:{c[sa>>2]=j;rd(10675,sa)}}while(0);g=g+1|0;j=a[g>>0]|0;if(!(j<<24>>24))break g}}case 36:{c[ha>>2]=0;c[o>>2]=0;c[p>>2]=0;c[ga>>2]=0;c[ga+4>>2]=0;c[ga+8>>2]=0;l=m;l:do if(!(l&3)){g=m;V=357}else{k=m;j=36;g=l;while(1){if(!(j<<24>>24))break l;j=k+1|0;g=j;if(!(g&3)){g=j;V=357;break l}k=j;j=a[j>>0]|0}}while(0);if((V|0)==357){V=0;while(1){j=c[g>>2]|0;if(!((j&-2139062144^-2139062144)&j+-16843009))g=g+4|0;else break}if((j&255)<<24>>24)do g=g+1|0;while((a[g>>0]|0)!=0)}l=g-l|0;if(l>>>0>4294967279){V=363;break f}if(l>>>0<11){a[w>>0]=l;if(!l)g=ga;else{g=ga;V=370}}else{k=l+16&-16;j=(k|0)==0?1:k;g=vf(j)|0;m:do if(!g)do{g=c[5972]|0;c[5972]=g+0;if(!g){g=0;break m}ub[g&3]();g=vf(j)|0}while(!(g|0));while(0);c[ga>>2]=g;c[x>>2]=k|-2147483648;c[y>>2]=l;V=370}if((V|0)==370){V=0;Vm(g|0,m|0,l|0)|0}a[g+l>>0]=0;g=c[o>>2]|0;do if(g>>>0<(c[q>>2]|0)>>>0){c[g>>2]=c[ga>>2];c[g+4>>2]=c[ga+4>>2];c[g+8>>2]=c[ga+8>>2];c[ga>>2]=0;c[ga+4>>2]=0;c[ga+8>>2]=0;c[o>>2]=g+12}else{uc(ha,ga);if((a[w>>0]|0)>=0)break;wf(c[ga>>2]|0)}while(0);tc(Ea,ha);j=c[ha>>2]|0;if(j|0){g=c[o>>2]|0;if((g|0)!=(j|0)){do{g=g+-12|0;if((a[g+11>>0]|0)<0)wf(c[g>>2]|0)}while((g|0)!=(j|0));c[o>>2]=j}wf(j)}break}default:{c[ha>>2]=0;c[ha+4>>2]=0;c[ha+8>>2]=0;l=m;n:do if(!(l&3)){g=m;V=387}else{k=m;j=g;g=l;while(1){if(!(j<<24>>24))break n;j=k+1|0;g=j;if(!(g&3)){g=j;V=387;break n}k=j;j=a[j>>0]|0}}while(0);if((V|0)==387){V=0;while(1){j=c[g>>2]|0;if(!((j&-2139062144^-2139062144)&j+-16843009))g=g+4|0;else break}if((j&255)<<24>>24)do g=g+1|0;while((a[g>>0]|0)!=0)}l=g-l|0;if(l>>>0>4294967279){V=393;break f}if(l>>>0<11){a[r>>0]=l;if(!l)g=ha;else{g=ha;V=400}}else{k=l+16&-16;j=(k|0)==0?1:k;g=vf(j)|0;o:do if(!g)do{g=c[5972]|0;c[5972]=g+0;if(!g){g=0;break o}ub[g&3]();g=vf(j)|0}while(!(g|0));while(0);c[ha>>2]=g;c[s>>2]=k|-2147483648;c[t>>2]=l;V=400}if((V|0)==400){V=0;Vm(g|0,m|0,l|0)|0}a[g+l>>0]=0;g=c[P>>2]|0;do if(g>>>0<(c[n>>2]|0)>>>0){c[g>>2]=c[ha>>2];c[g+4>>2]=c[ha+4>>2];c[g+8>>2]=c[ha+8>>2];c[ha>>2]=0;c[ha+4>>2]=0;c[ha+8>>2]=0;c[P>>2]=g+12}else{uc(xa,ha);if((a[r>>0]|0)>=0)break;wf(c[ha>>2]|0)}while(0)}}while(0);f=f+1|0;if((f|0)>=(d|0)){W=xa;X=P;break e}}if((V|0)==298){rd(9618,ia);gb(1)}else if((V|0)==329){c[oa>>2]=c[j>>2];rd(10554,oa);gb(1)}else if((V|0)==363)Il();else if((V|0)==393)Il()}else{W=xa;X=P}while(0);if((c[X>>2]|0)!=(c[W>>2]|0))tc(Ea,xa);m=c[R>>2]|0;do if(m|0){o=c[Ea>>2]|0;f=c[H>>2]|0;n=c[f+124>>2]|0;f=f+508|0;if((a[f+11>>0]|0)<0)f=c[f>>2]|0;if(c[K>>2]|0){k=m+16|0;g=c[k>>2]|0;j=(g|0)==0;p:do if((c[N>>2]|0)==2){do if(j){g=m+74|0;sa=a[g>>0]|0;a[g>>0]=sa+255|sa;g=c[m>>2]|0;if(!(g&8)){c[m+8>>2]=0;c[m+4>>2]=0;j=c[m+44>>2]|0;c[m+28>>2]=j;l=m+20|0;c[l>>2]=j;g=j+(c[m+48>>2]|0)|0;c[k>>2]=g;break}else{c[m>>2]=g|32;break p}}else{j=m+20|0;l=j;j=c[j>>2]|0}while(0);if((g-j|0)>>>0<8){lb[c[m+36>>2]&31](m,9437,8)|0;break}if((a[m+75>>0]|0)>-1){if((lb[c[m+36>>2]&31](m,9437,8)|0)>>>0<8)break;g=0;k=9445;j=c[l>>2]|0}else{g=8;k=9437}Vm(j|0,k|0,g|0)|0;c[l>>2]=(c[l>>2]|0)+g}else{do if(j){g=m+74|0;sa=a[g>>0]|0;a[g>>0]=sa+255|sa;g=c[m>>2]|0;if(!(g&8)){c[m+8>>2]=0;c[m+4>>2]=0;j=c[m+44>>2]|0;c[m+28>>2]=j;l=m+20|0;c[l>>2]=j;g=j+(c[m+48>>2]|0)|0;c[k>>2]=g;break}else{c[m>>2]=g|32;break p}}else{j=m+20|0;l=j;j=c[j>>2]|0}while(0);if((g-j|0)>>>0<5){lb[c[m+36>>2]&31](m,9446,5)|0;break}if((a[m+75>>0]|0)>-1){if((lb[c[m+36>>2]&31](m,9446,5)|0)>>>0<5)break;g=0;k=9451;j=c[l>>2]|0}else{g=5;k=9446}Vm(j|0,k|0,g|0)|0;c[l>>2]=(c[l>>2]|0)+g}while(0);c[K>>2]=0}Zb(R,0);c[Ea+376>>2]=o+5e3;sa=c[I>>2]|0;g=c[J>>2]|0;Yb(R,sa,((sa|0)<0)<<31>>31,g,((g|0)<0)<<31>>31,n,0);g=c[R>>2]|0;c[ta>>2]=f;lf(g,20015,ta);g=Ea+552|0;c[ua>>2]=~~+h[g>>3];sd(9493,ua);Na=+h[O>>3];c[va>>2]=~~((c[M>>2]|0)==0?Na+ +h[L>>3]:Na);sd(9509,va);f=Ea+432|0;Na=+h[f>>3];c[ya>>2]=~~((c[M>>2]|0)==1?Na+ +h[L>>3]:Na);sd(9523,ya);if((c[N>>2]|0)!=1)break;c[Aa>>2]=~~+h[g>>3];cf(ya,0,Aa);Vb(R,9538,ya);Na=+h[O>>3];c[Ba>>2]=~~((c[M>>2]|0)==0?Na+ +h[L>>3]:Na);cf(ya,0,Ba);Vb(R,9549,ya);Na=+h[f>>3];c[Ca>>2]=~~((c[M>>2]|0)==1?Na+ +h[L>>3]:Na);cf(ya,0,Ca);Vb(R,9560,ya)}while(0);g=c[xa>>2]|0;if(g|0){f=c[P>>2]|0;if((f|0)!=(g|0)){do{f=f+-12|0;if((a[f+11>>0]|0)<0)wf(c[f>>2]|0)}while((f|0)!=(g|0));c[P>>2]=g}wf(g)}f=c[Q>>2]|0;if((f|0)!=-1){c[Da>>2]=f;f=bb(6,Da|0)|0;f=(f|0)==-4?-115:f;if(f>>>0>4294963200){if(!(c[5356]|0))g=21468;else g=c[(en()|0)+64>>2]|0;c[g>>2]=0-f}c[Q>>2]=-1}f=c[R>>2]|0;if(!((f|0)==0|(f|0)==2040))mf(f)|0;f=c[Ea+632>>2]|0;if(f|0){g=Ea+636|0;j=c[g>>2]|0;if((j|0)!=(f|0))c[g>>2]=j+(~(((j+-160-f|0)>>>0)/160|0)*160|0);wf(f)}f=Ea+408|0;if((a[f+11>>0]|0)<0)wf(c[f>>2]|0);if((a[S+11>>0]|0)<0)wf(c[S>>2]|0);if((a[Ia+11>>0]|0)<0)wf(c[Ia>>2]|0);if((a[Ha+11>>0]|0)<0)wf(c[Ha>>2]|0);if((a[T>>0]|0)<0)wf(c[Ga>>2]|0);if((a[U>>0]|0)<0)wf(c[Fa>>2]|0);f=c[Ja>>2]|0;if(!f){i=Ma;return 0}g=c[La>>2]|0;if((g|0)!=(f|0))c[La>>2]=g+(~((g+-8-f|0)>>>3)<<3);wf(f);i=Ma;return 0}function tc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,j=0,k=0,l=0,m=0,n=0.0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0.0;Q=i;i=i+336|0;P=Q+280|0;M=Q+264|0;F=Q+248|0;L=Q+208|0;J=Q+192|0;z=Q+176|0;N=Q+324|0;D=Q+312|0;A=Q+300|0;B=Q+288|0;O=Q;if(!(c[b+8>>2]|0)){i=Q;return}db(N|0,0)|0;db(N|0,0)|0;g=c[N>>2]|0;n=+(c[N+4>>2]|0)/1.0e6;I=O+112|0;f=O+140|0;c[I>>2]=0;c[I+4>>2]=0;c[I+8>>2]=0;c[I+12>>2]=0;I=O+160|0;e=O+36|0;j=e+48|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(j|0));c[f>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[I>>2]=0;c[I+4>>2]=0;c[I+8>>2]=0;c[I+12>>2]=0;K=b+648|0;f=c[K>>2]|0;H=c[f+112>>2]|0;e=c[f+32>>2]|0;c[b+668>>2]=H;c[b+672>>2]=e;c[b+676>>2]=10928;c[b+684>>2]=c[f+116>>2];c[b+688>>2]=e;c[b+692>>2]=10934;c[b+700>>2]=c[f+120>>2];c[b+704>>2]=e;c[b+708>>2]=10945;c[b+716>>2]=c[f+140>>2];c[b+720>>2]=e;c[b+724>>2]=10956;c[b+732>>2]=H;c[b+736>>2]=e;c[b+740>>2]=10865;e=1;do{C=c[f+368+(e<<3)>>2]|0;G=c[f+368+(e<<3)+4>>2]|0;H=b+96+(e<<4)|0;c[H>>2]=C;c[H+4>>2]=((C|0)<0)<<31>>31;H=b+96+(e<<4)+8|0;c[H>>2]=G;c[H+4>>2]=((G|0)<0)<<31>>31;e=e+1|0;f=c[K>>2]|0}while((e|0)!=16);n=+(g|0)+n;e=f+520|0;c[N>>2]=0;c[N+4>>2]=0;c[N+8>>2]=0;if((a[e+11>>0]|0)<0){j=c[e>>2]|0;k=c[f+524>>2]|0;if(k>>>0>4294967279)Il();if(k>>>0<11){a[N+11>>0]=k;if(!k)e=N;else{e=N;E=13}}else{g=k+16&-16;f=(g|0)==0?1:g;e=vf(f)|0;a:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break a}ub[e&3]();e=vf(f)|0}while(!(e|0));while(0);c[N>>2]=e;c[N+8>>2]=g|-2147483648;c[N+4>>2]=k;E=13}if((E|0)==13)Vm(e|0,j|0,k|0)|0;a[e+k>>0]=0;f=c[K>>2]|0}else{c[N>>2]=c[e>>2];c[N+4>>2]=c[e+4>>2];c[N+8>>2]=c[e+8>>2]}e=f+532|0;c[D>>2]=0;c[D+4>>2]=0;c[D+8>>2]=0;if((a[e+11>>0]|0)<0){j=c[e>>2]|0;k=c[f+536>>2]|0;if(k>>>0>4294967279)Il();if(k>>>0<11){a[D+11>>0]=k;if(!k)e=D;else{e=D;E=25}}else{g=k+16&-16;f=(g|0)==0?1:g;e=vf(f)|0;b:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break b}ub[e&3]();e=vf(f)|0}while(!(e|0));while(0);c[D>>2]=e;c[D+8>>2]=g|-2147483648;c[D+4>>2]=k;E=25}if((E|0)==25)Vm(e|0,j|0,k|0)|0;a[e+k>>0]=0}else{c[D>>2]=c[e>>2];c[D+4>>2]=c[e+4>>2];c[D+8>>2]=c[e+8>>2]}e=b+396|0;do if((e|0)!=(N|0)){o=a[N+11>>0]|0;g=o<<24>>24<0;m=g?c[N>>2]|0:N;o=g?c[N+4>>2]|0:o&255;g=e+11|0;f=(a[g>>0]|0)<0;if(f)l=(c[b+404>>2]&2147483647)+-1|0;else l=10;if(o>>>0<=l>>>0){if(f)e=c[e>>2]|0;if(o|0)$m(e|0,m|0,o|0)|0;a[e+o>>0]=0;if((a[g>>0]|0)<0){c[b+400>>2]=o;break}else{a[g>>0]=o;break}}if((-18-l|0)>>>0<(o-l|0)>>>0)Il();if(f)k=c[e>>2]|0;else k=e;if(l>>>0<2147483623){j=l<<1;j=o>>>0<j>>>0?j:o;j=j>>>0<11?11:j+16&-16}else j=-17;g=(j|0)==0?1:j;f=vf(g)|0;c:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break c}ub[f&3]();f=vf(g)|0}while(!(f|0));while(0);if(o|0)Vm(f|0,m|0,o|0)|0;if((l|0)!=10)wf(k);c[e>>2]=f;c[b+404>>2]=j|-2147483648;c[b+400>>2]=o;a[f+o>>0]=0}while(0);e=b+408|0;m=D+11|0;do if((e|0)!=(D|0)){p=a[m>>0]|0;g=p<<24>>24<0;o=g?c[D>>2]|0:D;p=g?c[D+4>>2]|0:p&255;g=e+11|0;f=(a[g>>0]|0)<0;if(f)l=(c[b+416>>2]&2147483647)+-1|0;else l=10;if(p>>>0<=l>>>0){if(f)e=c[e>>2]|0;if(p|0)$m(e|0,o|0,p|0)|0;a[e+p>>0]=0;if((a[g>>0]|0)<0){c[b+412>>2]=p;break}else{a[g>>0]=p;break}}if((-18-l|0)>>>0<(p-l|0)>>>0)Il();if(f)k=c[e>>2]|0;else k=e;if(l>>>0<2147483623){j=l<<1;j=p>>>0<j>>>0?j:p;j=j>>>0<11?11:j+16&-16}else j=-17;g=(j|0)==0?1:j;f=vf(g)|0;d:do if(!f)do{f=c[5972]|0;c[5972]=f+0;if(!f){f=0;break d}ub[f&3]();f=vf(g)|0}while(!(f|0));while(0);if(p|0)Vm(f|0,o|0,p|0)|0;if((l|0)!=10)wf(k);c[e>>2]=f;c[b+416>>2]=j|-2147483648;c[b+412>>2]=p;a[f+p>>0]=0}while(0);if((a[m>>0]|0)<0)wf(c[D>>2]|0);if((a[N+11>>0]|0)<0)wf(c[N>>2]|0);f=c[K>>2]|0;H=c[f+364>>2]|0;c[b+392>>2]=H;e=b+352|0;if((H|0)==4){a[e>>0]=65;a[b+353>>0]=66;a[b+354>>0]=67;a[b+355>>0]=68;a[b+356>>0]=69;a[b+357>>0]=70;a[b+358>>0]=71;a[b+359>>0]=72;a[b+360>>0]=73;a[b+361>>0]=74;a[b+362>>0]=75;a[b+363>>0]=76;a[b+364>>0]=77;a[b+365>>0]=78;a[b+366>>0]=79;a[b+367>>0]=80}else{j=e+16|0;do{a[e>>0]=69;e=e+1|0}while((e|0)<(j|0))}y=c[f+72>>2]|0;C=c[f+68>>2]|0;G=c[f+80>>2]|0;H=c[f+84>>2]|0;x=c[f+64>>2]|0;h[b+32>>3]=+(c[f+60>>2]|0)/1.0e3;h[b+40>>3]=+(x|0)/1.0e3;c[b+372>>2]=y;h[b+56>>3]=+(C|0)/1.0e3;h[b+64>>3]=+(G|0)/1.0e3;c[b+48>>2]=H;if(vc(b,O,d)|0){G=O+72|0;j=c[G>>2]|0;C=(c[j+4>>2]|0)-(c[j>>2]|0)>>5;f=c[K>>2]|0;e=c[f+100>>2]|0;H=O+76|0;k=c[H>>2]|0;g=j;if(!((e|0)<1?1:((k-g|0)/12|0)>>>0<2)?(c[j+4>>2]|0)!=(c[j>>2]|0):0){w=N+4|0;x=N+8|0;y=D+4|0;r=(e|0)/2|0;s=A+4|0;t=D+4|0;u=D+4|0;v=A+4|0;q=0;e=j;while(1){c[N>>2]=0;c[w>>2]=0;c[x>>2]=0;if((k|0)!=(g|0)){d=0;while(1){p=c[e+(d*12|0)>>2]|0;o=p+(q<<5)+8|0;p=p+(q<<5)+12|0;e=c[o>>2]|0;if((c[p>>2]|0)==(e|0)){f=g;e=k}else{m=0;do{fc(A,e+(m*96|0)+32|0,20);qc(D,N,A);l=c[D>>2]|0;e=c[u>>2]|0;Mb(N,l,e);if(l|0){if((e|0)!=(l|0)){do{f=e;e=e+-12|0;j=c[e>>2]|0;k=j;if(j|0){f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j)}}while((e|0)!=(l|0));c[u>>2]=l}wf(l)}l=c[A>>2]|0;if(l|0){e=c[v>>2]|0;if((e|0)!=(l|0)){do{f=e;e=e+-12|0;j=c[e>>2]|0;k=j;if(j|0){f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j)}}while((e|0)!=(l|0));c[v>>2]=l}wf(l)}m=m+1|0;e=c[o>>2]|0}while(m>>>0<(((c[p>>2]|0)-e|0)/96|0)>>>0);f=c[G>>2]|0;e=c[H>>2]|0}d=d+1|0;if(d>>>0>=((e-f|0)/12|0)>>>0)break;else{g=f;k=e;e=f}}}fc(D,N,-20);l=c[D>>2]|0;e=c[y>>2]|0;Mb(N,l,e);if(l|0){if((e|0)!=(l|0)){do{f=e;e=e+-12|0;j=c[e>>2]|0;k=j;if(j|0){f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j)}}while((e|0)!=(l|0));c[y>>2]=l}wf(l)}g=c[H>>2]|0;f=c[G>>2]|0;j=f;if((g|0)==(f|0))e=j;else{d=0;e=j;while(1){p=c[j+(d*12|0)>>2]|0;o=p+(q<<5)+8|0;p=p+(q<<5)+12|0;j=c[o>>2]|0;if((c[p>>2]|0)==(j|0))j=f;else{m=0;e=j;do{e=e+(m*96|0)+32|0;fc(A,e,r);Kb(D,N,A);if((e|0)!=(D|0))Mb(e,c[D>>2]|0,c[t>>2]|0);e=c[D>>2]|0;if(e|0){f=c[t>>2]|0;if((f|0)!=(e|0)){do{g=f+-12|0;c[t>>2]=g;j=c[g>>2]|0;k=j;if(!j)f=g;else{f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j);f=c[t>>2]|0}}while((f|0)!=(e|0));e=c[D>>2]|0}wf(e)}l=c[A>>2]|0;if(l|0){e=c[s>>2]|0;if((e|0)!=(l|0)){do{f=e;e=e+-12|0;j=c[e>>2]|0;k=j;if(j|0){f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j)}}while((e|0)!=(l|0));c[s>>2]=l}wf(l)}m=m+1|0;e=c[o>>2]|0}while(m>>>0<(((c[p>>2]|0)-e|0)/96|0)>>>0);j=c[G>>2]|0;e=j;g=c[H>>2]|0}d=d+1|0;if(d>>>0>=((g-j|0)/12|0)>>>0){g=j;break}else f=j}}l=c[N>>2]|0;if(!l)f=e;else{e=c[w>>2]|0;if((e|0)!=(l|0)){do{f=e;e=e+-12|0;j=c[e>>2]|0;k=j;if(j|0){f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j)}}while((e|0)!=(l|0));c[w>>2]=l}wf(l);f=c[G>>2]|0;g=f}e=q+1|0;if(e>>>0>=(c[f+4>>2]|0)-(c[f>>2]|0)>>5>>>0)break;q=e;e=f;k=c[H>>2]|0;g=f}f=c[K>>2]|0}e=(C|0)!=0;if(c[f+360>>2]|0){if(e){o=0;j=g;e=g;f=c[H>>2]|0;while(1){if((f|0)==(g|0)){k=g;f=g}else{m=0;while(1){g=c[e+(m*12|0)>>2]|0;k=g+(o<<5)+8|0;l=g+(o<<5)+12|0;e=c[k>>2]|0;if((c[l>>2]|0)==(e|0))g=j;else{g=g+(o<<5)+4|0;f=0;do{yc(b,10981,o,c[g>>2]|0,e+(f*96|0)+32|0);f=f+1|0;e=c[k>>2]|0}while(f>>>0<(((c[l>>2]|0)-e|0)/96|0)>>>0);g=c[G>>2]|0;f=c[H>>2]|0}m=m+1|0;e=g;if(m>>>0>=((f-g|0)/12|0)>>>0){j=g;k=g;break}else j=g}}o=o+1|0;if((o|0)==(C|0))break;else g=k}}}else{if(e){e=0;f=g;while(1){e:do if((c[H>>2]|0)!=(f|0)){p=(e|0)==0;if(!(e&1)){o=0;while(1){l=c[K>>2]|0;f=c[f+(o*12|0)>>2]|0;kc(f+(e<<5)|0,c[(p?l+28|0:l+32|0)>>2]|0,c[l+36>>2]|0);l=f+(e<<5)+8|0;m=f+(e<<5)+12|0;g=c[l>>2]|0;if((c[m>>2]|0)!=(g|0)){k=f+(e<<5)+4|0;j=0;f=g;do{y=f;g=c[y+(j*96|0)+56>>2]|0;do if((c[y+(j*96|0)+60>>2]|0)!=(g|0)){yc(b,10981,e,c[k>>2]|0,g);f=c[l>>2]|0;if((((c[f+(j*96|0)+60>>2]|0)-(c[f+(j*96|0)+56>>2]|0)|0)/12|0)>>>0>1)g=1;else break;do{yc(b,10994,e,c[k>>2]|0,(c[f+(j*96|0)+56>>2]|0)+(g*12|0)|0);g=g+1|0;f=c[l>>2]|0}while(g>>>0<(((c[f+(j*96|0)+60>>2]|0)-(c[f+(j*96|0)+56>>2]|0)|0)/12|0)>>>0)}while(0);j=j+1|0}while(j>>>0<(((c[m>>2]|0)-f|0)/96|0)>>>0)}o=o+1|0;f=c[G>>2]|0;if(o>>>0>=(((c[H>>2]|0)-f|0)/12|0)>>>0)break e}}else o=0;do{j=c[K>>2]|0;g=c[j+36>>2]|0;if(c[j+356>>2]|0)g=(e|0)>=(c[j+40>>2]|0)?g:g+5|0;k=c[f+(o*12|0)>>2]|0;kc(k+(e<<5)|0,c[(p?j+28|0:j+32|0)>>2]|0,g);l=k+(e<<5)+8|0;m=k+(e<<5)+12|0;f=c[l>>2]|0;if((c[m>>2]|0)!=(f|0)){k=k+(e<<5)+4|0;j=0;do{y=f;g=c[y+(j*96|0)+56>>2]|0;do if((c[y+(j*96|0)+60>>2]|0)!=(g|0)){yc(b,10981,e,c[k>>2]|0,g);f=c[l>>2]|0;if((((c[f+(j*96|0)+60>>2]|0)-(c[f+(j*96|0)+56>>2]|0)|0)/12|0)>>>0>1)g=1;else break;do{yc(b,10994,e,c[k>>2]|0,(c[f+(j*96|0)+56>>2]|0)+(g*12|0)|0);g=g+1|0;f=c[l>>2]|0}while(g>>>0<(((c[f+(j*96|0)+60>>2]|0)-(c[f+(j*96|0)+56>>2]|0)|0)/12|0)>>>0)}while(0);j=j+1|0}while(j>>>0<(((c[m>>2]|0)-f|0)/96|0)>>>0)}o=o+1|0;f=c[G>>2]|0}while(o>>>0<(((c[H>>2]|0)-f|0)/12|0)>>>0)}while(0);e=e+1|0;do if(a[23892]|0){c[z>>2]=10988;c[z+4>>2]=e;c[z+8>>2]=C;lf(1928,14126,z);if((c[487]|0)>>>0>(c[489]|0)>>>0?(lb[c[1964>>2]&31](1928,0,0)|0,(c[487]|0)==0):0)break;f=c[483]|0;g=c[484]|0;if(f>>>0<g>>>0)lb[c[1968>>2]&31](1928,f-g|0,1)|0;c[486]=0;c[489]=0;c[487]=0;c[484]=0;c[483]=0}while(0);if((e|0)==(C|0))break;f=c[G>>2]|0}f=c[K>>2]|0}do if(c[f+92>>2]|0){if(C){d=N+4|0;q=N+8|0;r=O+64|0;s=O+68|0;t=O+60|0;u=D+4|0;v=A+4|0;p=0;do{c[N>>2]=0;c[d>>2]=0;c[q>>2]=0;e=c[H>>2]|0;f=c[G>>2]|0;if((e|0)!=(f|0)){o=0;do{g=c[f+(o*12|0)>>2]|0;if((c[g+(p<<5)+12>>2]|0)!=(c[g+(p<<5)+8>>2]|0)){m=0;e=g;do{fc(A,(c[e+(p<<5)+8>>2]|0)+(m*96|0)+32|0,2e3);qc(D,N,A);l=c[D>>2]|0;e=c[u>>2]|0;Mb(N,l,e);if(l|0){if((e|0)!=(l|0)){do{f=e;e=e+-12|0;j=c[e>>2]|0;k=j;if(j|0){f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j)}}while((e|0)!=(l|0));c[u>>2]=l}wf(l)}l=c[A>>2]|0;if(l|0){e=c[v>>2]|0;if((e|0)!=(l|0)){do{f=e;e=e+-12|0;j=c[e>>2]|0;k=j;if(j|0){f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j)}}while((e|0)!=(l|0));c[v>>2]=l}wf(l)}m=m+1|0;f=c[G>>2]|0;e=c[f+(o*12|0)>>2]|0}while(m>>>0<(((c[e+(p<<5)+12>>2]|0)-(c[e+(p<<5)+8>>2]|0)|0)/96|0)>>>0);e=c[H>>2]|0}o=o+1|0}while(o>>>0<((e-f|0)/12|0)>>>0)}e=c[r>>2]|0;if((e|0)==(c[s>>2]|0))jc(t,N);else{c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;if((e|0)==(N|0))e=N;else{Mb(e,c[N>>2]|0,c[d>>2]|0);e=c[r>>2]|0}c[r>>2]=e+12}e=c[N>>2]|0;if(e|0){f=c[d>>2]|0;if((f|0)!=(e|0)){do{g=f+-12|0;c[d>>2]=g;j=c[g>>2]|0;k=j;if(!j)f=g;else{f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j);f=c[d>>2]|0}}while((f|0)!=(e|0));e=c[N>>2]|0}wf(e)}p=p+1|0}while(p>>>0<C>>>0);r=O+60|0;o=B+4|0;p=N+4|0;m=0;do{e=(c[r>>2]|0)+(m*12|0)|0;fc(B,e,-1e3);fc(N,B,1e3);if((e|0)!=(N|0))Mb(e,c[N>>2]|0,c[p>>2]|0);e=c[N>>2]|0;if(e|0){f=c[p>>2]|0;if((f|0)!=(e|0)){do{g=f+-12|0;c[p>>2]=g;j=c[g>>2]|0;k=j;if(!j)f=g;else{f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j);f=c[p>>2]|0}}while((f|0)!=(e|0));e=c[N>>2]|0}wf(e)}l=c[B>>2]|0;if(l|0){e=c[o>>2]|0;if((e|0)!=(l|0)){do{f=e;e=e+-12|0;j=c[e>>2]|0;k=j;if(j|0){f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j)}}while((e|0)!=(l|0));c[o>>2]=l}wf(l)}m=m+1|0}while(m>>>0<C>>>0);f=~~(+(c[(c[K>>2]|0)+12>>2]|0)*1.7320508075688767);if(C>>>0>1){p=0-f|0;d=D+4|0;q=N+4|0;o=1;do{B=c[r>>2]|0;e=B+(o*12|0)|0;fc(D,B+((o+-1|0)*12|0)|0,p);qc(N,e,D);if((e|0)!=(N|0))Mb(e,c[N>>2]|0,c[q>>2]|0);e=c[N>>2]|0;if(e|0){g=c[q>>2]|0;if((g|0)!=(e|0)){do{j=g+-12|0;c[q>>2]=j;k=c[j>>2]|0;l=k;if(!k)g=j;else{g=g+-8|0;j=c[g>>2]|0;if((j|0)!=(k|0))c[g>>2]=j+(~((j+-16-l|0)>>>4)<<4);wf(k);g=c[q>>2]|0}}while((g|0)!=(e|0));e=c[N>>2]|0}wf(e)}m=c[D>>2]|0;if(m|0){e=c[d>>2]|0;if((e|0)!=(m|0)){do{g=e;e=e+-12|0;k=c[e>>2]|0;l=k;if(k|0){g=g+-8|0;j=c[g>>2]|0;if((j|0)!=(k|0))c[g>>2]=j+(~((j+-16-l|0)>>>4)<<4);wf(k)}}while((e|0)!=(m|0));c[d>>2]=m}wf(m)}o=o+1|0}while(o>>>0<C>>>0)}e=C+-1|0;if(!e)break;else q=r}else{e=-1;q=O+60|0;f=~~(+(c[f+12>>2]|0)*1.7320508075688767)}o=0-f|0;p=D+4|0;d=N+4|0;f=C;while(1){B=c[q>>2]|0;f=B+((f+-2|0)*12|0)|0;fc(D,B+(e*12|0)|0,o);qc(N,f,D);if((f|0)!=(N|0))Mb(f,c[N>>2]|0,c[d>>2]|0);f=c[N>>2]|0;if(f|0){g=c[d>>2]|0;if((g|0)!=(f|0)){do{j=g+-12|0;c[d>>2]=j;k=c[j>>2]|0;l=k;if(!k)g=j;else{g=g+-8|0;j=c[g>>2]|0;if((j|0)!=(k|0))c[g>>2]=j+(~((j+-16-l|0)>>>4)<<4);wf(k);g=c[d>>2]|0}}while((g|0)!=(f|0));f=c[N>>2]|0}wf(f)}m=c[D>>2]|0;if(m|0){f=c[p>>2]|0;if((f|0)!=(m|0)){do{g=f;f=f+-12|0;k=c[f>>2]|0;l=k;if(k|0){g=g+-8|0;j=c[g>>2]|0;if((j|0)!=(k|0))c[g>>2]=j+(~((j+-16-l|0)>>>4)<<4);wf(k)}}while((f|0)!=(m|0));c[p>>2]=m}wf(m)}f=e+-1|0;if(!f)break;else{B=e;e=f;f=B}}}while(0);db(N|0,0)|0;p=b+656|0;R=+(c[N>>2]|0)+ +(c[N+4>>2]|0)/1.0e6-+h[p>>3];db(N|0,0)|0;h[p>>3]=+(c[N>>2]|0)+ +(c[N+4>>2]|0)/1.0e6;h[J>>3]=R;sd(11001,J);if(C|0){o=0;do{g=c[K>>2]|0;if(!((c[g+356>>2]|0)!=0?(o|0)>=(c[g+40>>2]|0):0))E=316;f:do if((E|0)==316){E=0;D=c[G>>2]|0;f=D;if((c[H>>2]|0)==(D|0))break;if(!o){e=0;while(1){l=c[g+28>>2]|0;gd(0,f+(e*12|0)|0,l,c[g+40>>2]|0,c[g+44>>2]|0,c[g+136>>2]|0);f=c[K>>2]|0;hd(0,(c[G>>2]|0)+(e*12|0)|0,l,c[f+40>>2]|0,c[f+44>>2]|0);f=c[G>>2]|0;g=c[f+(e*12|0)>>2]|0;l=g+8|0;m=g+12|0;k=c[l>>2]|0;if((c[m>>2]|0)!=(k|0)){j=g+4|0;g=0;f=k;do{yc(b,11062,0,c[j>>2]|0,f+(g*96|0)+68|0);g=g+1|0;f=c[l>>2]|0}while(g>>>0<(((c[m>>2]|0)-f|0)/96|0)>>>0);f=c[G>>2]|0}e=e+1|0;if(e>>>0>=(((c[H>>2]|0)-f|0)/12|0)>>>0)break f;g=c[K>>2]|0}}else{e=0;while(1){l=c[g+32>>2]|0;gd(o,f+(e*12|0)|0,l,c[g+40>>2]|0,c[g+44>>2]|0,c[g+136>>2]|0);f=c[K>>2]|0;hd(o,(c[G>>2]|0)+(e*12|0)|0,l,c[f+40>>2]|0,c[f+44>>2]|0);f=c[G>>2]|0;g=c[f+(e*12|0)>>2]|0;l=g+(o<<5)+8|0;m=g+(o<<5)+12|0;k=c[l>>2]|0;if((c[m>>2]|0)!=(k|0)){j=g+(o<<5)+4|0;g=0;f=k;do{yc(b,11062,o,c[j>>2]|0,f+(g*96|0)+68|0);g=g+1|0;f=c[l>>2]|0}while(g>>>0<(((c[m>>2]|0)-f|0)/96|0)>>>0);f=c[G>>2]|0}e=e+1|0;if(e>>>0>=(((c[H>>2]|0)-f|0)/12|0)>>>0)break f;g=c[K>>2]|0}}}while(0);o=o+1|0;do if(a[23892]|0){c[F>>2]=11062;c[F+4>>2]=o;c[F+8>>2]=C;lf(1928,14126,F);if((c[487]|0)>>>0>(c[489]|0)>>>0?(lb[c[1964>>2]&31](1928,0,0)|0,(c[487]|0)==0):0)break;e=c[483]|0;f=c[484]|0;if(e>>>0<f>>>0)lb[c[1968>>2]&31](1928,e-f|0,1)|0;c[486]=0;c[489]=0;c[487]=0;c[484]=0;c[483]=0}while(0)}while((o|0)!=(C|0))}db(J|0,0)|0;R=+(c[J>>2]|0)+ +(c[J+4>>2]|0)/1.0e6-+h[p>>3];db(J|0,0)|0;h[p>>3]=+(c[J>>2]|0)+ +(c[J+4>>2]|0)/1.0e6;h[L>>3]=R;sd(11028,L);e=c[K>>2]|0;if((c[e+96>>2]|0)>0){f=ic(O+144|0)|0;g=O+12|0;l=(c[g>>2]|0)+-3e3|0;j=O+28|0;e=(c[j>>2]|0)+3e3|0;k=L;c[k>>2]=l;c[k+4>>2]=((l|0)<0)<<31>>31;k=L+8|0;c[k>>2]=e;c[k+4>>2]=((e|0)<0)<<31>>31;k=f+4|0;e=c[k>>2]|0;l=f+8|0;if((e|0)==(c[l>>2]|0)){Tb(f,L);e=c[k>>2]|0}else{c[e>>2]=c[L>>2];c[e+4>>2]=c[L+4>>2];c[e+8>>2]=c[L+8>>2];c[e+12>>2]=c[L+12>>2];e=(c[k>>2]|0)+16|0;c[k>>2]=e}D=(c[g>>2]|0)+-3e3|0;E=(c[j>>2]|0)+3e3+(c[(c[K>>2]|0)+96>>2]|0)|0;F=L;c[F>>2]=D;c[F+4>>2]=((D|0)<0)<<31>>31;F=L+8|0;c[F>>2]=E;c[F+4>>2]=((E|0)<0)<<31>>31;if((e|0)==(c[l>>2]|0)){Tb(f,L);e=c[k>>2]|0}else{c[e>>2]=c[L>>2];c[e+4>>2]=c[L+4>>2];c[e+8>>2]=c[L+8>>2];c[e+12>>2]=c[L+12>>2];e=(c[k>>2]|0)+16|0;c[k>>2]=e}E=c[(c[K>>2]|0)+96>>2]|0;D=(c[g>>2]|0)+-3e3-E|0;E=E+3e3+(c[j>>2]|0)|0;F=L;c[F>>2]=D;c[F+4>>2]=((D|0)<0)<<31>>31;F=L+8|0;c[F>>2]=E;c[F+4>>2]=((E|0)<0)<<31>>31;if((e|0)==(c[l>>2]|0)){Tb(f,L);e=c[k>>2]|0}else{c[e>>2]=c[L>>2];c[e+4>>2]=c[L+4>>2];c[e+8>>2]=c[L+8>>2];c[e+12>>2]=c[L+12>>2];e=(c[k>>2]|0)+16|0;c[k>>2]=e}D=(c[g>>2]|0)+-3e3-(c[(c[K>>2]|0)+96>>2]|0)|0;E=(c[j>>2]|0)+3e3|0;F=L;c[F>>2]=D;c[F+4>>2]=((D|0)<0)<<31>>31;F=L+8|0;c[F>>2]=E;c[F+4>>2]=((E|0)<0)<<31>>31;if((e|0)==(c[l>>2]|0))Tb(f,L);else{c[e>>2]=c[L>>2];c[e+4>>2]=c[L+4>>2];c[e+8>>2]=c[L+8>>2];c[e+12>>2]=c[L+12>>2];c[k>>2]=(c[k>>2]|0)+16}e=c[K>>2]|0;F=(c[e+96>>2]|0)/2|0;E=(c[g>>2]|0)+-3e3-F|0;F=(c[j>>2]|0)+3e3+F|0;c[I>>2]=E;c[I+4>>2]=((E|0)<0)<<31>>31;I=O+168|0;c[I>>2]=F;c[I+4>>2]=((F|0)<0)<<31>>31}f=c[e+204>>2]|0;if((f|0)>0?(c[e+216>>2]|0)>0:0){I=c[e+208>>2]|0;id(O,I+(c[e+196>>2]|0)|0,I,c[e+52>>2]|0,c[e+56>>2]|0,f)}else id(O,c[e+48>>2]|0,c[e+28>>2]|0,c[e+52>>2]|0,c[e+56>>2]|0,c[e+16>>2]|0);t=c[(c[K>>2]|0)+196>>2]|0;f=c[H>>2]|0;e=c[G>>2]|0;s=O+48|0;if((f|0)!=(e|0)){q=J+4|0;r=L+4|0;d=0;do{F=e;I=c[F+(d*12|0)>>2]|0;g=I;do if((c[F+(d*12|0)+4>>2]|0)!=(I|0)){p=g+8|0;o=g+12|0;g=c[p>>2]|0;if((c[o>>2]|0)==(g|0))break;else{m=0;e=g}do{fc(J,e+(m*96|0)+32|0,t);qc(L,s,J);l=c[L>>2]|0;e=c[r>>2]|0;Mb(s,l,e);if(l|0){if((e|0)!=(l|0)){do{f=e;e=e+-12|0;j=c[e>>2]|0;k=j;if(j|0){f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j)}}while((e|0)!=(l|0));c[r>>2]=l}wf(l)}l=c[J>>2]|0;if(l|0){e=c[q>>2]|0;if((e|0)!=(l|0)){do{f=e;e=e+-12|0;j=c[e>>2]|0;k=j;if(j|0){f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j)}}while((e|0)!=(l|0));c[q>>2]=l}wf(l)}m=m+1|0;e=c[p>>2]|0}while(m>>>0<(((c[o>>2]|0)-e|0)/96|0)>>>0);e=c[G>>2]|0;f=c[H>>2]|0}while(0);d=d+1|0}while(d>>>0<((f-e|0)/12|0)>>>0)}od(L,O+88|0,0);fc(N,L,t);qc(J,s,N);o=O+48|0;l=c[J>>2]|0;m=J+4|0;e=c[m>>2]|0;Mb(o,l,e);if(l|0){if((e|0)!=(l|0)){do{f=e;e=e+-12|0;j=c[e>>2]|0;k=j;if(j|0){f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j)}}while((e|0)!=(l|0));c[m>>2]=l}wf(l)}l=c[N>>2]|0;if(l|0){m=N+4|0;e=c[m>>2]|0;if((e|0)!=(l|0)){do{f=e;e=e+-12|0;j=c[e>>2]|0;k=j;if(j|0){f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j)}}while((e|0)!=(l|0));c[m>>2]=l}wf(l)}fc(N,O+144|0,t);qc(J,s,N);m=c[J>>2]|0;l=J+4|0;e=c[l>>2]|0;Mb(o,m,e);if(m|0){if((e|0)!=(m|0)){do{f=e;e=e+-12|0;j=c[e>>2]|0;k=j;if(j|0){f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j)}}while((e|0)!=(m|0));c[l>>2]=m}wf(m)}l=c[N>>2]|0;if(l|0){m=N+4|0;e=c[m>>2]|0;if((e|0)!=(l|0)){do{f=e;e=e+-12|0;j=c[e>>2]|0;k=j;if(j|0){f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j)}}while((e|0)!=(l|0));c[m>>2]=l}wf(l)}e=c[L>>2]|0;if(e|0){l=L+4|0;f=c[l>>2]|0;if((f|0)!=(e|0)){do{g=f+-12|0;c[l>>2]=g;j=c[g>>2]|0;k=j;if(!j)f=g;else{f=f+-8|0;g=c[f>>2]|0;if((g|0)!=(j|0))c[f>>2]=g+(~((g+-16-k|0)>>>4)<<4);wf(j);f=c[l>>2]|0}}while((f|0)!=(e|0));e=c[L>>2]|0}wf(e)}yc(b,11067,0,c[(c[K>>2]|0)+16>>2]|0,O+36|0)}xc(b,O);do if(a[23892]|0){c[M>>2]=10695;c[M+4>>2]=1;c[M+8>>2]=1;lf(1928,14126,M);if((c[487]|0)>>>0>(c[489]|0)>>>0?(lb[c[1964>>2]&31](1928,0,0)|0,(c[487]|0)==0):0)break;e=c[483]|0;f=c[484]|0;if(e>>>0<f>>>0)lb[c[1968>>2]&31](1928,e-f|0,1)|0;c[486]=0;c[489]=0;c[487]=0;c[484]=0;c[483]=0}while(0);db(N|0,0)|0;R=+(c[N>>2]|0)+ +(c[N+4>>2]|0)/1.0e6-n;db(N|0,0)|0;h[P>>3]=R;sd(10703,P);td(b+664|0,3)}wc(O);i=Q;return}function uc(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0;j=b+4|0;e=c[b>>2]|0;g=((c[j>>2]|0)-e|0)/12|0;f=g+1|0;if(f>>>0>357913941)Bl();k=b+8|0;i=((c[k>>2]|0)-e|0)/12|0;h=i<<1;h=i>>>0<178956970?(h>>>0<f>>>0?f:h):357913941;if(!h)e=0;else{if(h>>>0>357913941){k=Fa(4)|0;c[k>>2]=8316;$a(k|0,1336,91)}f=h*12|0;f=(f|0)==0?1:f;e=vf(f)|0;a:do if(!e)do{e=c[5972]|0;c[5972]=e+0;if(!e){e=0;break a}ub[e&3]();e=vf(f)|0}while(!(e|0));while(0)}f=e+(g*12|0)|0;g=f;i=e+(h*12|0)|0;c[f>>2]=c[d>>2];c[f+4>>2]=c[d+4>>2];c[f+8>>2]=c[d+8>>2];c[d>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;d=f+12|0;h=c[b>>2]|0;e=c[j>>2]|0;if((e|0)==(h|0)){f=g;g=h;e=h}else{do{l=f+-12|0;e=e+-12|0;c[l>>2]=c[e>>2];c[l+4>>2]=c[e+4>>2];c[l+8>>2]=c[e+8>>2];c[e>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;f=g+-12|0;g=f}while((e|0)!=(h|0));f=g;g=c[b>>2]|0;e=c[j>>2]|0}c[b>>2]=f;c[j>>2]=d;c[k>>2]=i;f=g;if((e|0)!=(f|0))do{e=e+-12|0;if((a[e+11>>0]|0)<0)wf(c[e>>2]|0)}while((e|0)!=(f|0));if(!g)return;wf(g);return}
function Fk(d,f,g,h,i,j,k,l){d=d|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0;d=g;o=h;a:do if(g>>>0<h>>>0){f=g;while(1){g=b[f>>1]|0;n=g&65535;do if((g&65535)<128){f=j;if((k-j|0)<1){f=1;break a}a[f>>0]=g;j=f+1|0}else{if((g&65535)<2048){f=j;if((k-j|0)<2){f=1;break a}a[f>>0]=n>>>6|192;a[f+1>>0]=n&63|128;j=f+2|0;break}if((g&65535)<55296){f=j;if((k-j|0)<3){f=1;break a}a[f>>0]=n>>>12|224;a[f+1>>0]=n>>>6&63|128;a[f+2>>0]=n&63|128;j=f+3|0;break}if((g&65535)>=56320){if((g&65535)<57344){f=2;break a}f=j;if((k-j|0)<3){f=1;break a}a[f>>0]=n>>>12|224;a[f+1>>0]=n>>>6&63|128;a[f+2>>0]=n&63|128;j=f+3|0;break}if((o-f|0)<4){f=1;break a}m=f+2|0;f=e[m>>1]|0;if((f&64512|0)!=56320){f=2;break a}if((k-j|0)<4){f=1;break a}g=n&960;if(((g<<10)+65536|0)>>>0>1114111){f=2;break a}d=(g>>>6)+1|0;a[j>>0]=d>>>2|240;a[j+1>>0]=n>>>2&15|d<<4&48|128;a[j+2>>0]=n<<4&48|f>>>6&15|128;a[j+3>>0]=f&63|128;j=j+4|0;d=m}while(0);f=d+2|0;d=f;if(f>>>0>=h>>>0){f=0;break}}}else f=0;while(0);c[i>>2]=d;c[l>>2]=j;return f|0}function Gk(e,f,g,h,i,j,k,l){e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;j=j|0;k=k|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0;e=g;f=j;r=h;s=k;a:do if(g>>>0<h>>>0){q=j;while(1){if(q>>>0>=k>>>0){j=1;break a}n=a[g>>0]|0;p=n&255;do if(n<<24>>24>-1){b[q>>1]=n&255;j=g+1|0}else{if((n&255)<194){j=2;break a}if((n&255)<224){if((r-g|0)<2){j=1;break a}j=d[g+1>>0]|0;if((j&192|0)!=128){j=2;break a}b[q>>1]=j&63|p<<6&1984;j=g+2|0;break}if((n&255)<240){if((r-g|0)<3){j=1;break a}m=a[g+1>>0]|0;j=a[g+2>>0]|0;switch(n<<24>>24){case -32:{if((m&-32)<<24>>24!=-96){j=2;break a}break}case -19:{if((m&-32)<<24>>24!=-128){j=2;break a}break}default:if((m&-64)<<24>>24!=-128){j=2;break a}}j=j&255;if((j&192|0)!=128){j=2;break a}b[q>>1]=(m&255)<<6&4032|p<<12|j&63;j=g+3|0;break}if((n&255)>=245){j=2;break a}if((r-g|0)<4){j=1;break a}o=a[g+1>>0]|0;j=a[g+2>>0]|0;g=a[g+3>>0]|0;switch(n<<24>>24){case -16:{if((o+112&255)>=48){j=2;break a}break}case -12:{if((o&-16)<<24>>24!=-128){j=2;break a}break}default:if((o&-64)<<24>>24!=-128){j=2;break a}}n=j&255;if((n&192|0)!=128){j=2;break a}m=g&255;if((m&192|0)!=128){j=2;break a}if((s-q|0)<4){j=1;break a}g=p&7;j=o&255;if((j<<12&196608|g<<18)>>>0>1114111){j=2;break a}b[q>>1]=j<<2&60|n>>>4&3|((j>>>4&3|g<<2)<<6)+16320|55296;f=q+2|0;b[f>>1]=n<<6&960|m&63|56320;j=e+4|0}while(0);e=j;q=f+2|0;f=q;if(j>>>0>=h>>>0){j=0;break}else g=j}}else j=0;while(0);c[i>>2]=e;c[l>>2]=f;return j|0}function Hk(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;c[f>>2]=d;return 3}function Ik(a){a=a|0;return 0}function Jk(a){a=a|0;return 0}function Kk(b,c,d,e,f){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0;m=e;a:do if((f|0)!=0&d>>>0<e>>>0){c=0;b=d;b:while(1){l=a[b>>0]|0;j=l&255;do if(l<<24>>24<=-1){if((l&255)<194){c=32;break a}if((l&255)<224){if((m-b|0)<2){c=32;break a}if((a[b+1>>0]&-64)<<24>>24!=-128){c=32;break a}b=b+2|0;break}if((l&255)<240){i=b;if((m-i|0)<3){c=32;break a}g=a[b+1>>0]|0;h=a[b+2>>0]|0;switch(l<<24>>24){case -32:{if((g&-32)<<24>>24!=-96){c=13;break b}break}case -19:{if((g&-32)<<24>>24!=-128){c=15;break b}break}default:if((g&-64)<<24>>24!=-128){c=17;break b}}if((h&-64)<<24>>24!=-128){c=32;break a}b=b+3|0;break}if((l&255)>=245){c=32;break a}k=b;if((f-c|0)>>>0<2|(m-k|0)<4){c=32;break a}g=a[b+1>>0]|0;h=a[b+2>>0]|0;i=a[b+3>>0]|0;switch(l<<24>>24){case -16:{if((g+112&255)>=48){c=24;break b}break}case -12:{if((g&-16)<<24>>24!=-128){c=26;break b}break}default:if((g&-64)<<24>>24!=-128){c=28;break b}}if(!((h&-64)<<24>>24==-128&(i&-64)<<24>>24==-128)){c=32;break a}if(((g&255)<<12&196608|j<<18&1835008)>>>0>1114111){c=32;break a}else{c=c+1|0;b=b+4|0}}else b=b+1|0;while(0);c=c+1|0;if(!(c>>>0<f>>>0&b>>>0<e>>>0)){c=32;break a}}if((c|0)==13){b=i-d|0;break}else if((c|0)==15){b=i-d|0;break}else if((c|0)==17){b=i-d|0;break}else if((c|0)==24){b=k-d|0;break}else if((c|0)==26){b=k-d|0;break}else if((c|0)==28){b=k-d|0;break}}else{b=d;c=32}while(0);if((c|0)==32)b=b-d|0;return b|0}function Lk(a){a=a|0;return 4}function Mk(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0;c[b>>2]=7804;h=b+8|0;i=b+12|0;e=c[i>>2]|0;d=c[h>>2]|0;if((e|0)!=(d|0)){g=0;f=e;while(1){e=c[d+(g<<2)>>2]|0;if(!e)e=f;else{Fl(e);d=c[h>>2]|0;e=c[i>>2]|0}g=g+1|0;if(g>>>0>=e-d>>2>>>0)break;else f=e}}Ml(b+144|0);e=c[h>>2]|0;f=e;do if(e|0){d=c[i>>2]|0;if((d|0)!=(e|0))c[i>>2]=d+(~((d+-4-f|0)>>>2)<<2);if((b+24|0)==(e|0)){a[b+136>>0]=0;break}else{wf(e);break}}while(0);return}function Nk(a){a=a|0;Mk(a);wf(a);return}function Ok(b){b=b|0;var d=0;c[b>>2]=7824;d=c[b+8>>2]|0;if(d|0?a[b+12>>0]|0:0)wf(d);return}function Pk(a){a=a|0;Ok(a);wf(a);return}function Qk(a,b){a=a|0;b=b|0;if(b<<24>>24>-1)b=c[2780+((b&255)<<2)>>2]&255;return b|0}function Rk(b,d,e){b=b|0;d=d|0;e=e|0;if((d|0)!=(e|0))do{b=a[d>>0]|0;if(b<<24>>24>-1)b=c[2780+(b<<24>>24<<2)>>2]&255;a[d>>0]=b;d=d+1|0}while((d|0)!=(e|0));return e|0}function Sk(a,b){a=a|0;b=b|0;if(b<<24>>24>-1)b=c[4316+(b<<24>>24<<2)>>2]&255;return b|0}function Tk(b,d,e){b=b|0;d=d|0;e=e|0;if((d|0)!=(e|0))do{b=a[d>>0]|0;if(b<<24>>24>-1)b=c[4316+(b<<24>>24<<2)>>2]&255;a[d>>0]=b;d=d+1|0}while((d|0)!=(e|0));return e|0}function Uk(a,b){a=a|0;b=b|0;return b|0}function Vk(b,c,d,e){b=b|0;c=c|0;d=d|0;e=e|0;if((c|0)!=(d|0))while(1){a[e>>0]=a[c>>0]|0;c=c+1|0;if((c|0)==(d|0))break;else e=e+1|0}return d|0}function Wk(a,b,c){a=a|0;b=b|0;c=c|0;return (b<<24>>24>-1?b:c)|0}function Xk(b,c,d,e,f){b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if((c|0)!=(d|0))while(1){b=a[c>>0]|0;a[f>>0]=b<<24>>24>-1?b:e;c=c+1|0;if((c|0)==(d|0))break;else f=f+1|0}return d|0}function Yk(a){a=a|0;c[a>>2]=7876;Ml(a+12|0);return}function Zk(a){a=a|0;c[a>>2]=7876;Ml(a+12|0);wf(a);return}function _k(b){b=b|0;return a[b+8>>0]|0}function $k(b){b=b|0;return a[b+9>>0]|0}function al(a,b){a=a|0;b=b|0;Kl(a,b+12|0);return}function bl(b,d){b=b|0;d=d|0;var e=0;d=b+4|0;e=d;c[e>>2]=0;c[e+4>>2]=0;a[b+11>>0]=4;c[b>>2]=1702195828;a[d>>0]=0;return}function cl(b,d){b=b|0;d=d|0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;a[b+11>>0]=5;a[b>>0]=a[20708]|0;a[b+1>>0]=a[20709]|0;a[b+2>>0]=a[20710]|0;a[b+3>>0]=a[20711]|0;a[b+4>>0]=a[20712]|0;a[b+5>>0]=0;return}function dl(a){a=a|0;c[a>>2]=7916;Ml(a+16|0);return}function el(a){a=a|0;c[a>>2]=7916;Ml(a+16|0);wf(a);return}function fl(a){a=a|0;return c[a+8>>2]|0}function gl(a){a=a|0;return c[a+12>>2]|0}function hl(a,b){a=a|0;b=b|0;Kl(a,b+16|0);return}function il(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;Sl(a,7972,4);return}function jl(a,b){a=a|0;b=b|0;c[a>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;Sl(a,7948,5);return}function kl(a){a=a|0;wf(a);return}function ll(a){a=a|0;wf(a);return}function ml(a,c,d){a=a|0;c=c|0;d=d|0;if(d>>>0<128)a=(b[8700+(d<<1)>>1]&c)<<16>>16!=0;else a=0;return a|0}function nl(a,d,f,g){a=a|0;d=d|0;f=f|0;g=g|0;if((d|0)!=(f|0))while(1){a=c[d>>2]|0;if(a>>>0<128)a=e[8700+(a<<1)>>1]|0;else a=0;b[g>>1]=a;d=d+4|0;if((d|0)==(f|0))break;else g=g+2|0}return f|0}function ol(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;a:do if((e|0)!=(f|0))while(1){a=c[e>>2]|0;if(a>>>0<128?(b[8700+(a<<1)>>1]&d)<<16>>16:0)break a;e=e+4|0;if((e|0)==(f|0)){e=f;break}}while(0);return e|0}function pl(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;a:do if((e|0)!=(f|0))while(1){a=c[e>>2]|0;if(a>>>0>=128)break a;if(!((b[8700+(a<<1)>>1]&d)<<16>>16))break a;e=e+4|0;if((e|0)==(f|0)){e=f;break}}while(0);return e|0}function ql(a,b){a=a|0;b=b|0;if(b>>>0<128)b=c[2780+(b<<2)>>2]|0;return b|0}function rl(a,b,d){a=a|0;b=b|0;d=d|0;if((b|0)!=(d|0))do{a=c[b>>2]|0;if(a>>>0<128)a=c[2780+(a<<2)>>2]|0;c[b>>2]=a;b=b+4|0}while((b|0)!=(d|0));return d|0}function sl(a,b){a=a|0;b=b|0;if(b>>>0<128)b=c[4316+(b<<2)>>2]|0;return b|0}function tl(a,b,d){a=a|0;b=b|0;d=d|0;if((b|0)!=(d|0))do{a=c[b>>2]|0;if(a>>>0<128)a=c[4316+(a<<2)>>2]|0;c[b>>2]=a;b=b+4|0}while((b|0)!=(d|0));return d|0}function ul(a,b){a=a|0;b=b|0;return b<<24>>24|0}function vl(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;if((d|0)!=(e|0))while(1){c[f>>2]=a[d>>0];d=d+1|0;if((d|0)==(e|0))break;else f=f+4|0}return e|0}function wl(a,b,c){a=a|0;b=b|0;c=c|0;return (b>>>0<128?b&255:c)|0}function xl(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;h=(e-d|0)>>>2;if((d|0)!=(e|0)){b=g;g=d;while(1){i=c[g>>2]|0;a[b>>0]=i>>>0<128?i&255:f;g=g+4|0;if((g|0)==(e|0))break;else b=b+1|0}}return d+(h<<2)|0}function yl(a){a=a|0;wf(a);return}function zl(a){a=a|0;wf(a);return}function Al(a){a=a|0;wf(a);return}function Bl(){Ea(19500,19523,304,19791)}function Cl(){var b=0,d=0;c[5311]=0;c[5310]=7804;a[21376]=1;c[5313]=21264;c[5312]=21264;c[5314]=21376;El(28);c[5346]=0;c[5347]=0;c[5348]=0;a[21395]=1;a[21384]=67;a[21385]=0;d=c[5312]|0;b=c[5313]|0;if((b|0)!=(d|0))c[5313]=b+(~((b+-4-d|0)>>>2)<<2);c[5231]=0;c[5230]=5468;Dl(20920,ug(21980)|0);c[5233]=0;c[5232]=5500;Dl(20928,ug(21988)|0);c[5235]=0;c[5234]=7824;a[20948]=0;c[5236]=8700;Dl(20936,ug(21996)|0);c[5239]=0;c[5238]=8020;Dl(20952,ug(22028)|0);c[5241]=0;c[5240]=8088;Dl(20960,ug(23764)|0);c[5243]=0;c[5242]=7756;c[5244]=sg()|0;Dl(20968,ug(23772)|0);c[5247]=0;c[5246]=8136;Dl(20984,ug(23780)|0);c[5249]=0;c[5248]=8184;Dl(20992,ug(23788)|0);c[5251]=0;c[5250]=7876;a[21008]=46;a[21009]=44;c[5253]=0;c[5254]=0;c[5255]=0;Dl(21e3,ug(22012)|0);c[5257]=0;c[5256]=7916;c[5258]=46;c[5259]=44;c[5260]=0;c[5261]=0;c[5262]=0;Dl(21024,ug(22036)|0);c[5265]=0;c[5264]=5532;Dl(21056,ug(22020)|0);c[5267]=0;c[5266]=5596;Dl(21064,ug(22044)|0);c[5269]=0;c[5268]=5660;Dl(21072,ug(22052)|0);c[5271]=0;c[5270]=5712;Dl(21080,ug(22060)|0);c[5273]=0;c[5272]=7260;Dl(21088,ug(23684)|0);c[5275]=0;c[5274]=7316;Dl(21096,ug(23692)|0);c[5277]=0;c[5276]=7372;Dl(21104,ug(23700)|0);c[5279]=0;c[5278]=7428;Dl(21112,ug(23708)|0);c[5281]=0;c[5280]=7484;Dl(21120,ug(23716)|0);c[5283]=0;c[5282]=7512;Dl(21128,ug(23724)|0);c[5285]=0;c[5284]=7540;Dl(21136,ug(23732)|0);c[5287]=0;c[5286]=7568;Dl(21144,ug(23740)|0);c[5289]=0;c[5288]=5764;c[5290]=5812;Dl(21152,ug(22848)|0);c[5293]=0;c[5292]=5848;c[5294]=5896;Dl(21168,ug(23660)|0);c[5297]=0;c[5296]=8e3;c[5298]=sg()|0;c[5296]=7212;Dl(21184,ug(23668)|0);c[5301]=0;c[5300]=8e3;c[5302]=sg()|0;c[5300]=7236;Dl(21200,ug(23676)|0);c[5305]=0;c[5304]=7596;Dl(21216,ug(23748)|0);c[5307]=0;c[5306]=7628;Dl(21224,ug(23756)|0);return}function Dl(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0;h=b+4|0;c[h>>2]=(c[h>>2]|0)+1;h=c[5313]|0;e=c[5312]|0;i=h-e>>2;if(i>>>0<=d>>>0){g=d+1|0;f=h;do if(g>>>0>i>>>0){j=g-i|0;f=c[5314]|0;if(f-h>>2>>>0>=j>>>0){El(j);break}if(g>>>0>1073741823)Bl();k=f-e|0;e=k>>1;e=k>>2>>>0<536870911?(e>>>0<g>>>0?g:e):1073741823;do if(e)if(e>>>0<29&(a[21376]|0)==0){a[21376]=1;f=21264;break}else{f=Hl(e<<2)|0;break}else f=0;while(0);h=f+(i<<2)|0;k=f+(e<<2)|0;e=j;i=h;f=h;do{c[f>>2]=0;f=i+4|0;i=f;e=e+-1|0}while((e|0)!=0);f=c[5312]|0;e=f;g=(c[5313]|0)-e|0;h=h+(0-(g>>2)<<2)|0;if((g|0)>0){Vm(h|0,f|0,g|0)|0;e=c[5312]|0}c[5312]=h;c[5313]=i;c[5314]=k;if(e|0)if((e|0)==21264){a[21376]=0;break}else{wf(e);break}}else if(!(g>>>0>=i>>>0|(f|0)==(e+(g<<2)|0)))c[5313]=f+(~((f+(-2-d<<2)+(0-e)|0)>>>2)<<2);while(0);e=c[5312]|0}f=c[e+(d<<2)>>2]|0;if(f){Fl(f);e=c[5312]|0}c[e+(d<<2)>>2]=b;return}function El(a){a=a|0;var b=0;b=c[5313]|0;do{c[b>>2]=0;b=(c[5313]|0)+4|0;c[5313]=b;a=a+-1|0}while((a|0)!=0);return}function Fl(a){a=a|0;var b=0,d=0;d=a+4|0;b=c[d>>2]|0;c[d>>2]=b+-1;if(!b)ob[c[(c[a>>2]|0)+8>>2]&127](a);return}function Gl(a,b){a=a|0;b=b|0;var d=0,e=0;Nm(23804)|0;if((c[a>>2]|0)==1)do ta(23832,23804)|0;while((c[a>>2]|0)==1);if(!(c[a>>2]|0)){c[a>>2]=1;bn(23804)|0;d=c[c[b>>2]>>2]|0;b=c[d+4>>2]|0;e=c[d+8>>2]|0;d=(c[d>>2]|0)+(e>>1)|0;if(e&1)b=c[(c[d>>2]|0)+b>>2]|0;ob[b&127](d);Nm(23804)|0;c[a>>2]=-1;bn(23804)|0;Um(23832)|0}else bn(23804)|0;return}function Hl(a){a=a|0;var b=0;b=(a|0)==0?1:a;a=vf(b)|0;a:do if(!a)do{a=c[5972]|0;c[5972]=a+0;if(!a){a=0;break a}ub[a&3]();a=vf(b)|0}while(!(a|0));while(0);return a|0}function Il(){Ea(19655,19684,1183,19791)}function Jl(){Ea(19812,19684,1194,19841)}function Kl(b,d){b=b|0;d=d|0;c[b>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;if((a[d+11>>0]|0)<0)Ll(b,c[d>>2]|0,c[d+4>>2]|0);else{c[b>>2]=c[d>>2];c[b+4>>2]=c[d+4>>2];c[b+8>>2]=c[d+8>>2]}return}function Ll(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;if(e>>>0>4294967279)Il();if(e>>>0<11){a[b+11>>0]=e;if(e)f=6}else{g=e+16&-16;f=Hl(g)|0;c[b>>2]=f;c[b+8>>2]=g|-2147483648;c[b+4>>2]=e;b=f;f=6}if((f|0)==6)Vm(b|0,d|0,e|0)|0;a[b+e>>0]=0;return}function Ml(b){b=b|0;if((a[b+11>>0]|0)<0)wf(c[b>>2]|0);return}function Nl(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;l=b+11|0;j=a[l>>0]|0;f=j<<24>>24<0;if(f){m=c[b+4>>2]|0;e=(c[b+8>>2]&2147483647)+-1|0}else{m=j&255;e=10}d=m>>>0<11;k=d?10:(m+16&-16)+-1|0;do if((k|0)!=(e|0)){do if(d){e=c[b>>2]|0;if(f){d=0;f=b;i=10}else{d=0;h=1;f=b;i=11}}else{g=Hl(k+1|0)|0;if(f){d=1;e=c[b>>2]|0;f=g;i=10;break}else{d=1;h=0;e=b;f=g;i=11;break}}while(0);if((i|0)==10){g=d;h=1;d=c[b+4>>2]|0}else if((i|0)==11){g=d;d=j&255}d=d+1|0;if(d|0)Vm(f|0,e|0,d|0)|0;if(h)wf(e);if(g){c[b+8>>2]=k+1|-2147483648;c[b+4>>2]=m;c[b>>2]=f;break}else{a[l>>0]=m;break}}while(0);return}function Ol(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=Le(d)|0;f=b+11|0;e=(a[f>>0]|0)<0;if(e)h=(c[b+8>>2]&2147483647)+-1|0;else h=10;do if(i>>>0<=h>>>0){if(e)e=c[b>>2]|0;else e=b;if(i|0)$m(e|0,d|0,i|0)|0;a[e+i>>0]=0;if((a[f>>0]|0)<0){c[b+4>>2]=i;break}else{a[f>>0]=i;break}}else{if((-18-h|0)>>>0<(i-h|0)>>>0)Il();if(e)g=c[b>>2]|0;else g=b;if(h>>>0<2147483623){e=h<<1;e=i>>>0<e>>>0?e:i;e=e>>>0<11?11:e+16&-16}else e=-17;f=Hl(e)|0;if(i|0)Vm(f|0,d|0,i|0)|0;if((h|0)!=10)wf(g);c[b>>2]=f;c[b+8>>2]=e|-2147483648;c[b+4>>2]=i;a[f+i>>0]=0}while(0);return}function Pl(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;i=b+11|0;e=a[i>>0]|0;g=e<<24>>24<0;if(g)f=c[b+4>>2]|0;else f=e&255;do if(f>>>0<d>>>0){h=d-f|0;if(h|0){if(g){f=c[b+4>>2]|0;d=(c[b+8>>2]&2147483647)+-1|0}else{f=e&255;d=10}if((d-f|0)>>>0<h>>>0){Ql(b,d,h-d+f|0,f,f);e=a[i>>0]|0}if(e<<24>>24<0)d=c[b>>2]|0;else d=b;Mm(d+f|0,0,h|0)|0;e=f+h|0;if((a[i>>0]|0)<0)c[b+4>>2]=e;else a[i>>0]=e;a[d+e>>0]=0}}else if(g){a[(c[b>>2]|0)+d>>0]=0;c[b+4>>2]=d;break}else{a[b+d>>0]=0;a[i>>0]=d;break}while(0);return}function Ql(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0;if((-17-d|0)>>>0<e>>>0)Il();if((a[b+11>>0]|0)<0)j=c[b>>2]|0;else j=b;if(d>>>0<2147483623){h=e+d|0;i=d<<1;h=h>>>0<i>>>0?i:h;h=h>>>0<11?11:h+16&-16}else h=-17;i=Hl(h)|0;if(g|0)Vm(i|0,j|0,g|0)|0;e=f-g|0;if(e|0)Vm(i+g|0,j+g|0,e|0)|0;if((d|0)!=10)wf(j);c[b>>2]=i;c[b+8>>2]=h|-2147483648;return}function Rl(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;h=b+11|0;e=a[h>>0]|0;f=e<<24>>24<0;if(f){g=c[b+4>>2]|0;e=(c[b+8>>2]&2147483647)+-1|0}else{g=e&255;e=10}if((g|0)==(e|0)){Ql(b,e,1,e,e);if((a[h>>0]|0)>-1)e=7;else e=8}else if(f)e=8;else e=7;if((e|0)==7)a[h>>0]=g+1;else if((e|0)==8){h=c[b>>2]|0;c[b+4>>2]=g+1;b=h}h=b+g|0;a[h>>0]=d;a[h+1>>0]=0;return}function Sl(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;if(e>>>0>1073741807)Il();do if(e>>>0<2){a[b+8+3>>0]=e;if(!e)f=b;else{g=b;f=1;h=8}}else{g=e+4&-4;if(g>>>0>1073741823)Ea(19862,19899,1734,20006);else{f=Hl(g<<2)|0;c[b>>2]=f;c[b+8>>2]=g|-2147483648;c[b+4>>2]=e;g=f;f=e;h=8;break}}while(0);if((h|0)==8){b=g;while(1){f=f+-1|0;c[b>>2]=c[d>>2];if(!f){f=g;break}else{d=d+4|0;b=b+4|0}}}c[f+(e<<2)>>2]=0;return}function Tl(b){b=b|0;if((a[b+8+3>>0]|0)<0)wf(c[b>>2]|0);return}function Ul(b){b=b|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0;n=b+8|0;m=n+3|0;g=a[m>>0]|0;h=g<<24>>24<0;if(h){o=c[b+4>>2]|0;e=(c[n>>2]&2147483647)+-1|0}else{o=g&255;e=1}d=o>>>0<2;l=d?1:(o+4&-4)+-1|0;do if((l|0)!=(e|0)){do if(d){f=c[b>>2]|0;if(h){k=0;i=f;f=b;g=16}else{d=(g&255)+1|0;e=f;while(1){d=d+-1|0;c[b>>2]=c[e>>2];if(!d)break;else{e=e+4|0;b=b+4|0}}wf(f);g=22}}else{i=l+1|0;if(i>>>0>1073741823)Ea(19862,19899,1734,20006);j=Hl(i<<2)|0;if(h){k=1;i=c[b>>2]|0;f=j;g=16;break}d=(g&255)+1|0;e=b;f=j;while(1){d=d+-1|0;c[f>>2]=c[e>>2];if(!d)break;else{e=e+4|0;f=f+4|0}}f=j;e=i;d=b+4|0;g=21}while(0);if((g|0)==16){d=b+4|0;e=(c[d>>2]|0)+1|0;if(e|0){g=i;h=f;while(1){e=e+-1|0;c[h>>2]=c[g>>2];if(!e)break;else{g=g+4|0;h=h+4|0}}}wf(i);if(k){e=l+1|0;g=21}else g=22}if((g|0)==21){c[n>>2]=e|-2147483648;c[d>>2]=o;c[b>>2]=f;break}else if((g|0)==22){a[m>>0]=o;break}}while(0);return}function Vl(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0;e=d;while(1)if(!(c[e>>2]|0))break;else e=e+4|0;f=d;m=e-f>>2;k=b+8|0;i=k+3|0;e=(a[i>>0]|0)<0;if(e)j=(c[k>>2]&2147483647)+-1|0;else j=1;do if(m>>>0<=j>>>0){if(e)h=c[b>>2]|0;else h=b;if(m|0)if(h-f>>2>>>0<m>>>0){e=m;do{e=e+-1|0;c[h+(e<<2)>>2]=c[d+(e<<2)>>2]}while((e|0)!=0)}else{e=d;f=h;g=m;while(1){g=g+-1|0;c[f>>2]=c[e>>2];if(!g)break;else{e=e+4|0;f=f+4|0}}}c[h+(m<<2)>>2]=0;if((a[i>>0]|0)<0){c[b+4>>2]=m;break}else{a[i>>0]=m;break}}else{if((1073741806-j|0)>>>0<(m-j|0)>>>0)Il();if(e)i=c[b>>2]|0;else i=b;if(j>>>0<536870887){e=j<<1;e=m>>>0<e>>>0?e:m;e=e>>>0<2?2:e+4&-4;if(e>>>0>1073741823)Ea(19862,19899,1734,20006);else l=e}else l=1073741807;h=Hl(l<<2)|0;if(m|0){g=m;e=d;f=h;while(1){g=g+-1|0;c[f>>2]=c[e>>2];if(!g)break;else{e=e+4|0;f=f+4|0}}}if((j|0)!=1)wf(i);c[b>>2]=h;c[k>>2]=l|-2147483648;c[b+4>>2]=m;c[h+(m<<2)>>2]=0}while(0);return}function Wl(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0;if((1073741807-d|0)>>>0<e>>>0)Il();m=b+8|0;if((a[m+3>>0]|0)<0)l=c[b>>2]|0;else l=b;if(d>>>0<536870887){e=e+d|0;j=d<<1;e=e>>>0<j>>>0?j:e;e=e>>>0<2?2:e+4&-4;if(e>>>0>1073741823)Ea(19862,19899,1734,20006);else k=e}else k=1073741807;j=Hl(k<<2)|0;if(g|0){e=g;h=l;i=j;while(1){e=e+-1|0;c[i>>2]=c[h>>2];if(!e)break;else{h=h+4|0;i=i+4|0}}}e=f-g|0;if(e|0){i=l+(g<<2)|0;h=j+(g<<2)|0;while(1){e=e+-1|0;c[h>>2]=c[i>>2];if(!e)break;else{i=i+4|0;h=h+4|0}}}if((d|0)!=1)wf(l);c[b>>2]=j;c[m>>2]=k|-2147483648;return}function Xl(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;f=b+8|0;i=f+3|0;e=a[i>>0]|0;g=e<<24>>24<0;if(g){h=c[b+4>>2]|0;e=(c[f>>2]&2147483647)+-1|0}else{h=e&255;e=1}if((h|0)==(e|0)){Wl(b,e,1,e,e);if((a[i>>0]|0)>-1)e=7;else e=8}else if(g)e=8;else e=7;if((e|0)==7)a[i>>0]=h+1;else if((e|0)==8){i=c[b>>2]|0;c[b+4>>2]=h+1;b=i}i=b+(h<<2)|0;c[i>>2]=d;c[i+4>>2]=0;return}function Yl(){var a=0,b=0,d=0,e=0,f=0,g=0,h=0,j=0;a=i;i=i+48|0;h=a+40|0;d=a+32|0;j=a+24|0;g=a+8|0;f=a+44|0;if(Va(23880,2)|0)Zl(20301,a);a=Ra(c[5971]|0)|0;if(a|0?(e=c[a>>2]|0,e|0):0){b=e+48|0;a=c[b>>2]|0;b=c[b+4>>2]|0;if(!((a&-256|0)==1126902528&(b|0)==1129074247)){c[d>>2]=20162;Zl(20112,d)}if((a|0)==1126902529&(b|0)==1129074247)a=c[e+44>>2]|0;else a=e+80|0;c[f>>2]=a;e=c[e>>2]|0;a=c[e+4>>2]|0;if(cm(1272,e,f)|0){j=c[f>>2]|0;j=sb[c[(c[j>>2]|0)+8>>2]&63](j)|0;c[g>>2]=20162;c[g+4>>2]=a;c[g+8>>2]=j;Zl(20026,g)}else{c[j>>2]=20162;c[j+4>>2]=a;Zl(20071,j)}}Zl(20150,h)}function Zl(b,d){b=b|0;d=d|0;var e=0,f=0,g=0;g=i;i=i+16|0;c[g>>2]=d;Qe(1928,b,g)|0;b=(a[2003]|0)==10;do if((c[501]|0)<0){if(!b?(f=c[487]|0,f>>>0<(c[486]|0)>>>0):0){c[487]=f+1;a[f>>0]=10;break}kf()|0}else{if(!b?(e=c[487]|0,e>>>0<(c[486]|0)>>>0):0){c[487]=e+1;a[e>>0]=10;break}kf()|0}while(0);Ua()}function _l(a){a=a|0;return}function $l(a){a=a|0;wf(a);return}function am(a){a=a|0;return}function bm(a){a=a|0;return}function cm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;h=i;i=i+64|0;f=h;if((a|0)!=(b|0))if((b|0)!=0?(g=im(b,1280)|0,(g|0)!=0):0){b=f+4|0;e=b+52|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(e|0));c[f>>2]=g;c[f+8>>2]=a;c[f+12>>2]=-1;c[f+48>>2]=1;Ab[c[(c[g>>2]|0)+28>>2]&7](g,f,c[d>>2]|0,1);if((c[f+24>>2]|0)==1){c[d>>2]=c[f+16>>2];b=1}else b=0}else b=0;else b=1;i=h;return b|0}function dm(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;if((a|0)==(c[b+8>>2]|0))hm(b,d,e,f);return}function em(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;do if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)==(e|0)?(h=d+28|0,(c[h>>2]|0)!=1):0)c[h>>2]=f}else if((b|0)==(c[d>>2]|0)){if((c[d+16>>2]|0)!=(e|0)?(i=d+20|0,(c[i>>2]|0)!=(e|0)):0){c[d+32>>2]=f;c[i>>2]=e;g=d+40|0;c[g>>2]=(c[g>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0)a[d+54>>0]=1;c[d+44>>2]=4;break}if((f|0)==1)c[d+32>>2]=1}while(0);return}function fm(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;if((a|0)==(c[b+8>>2]|0))gm(b,d,e);return}function gm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;f=b+16|0;g=c[f>>2]|0;do if(g){if((g|0)!=(d|0)){e=b+36|0;c[e>>2]=(c[e>>2]|0)+1;c[b+24>>2]=2;a[b+54>>0]=1;break}b=b+24|0;if((c[b>>2]|0)==2)c[b>>2]=e}else{c[f>>2]=d;c[b+24>>2]=e;c[b+36>>2]=1}while(0);return}function hm(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0;a[b+53>>0]=1;do if((c[b+4>>2]|0)==(e|0)){a[b+52>>0]=1;g=b+16|0;e=c[g>>2]|0;if(!e){c[g>>2]=d;c[b+24>>2]=f;c[b+36>>2]=1;if(!((f|0)==1?(c[b+48>>2]|0)==1:0))break;a[b+54>>0]=1;break}if((e|0)!=(d|0)){f=b+36|0;c[f>>2]=(c[f>>2]|0)+1;a[b+54>>0]=1;break}g=b+24|0;e=c[g>>2]|0;if((e|0)==2){c[g>>2]=f;e=f}if((e|0)==1?(c[b+48>>2]|0)==1:0)a[b+54>>0]=1}while(0);return}function im(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;s=i;i=i+64|0;p=s;r=c[d>>2]|0;q=d+(c[r+-8>>2]|0)|0;r=c[r+-4>>2]|0;c[p>>2]=e;c[p+4>>2]=d;c[p+8>>2]=1296;d=p+12|0;f=p+16|0;g=p+20|0;h=p+24|0;j=p+28|0;k=p+32|0;l=p+40|0;m=(r|0)==(e|0);n=d;o=n+40|0;do{c[n>>2]=0;n=n+4|0}while((n|0)<(o|0));b[d+40>>1]=0;a[d+42>>0]=0;a:do if(m){c[p+48>>2]=1;xb[c[(c[e>>2]|0)+20>>2]&7](e,p,q,q,1,0);d=(c[h>>2]|0)==1?q:0}else{mb[c[(c[r>>2]|0)+24>>2]&3](r,p,q,1,0);switch(c[p+36>>2]|0){case 0:{d=(c[l>>2]|0)==1&(c[j>>2]|0)==1&(c[k>>2]|0)==1?c[g>>2]|0:0;break a}case 1:break;default:{d=0;break a}}if((c[h>>2]|0)!=1?!((c[l>>2]|0)==0&(c[j>>2]|0)==1&(c[k>>2]|0)==1):0){d=0;break}d=c[f>>2]|0}while(0);i=s;return d|0}function jm(a){a=a|0;wf(a);return}function km(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;if((a|0)==(c[b+8>>2]|0))hm(b,d,e,f);else{a=c[a+8>>2]|0;xb[c[(c[a>>2]|0)+20>>2]&7](a,b,d,e,f,g)}return}function lm(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0;do if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)==(e|0)?(h=d+28|0,(c[h>>2]|0)!=1):0)c[h>>2]=f}else{if((b|0)!=(c[d>>2]|0)){j=c[b+8>>2]|0;mb[c[(c[j>>2]|0)+24>>2]&3](j,d,e,f,g);break}if((c[d+16>>2]|0)!=(e|0)?(j=d+20|0,(c[j>>2]|0)!=(e|0)):0){c[d+32>>2]=f;i=d+44|0;if((c[i>>2]|0)==4)break;h=d+52|0;a[h>>0]=0;f=d+53|0;a[f>>0]=0;b=c[b+8>>2]|0;xb[c[(c[b>>2]|0)+20>>2]&7](b,d,e,e,1,g);if(a[f>>0]|0)if(!(a[h>>0]|0)){h=1;f=13}else f=17;else{h=0;f=13}do if((f|0)==13){c[j>>2]=e;e=d+40|0;c[e>>2]=(c[e>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54>>0]=1;if(h){f=17;break}else{h=4;break}}if(h)f=17;else h=4}while(0);if((f|0)==17)h=3;c[i>>2]=h;break}if((f|0)==1)c[d+32>>2]=1}while(0);return}function mm(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;if((a|0)==(c[b+8>>2]|0))gm(b,d,e);else{a=c[a+8>>2]|0;Ab[c[(c[a>>2]|0)+28>>2]&7](a,b,d,e)}return}function nm(){var a=0;a=i;i=i+16|0;if(!(xa(23884,112)|0)){i=a;return}else Zl(20350,a)}function om(a){a=a|0;var b=0;b=i;i=i+16|0;wf(a);if(!(Za(c[5971]|0,0)|0)){i=b;return}else Zl(20400,b)}function pm(a){a=a|0;var b=0;b=i;i=i+16|0;ub[a&3]();Zl(20453,b)}function qm(a){a=a|0;return}function rm(a){a=a|0;wf(a);return}function sm(a){a=a|0;return 20493}function tm(a){a=a|0;return}function um(a){a=a|0;wf(a);return}function vm(a){a=a|0;return 20521}function wm(a){a=a|0;wf(a);return}function xm(a,b,c){a=a|0;b=b|0;c=c|0;return (a|0)==(b|0)|0}function ym(a){a=a|0;wf(a);return}function zm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;k=i;i=i+64|0;j=k;c[d>>2]=c[c[d>>2]>>2];if(!((a|0)==(b|0)|(b|0)==1424))if(((b|0)!=0?(e=im(b,1384)|0,(e|0)!=0):0)?(c[e+8>>2]&~c[a+8>>2]|0)==0:0){b=c[a+12>>2]|0;a=e+12|0;if(!((b|0)==1416?1:(b|0)==(c[a>>2]|0)))if((((b|0)!=0?(g=im(b,1280)|0,(g|0)!=0):0)?(f=c[a>>2]|0,(f|0)!=0):0)?(h=im(f,1280)|0,(h|0)!=0):0){a=j+4|0;b=a+52|0;do{c[a>>2]=0;a=a+4|0}while((a|0)<(b|0));c[j>>2]=h;c[j+8>>2]=g;c[j+12>>2]=-1;c[j+48>>2]=1;Ab[c[(c[h>>2]|0)+28>>2]&7](h,j,c[d>>2]|0,1);if((c[j+24>>2]|0)==1){c[d>>2]=c[j+16>>2];a=1}else a=0}else a=0;else a=1}else a=0;else a=1;i=k;return a|0}function Am(a){a=a|0;wf(a);return}function Bm(d,e,f,g,h,i){d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;if((d|0)==(c[e+8>>2]|0))hm(e,f,g,h);else{r=e+52|0;m=b[r>>1]|0;k=m&255;l=e+53|0;m=(m&65535)>>>8&255;q=c[d+12>>2]|0;n=d+16+(q<<3)|0;a[r>>0]=0;a[l>>0]=0;Fm(d+16|0,e,f,g,h,i);a:do if((q|0)>1){o=e+24|0;p=d+8|0;q=e+54|0;d=d+24|0;do{if(a[q>>0]|0)break a;j=b[r>>1]|0;if(!((j&255)<<24>>24)){if((j&65535)>=256?(c[p>>2]&1|0)==0:0)break a}else{if((c[o>>2]|0)==1)break a;if(!(c[p>>2]&2))break a}a[r>>0]=0;a[l>>0]=0;Fm(d,e,f,g,h,i);d=d+8|0}while(d>>>0<n>>>0)}while(0);a[r>>0]=k;a[l>>0]=m}return}function Cm(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;a:do if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)==(e|0)?(h=d+28|0,(c[h>>2]|0)!=1):0)c[h>>2]=f}else{if((b|0)!=(c[d>>2]|0)){p=c[b+12>>2]|0;j=b+16+(p<<3)|0;Gm(b+16|0,d,e,f,g);h=b+24|0;if((p|0)<=1)break;b=c[b+8>>2]|0;if((b&2|0)==0?(k=d+36|0,(c[k>>2]|0)!=1):0){if(!(b&1)){b=d+54|0;while(1){if(a[b>>0]|0)break a;if((c[k>>2]|0)==1)break a;Gm(h,d,e,f,g);h=h+8|0;if(h>>>0>=j>>>0)break a}}b=d+24|0;i=d+54|0;while(1){if(a[i>>0]|0)break a;if((c[k>>2]|0)==1?(c[b>>2]|0)==1:0)break a;Gm(h,d,e,f,g);h=h+8|0;if(h>>>0>=j>>>0)break a}}b=d+54|0;while(1){if(a[b>>0]|0)break a;Gm(h,d,e,f,g);h=h+8|0;if(h>>>0>=j>>>0)break a}}if((c[d+16>>2]|0)!=(e|0)?(p=d+20|0,(c[p>>2]|0)!=(e|0)):0){c[d+32>>2]=f;o=d+44|0;if((c[o>>2]|0)==4)break;i=c[b+12>>2]|0;j=b+16+(i<<3)|0;k=d+52|0;f=d+53|0;m=d+54|0;l=b+8|0;n=d+24|0;b:do if((i|0)>0){h=0;i=b+16|0;b=0;c:do{a[k>>0]=0;a[f>>0]=0;Fm(i,d,e,e,1,g);if(a[m>>0]|0)break;do if(a[f>>0]|0){if(!(a[k>>0]|0))if(!(c[l>>2]&1)){h=1;break c}else{h=1;break}if((c[n>>2]|0)==1){b=25;break b}if(!(c[l>>2]&2)){b=25;break b}else{h=1;b=1}}while(0);i=i+8|0}while(i>>>0<j>>>0);if(b)b=24;else b=21}else{h=0;b=21}while(0);if((b|0)==21){c[p>>2]=e;e=d+40|0;c[e>>2]=(c[e>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[n>>2]|0)==2:0){a[m>>0]=1;if(h)b=25;else h=4}else b=24}if((b|0)==24)if(h)b=25;else h=4;if((b|0)==25)h=3;c[o>>2]=h;break}if((f|0)==1)c[d+32>>2]=1}while(0);return}function Dm(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;a:do if((b|0)!=(c[d+8>>2]|0)){h=c[b+12>>2]|0;g=b+16+(h<<3)|0;Em(b+16|0,d,e,f);if((h|0)>1){h=d+54|0;b=b+24|0;do{Em(b,d,e,f);if(a[h>>0]|0)break a;b=b+8|0}while(b>>>0<g>>>0)}}else gm(d,e,f);while(0);return}function Em(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;g=c[a+4>>2]|0;f=g>>8;if(g&1)f=c[(c[d>>2]|0)+f>>2]|0;a=c[a>>2]|0;Ab[c[(c[a>>2]|0)+28>>2]&7](a,b,d+f|0,g&2|0?e:2);return}function Fm(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,i=0;i=c[a+4>>2]|0;h=i>>8;if(i&1)h=c[(c[e>>2]|0)+h>>2]|0;a=c[a>>2]|0;xb[c[(c[a>>2]|0)+20>>2]&7](a,b,d,e+h|0,i&2|0?f:2,g);return}function Gm(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;h=c[a+4>>2]|0;g=h>>8;if(h&1)g=c[(c[d>>2]|0)+g>>2]|0;a=c[a>>2]|0;mb[c[(c[a>>2]|0)+24>>2]&3](a,b,d+g|0,h&2|0?e:2,f);return}function Hm(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;f=i;i=i+16|0;e=f;c[e>>2]=c[d>>2];a=lb[c[(c[a>>2]|0)+16>>2]&31](a,b,e)|0;if(a)c[d>>2]=c[e>>2];i=f;return a&1|0}function Im(a){a=a|0;if(!a)a=0;else a=(im(a,1384)|0)!=0;return a&1|0}function Jm(){}function Km(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=b-d-(c>>>0>a>>>0|0)>>>0;return (E=d,a-c>>>0|0)|0}function Lm(a){a=+a;return a>=0.0?+F(a+.5):+S(a-.5)}function Mm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;h=b&3;i=d|d<<8|d<<16|d<<24;g=f&~3;if(h){h=b+4-h|0;while((b|0)<(h|0)){a[b>>0]=d;b=b+1|0}}while((b|0)<(g|0)){c[b>>2]=i;b=b+4|0}}while((b|0)<(f|0)){a[b>>0]=d;b=b+1|0}return b-e|0}function Nm(a){a=a|0;return 0}function Om(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=a+c>>>0;return (E=b+d+(c>>>0<a>>>0|0)>>>0,c|0)|0}function Pm(b){b=b|0;var c=0;c=a[n+(b&255)>>0]|0;if((c|0)<8)return c|0;c=a[n+(b>>8&255)>>0]|0;if((c|0)<8)return c+8|0;c=a[n+(b>>16&255)>>0]|0;if((c|0)<8)return c+16|0;return (a[n+(b>>>24)>>0]|0)+24|0}function Qm(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;l=a;j=b;k=j;h=d;n=e;i=n;if(!k){g=(f|0)!=0;if(!i){if(g){c[f>>2]=(l>>>0)%(h>>>0);c[f+4>>2]=0}n=0;f=(l>>>0)/(h>>>0)>>>0;return (E=n,f)|0}else{if(!g){n=0;f=0;return (E=n,f)|0}c[f>>2]=a|0;c[f+4>>2]=b&0;n=0;f=0;return (E=n,f)|0}}g=(i|0)==0;do if(h){if(!g){g=(W(i|0)|0)-(W(k|0)|0)|0;if(g>>>0<=31){m=g+1|0;i=31-g|0;b=g-31>>31;h=m;a=l>>>(m>>>0)&b|k<<i;b=k>>>(m>>>0)&b;g=0;i=l<<i;break}if(!f){n=0;f=0;return (E=n,f)|0}c[f>>2]=a|0;c[f+4>>2]=j|b&0;n=0;f=0;return (E=n,f)|0}g=h-1|0;if(g&h|0){i=(W(h|0)|0)+33-(W(k|0)|0)|0;p=64-i|0;m=32-i|0;j=m>>31;o=i-32|0;b=o>>31;h=i;a=m-1>>31&k>>>(o>>>0)|(k<<m|l>>>(i>>>0))&b;b=b&k>>>(i>>>0);g=l<<p&j;i=(k<<p|l>>>(o>>>0))&j|l<<m&i-33>>31;break}if(f|0){c[f>>2]=g&l;c[f+4>>2]=0}if((h|0)==1){o=j|b&0;p=a|0|0;return (E=o,p)|0}else{p=Pm(h|0)|0;o=k>>>(p>>>0)|0;p=k<<32-p|l>>>(p>>>0)|0;return (E=o,p)|0}}else{if(g){if(f|0){c[f>>2]=(k>>>0)%(h>>>0);c[f+4>>2]=0}o=0;p=(k>>>0)/(h>>>0)>>>0;return (E=o,p)|0}if(!l){if(f|0){c[f>>2]=0;c[f+4>>2]=(k>>>0)%(i>>>0)}o=0;p=(k>>>0)/(i>>>0)>>>0;return (E=o,p)|0}g=i-1|0;if(!(g&i)){if(f|0){c[f>>2]=a|0;c[f+4>>2]=g&k|b&0}o=0;p=k>>>((Pm(i|0)|0)>>>0);return (E=o,p)|0}g=(W(i|0)|0)-(W(k|0)|0)|0;if(g>>>0<=30){b=g+1|0;i=31-g|0;h=b;a=k<<i|l>>>(b>>>0);b=k>>>(b>>>0);g=0;i=l<<i;break}if(!f){o=0;p=0;return (E=o,p)|0}c[f>>2]=a|0;c[f+4>>2]=j|b&0;o=0;p=0;return (E=o,p)|0}while(0);if(!h){k=i;j=0;i=0}else{m=d|0|0;l=n|e&0;k=Om(m|0,l|0,-1,-1)|0;d=E;j=i;i=0;do{e=j;j=g>>>31|j<<1;g=i|g<<1;e=a<<1|e>>>31|0;n=a>>>31|b<<1|0;Km(k|0,d|0,e|0,n|0)|0;p=E;o=p>>31|((p|0)<0?-1:0)<<1;i=o&1;a=Km(e|0,n|0,o&m|0,(((p|0)<0?-1:0)>>31|((p|0)<0?-1:0)<<1)&l|0)|0;b=E;h=h-1|0}while((h|0)!=0);k=j;j=0}h=0;if(f|0){c[f>>2]=a;c[f+4>>2]=b}o=(g|0)>>>31|(k|h)<<1|(h<<1|g>>>31)&0|j;p=(g<<1|0>>>31)&-2|i;return (E=o,p)|0}function Rm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=b>>31|((b|0)<0?-1:0)<<1;i=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;f=d>>31|((d|0)<0?-1:0)<<1;e=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;h=Km(j^a|0,i^b|0,j|0,i|0)|0;g=E;a=f^j;b=e^i;return Km((Qm(h,g,Km(f^c|0,e^d|0,f|0,e|0)|0,E,0)|0)^a|0,E^b|0,a|0,b|0)|0}function Sm(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){E=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}E=(b|0)<0?-1:0;return b>>c-32|0}function Tm(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){E=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}E=0;return b>>>c-32|0}function Um(a){a=a|0;return 0}function Vm(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return Na(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if(!e)return f|0;a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function Wm(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Qm(a,b,c,d,0)|0}function Xm(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;f=a&65535;e=b&65535;c=T(e,f)|0;d=a>>>16;a=(c>>>16)+(T(e,d)|0)|0;e=b>>>16;b=T(e,f)|0;return (E=(a>>>16)+(T(e,d)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|c&65535|0)|0}function Ym(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;f=c;c=Xm(e,f)|0;a=E;return (E=(T(b,f)|0)+(T(d,e)|0)+a|a&0,c|0|0)|0}function Zm(a){a=a|0;var b=0,d=0;d=a+15&-16|0;b=c[k>>2]|0;a=b+d|0;if((d|0)>0&(a|0)<(b|0)|(a|0)<0){$()|0;La(12);return -1}c[k>>2]=a;if((a|0)>(_()|0)?(Z()|0)==0:0){La(12);c[k>>2]=b;return -1}return b|0}function _m(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){E=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}E=a<<c-32;return 0}function $m(b,c,d){b=b|0;c=c|0;d=d|0;var e=0;if((c|0)<(b|0)&(b|0)<(c+d|0)){e=b;c=c+d|0;b=b+d|0;while((d|0)>0){b=b-1|0;c=c-1|0;d=d-1|0;a[b>>0]=a[c>>0]|0}b=e}else Vm(b,c,d)|0;return b|0}function an(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;g=i;i=i+16|0;f=g|0;Qm(a,b,d,e,f)|0;i=g;return (E=c[f+4>>2]|0,c[f>>2]|0)|0}function bn(a){a=a|0;return 0}function cn(a){a=a|0;return (a&255)<<24|(a>>8&255)<<16|(a>>16&255)<<8|a>>>24|0}function dn(a){a=a|0;return (a&255)<<8|a>>8&255|0}function en(){return 0}function fn(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;return kb[a&7](b|0,c|0,d|0,e|0,f|0,g|0,h|0)|0}function gn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return lb[a&31](b|0,c|0,d|0)|0}function hn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;mb[a&3](b|0,c|0,d|0,e|0,f|0)}function jn(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=+g;return nb[a&3](b|0,c|0,d|0,e|0,f|0,+g)|0}function kn(a,b){a=a|0;b=b|0;ob[a&127](b|0)}function ln(a,b,c){a=a|0;b=b|0;c=c|0;pb[a&63](b|0,c|0)}function mn(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;return qb[a&63](b|0,c|0,d|0,e|0,f|0,g|0)|0}function nn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;return rb[a&7](b|0,c|0,d|0,e|0,+f)|0}function on(a,b){a=a|0;b=b|0;return sb[a&63](b|0)|0}function pn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;tb[a&0](b|0,c|0,d|0)}function qn(a){a=a|0;ub[a&3]()}function rn(a,b,c,d,e,f,g,h,i){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;i=i|0;return vb[a&15](b|0,c|0,d|0,e|0,f|0,g|0,h|0,i|0)|0}function sn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return wb[a&7](b|0,c|0,d|0,e|0)|0}function tn(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;xb[a&7](b|0,c|0,d|0,e|0,f|0,g|0)}function un(a,b,c){a=a|0;b=b|0;c=c|0;return yb[a&15](b|0,c|0)|0}function vn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return zb[a&31](b|0,c|0,d|0,e|0,f|0)|0}function wn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;Ab[a&7](b|0,c|0,d|0,e|0)}function xn(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;X(0);return 0}function yn(a,b,c){a=a|0;b=b|0;c=c|0;X(1);return 0}function zn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;X(2)}function An(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;X(3);return 0}function Bn(a){a=a|0;X(4)}function Cn(a,b){a=a|0;b=b|0;X(5)}function Dn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;X(6);return 0}function En(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;X(7);return 0}function Fn(a){a=a|0;X(8);return 0}function Gn(a,b,c){a=a|0;b=b|0;c=c|0;X(9)}function Hn(){X(10)}function In(a,b,c,d,e,f,g,h){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;X(11);return 0}function Jn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;X(12);return 0}function Kn(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;X(13)}function Ln(a,b){a=a|0;b=b|0;X(14);return 0}function Mn(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;X(15);return 0}function Nn(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;X(16)}

// EMSCRIPTEN_END_FUNCS
var kb=[xn,Bi,Gi,zj,Aj,Hj,Ij,xn];var lb=[yn,Yc,Jf,Nf,Be,ye,De,Ze,Ef,Zf,cg,Zj,ck,Rk,Tk,Wk,ml,rl,tl,wl,cm,xm,zm,xe,of,yn,yn,yn,yn,yn,yn,yn];var mb=[zn,em,lm,Cm];var nb=[An,Nj,Tj,An];var ob=[Bn,Pf,Qf,Rf,Sf,cd,dd,ed,fd,Tc,Wc,vd,wd,xd,yd,zd,Ad,Bd,Dd,Ed,Fd,Td,Ud,zf,Af,Bf,Cf,Uf,Vf,Wf,_f,$f,dg,eg,Lg,Mg,bh,ch,sh,th,Fh,Gh,bi,ci,zi,Ai,Ei,Fi,Hi,Ii,Si,Ti,bj,cj,mj,nj,xj,yj,Fj,Gj,Lj,Mj,Rj,Sj,Xj,Yj,ak,bk,fk,ok,gk,Dk,Ek,Mk,Nk,Ok,Pk,Yk,Zk,dl,el,kl,ll,yl,zl,Al,_l,$l,am,bm,jm,qm,rm,tm,um,wm,ym,Am,rc,vg,Ae,Ce,Xh,Wh,Vh,Ml,ti,si,ri,Tl,Bj,wf,om,Bn,Bn,Bn,Bn,Bn,Bn,Bn,Bn,Bn,Bn,Bn,Bn,Bn,Bn,Bn];var pb=[Cn,Xc,Df,Li,Mi,Ni,Oi,Qi,Ri,Wi,Xi,Yi,Zi,$i,aj,fj,gj,hj,ij,kj,lj,qj,rj,sj,tj,vj,wj,$j,ek,al,bl,cl,hl,il,jl,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn,Cn];var qb=[Dn,fg,gg,hg,ig,jg,kg,lg,mg,ng,og,pg,Ng,Og,Pg,Qg,Rg,Sg,Tg,Ug,Vg,Wg,Xg,fh,hh,wh,yh,Ih,Jh,Kh,Lh,Mh,ei,fi,gi,hi,ii,Oj,Uj,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn,Dn];var rb=[En,ih,jh,zh,Ah,En,En,En];var sb=[Fn,Vc,If,$c,Lf,Cd,Vd,we,Hf,Kf,Hh,Oh,Ph,Qh,Rh,Sh,Th,Uh,di,ki,li,mi,ni,oi,pi,qi,Ji,Ki,Pi,Ui,Vi,_i,dj,ej,jj,oj,pj,uj,kk,lk,nk,zk,Ak,Ck,_k,$k,fl,gl,sk,tk,vk,Ik,Jk,Lk,sm,vm,Fn,Fn,Fn,Fn,Fn,Fn,Fn,Fn];var tb=[Gn];var ub=[Hn,Yl,nm,Hn];var vb=[In,Nh,ji,hk,ik,wk,xk,pk,qk,Fk,Gk,In,In,In,In,In];var wb=[Jn,Vk,nl,ol,pl,vl,Jn,Jn];var xb=[Kn,Zc,Ff,_j,dk,dm,km,Bm];var yb=[Ln,ad,bd,Mf,Of,Qk,Sk,Uk,ql,sl,ul,hc,ld,_d,Ln,Ln];var zb=[Mn,Xf,ag,dh,eh,gh,kh,uh,vh,xh,Bh,jk,mk,yk,Bk,Xk,xl,rk,uk,Hk,Kk,Mn,Mn,Mn,Mn,Mn,Mn,Mn,Mn,Mn,Mn,Mn];var Ab=[Nn,_c,Gf,Yf,bg,fm,mm,Dm];return{_roundf:Lm,_main:sc,___udivdi3:Wm,_bitshift64Lshr:Tm,___udivmoddi4:Qm,_bitshift64Shl:_m,_fflush:gf,___cxa_is_pointer_type:Im,_bitshift64Ashr:Sm,_memset:Mm,_sbrk:Zm,_memcpy:Vm,_llvm_bswap_i32:cn,___muldi3:Ym,___uremdi3:an,___divdi3:Rm,_llvm_cttz_i32:Pm,_i64Subtract:Km,_ntohs:tf,_htonl:uf,_i64Add:Om,_pthread_self:en,_pthread_mutex_unlock:bn,_llvm_bswap_i16:dn,_htons:sf,_pthread_cond_broadcast:Um,___errno_location:ze,___muldsi3:Xm,___cxa_can_catch:Hm,_free:wf,_memmove:$m,_malloc:vf,_pthread_mutex_lock:Nm,runPostSets:Jm,stackAlloc:Bb,stackSave:Cb,stackRestore:Db,establishStackSpace:Eb,setThrew:Fb,setTempRet0:Gb,getTempRet0:Hb,dynCall_iiiiiiii:fn,dynCall_iiii:gn,dynCall_viiiii:hn,dynCall_iiiiiid:jn,dynCall_vi:kn,dynCall_vii:ln,dynCall_iiiiiii:mn,dynCall_iiiiid:nn,dynCall_ii:on,dynCall_viii:pn,dynCall_v:qn,dynCall_iiiiiiiii:rn,dynCall_iiiii:sn,dynCall_viiiiii:tn,dynCall_iii:un,dynCall_iiiiii:vn,dynCall_viiii:wn}})


// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var _roundf=Module["_roundf"]=asm["_roundf"];var _main=Module["_main"]=asm["_main"];var _memset=Module["_memset"]=asm["_memset"];var _bitshift64Lshr=Module["_bitshift64Lshr"]=asm["_bitshift64Lshr"];var ___udivmoddi4=Module["___udivmoddi4"]=asm["___udivmoddi4"];var _pthread_cond_broadcast=Module["_pthread_cond_broadcast"]=asm["_pthread_cond_broadcast"];var _fflush=Module["_fflush"]=asm["_fflush"];var ___cxa_is_pointer_type=Module["___cxa_is_pointer_type"]=asm["___cxa_is_pointer_type"];var _bitshift64Ashr=Module["_bitshift64Ashr"]=asm["_bitshift64Ashr"];var _llvm_cttz_i32=Module["_llvm_cttz_i32"]=asm["_llvm_cttz_i32"];var _sbrk=Module["_sbrk"]=asm["_sbrk"];var _memcpy=Module["_memcpy"]=asm["_memcpy"];var ___errno_location=Module["___errno_location"]=asm["___errno_location"];var ___muldi3=Module["___muldi3"]=asm["___muldi3"];var _bitshift64Shl=Module["_bitshift64Shl"]=asm["_bitshift64Shl"];var ___uremdi3=Module["___uremdi3"]=asm["___uremdi3"];var ___divdi3=Module["___divdi3"]=asm["___divdi3"];var _i64Subtract=Module["_i64Subtract"]=asm["_i64Subtract"];var _ntohs=Module["_ntohs"]=asm["_ntohs"];var _htonl=Module["_htonl"]=asm["_htonl"];var _i64Add=Module["_i64Add"]=asm["_i64Add"];var _pthread_self=Module["_pthread_self"]=asm["_pthread_self"];var _pthread_mutex_unlock=Module["_pthread_mutex_unlock"]=asm["_pthread_mutex_unlock"];var _llvm_bswap_i16=Module["_llvm_bswap_i16"]=asm["_llvm_bswap_i16"];var _htons=Module["_htons"]=asm["_htons"];var ___udivdi3=Module["___udivdi3"]=asm["___udivdi3"];var _llvm_bswap_i32=Module["_llvm_bswap_i32"]=asm["_llvm_bswap_i32"];var ___muldsi3=Module["___muldsi3"]=asm["___muldsi3"];var ___cxa_can_catch=Module["___cxa_can_catch"]=asm["___cxa_can_catch"];var _free=Module["_free"]=asm["_free"];var runPostSets=Module["runPostSets"]=asm["runPostSets"];var _memmove=Module["_memmove"]=asm["_memmove"];var _malloc=Module["_malloc"]=asm["_malloc"];var _pthread_mutex_lock=Module["_pthread_mutex_lock"]=asm["_pthread_mutex_lock"];var dynCall_iiiiiiii=Module["dynCall_iiiiiiii"]=asm["dynCall_iiiiiiii"];var dynCall_iiii=Module["dynCall_iiii"]=asm["dynCall_iiii"];var dynCall_viiiii=Module["dynCall_viiiii"]=asm["dynCall_viiiii"];var dynCall_iiiiiid=Module["dynCall_iiiiiid"]=asm["dynCall_iiiiiid"];var dynCall_vi=Module["dynCall_vi"]=asm["dynCall_vi"];var dynCall_vii=Module["dynCall_vii"]=asm["dynCall_vii"];var dynCall_iiiiiii=Module["dynCall_iiiiiii"]=asm["dynCall_iiiiiii"];var dynCall_iiiiid=Module["dynCall_iiiiid"]=asm["dynCall_iiiiid"];var dynCall_ii=Module["dynCall_ii"]=asm["dynCall_ii"];var dynCall_viii=Module["dynCall_viii"]=asm["dynCall_viii"];var dynCall_v=Module["dynCall_v"]=asm["dynCall_v"];var dynCall_iiiiiiiii=Module["dynCall_iiiiiiiii"]=asm["dynCall_iiiiiiiii"];var dynCall_iiiii=Module["dynCall_iiiii"]=asm["dynCall_iiiii"];var dynCall_viiiiii=Module["dynCall_viiiiii"]=asm["dynCall_viiiiii"];var dynCall_iii=Module["dynCall_iii"]=asm["dynCall_iii"];var dynCall_iiiiii=Module["dynCall_iiiiii"]=asm["dynCall_iiiiii"];var dynCall_viiii=Module["dynCall_viiii"]=asm["dynCall_viiii"];Runtime.stackAlloc=asm["stackAlloc"];Runtime.stackSave=asm["stackSave"];Runtime.stackRestore=asm["stackRestore"];Runtime.establishStackSpace=asm["establishStackSpace"];Runtime.setTempRet0=asm["setTempRet0"];Runtime.getTempRet0=asm["getTempRet0"];function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var preloadStartTime=null;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module["calledRun"])run();if(!Module["calledRun"])dependenciesFulfilled=runCaller};Module["callMain"]=Module.callMain=function callMain(args){args=args||[];ensureInitRuntime();var argc=args.length+1;function pad(){for(var i=0;i<4-1;i++){argv.push(0)}}var argv=[allocate(intArrayFromString(Module["thisProgram"]),"i8",ALLOC_NORMAL)];pad();for(var i=0;i<argc-1;i=i+1){argv.push(allocate(intArrayFromString(args[i]),"i8",ALLOC_NORMAL));pad()}argv.push(0);argv=allocate(argv,"i32",ALLOC_NORMAL);try{var ret=Module["_main"](argc,argv,0);exit(ret,true)}catch(e){if(e instanceof ExitStatus){return}else if(e=="SimulateInfiniteLoop"){Module["noExitRuntime"]=true;return}else{if(e&&typeof e==="object"&&e.stack)Module.printErr("exception thrown: "+[e,e.stack]);throw e}}finally{calledMain=true}};function run(args){args=args||Module["arguments"];if(preloadStartTime===null)preloadStartTime=Date.now();if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module["calledRun"])return;function doRun(){if(Module["calledRun"])return;Module["calledRun"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();if(Module["_main"]&&shouldRunNow)Module["callMain"](args);postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout((function(){setTimeout((function(){Module["setStatus"]("")}),1);doRun()}),1)}else{doRun()}}Module["run"]=Module.run=run;function exit(status,implicit){if(implicit&&Module["noExitRuntime"]){return}if(Module["noExitRuntime"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module["onExit"])Module["onExit"](status)}if(ENVIRONMENT_IS_NODE){process["exit"](status)}else if(ENVIRONMENT_IS_SHELL&&typeof quit==="function"){quit(status)}throw new ExitStatus(status)}Module["exit"]=Module.exit=exit;var abortDecorators=[];function abort(what){if(what!==undefined){Module.print(what);Module.printErr(what);what=JSON.stringify(what)}else{what=""}ABORT=true;EXITSTATUS=1;var extra="\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";var output="abort("+what+") at "+stackTrace()+extra;if(abortDecorators){abortDecorators.forEach((function(decorator){output=decorator(output,what)}))}throw output}Module["abort"]=Module.abort=abort;if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}var shouldRunNow=true;if(Module["noInitialRun"]){shouldRunNow=false}run()




//
// NOTE: At this point we're back in CuraEngineInternal.js

module.exports = {
    emitter: emitter,

    // Call the main function of the engine
    main: function(argv) {
        try {
            //Module['run'](argv);
            Module['callMain'](argv);
        }
        catch(err) {
            Module['setStatus']("Error while running main!" + err);
        }
    },

    write_file : function(name, data_encoding, data) {
        try {
            FS.writeFile(name, data, { encoding: data_encoding});
        }
        catch(err) {
            Module['setStatus']("Invalid attempt at writing file: " + err);
        }
    },

    // Read the gcode output from the virtual file system
    read_file: function(name, data_encoding) {
        try {
            return FS.readFile(name, { encoding: data_encoding});
        }
        catch(err) {
            Module['setStatus']("Invalid attempt at reading file: " + err);
            return undefined;
        }
    }
};

}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":125,"buffer":51,"crypto":62,"events":90,"fs":48,"path":121,"ws":174}],2:[function(require,module,exports){
var asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":3,"./asn1/base":5,"./asn1/constants":9,"./asn1/decoders":11,"./asn1/encoders":14,"bn.js":19}],3:[function(require,module,exports){
var asn1 = require('../asn1');
var inherits = require('inherits');

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
};

Entity.prototype._createNamed = function createNamed(base) {
  var named;
  try {
    named = require('vm').runInThisContext(
      '(function ' + this.name + '(entity) {\n' +
      '  this._initNamed(entity);\n' +
      '})'
    );
  } catch (e) {
    named = function (entity) {
      this._initNamed(entity);
    };
  }
  inherits(named, base);
  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"../asn1":2,"inherits":101,"vm":173}],4:[function(require,module,exports){
var inherits = require('inherits');
var Reporter = require('../base').Reporter;
var Buffer = require('buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
}

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  var res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
}

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
}

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!(item instanceof EncoderBuffer))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = new Buffer(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base":5,"buffer":51,"inherits":101}],5:[function(require,module,exports){
var base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":4,"./node":6,"./reporter":7}],6:[function(require,module,exports){
var Reporter = require('../base').Reporter;
var EncoderBuffer = require('../base').EncoderBuffer;
var DecoderBuffer = require('../base').DecoderBuffer;
var assert = require('minimalistic-assert');

// Supported tags
var tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
var methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
var overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;

  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

var stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState;

  // Filter children and args
  var children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      var res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  var result = state['default'];
  var present = true;

  var prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    var tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  var prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    var start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      if (state.any)
        var save = input.save();
      var body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any)
      result = result;
    else if (state.choice === null)
      result = this._decodeGeneric(state.tag, input, options);
    else
      result = this._decodeChoice(input, options);

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
          ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
        ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  var state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;

  Object.keys(state.choice).some(function(key) {
    var save = input.save();
    var node = state.choice[key];
    try {
      var value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  var result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  var result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default']
    else
      return;
  }

  // Encode children first
  var content = null;
  var primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        var state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  var result;
  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be ommited only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;

  var node = state.choice[data.type];
  if (!node) {
    assert(
        false,
        data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};

},{"../base":5,"minimalistic-assert":105}],7:[function(require,module,exports){
var inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;

  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;

  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;

  var inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
};
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":101}],8:[function(require,module,exports){
var constants = require('../constants');

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

},{"../constants":9}],9:[function(require,module,exports){
var constants = exports;

// Helper
constants._reverse = function reverse(map) {
  var res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    var value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":8}],10:[function(require,module,exports){
var inherits = require('inherits');

var asn1 = require('../../asn1');
var base = asn1.base;
var bignum = asn1.bignum;

// Import DER constants
var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer))
    data = new base.DecoderBuffer(data, options);

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer,
                                'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  var len = derDecodeLen(buffer,
                         decodedTag.primitive,
                         'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  var state = buffer.save();
  var res = this._skipUntilEnd(
      buffer,
      'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    var res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len)
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
                                                    options) {
  var result = [];
  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    var str = '';
    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;
  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  var first = (identifiers[0] / 40) | 0;
  var second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();
  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  var tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  var num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../../asn1":2,"inherits":101}],11:[function(require,module,exports){
var decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":10,"./pem":12}],12:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);

  var label = options.label.toUpperCase();

  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;
  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  var base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9\+\/=]+/gi, '');

  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":10,"buffer":51,"inherits":101}],13:[function(require,module,exports){
var inherits = require('inherits');
var Buffer = require('buffer').Buffer;

var asn1 = require('../../asn1');
var base = asn1.base;

// Import DER constants
var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
};
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}
inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
                                                              primitive,
                                                              cls,
                                                              content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  var lenOctets = 1;
  for (var i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);
    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (var i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  var size = 0;
  for (var i = 0; i < id.length; i++) {
    var ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;
  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0)
      size++;

    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  var size = 1;
  for (var i = num; i >= 0x100; i >>= 8)
    size++;

  var out = new Array(size);
  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null)
    return false;

  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  var res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../../asn1":2,"buffer":51,"inherits":101}],14:[function(require,module,exports){
var encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":13,"./pem":15}],15:[function(require,module,exports){
var inherits = require('inherits');

var DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
};
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);

  var p = buf.toString('base64');
  var out = [ '-----BEGIN ' + options.label + '-----' ];
  for (var i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":13,"inherits":101}],16:[function(require,module,exports){
(function (global){
'use strict';

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('util/');
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"util/":172}],17:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],18:[function(require,module,exports){
(function (process,__filename){

/**
 * Module dependencies.
 */

var fs = require('fs')
  , path = require('path')
  , join = path.join
  , dirname = path.dirname
  , exists = fs.existsSync || path.existsSync
  , defaults = {
        arrow: process.env.NODE_BINDINGS_ARROW || ' → '
      , compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled'
      , platform: process.platform
      , arch: process.arch
      , version: process.versions.node
      , bindings: 'bindings.node'
      , try: [
          // node-gyp's linked version in the "build" dir
          [ 'module_root', 'build', 'bindings' ]
          // node-waf and gyp_addon (a.k.a node-gyp)
        , [ 'module_root', 'build', 'Debug', 'bindings' ]
        , [ 'module_root', 'build', 'Release', 'bindings' ]
          // Debug files, for development (legacy behavior, remove for node v0.9)
        , [ 'module_root', 'out', 'Debug', 'bindings' ]
        , [ 'module_root', 'Debug', 'bindings' ]
          // Release files, but manually compiled (legacy behavior, remove for node v0.9)
        , [ 'module_root', 'out', 'Release', 'bindings' ]
        , [ 'module_root', 'Release', 'bindings' ]
          // Legacy from node-waf, node <= 0.4.x
        , [ 'module_root', 'build', 'default', 'bindings' ]
          // Production "Release" buildtype binary (meh...)
        , [ 'module_root', 'compiled', 'version', 'platform', 'arch', 'bindings' ]
        ]
    }

/**
 * The main `bindings()` function loads the compiled bindings for a given module.
 * It uses V8's Error API to determine the parent filename that this function is
 * being invoked from, which is then used to find the root directory.
 */

function bindings (opts) {

  // Argument surgery
  if (typeof opts == 'string') {
    opts = { bindings: opts }
  } else if (!opts) {
    opts = {}
  }
  opts.__proto__ = defaults

  // Get the module root
  if (!opts.module_root) {
    opts.module_root = exports.getRoot(exports.getFileName())
  }

  // Ensure the given bindings name ends with .node
  if (path.extname(opts.bindings) != '.node') {
    opts.bindings += '.node'
  }

  var tries = []
    , i = 0
    , l = opts.try.length
    , n
    , b
    , err

  for (; i<l; i++) {
    n = join.apply(null, opts.try[i].map(function (p) {
      return opts[p] || p
    }))
    tries.push(n)
    try {
      b = opts.path ? require.resolve(n) : require(n)
      if (!opts.path) {
        b.path = n
      }
      return b
    } catch (e) {
      if (!/not find/i.test(e.message)) {
        throw e
      }
    }
  }

  err = new Error('Could not locate the bindings file. Tried:\n'
    + tries.map(function (a) { return opts.arrow + a }).join('\n'))
  err.tries = tries
  throw err
}
module.exports = exports = bindings


/**
 * Gets the filename of the JavaScript file that invokes this function.
 * Used to help find the root directory of a module.
 * Optionally accepts an filename argument to skip when searching for the invoking filename
 */

exports.getFileName = function getFileName (calling_file) {
  var origPST = Error.prepareStackTrace
    , origSTL = Error.stackTraceLimit
    , dummy = {}
    , fileName

  Error.stackTraceLimit = 10

  Error.prepareStackTrace = function (e, st) {
    for (var i=0, l=st.length; i<l; i++) {
      fileName = st[i].getFileName()
      if (fileName !== __filename) {
        if (calling_file) {
            if (fileName !== calling_file) {
              return
            }
        } else {
          return
        }
      }
    }
  }

  // run the 'prepareStackTrace' function above
  Error.captureStackTrace(dummy)
  dummy.stack

  // cleanup
  Error.prepareStackTrace = origPST
  Error.stackTraceLimit = origSTL

  return fileName
}

/**
 * Gets the root directory of a module, given an arbitrary filename
 * somewhere in the module tree. The "root directory" is the directory
 * containing the `package.json` file.
 *
 *   In:  /home/nate/node-native-module/lib/index.js
 *   Out: /home/nate/node-native-module
 */

exports.getRoot = function getRoot (file) {
  var dir = dirname(file)
    , prev
  while (true) {
    if (dir === '.') {
      // Avoids an infinite loop in rare cases, like the REPL
      dir = process.cwd()
    }
    if (exists(join(dir, 'package.json')) || exists(join(dir, 'node_modules'))) {
      // Found the 'package.json' file or 'node_modules' dir; we're done
      return dir
    }
    if (prev === dir) {
      // Got to the top
      throw new Error('Could not find module root given file: "' + file
                    + '". Do you have a `package.json` file? ')
    }
    // Try the parent dir next
    prev = dir
    dir = join(dir, '..')
  }
}

}).call(this,require('_process'),"/node_modules/bindings/bindings.js")
},{"_process":125,"fs":48,"path":121}],19:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = require('buf' + 'fer').Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{}],20:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };
  } else {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
    // Emulate crypto API using randy
    Rand.prototype._rand = function _rand(n) {
      var res = new Uint8Array(n);
      for (var i = 0; i < res.length; i++)
        res[i] = this.rand.getByte();
      return res;
    };
  }
}

},{"crypto":21}],21:[function(require,module,exports){

},{}],22:[function(require,module,exports){
(function (Buffer){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec

// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function scrub_vec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
  return false
}

function Global () {
  this.SBOX = []
  this.INV_SBOX = []
  this.SUB_MIX = [[], [], [], []]
  this.INV_SUB_MIX = [[], [], [], []]
  this.init()
  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
}

Global.prototype.init = function () {
  var d, i, sx, t, x, x2, x4, x8, xi, _i
  d = (function () {
    var _i, _results
    _results = []
    for (i = _i = 0; _i < 256; i = ++_i) {
      if (i < 128) {
        _results.push(i << 1)
      } else {
        _results.push((i << 1) ^ 0x11b)
      }
    }
    return _results
  })()
  x = 0
  xi = 0
  for (i = _i = 0; _i < 256; i = ++_i) {
    sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    this.SBOX[x] = sx
    this.INV_SBOX[sx] = x
    x2 = d[x]
    x4 = d[x2]
    x8 = d[x4]
    t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    this.SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    this.SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    this.SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    this.SUB_MIX[3][x] = t
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    this.INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    this.INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    this.INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    this.INV_SUB_MIX[3][sx] = t
    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }
  return true
}

var G = new Global()

AES.blockSize = 4 * 4

AES.prototype.blockSize = AES.blockSize

AES.keySize = 256 / 8

AES.prototype.keySize = AES.keySize

function bufferToArray (buf) {
  var len = buf.length / 4
  var out = new Array(len)
  var i = -1
  while (++i < len) {
    out[i] = buf.readUInt32BE(i * 4)
  }
  return out
}
function AES (key) {
  this._key = bufferToArray(key)
  this._doReset()
}

AES.prototype._doReset = function () {
  var invKsRow, keySize, keyWords, ksRow, ksRows, t
  keyWords = this._key
  keySize = keyWords.length
  this._nRounds = keySize + 6
  ksRows = (this._nRounds + 1) * 4
  this._keySchedule = []
  for (ksRow = 0; ksRow < ksRows; ksRow++) {
    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], (ksRow % keySize) === 0 ? (t = (t << 8) | (t >>> 24), t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff], t ^= G.RCON[(ksRow / keySize) | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = (G.SBOX[t >>> 24] << 24) | (G.SBOX[(t >>> 16) & 0xff] << 16) | (G.SBOX[(t >>> 8) & 0xff] << 8) | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t)
  }
  this._invKeySchedule = []
  for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {
    ksRow = ksRows - invKsRow
    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)]
    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[(t >>> 16) & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[(t >>> 8) & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]]
  }
  return true
}

AES.prototype.encryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = bufferToArray(new Buffer(M))
  var temp = [M[3], M[1]]
  M[1] = temp[0]
  M[3] = temp[1]
  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrub_vec(this._keySchedule)
  scrub_vec(this._invKeySchedule)
  scrub_vec(this._key)
}

AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
  var ksRow, s0, s1, s2, s3, t0, t1, t2, t3

  s0 = M[0] ^ keySchedule[0]
  s1 = M[1] ^ keySchedule[1]
  s2 = M[2] ^ keySchedule[2]
  s3 = M[3] ^ keySchedule[3]
  ksRow = 4
  for (var round = 1; round < this._nRounds; round++) {
    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][(s1 >>> 16) & 0xff] ^ SUB_MIX[2][(s2 >>> 8) & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][(s2 >>> 16) & 0xff] ^ SUB_MIX[2][(s3 >>> 8) & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][(s3 >>> 16) & 0xff] ^ SUB_MIX[2][(s0 >>> 8) & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][(s0 >>> 16) & 0xff] ^ SUB_MIX[2][(s1 >>> 8) & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }
  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  return [
    fixup_uint32(t0),
    fixup_uint32(t1),
    fixup_uint32(t2),
    fixup_uint32(t3)
  ]
}

exports.AES = AES

}).call(this,require("buffer").Buffer)
},{"buffer":51}],23:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
inherits(StreamCipher, Transform)
module.exports = StreamCipher

function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._finID = Buffer.concat([iv, new Buffer([0, 0, 0, 1])])
  iv = Buffer.concat([iv, new Buffer([0, 0, 0, 2])])
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  iv.copy(this._prev)
  this._mode = mode
  var h = new Buffer(4)
  h.fill(0)
  this._ghash = new GHASH(this._cipher.encryptBlock(h))
  this._authTag = null
  this._called = false
}
StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = new Buffer(rump)
      rump.fill(0)
      this._ghash.update(rump)
    }
  }
  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}
StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) {
    throw new Error('Unsupported state or unable to authenticate data')
  }
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt) {
    if (xorTest(tag, this._authTag)) {
      throw new Error('Unsupported state or unable to authenticate data')
    }
  } else {
    this._authTag = tag
  }
  this._cipher.scrub()
}
StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (!this._decrypt && Buffer.isBuffer(this._authTag)) {
    return this._authTag
  } else {
    throw new Error('Attempting to get auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (this._decrypt) {
    this._authTag = tag
  } else {
    throw new Error('Attempting to set auth tag in unsupported state')
  }
}
StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (!this._called) {
    this._ghash.update(buf)
    this._alen += buf.length
  } else {
    throw new Error('Attempting to set AAD in unsupported state')
  }
}
function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) {
    out++
  }
  var len = Math.min(a.length, b.length)
  var i = -1
  while (++i < len) {
    out += (a[i] ^ b[i])
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"./aes":22,"./ghash":27,"buffer":51,"buffer-xor":50,"cipher-base":55,"inherits":101}],24:[function(require,module,exports){
var ciphers = require('./encrypter')
exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
var deciphers = require('./decrypter')
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
var modes = require('./modes')
function getCiphers () {
  return Object.keys(modes)
}
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":25,"./encrypter":26,"./modes":28}],25:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
var ebtk = require('evp_bytestokey')

inherits(Decipher, Transform)
function Decipher (mode, key, iv) {
  if (!(this instanceof Decipher)) {
    return new Decipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}
Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}
function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }
  return null
}
Splitter.prototype.flush = function () {
  if (this.cache.length) {
    return this.cache
  }
}
function unpad (last) {
  var padded = last[15]
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) {
    return
  }
  return last.slice(0, 16 - padded)
}

var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createDecipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv, true)
  }
  return new Decipher(modelist[config.mode], password, iv)
}

function createDecipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}
exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

}).call(this,require("buffer").Buffer)
},{"./aes":22,"./authCipher":23,"./modes":28,"./modes/cbc":29,"./modes/cfb":30,"./modes/cfb1":31,"./modes/cfb8":32,"./modes/ctr":33,"./modes/ecb":34,"./modes/ofb":35,"./streamCipher":36,"buffer":51,"cipher-base":55,"evp_bytestokey":91,"inherits":101}],26:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')
var modes = require('./modes')
var ebtk = require('evp_bytestokey')
var StreamCipher = require('./streamCipher')
var AuthCipher = require('./authCipher')
inherits(Cipher, Transform)
function Cipher (mode, key, iv) {
  if (!(this instanceof Cipher)) {
    return new Cipher(mode, key, iv)
  }
  Transform.call(this)
  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  iv.copy(this._prev)
  this._mode = mode
  this._autopadding = true
}
Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}
Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  } else if (chunk.toString('hex') !== '10101010101010101010101010101010') {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}
Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  if (!(this instanceof Splitter)) {
    return new Splitter()
  }
  this.cache = new Buffer('')
}
Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}
Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = new Buffer(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }
  var out = Buffer.concat([this.cache, padBuff])
  return out
}
var modelist = {
  ECB: require('./modes/ecb'),
  CBC: require('./modes/cbc'),
  CFB: require('./modes/cfb'),
  CFB8: require('./modes/cfb8'),
  CFB1: require('./modes/cfb1'),
  OFB: require('./modes/ofb'),
  CTR: require('./modes/ctr'),
  GCM: require('./modes/ctr')
}

function createCipheriv (suite, password, iv) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  if (typeof iv === 'string') {
    iv = new Buffer(iv)
  }
  if (typeof password === 'string') {
    password = new Buffer(password)
  }
  if (password.length !== config.key / 8) {
    throw new TypeError('invalid key length ' + password.length)
  }
  if (iv.length !== config.iv) {
    throw new TypeError('invalid iv length ' + iv.length)
  }
  if (config.type === 'stream') {
    return new StreamCipher(modelist[config.mode], password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(modelist[config.mode], password, iv)
  }
  return new Cipher(modelist[config.mode], password, iv)
}
function createCipher (suite, password) {
  var config = modes[suite.toLowerCase()]
  if (!config) {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

}).call(this,require("buffer").Buffer)
},{"./aes":22,"./authCipher":23,"./modes":28,"./modes/cbc":29,"./modes/cfb":30,"./modes/cfb1":31,"./modes/cfb8":32,"./modes/ctr":33,"./modes/ecb":34,"./modes/ofb":35,"./streamCipher":36,"buffer":51,"cipher-base":55,"evp_bytestokey":91,"inherits":101}],27:[function(require,module,exports){
(function (Buffer){
var zeros = new Buffer(16)
zeros.fill(0)
module.exports = GHASH
function GHASH (key) {
  this.h = key
  this.state = new Buffer(16)
  this.state.fill(0)
  this.cache = new Buffer('')
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsb_Vi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - i % 8))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi = xor(Zi, Vi)
    }

    // Store the value of LSB(V_i)
    lsb_Vi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsb_Vi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}
GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}
GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, zeros], 16))
  }
  this.ghash(fromArray([
    0, abl,
    0, bl
  ]))
  return this.state
}

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}
function fromArray (out) {
  out = out.map(fixup_uint32)
  var buf = new Buffer(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}
var uint_max = Math.pow(2, 32)
function fixup_uint32 (x) {
  var ret, x_pos
  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x
  return ret
}
function xor (a, b) {
  return [
    a[0] ^ b[0],
    a[1] ^ b[1],
    a[2] ^ b[2],
    a[3] ^ b[3]
  ]
}

}).call(this,require("buffer").Buffer)
},{"buffer":51}],28:[function(require,module,exports){
exports['aes-128-ecb'] = {
  cipher: 'AES',
  key: 128,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-192-ecb'] = {
  cipher: 'AES',
  key: 192,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-256-ecb'] = {
  cipher: 'AES',
  key: 256,
  iv: 0,
  mode: 'ECB',
  type: 'block'
}
exports['aes-128-cbc'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-192-cbc'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes-256-cbc'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CBC',
  type: 'block'
}
exports['aes128'] = exports['aes-128-cbc']
exports['aes192'] = exports['aes-192-cbc']
exports['aes256'] = exports['aes-256-cbc']
exports['aes-128-cfb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-192-cfb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-256-cfb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB',
  type: 'stream'
}
exports['aes-128-cfb8'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-192-cfb8'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-256-cfb8'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB8',
  type: 'stream'
}
exports['aes-128-cfb1'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-192-cfb1'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-256-cfb1'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CFB1',
  type: 'stream'
}
exports['aes-128-ofb'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-192-ofb'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-256-ofb'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'OFB',
  type: 'stream'
}
exports['aes-128-ctr'] = {
  cipher: 'AES',
  key: 128,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-192-ctr'] = {
  cipher: 'AES',
  key: 192,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-256-ctr'] = {
  cipher: 'AES',
  key: 256,
  iv: 16,
  mode: 'CTR',
  type: 'stream'
}
exports['aes-128-gcm'] = {
  cipher: 'AES',
  key: 128,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-192-gcm'] = {
  cipher: 'AES',
  key: 192,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}
exports['aes-256-gcm'] = {
  cipher: 'AES',
  key: 256,
  iv: 12,
  mode: 'GCM',
  type: 'auth'
}

},{}],29:[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":50}],30:[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

exports.encrypt = function (self, data, decrypt) {
  var out = new Buffer('')
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = new Buffer('')
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}
function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":51,"buffer-xor":50}],31:[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}
function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = new Buffer(buffer.length)
  buffer = Buffer.concat([buffer, new Buffer([value])])
  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":51}],32:[function(require,module,exports){
(function (Buffer){
function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam
  self._prev = Buffer.concat([self._prev.slice(1), new Buffer([decrypt ? byteParam : out])])
  return out
}
exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = new Buffer(len)
  var i = -1
  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":51}],33:[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}

function getBlock (self) {
  var out = self._cipher.encryptBlock(self._prev)
  incr32(self._prev)
  return out
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
},{"buffer":51,"buffer-xor":50}],34:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}
exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],35:[function(require,module,exports){
(function (Buffer){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this,require("buffer").Buffer)
},{"buffer":51,"buffer-xor":50}],36:[function(require,module,exports){
(function (Buffer){
var aes = require('./aes')
var Transform = require('cipher-base')
var inherits = require('inherits')

inherits(StreamCipher, Transform)
module.exports = StreamCipher
function StreamCipher (mode, key, iv, decrypt) {
  if (!(this instanceof StreamCipher)) {
    return new StreamCipher(mode, key, iv)
  }
  Transform.call(this)
  this._cipher = new aes.AES(key)
  this._prev = new Buffer(iv.length)
  this._cache = new Buffer('')
  this._secCache = new Buffer('')
  this._decrypt = decrypt
  iv.copy(this._prev)
  this._mode = mode
}
StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}
StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

}).call(this,require("buffer").Buffer)
},{"./aes":22,"buffer":51,"cipher-base":55,"inherits":101}],37:[function(require,module,exports){
var ebtk = require('evp_bytestokey')
var aes = require('browserify-aes/browser')
var DES = require('browserify-des')
var desModes = require('browserify-des/modes')
var aesModes = require('browserify-aes/modes')
function createCipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}
function createDecipher (suite, password) {
  var keyLen, ivLen
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }
  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createCipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) {
    return aes.createDecipheriv(suite, key, iv)
  } else if (desModes[suite]) {
    return new DES({
      key: key,
      iv: iv,
      mode: suite,
      decrypt: true
    })
  } else {
    throw new TypeError('invalid suite type')
  }
}
exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":24,"browserify-aes/modes":28,"browserify-des":38,"browserify-des/modes":39,"evp_bytestokey":91}],38:[function(require,module,exports){
(function (Buffer){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return new Buffer(this._des.update(data))
}
DES.prototype._final = function () {
  return new Buffer(this._des.final())
}

}).call(this,require("buffer").Buffer)
},{"buffer":51,"cipher-base":55,"des.js":63,"inherits":101}],39:[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],40:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
var randomBytes = require('randombytes');
module.exports = crt;
function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus))
  .redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder:r.invm(priv.modulus)
  };
}
function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}
crt.getr = getr;
function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));
  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }
  return r;
}

}).call(this,require("buffer").Buffer)
},{"bn.js":19,"buffer":51,"randombytes":136}],41:[function(require,module,exports){
(function (Buffer){
'use strict'
exports['RSA-SHA224'] = exports.sha224WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha224',
  id: new Buffer('302d300d06096086480165030402040500041c', 'hex')
}
exports['RSA-SHA256'] = exports.sha256WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha256',
  id: new Buffer('3031300d060960864801650304020105000420', 'hex')
}
exports['RSA-SHA384'] = exports.sha384WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha384',
  id: new Buffer('3041300d060960864801650304020205000430', 'hex')
}
exports['RSA-SHA512'] = exports.sha512WithRSAEncryption = {
  sign: 'rsa',
  hash: 'sha512',
  id: new Buffer('3051300d060960864801650304020305000440', 'hex')
}
exports['RSA-SHA1'] = {
  sign: 'rsa',
  hash: 'sha1',
  id: new Buffer('3021300906052b0e03021a05000414', 'hex')
}
exports['ecdsa-with-SHA1'] = {
  sign: 'ecdsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
}

exports.DSA = exports['DSA-SHA1'] = exports['DSA-SHA'] = {
  sign: 'dsa',
  hash: 'sha1',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA224'] = exports['DSA-WITH-SHA224'] = {
  sign: 'dsa',
  hash: 'sha224',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA256'] = exports['DSA-WITH-SHA256'] = {
  sign: 'dsa',
  hash: 'sha256',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA384'] = exports['DSA-WITH-SHA384'] = {
  sign: 'dsa',
  hash: 'sha384',
  id: new Buffer('', 'hex')
}
exports['DSA-SHA512'] = exports['DSA-WITH-SHA512'] = {
  sign: 'dsa',
  hash: 'sha512',
  id: new Buffer('', 'hex')
}
exports['DSA-RIPEMD160'] = {
  sign: 'dsa',
  hash: 'rmd160',
  id: new Buffer('', 'hex')
}
exports['RSA-RIPEMD160'] = exports.ripemd160WithRSA = {
  sign: 'rsa',
  hash: 'rmd160',
  id: new Buffer('3021300906052b2403020105000414', 'hex')
}
exports['RSA-MD5'] = exports.md5WithRSAEncryption = {
  sign: 'rsa',
  hash: 'md5',
  id: new Buffer('3020300c06082a864886f70d020505000410', 'hex')
}

}).call(this,require("buffer").Buffer)
},{"buffer":51}],42:[function(require,module,exports){
(function (Buffer){
var _algos = require('./algos')
var createHash = require('create-hash')
var inherits = require('inherits')
var sign = require('./sign')
var stream = require('stream')
var verify = require('./verify')

var algos = {}
Object.keys(_algos).forEach(function (key) {
  algos[key] = algos[key.toLowerCase()] = _algos[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algos[algorithm]
  if (!data) {
    throw new Error('Unknown message digest')
  }

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(Buffer.concat([this._tag, hash]), key, this._hashType, this._signType)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algos[algorithm]
  if (!data) {
    throw new Error('Unknown message digest')
  }

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)

  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') {
    data = new Buffer(data, enc)
  }

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') {
    sig = new Buffer(sig, enc)
  }

  this.end()
  var hash = this._hash.digest()

  return verify(sig, Buffer.concat([this._tag, hash]), key, this._signType)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

}).call(this,require("buffer").Buffer)
},{"./algos":41,"./sign":44,"./verify":45,"buffer":51,"create-hash":58,"inherits":101,"stream":157}],43:[function(require,module,exports){
'use strict'
exports['1.3.132.0.10'] = 'secp256k1'

exports['1.3.132.0.33'] = 'p224'

exports['1.2.840.10045.3.1.1'] = 'p192'

exports['1.2.840.10045.3.1.7'] = 'p256'

exports['1.3.132.0.34'] = 'p384'

exports['1.3.132.0.35'] = 'p521'

},{}],44:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var curves = require('./curves')
var elliptic = require('elliptic')
var parseKeys = require('parse-asn1')

var BN = require('bn.js')
var EC = elliptic.ec

function sign (hash, key, hashType, signType) {
  var priv = parseKeys(key)
  if (priv.curve) {
    if (signType !== 'ecdsa') throw new Error('wrong private key type')

    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong private key type')
    }
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa') throw new Error('wrong private key type')
  }

  var len = priv.modulus.byteLength()
  var pad = [ 0, 1 ]
  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff)
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.genKeyPair()

  key._importPrivate(priv.privateKey)
  var out = key.sign(hash)

  return new Buffer(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (!s.cmpn(0)) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) {
    r = [ 0 ].concat(r)
  }
  // Pad values
  if (s[0] & 0x80) {
    s = [0].concat(s)
  }

  var total = r.length + s.length + 4
  var res = [ 0x30, total, 0x02, r.length ]
  res = res.concat(r, [ 0x02, s.length ], s)
  return new Buffer(res)
}

function getKey (x, q, hash, algo) {
  x = new Buffer(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length)
    zeros.fill(0)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = new Buffer(hlen)
  v.fill(1)
  var k = new Buffer(hlen)
  k.fill(0)
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([0]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  k = createHmac(algo, k)
    .update(v)
    .update(new Buffer([1]))
    .update(x)
    .update(hbits)
    .digest()
  v = createHmac(algo, k)
    .update(v)
    .digest()
  return {
    k: k,
    v: v
  }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) {
    bits.ishrn(shift)
  }
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = new Buffer(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length)
    zeros.fill(0)
    out = Buffer.concat([zeros, out])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t, k

  do {
    t = new Buffer('')

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k)
        .update(kv.v)
        .digest()
      t = Buffer.concat([t, kv.v])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k)
      .update(kv.v)
      .update(new Buffer([0]))
      .digest()
    kv.v = createHmac(algo, kv.k)
      .update(kv.v)
      .digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

}).call(this,require("buffer").Buffer)
},{"./curves":43,"bn.js":19,"browserify-rsa":40,"buffer":51,"create-hmac":61,"elliptic":73,"parse-asn1":120}],45:[function(require,module,exports){
(function (Buffer){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var curves = require('./curves')
var elliptic = require('elliptic')
var parseKeys = require('parse-asn1')

var BN = require('bn.js')
var EC = elliptic.ec

function verify (sig, hash, key, signType) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    if (signType !== 'ecdsa') {
      throw new Error('wrong public key type')
    }
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') {
      throw new Error('wrong public key type')
    }
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa') {
      throw new Error('wrong public key type')
    }
  }
  var len = pub.modulus.byteLength()
  var pad = [ 1 ]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = new Buffer(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))

  sig = new Buffer(sig.fromRed().toArray())
  var out = 0
  if (padNum < 8) {
    out = 1
  }
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) {
    out = 1
  }

  i = -1
  while (++i < len) {
    out |= (sig[i] ^ pad[i])
  }
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(
      y.toRed(montp)
        .redPow(r.mul(w).mod(q))
        .fromRed()
  ).mod(p).mod(q)
  return !v.cmp(r)
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) {
    throw new Error('invalid sig')
  }
  if (b.cmp(q) >= q) {
    throw new Error('invalid sig')
  }
}

module.exports = verify

}).call(this,require("buffer").Buffer)
},{"./curves":43,"bn.js":19,"buffer":51,"elliptic":73,"parse-asn1":120}],46:[function(require,module,exports){
(function (process,Buffer){
var msg = require('pako/lib/zlib/messages');
var zstream = require('pako/lib/zlib/zstream');
var zlib_deflate = require('pako/lib/zlib/deflate.js');
var zlib_inflate = require('pako/lib/zlib/inflate.js');
var constants = require('pako/lib/zlib/constants');

for (var key in constants) {
  exports[key] = constants[key];
}

// zlib modes
exports.NONE = 0;
exports.DEFLATE = 1;
exports.INFLATE = 2;
exports.GZIP = 3;
exports.GUNZIP = 4;
exports.DEFLATERAW = 5;
exports.INFLATERAW = 6;
exports.UNZIP = 7;

/**
 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
 */
function Zlib(mode) {
  if (mode < exports.DEFLATE || mode > exports.UNZIP)
    throw new TypeError("Bad argument");
    
  this.mode = mode;
  this.init_done = false;
  this.write_in_progress = false;
  this.pending_close = false;
  this.windowBits = 0;
  this.level = 0;
  this.memLevel = 0;
  this.strategy = 0;
  this.dictionary = null;
}

Zlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {
  this.windowBits = windowBits;
  this.level = level;
  this.memLevel = memLevel;
  this.strategy = strategy;
  // dictionary not supported.
  
  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP)
    this.windowBits += 16;
    
  if (this.mode === exports.UNZIP)
    this.windowBits += 32;
    
  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW)
    this.windowBits = -this.windowBits;
    
  this.strm = new zstream();
  
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      var status = zlib_deflate.deflateInit2(
        this.strm,
        this.level,
        exports.Z_DEFLATED,
        this.windowBits,
        this.memLevel,
        this.strategy
      );
      break;
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
    case exports.UNZIP:
      var status  = zlib_inflate.inflateInit2(
        this.strm,
        this.windowBits
      );
      break;
    default:
      throw new Error("Unknown mode " + this.mode);
  }
  
  if (status !== exports.Z_OK) {
    this._error(status);
    return;
  }
  
  this.write_in_progress = false;
  this.init_done = true;
};

Zlib.prototype.params = function() {
  throw new Error("deflateParams Not supported");
};

Zlib.prototype._writeCheck = function() {
  if (!this.init_done)
    throw new Error("write before init");
    
  if (this.mode === exports.NONE)
    throw new Error("already finalized");
    
  if (this.write_in_progress)
    throw new Error("write already in progress");
    
  if (this.pending_close)
    throw new Error("close is pending");
};

Zlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {    
  this._writeCheck();
  this.write_in_progress = true;
  
  var self = this;
  process.nextTick(function() {
    self.write_in_progress = false;
    var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
    self.callback(res[0], res[1]);
    
    if (self.pending_close)
      self.close();
  });
  
  return this;
};

// set method for Node buffers, used by pako
function bufferSet(data, offset) {
  for (var i = 0; i < data.length; i++) {
    this[offset + i] = data[i];
  }
}

Zlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {
  this._writeCheck();
  return this._write(flush, input, in_off, in_len, out, out_off, out_len);
};

Zlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {
  this.write_in_progress = true;
  
  if (flush !== exports.Z_NO_FLUSH &&
      flush !== exports.Z_PARTIAL_FLUSH &&
      flush !== exports.Z_SYNC_FLUSH &&
      flush !== exports.Z_FULL_FLUSH &&
      flush !== exports.Z_FINISH &&
      flush !== exports.Z_BLOCK) {
    throw new Error("Invalid flush value");
  }
  
  if (input == null) {
    input = new Buffer(0);
    in_len = 0;
    in_off = 0;
  }
  
  if (out._set)
    out.set = out._set;
  else
    out.set = bufferSet;
  
  var strm = this.strm;
  strm.avail_in = in_len;
  strm.input = input;
  strm.next_in = in_off;
  strm.avail_out = out_len;
  strm.output = out;
  strm.next_out = out_off;
  
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.GZIP:
    case exports.DEFLATERAW:
      var status = zlib_deflate.deflate(strm, flush);
      break;
    case exports.UNZIP:
    case exports.INFLATE:
    case exports.GUNZIP:
    case exports.INFLATERAW:
      var status = zlib_inflate.inflate(strm, flush);
      break;
    default:
      throw new Error("Unknown mode " + this.mode);
  }
  
  if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {
    this._error(status);
  }
  
  this.write_in_progress = false;
  return [strm.avail_in, strm.avail_out];
};

Zlib.prototype.close = function() {
  if (this.write_in_progress) {
    this.pending_close = true;
    return;
  }
  
  this.pending_close = false;
  
  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
    zlib_deflate.deflateEnd(this.strm);
  } else {
    zlib_inflate.inflateEnd(this.strm);
  }
  
  this.mode = exports.NONE;
};

Zlib.prototype.reset = function() {
  switch (this.mode) {
    case exports.DEFLATE:
    case exports.DEFLATERAW:
      var status = zlib_deflate.deflateReset(this.strm);
      break;
    case exports.INFLATE:
    case exports.INFLATERAW:
      var status = zlib_inflate.inflateReset(this.strm);
      break;
  }
  
  if (status !== exports.Z_OK) {
    this._error(status);
  }
};

Zlib.prototype._error = function(status) {
  this.onerror(msg[status] + ': ' + this.strm.msg, status);
  
  this.write_in_progress = false;
  if (this.pending_close)
    this.close();
};

exports.Zlib = Zlib;

}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":125,"buffer":51,"pako/lib/zlib/constants":108,"pako/lib/zlib/deflate.js":110,"pako/lib/zlib/inflate.js":112,"pako/lib/zlib/messages":114,"pako/lib/zlib/zstream":116}],47:[function(require,module,exports){
(function (process,Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Transform = require('_stream_transform');

var binding = require('./binding');
var util = require('util');
var assert = require('assert').ok;

// zlib doesn't provide these, so kludge them in following the same
// const naming scheme zlib uses.
binding.Z_MIN_WINDOWBITS = 8;
binding.Z_MAX_WINDOWBITS = 15;
binding.Z_DEFAULT_WINDOWBITS = 15;

// fewer than 64 bytes per chunk is stupid.
// technically it could work with as few as 8, but even 64 bytes
// is absurdly low.  Usually a MB or more is best.
binding.Z_MIN_CHUNK = 64;
binding.Z_MAX_CHUNK = Infinity;
binding.Z_DEFAULT_CHUNK = (16 * 1024);

binding.Z_MIN_MEMLEVEL = 1;
binding.Z_MAX_MEMLEVEL = 9;
binding.Z_DEFAULT_MEMLEVEL = 8;

binding.Z_MIN_LEVEL = -1;
binding.Z_MAX_LEVEL = 9;
binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;

// expose all the zlib constants
Object.keys(binding).forEach(function(k) {
  if (k.match(/^Z/)) exports[k] = binding[k];
});

// translation table for return codes.
exports.codes = {
  Z_OK: binding.Z_OK,
  Z_STREAM_END: binding.Z_STREAM_END,
  Z_NEED_DICT: binding.Z_NEED_DICT,
  Z_ERRNO: binding.Z_ERRNO,
  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
  Z_DATA_ERROR: binding.Z_DATA_ERROR,
  Z_MEM_ERROR: binding.Z_MEM_ERROR,
  Z_BUF_ERROR: binding.Z_BUF_ERROR,
  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
};

Object.keys(exports.codes).forEach(function(k) {
  exports.codes[exports.codes[k]] = k;
});

exports.Deflate = Deflate;
exports.Inflate = Inflate;
exports.Gzip = Gzip;
exports.Gunzip = Gunzip;
exports.DeflateRaw = DeflateRaw;
exports.InflateRaw = InflateRaw;
exports.Unzip = Unzip;

exports.createDeflate = function(o) {
  return new Deflate(o);
};

exports.createInflate = function(o) {
  return new Inflate(o);
};

exports.createDeflateRaw = function(o) {
  return new DeflateRaw(o);
};

exports.createInflateRaw = function(o) {
  return new InflateRaw(o);
};

exports.createGzip = function(o) {
  return new Gzip(o);
};

exports.createGunzip = function(o) {
  return new Gunzip(o);
};

exports.createUnzip = function(o) {
  return new Unzip(o);
};


// Convenience methods.
// compress/decompress a string or buffer in one step.
exports.deflate = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Deflate(opts), buffer, callback);
};

exports.deflateSync = function(buffer, opts) {
  return zlibBufferSync(new Deflate(opts), buffer);
};

exports.gzip = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gzip(opts), buffer, callback);
};

exports.gzipSync = function(buffer, opts) {
  return zlibBufferSync(new Gzip(opts), buffer);
};

exports.deflateRaw = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
};

exports.deflateRawSync = function(buffer, opts) {
  return zlibBufferSync(new DeflateRaw(opts), buffer);
};

exports.unzip = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Unzip(opts), buffer, callback);
};

exports.unzipSync = function(buffer, opts) {
  return zlibBufferSync(new Unzip(opts), buffer);
};

exports.inflate = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Inflate(opts), buffer, callback);
};

exports.inflateSync = function(buffer, opts) {
  return zlibBufferSync(new Inflate(opts), buffer);
};

exports.gunzip = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new Gunzip(opts), buffer, callback);
};

exports.gunzipSync = function(buffer, opts) {
  return zlibBufferSync(new Gunzip(opts), buffer);
};

exports.inflateRaw = function(buffer, opts, callback) {
  if (typeof opts === 'function') {
    callback = opts;
    opts = {};
  }
  return zlibBuffer(new InflateRaw(opts), buffer, callback);
};

exports.inflateRawSync = function(buffer, opts) {
  return zlibBufferSync(new InflateRaw(opts), buffer);
};

function zlibBuffer(engine, buffer, callback) {
  var buffers = [];
  var nread = 0;

  engine.on('error', onError);
  engine.on('end', onEnd);

  engine.end(buffer);
  flow();

  function flow() {
    var chunk;
    while (null !== (chunk = engine.read())) {
      buffers.push(chunk);
      nread += chunk.length;
    }
    engine.once('readable', flow);
  }

  function onError(err) {
    engine.removeListener('end', onEnd);
    engine.removeListener('readable', flow);
    callback(err);
  }

  function onEnd() {
    var buf = Buffer.concat(buffers, nread);
    buffers = [];
    callback(null, buf);
    engine.close();
  }
}

function zlibBufferSync(engine, buffer) {
  if (typeof buffer === 'string')
    buffer = new Buffer(buffer);
  if (!Buffer.isBuffer(buffer))
    throw new TypeError('Not a string or buffer');

  var flushFlag = binding.Z_FINISH;

  return engine._processChunk(buffer, flushFlag);
}

// generic zlib
// minimal 2-byte header
function Deflate(opts) {
  if (!(this instanceof Deflate)) return new Deflate(opts);
  Zlib.call(this, opts, binding.DEFLATE);
}

function Inflate(opts) {
  if (!(this instanceof Inflate)) return new Inflate(opts);
  Zlib.call(this, opts, binding.INFLATE);
}



// gzip - bigger header, same deflate compression
function Gzip(opts) {
  if (!(this instanceof Gzip)) return new Gzip(opts);
  Zlib.call(this, opts, binding.GZIP);
}

function Gunzip(opts) {
  if (!(this instanceof Gunzip)) return new Gunzip(opts);
  Zlib.call(this, opts, binding.GUNZIP);
}



// raw - no header
function DeflateRaw(opts) {
  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
  Zlib.call(this, opts, binding.DEFLATERAW);
}

function InflateRaw(opts) {
  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
  Zlib.call(this, opts, binding.INFLATERAW);
}


// auto-detect header.
function Unzip(opts) {
  if (!(this instanceof Unzip)) return new Unzip(opts);
  Zlib.call(this, opts, binding.UNZIP);
}


// the Zlib class they all inherit from
// This thing manages the queue of requests, and returns
// true or false if there is anything in the queue when
// you call the .write() method.

function Zlib(opts, mode) {
  this._opts = opts = opts || {};
  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;

  Transform.call(this, opts);

  if (opts.flush) {
    if (opts.flush !== binding.Z_NO_FLUSH &&
        opts.flush !== binding.Z_PARTIAL_FLUSH &&
        opts.flush !== binding.Z_SYNC_FLUSH &&
        opts.flush !== binding.Z_FULL_FLUSH &&
        opts.flush !== binding.Z_FINISH &&
        opts.flush !== binding.Z_BLOCK) {
      throw new Error('Invalid flush flag: ' + opts.flush);
    }
  }
  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;

  if (opts.chunkSize) {
    if (opts.chunkSize < exports.Z_MIN_CHUNK ||
        opts.chunkSize > exports.Z_MAX_CHUNK) {
      throw new Error('Invalid chunk size: ' + opts.chunkSize);
    }
  }

  if (opts.windowBits) {
    if (opts.windowBits < exports.Z_MIN_WINDOWBITS ||
        opts.windowBits > exports.Z_MAX_WINDOWBITS) {
      throw new Error('Invalid windowBits: ' + opts.windowBits);
    }
  }

  if (opts.level) {
    if (opts.level < exports.Z_MIN_LEVEL ||
        opts.level > exports.Z_MAX_LEVEL) {
      throw new Error('Invalid compression level: ' + opts.level);
    }
  }

  if (opts.memLevel) {
    if (opts.memLevel < exports.Z_MIN_MEMLEVEL ||
        opts.memLevel > exports.Z_MAX_MEMLEVEL) {
      throw new Error('Invalid memLevel: ' + opts.memLevel);
    }
  }

  if (opts.strategy) {
    if (opts.strategy != exports.Z_FILTERED &&
        opts.strategy != exports.Z_HUFFMAN_ONLY &&
        opts.strategy != exports.Z_RLE &&
        opts.strategy != exports.Z_FIXED &&
        opts.strategy != exports.Z_DEFAULT_STRATEGY) {
      throw new Error('Invalid strategy: ' + opts.strategy);
    }
  }

  if (opts.dictionary) {
    if (!Buffer.isBuffer(opts.dictionary)) {
      throw new Error('Invalid dictionary: it should be a Buffer instance');
    }
  }

  this._binding = new binding.Zlib(mode);

  var self = this;
  this._hadError = false;
  this._binding.onerror = function(message, errno) {
    // there is no way to cleanly recover.
    // continuing only obscures problems.
    self._binding = null;
    self._hadError = true;

    var error = new Error(message);
    error.errno = errno;
    error.code = exports.codes[errno];
    self.emit('error', error);
  };

  var level = exports.Z_DEFAULT_COMPRESSION;
  if (typeof opts.level === 'number') level = opts.level;

  var strategy = exports.Z_DEFAULT_STRATEGY;
  if (typeof opts.strategy === 'number') strategy = opts.strategy;

  this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,
                     level,
                     opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,
                     strategy,
                     opts.dictionary);

  this._buffer = new Buffer(this._chunkSize);
  this._offset = 0;
  this._closed = false;
  this._level = level;
  this._strategy = strategy;

  this.once('end', this.close);
}

util.inherits(Zlib, Transform);

Zlib.prototype.params = function(level, strategy, callback) {
  if (level < exports.Z_MIN_LEVEL ||
      level > exports.Z_MAX_LEVEL) {
    throw new RangeError('Invalid compression level: ' + level);
  }
  if (strategy != exports.Z_FILTERED &&
      strategy != exports.Z_HUFFMAN_ONLY &&
      strategy != exports.Z_RLE &&
      strategy != exports.Z_FIXED &&
      strategy != exports.Z_DEFAULT_STRATEGY) {
    throw new TypeError('Invalid strategy: ' + strategy);
  }

  if (this._level !== level || this._strategy !== strategy) {
    var self = this;
    this.flush(binding.Z_SYNC_FLUSH, function() {
      self._binding.params(level, strategy);
      if (!self._hadError) {
        self._level = level;
        self._strategy = strategy;
        if (callback) callback();
      }
    });
  } else {
    process.nextTick(callback);
  }
};

Zlib.prototype.reset = function() {
  return this._binding.reset();
};

// This is the _flush function called by the transform class,
// internally, when the last chunk has been written.
Zlib.prototype._flush = function(callback) {
  this._transform(new Buffer(0), '', callback);
};

Zlib.prototype.flush = function(kind, callback) {
  var ws = this._writableState;

  if (typeof kind === 'function' || (kind === void 0 && !callback)) {
    callback = kind;
    kind = binding.Z_FULL_FLUSH;
  }

  if (ws.ended) {
    if (callback)
      process.nextTick(callback);
  } else if (ws.ending) {
    if (callback)
      this.once('end', callback);
  } else if (ws.needDrain) {
    var self = this;
    this.once('drain', function() {
      self.flush(callback);
    });
  } else {
    this._flushFlag = kind;
    this.write(new Buffer(0), '', callback);
  }
};

Zlib.prototype.close = function(callback) {
  if (callback)
    process.nextTick(callback);

  if (this._closed)
    return;

  this._closed = true;

  this._binding.close();

  var self = this;
  process.nextTick(function() {
    self.emit('close');
  });
};

Zlib.prototype._transform = function(chunk, encoding, cb) {
  var flushFlag;
  var ws = this._writableState;
  var ending = ws.ending || ws.ended;
  var last = ending && (!chunk || ws.length === chunk.length);

  if (!chunk === null && !Buffer.isBuffer(chunk))
    return cb(new Error('invalid input'));

  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
  // If it's explicitly flushing at some other time, then we use
  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
  // goodness.
  if (last)
    flushFlag = binding.Z_FINISH;
  else {
    flushFlag = this._flushFlag;
    // once we've flushed the last of the queue, stop flushing and
    // go back to the normal behavior.
    if (chunk.length >= ws.length) {
      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
    }
  }

  var self = this;
  this._processChunk(chunk, flushFlag, cb);
};

Zlib.prototype._processChunk = function(chunk, flushFlag, cb) {
  var availInBefore = chunk && chunk.length;
  var availOutBefore = this._chunkSize - this._offset;
  var inOff = 0;

  var self = this;

  var async = typeof cb === 'function';

  if (!async) {
    var buffers = [];
    var nread = 0;

    var error;
    this.on('error', function(er) {
      error = er;
    });

    do {
      var res = this._binding.writeSync(flushFlag,
                                        chunk, // in
                                        inOff, // in_off
                                        availInBefore, // in_len
                                        this._buffer, // out
                                        this._offset, //out_off
                                        availOutBefore); // out_len
    } while (!this._hadError && callback(res[0], res[1]));

    if (this._hadError) {
      throw error;
    }

    var buf = Buffer.concat(buffers, nread);
    this.close();

    return buf;
  }

  var req = this._binding.write(flushFlag,
                                chunk, // in
                                inOff, // in_off
                                availInBefore, // in_len
                                this._buffer, // out
                                this._offset, //out_off
                                availOutBefore); // out_len

  req.buffer = chunk;
  req.callback = callback;

  function callback(availInAfter, availOutAfter) {
    if (self._hadError)
      return;

    var have = availOutBefore - availOutAfter;
    assert(have >= 0, 'have should not go down');

    if (have > 0) {
      var out = self._buffer.slice(self._offset, self._offset + have);
      self._offset += have;
      // serve some output to the consumer.
      if (async) {
        self.push(out);
      } else {
        buffers.push(out);
        nread += out.length;
      }
    }

    // exhausted the output buffer, or used all the input create a new one.
    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
      availOutBefore = self._chunkSize;
      self._offset = 0;
      self._buffer = new Buffer(self._chunkSize);
    }

    if (availOutAfter === 0) {
      // Not actually done.  Need to reprocess.
      // Also, update the availInBefore to the availInAfter value,
      // so that if we have to hit it a third (fourth, etc.) time,
      // it'll have the correct byte counts.
      inOff += (availInBefore - availInAfter);
      availInBefore = availInAfter;

      if (!async)
        return true;

      var newReq = self._binding.write(flushFlag,
                                       chunk,
                                       inOff,
                                       availInBefore,
                                       self._buffer,
                                       self._offset,
                                       self._chunkSize);
      newReq.callback = callback; // this same function
      newReq.buffer = chunk;
      return;
    }

    if (!async)
      return false;

    // finished with the chunk.
    cb();
  }
};

util.inherits(Deflate, Zlib);
util.inherits(Inflate, Zlib);
util.inherits(Gzip, Zlib);
util.inherits(Gunzip, Zlib);
util.inherits(DeflateRaw, Zlib);
util.inherits(InflateRaw, Zlib);
util.inherits(Unzip, Zlib);

}).call(this,require('_process'),require("buffer").Buffer)
},{"./binding":46,"_process":125,"_stream_transform":146,"assert":16,"buffer":51,"util":172}],48:[function(require,module,exports){
arguments[4][21][0].apply(exports,arguments)
},{"dup":21}],49:[function(require,module,exports){
(function (global){
'use strict';

var buffer = require('buffer');
var Buffer = buffer.Buffer;
var SlowBuffer = buffer.SlowBuffer;
var MAX_LEN = buffer.kMaxLength || 2147483647;
exports.alloc = function alloc(size, fill, encoding) {
  if (typeof Buffer.alloc === 'function') {
    return Buffer.alloc(size, fill, encoding);
  }
  if (typeof encoding === 'number') {
    throw new TypeError('encoding must not be number');
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  var enc = encoding;
  var _fill = fill;
  if (_fill === undefined) {
    enc = undefined;
    _fill = 0;
  }
  var buf = new Buffer(size);
  if (typeof _fill === 'string') {
    var fillBuf = new Buffer(_fill, enc);
    var flen = fillBuf.length;
    var i = -1;
    while (++i < size) {
      buf[i] = fillBuf[i % flen];
    }
  } else {
    buf.fill(_fill);
  }
  return buf;
}
exports.allocUnsafe = function allocUnsafe(size) {
  if (typeof Buffer.allocUnsafe === 'function') {
    return Buffer.allocUnsafe(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size > MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new Buffer(size);
}
exports.from = function from(value, encodingOrOffset, length) {
  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
    return Buffer.from(value, encodingOrOffset, length);
  }
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }
  if (typeof value === 'string') {
    return new Buffer(value, encodingOrOffset);
  }
  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    var offset = encodingOrOffset;
    if (arguments.length === 1) {
      return new Buffer(value);
    }
    if (typeof offset === 'undefined') {
      offset = 0;
    }
    var len = length;
    if (typeof len === 'undefined') {
      len = value.byteLength - offset;
    }
    if (offset >= value.byteLength) {
      throw new RangeError('\'offset\' is out of bounds');
    }
    if (len > value.byteLength - offset) {
      throw new RangeError('\'length\' is out of bounds');
    }
    return new Buffer(value.slice(offset, offset + len));
  }
  if (Buffer.isBuffer(value)) {
    var out = new Buffer(value.length);
    value.copy(out, 0, 0, value.length);
    return out;
  }
  if (value) {
    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
      return new Buffer(value);
    }
    if (value.type === 'Buffer' && Array.isArray(value.data)) {
      return new Buffer(value.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
}
exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
  if (typeof Buffer.allocUnsafeSlow === 'function') {
    return Buffer.allocUnsafeSlow(size);
  }
  if (typeof size !== 'number') {
    throw new TypeError('size must be a number');
  }
  if (size >= MAX_LEN) {
    throw new RangeError('size is too large');
  }
  return new SlowBuffer(size);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"buffer":51}],50:[function(require,module,exports){
(function (Buffer){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this,require("buffer").Buffer)
},{"buffer":51}],51:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (value instanceof ArrayBuffer) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (ArrayBuffer.isView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || string instanceof ArrayBuffer) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":17,"ieee754":99}],52:[function(require,module,exports){
/*!
 * bufferutil: WebSocket buffer utils
 * Copyright(c) 2015 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

'use strict';

/**
 * Merges an array of buffers into a target buffer.
 *
 * @param {Buffer} target The target buffer
 * @param {Buffer[]} buffers The array of buffers to merge
 * @public
 */
const merge = (target, buffers) => {
  var offset = 0;
  for (var i = 0; i < buffers.length; i++) {
    const buf = buffers[i];
    buf.copy(target, offset);
    offset += buf.length;
  }
};

/**
 * Masks a buffer using the given mask.
 *
 * @param {Buffer} source The buffer to mask
 * @param {Buffer} mask The mask to use
 * @param {Buffer} output The buffer where to store the result
 * @param {Number} offset The offset at which to start writing
 * @param {Number} length The number of bytes to mask.
 * @public
 */
const mask = (source, mask, output, offset, length) => {
  for (var i = 0; i < length; i++) {
    output[offset + i] = source[i] ^ mask[i & 3];
  }
};

/**
 * Unmasks a buffer using the given mask.
 *
 * @param {Buffer} buffer The buffer to unmask
 * @param {Buffer} mask The mask to use
 * @public
 */
const unmask = (buffer, mask) => {
  // Required until https://github.com/nodejs/node/issues/9006 is resolved.
  const length = buffer.length;
  for (var i = 0; i < length; i++) {
    buffer[i] ^= mask[i & 3];
  }
};

module.exports = { merge, mask, unmask };

},{}],53:[function(require,module,exports){
'use strict';

try {
  module.exports = require('bindings')('bufferutil');
} catch (e) {
  module.exports = require('./fallback');
}

},{"./fallback":52,"bindings":18}],54:[function(require,module,exports){
module.exports = {
  "100": "Continue",
  "101": "Switching Protocols",
  "102": "Processing",
  "200": "OK",
  "201": "Created",
  "202": "Accepted",
  "203": "Non-Authoritative Information",
  "204": "No Content",
  "205": "Reset Content",
  "206": "Partial Content",
  "207": "Multi-Status",
  "208": "Already Reported",
  "226": "IM Used",
  "300": "Multiple Choices",
  "301": "Moved Permanently",
  "302": "Found",
  "303": "See Other",
  "304": "Not Modified",
  "305": "Use Proxy",
  "307": "Temporary Redirect",
  "308": "Permanent Redirect",
  "400": "Bad Request",
  "401": "Unauthorized",
  "402": "Payment Required",
  "403": "Forbidden",
  "404": "Not Found",
  "405": "Method Not Allowed",
  "406": "Not Acceptable",
  "407": "Proxy Authentication Required",
  "408": "Request Timeout",
  "409": "Conflict",
  "410": "Gone",
  "411": "Length Required",
  "412": "Precondition Failed",
  "413": "Payload Too Large",
  "414": "URI Too Long",
  "415": "Unsupported Media Type",
  "416": "Range Not Satisfiable",
  "417": "Expectation Failed",
  "418": "I'm a teapot",
  "421": "Misdirected Request",
  "422": "Unprocessable Entity",
  "423": "Locked",
  "424": "Failed Dependency",
  "425": "Unordered Collection",
  "426": "Upgrade Required",
  "428": "Precondition Required",
  "429": "Too Many Requests",
  "431": "Request Header Fields Too Large",
  "451": "Unavailable For Legal Reasons",
  "500": "Internal Server Error",
  "501": "Not Implemented",
  "502": "Bad Gateway",
  "503": "Service Unavailable",
  "504": "Gateway Timeout",
  "505": "HTTP Version Not Supported",
  "506": "Variant Also Negotiates",
  "507": "Insufficient Storage",
  "508": "Loop Detected",
  "509": "Bandwidth Limit Exceeded",
  "510": "Not Extended",
  "511": "Network Authentication Required"
}

},{}],55:[function(require,module,exports){
(function (Buffer){
var Transform = require('stream').Transform
var inherits = require('inherits')
var StringDecoder = require('string_decoder').StringDecoder
module.exports = CipherBase
inherits(CipherBase, Transform)
function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  this._decoder = null
  this._encoding = null
}
CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = new Buffer(data, inputEnc)
  }
  var outData = this._update(data)
  if (this.hashMode) {
    return this
  }
  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }
  return outData
}

CipherBase.prototype.setAutoPadding = function () {}

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this._final())
  } catch (e) {
    err = e
  } finally {
    done(err)
  }
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this._final() || new Buffer('')
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }
  if (this._encoding !== enc) {
    throw new Error('can\'t switch encodings')
  }
  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }
  return out
}

}).call(this,require("buffer").Buffer)
},{"buffer":51,"inherits":101,"stream":157,"string_decoder":162}],56:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":102}],57:[function(require,module,exports){
(function (Buffer){
var elliptic = require('elliptic');
var BN = require('bn.js');

module.exports = function createECDH(curve) {
	return new ECDH(curve);
};

var aliases = {
	secp256k1: {
		name: 'secp256k1',
		byteLength: 32
	},
	secp224r1: {
		name: 'p224',
		byteLength: 28
	},
	prime256v1: {
		name: 'p256',
		byteLength: 32
	},
	prime192v1: {
		name: 'p192',
		byteLength: 24
	},
	ed25519: {
		name: 'ed25519',
		byteLength: 32
	},
	secp384r1: {
		name: 'p384',
		byteLength: 48
	},
	secp521r1: {
		name: 'p521',
		byteLength: 66
	}
};

aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;

function ECDH(curve) {
	this.curveType = aliases[curve];
	if (!this.curveType ) {
		this.curveType = {
			name: curve
		};
	}
	this.curve = new elliptic.ec(this.curveType.name);
	this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
	this.keys = this.curve.genKeyPair();
	return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
	inenc = inenc || 'utf8';
	if (!Buffer.isBuffer(other)) {
		other = new Buffer(other, inenc);
	}
	var otherPub = this.curve.keyFromPublic(other).getPublic();
	var out = otherPub.mul(this.keys.getPrivate()).getX();
	return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
	var key = this.keys.getPublic(format === 'compressed', true);
	if (format === 'hybrid') {
		if (key[key.length - 1] % 2) {
			key[0] = 7;
		} else {
			key [0] = 6;
		}
	}
	return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
	return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(pub)) {
		pub = new Buffer(pub, enc);
	}
	this.keys._importPublic(pub);
	return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
	enc = enc || 'utf8';
	if (!Buffer.isBuffer(priv)) {
		priv = new Buffer(priv, enc);
	}
	var _priv = new BN(priv);
	_priv = _priv.toString(16);
	this.keys._importPrivate(_priv);
	return this;
};

function formatReturnValue(bn, enc, len) {
	if (!Array.isArray(bn)) {
		bn = bn.toArray();
	}
	var buf = new Buffer(bn);
	if (len && buf.length < len) {
		var zeros = new Buffer(len - buf.length);
		zeros.fill(0);
		buf = Buffer.concat([zeros, buf]);
	}
	if (!enc) {
		return buf;
	} else {
		return buf.toString(enc);
	}
}

}).call(this,require("buffer").Buffer)
},{"bn.js":19,"buffer":51,"elliptic":73}],58:[function(require,module,exports){
(function (Buffer){
'use strict';
var inherits = require('inherits')
var md5 = require('./md5')
var rmd160 = require('ripemd160')
var sha = require('sha.js')

var Base = require('cipher-base')

function HashNoConstructor(hash) {
  Base.call(this, 'digest')

  this._hash = hash
  this.buffers = []
}

inherits(HashNoConstructor, Base)

HashNoConstructor.prototype._update = function (data) {
  this.buffers.push(data)
}

HashNoConstructor.prototype._final = function () {
  var buf = Buffer.concat(this.buffers)
  var r = this._hash(buf)
  this.buffers = null

  return r
}

function Hash(hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if ('md5' === alg) return new HashNoConstructor(md5)
  if ('rmd160' === alg || 'ripemd160' === alg) return new HashNoConstructor(rmd160)

  return new Hash(sha(alg))
}

}).call(this,require("buffer").Buffer)
},{"./md5":60,"buffer":51,"cipher-base":55,"inherits":101,"ripemd160":148,"sha.js":150}],59:[function(require,module,exports){
(function (Buffer){
'use strict';
var intSize = 4;
var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
var chrsz = 8;

function toArray(buf, bigEndian) {
  if ((buf.length % intSize) !== 0) {
    var len = buf.length + (intSize - (buf.length % intSize));
    buf = Buffer.concat([buf, zeroBuffer], len);
  }

  var arr = [];
  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
  for (var i = 0; i < buf.length; i += intSize) {
    arr.push(fn.call(buf, i));
  }
  return arr;
}

function toBuffer(arr, size, bigEndian) {
  var buf = new Buffer(size);
  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
  for (var i = 0; i < arr.length; i++) {
    fn.call(buf, arr[i], i * 4, true);
  }
  return buf;
}

function hash(buf, fn, hashSize, bigEndian) {
  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
  return toBuffer(arr, hashSize, bigEndian);
}
exports.hash = hash;
}).call(this,require("buffer").Buffer)
},{"buffer":51}],60:[function(require,module,exports){
'use strict';
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

var helpers = require('./helpers');

/*
 * Calculate the MD5 of an array of little-endian words, and a bit length
 */
function core_md5(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << ((len) % 32);
  x[(((len + 64) >>> 9) << 4) + 14] = len;

  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;

  for(var i = 0; i < x.length; i += 16)
  {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;

    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }
  return Array(a, b, c, d);

}

/*
 * These functions implement the four basic operations the algorithm uses.
 */
function md5_cmn(q, a, b, x, s, t)
{
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
}
function md5_ff(a, b, c, d, x, s, t)
{
  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
}
function md5_gg(a, b, c, d, x, s, t)
{
  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
}
function md5_hh(a, b, c, d, x, s, t)
{
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5_ii(a, b, c, d, x, s, t)
{
  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function bit_rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

module.exports = function md5(buf) {
  return helpers.hash(buf, core_md5, 16);
};
},{"./helpers":59}],61:[function(require,module,exports){
(function (Buffer){
'use strict';
var createHash = require('create-hash/browser');
var inherits = require('inherits')

var Transform = require('stream').Transform

var ZEROS = new Buffer(128)
ZEROS.fill(0)

function Hmac(alg, key) {
  Transform.call(this)
  alg = alg.toLowerCase()
  if (typeof key === 'string') {
    key = new Buffer(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = createHash(alg).update(key).digest()

  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = new Buffer(blocksize)
  var opad = this._opad = new Buffer(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = createHash(alg).update(ipad)
}

inherits(Hmac, Transform)

Hmac.prototype.update = function (data, enc) {
  this._hash.update(data, enc)

  return this
}

Hmac.prototype._transform = function (data, _, next) {
  this._hash.update(data)

  next()
}

Hmac.prototype._flush = function (next) {
  this.push(this.digest())

  next()
}

Hmac.prototype.digest = function (enc) {
  var h = this._hash.digest()

  return createHash(this._alg).update(this._opad).update(h).digest(enc)
}

module.exports = function createHmac(alg, key) {
  return new Hmac(alg, key)
}

}).call(this,require("buffer").Buffer)
},{"buffer":51,"create-hash/browser":58,"inherits":101,"stream":157}],62:[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(Object.keys(require('browserify-sign/algos')))
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')
;[
  'Cipher',
  'createCipher',
  'Cipheriv',
  'createCipheriv',
  'Decipher',
  'createDecipher',
  'Decipheriv',
  'createDecipheriv',
  'getCiphers',
  'listCiphers'
].forEach(function (key) {
  exports[key] = aes[key]
})

var dh = require('diffie-hellman')
;[
  'DiffieHellmanGroup',
  'createDiffieHellmanGroup',
  'getDiffieHellman',
  'createDiffieHellman',
  'DiffieHellman'
].forEach(function (key) {
  exports[key] = dh[key]
})

var sign = require('browserify-sign')
;[
  'createSign',
  'Sign',
  'createVerify',
  'Verify'
].forEach(function (key) {
  exports[key] = sign[key]
})

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

;[
  'publicEncrypt',
  'privateEncrypt',
  'publicDecrypt',
  'privateDecrypt'
].forEach(function (key) {
  exports[key] = publicEncrypt[key]
})

// the least I can do is make error messages for the rest of the node.js/crypto api.
;[
  'createCredentials'
].forEach(function (name) {
  exports[name] = function () {
    throw new Error([
      'sorry, ' + name + ' is not implemented yet',
      'we accept pull requests',
      'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'))
  }
})

},{"browserify-cipher":37,"browserify-sign":42,"browserify-sign/algos":41,"create-ecdh":57,"create-hash":58,"create-hmac":61,"diffie-hellman":69,"pbkdf2":122,"public-encrypt":126,"randombytes":136}],63:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":64,"./des/cipher":65,"./des/des":66,"./des/ede":67,"./des/utils":68}],64:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":101,"minimalistic-assert":105}],65:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":105}],66:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"../des":63,"inherits":101,"minimalistic-assert":105}],67:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var des = require('../des');
var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"../des":63,"inherits":101,"minimalistic-assert":105}],68:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],69:[function(require,module,exports){
(function (Buffer){
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

}).call(this,require("buffer").Buffer)
},{"./lib/dh":70,"./lib/generatePrime":71,"./lib/primes.json":72,"buffer":51}],70:[function(require,module,exports){
(function (Buffer){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this,require("buffer").Buffer)
},{"./generatePrime":71,"bn.js":19,"buffer":51,"miller-rabin":104,"randombytes":136}],71:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":19,"miller-rabin":104,"randombytes":136}],72:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],73:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.hmacDRBG = require('./elliptic/hmac-drbg');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":89,"./elliptic/curve":76,"./elliptic/curves":79,"./elliptic/ec":80,"./elliptic/eddsa":83,"./elliptic/hmac-drbg":86,"./elliptic/utils":88,"brorand":20}],74:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;
    for (var k = j + doubles.step - 1; k >= j; k--)
      nafW = (nafW << 1) + naf[k];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--)
      k++;
    if (i >= 0)
      k++;
    acc = acc.dblp(k);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
                                                       points,
                                                       coeffs,
                                                       len,
                                                       jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  for (var i = 0; i < len; i++) {
    var p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b] /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (var i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
                          bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../../elliptic":73,"bn.js":19}],75:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - 1) / (d y^2 + 1)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.one);
  var rhs = y2.redMul(this.d).redAdd(this.one);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
         this.y.cmp(this.z) === 0;
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr();
      // J = F - 2 * H
      var j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d);
    // H = (c * Z1)^2
    var h = this.curve._mulC(this.c.redMul(this.z)).redSqr();
    // J = E - 2 * H
    var j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
                          this.y,
                          this.z,
                          this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../../elliptic":73,"../curve":76,"bn.js":19,"inherits":101}],76:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":74,"./edwards":75,"./mont":77,"./short":78}],77:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var elliptic = require('../../elliptic');
var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../../elliptic":73,"../curve":76,"bn.js":19,"inherits":101}],78:[function(require,module,exports){
'use strict';

var curve = require('../curve');
var elliptic = require('../../elliptic');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = curve.base;

var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 }
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;
  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);
    var p = points[i];
    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }
    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }
  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

  // Clean-up references to points and coefficients
  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }
  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);

  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (var i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
  return false;
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../../elliptic":73,"../curve":76,"bn.js":19,"inherits":101}],79:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var elliptic = require('../elliptic');

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new elliptic.curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new elliptic.curve.edwards(options);
  else
    this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'
  ]
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'
  ]
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'
  ]
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'
  ]
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650'
  ]
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9'
  ]
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658'
  ]
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre
  ]
});

},{"../elliptic":73,"./precomputed/secp256k1":87,"hash.js":92}],80:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);

    options = elliptic.curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof elliptic.curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    pers: options.pers,
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    nonce: this.n.toArray()
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new elliptic.hmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ?
        options.k(iter) :
        new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../../elliptic":73,"./key":81,"./signature":82,"bn.js":19}],81:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../../elliptic":73,"bn.js":19}],82:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;
  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }
  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0 && (r[1] & 0x80)) {
    r = r.slice(1);
  }
  if (s[0] === 0 && (s[1] & 0x80)) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../../elliptic":73,"bn.js":19}],83:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
               .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../../elliptic":73,"./key":84,"./signature":85,"hash.js":92}],84:[function(require,module,exports){
'use strict';

var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../../elliptic":73}],85:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var elliptic = require('../../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../../elliptic":73,"bn.js":19}],86:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var elliptic = require('../elliptic');
var utils = elliptic.utils;
var assert = utils.assert;

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this.reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc);
  var nonce = utils.toArray(options.nonce, options.nonceEnc);
  var pers = utils.toArray(options.pers, options.persEnc);
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this.reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toBuffer(entropy, entropyEnc);
  add = utils.toBuffer(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this.reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this.reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc);
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this.reseed++;
  return utils.encode(res, enc);
};

},{"../elliptic":73,"hash.js":92}],87:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'
      ]
    ]
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'
      ]
    ]
  }
};

},{}],88:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');

utils.assert = function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
};

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (!enc) {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  } else if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

// Represent num in a w-NAF form
function getNAF(num, w) {
  var naf = [];
  var ws = 1 << (w + 1);
  var k = num.clone();
  while (k.cmpn(1) >= 0) {
    var z;
    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }
    naf.push(z);

    // Optimization, shift by word if possible
    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;
    for (var i = 1; i < shift; i++)
      naf.push(0);
    k.iushrn(shift);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    []
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {

    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
           this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                                     bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":19}],89:[function(require,module,exports){
module.exports={
  "_args": [
    [
      {
        "raw": "elliptic@^6.0.0",
        "scope": null,
        "escapedName": "elliptic",
        "name": "elliptic",
        "rawSpec": "^6.0.0",
        "spec": ">=6.0.0 <7.0.0",
        "type": "range"
      },
      "/home/skeen/Desktop/gCodeViewer/js/node_modules/browserify-sign"
    ]
  ],
  "_from": "elliptic@>=6.0.0 <7.0.0",
  "_id": "elliptic@6.3.3",
  "_inCache": true,
  "_location": "/elliptic",
  "_nodeVersion": "7.0.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/elliptic-6.3.3.tgz_1486422837740_0.10658654430881143"
  },
  "_npmUser": {
    "name": "indutny",
    "email": "fedor@indutny.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "elliptic@^6.0.0",
    "scope": null,
    "escapedName": "elliptic",
    "name": "elliptic",
    "rawSpec": "^6.0.0",
    "spec": ">=6.0.0 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/browserify-sign",
    "/create-ecdh"
  ],
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.3.3.tgz",
  "_shasum": "5482d9646d54bcb89fd7d994fc9e2e9568876e3f",
  "_shrinkwrap": null,
  "_spec": "elliptic@^6.0.0",
  "_where": "/home/skeen/Desktop/gCodeViewer/js/node_modules/browserify-sign",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "dependencies": {
    "bn.js": "^4.4.0",
    "brorand": "^1.0.1",
    "hash.js": "^1.0.0",
    "inherits": "^2.0.1"
  },
  "description": "EC cryptography",
  "devDependencies": {
    "brfs": "^1.4.3",
    "coveralls": "^2.11.3",
    "grunt": "^0.4.5",
    "grunt-browserify": "^5.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-connect": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-mocha-istanbul": "^3.0.1",
    "grunt-saucelabs": "^8.6.2",
    "istanbul": "^0.4.2",
    "jscs": "^2.9.0",
    "jshint": "^2.6.0",
    "mocha": "^2.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "5482d9646d54bcb89fd7d994fc9e2e9568876e3f",
    "tarball": "https://registry.npmjs.org/elliptic/-/elliptic-6.3.3.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "63aee8d697e9b7fac37ece24222029117a890a7e",
  "homepage": "https://github.com/indutny/elliptic",
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "license": "MIT",
  "main": "lib/elliptic.js",
  "maintainers": [
    {
      "name": "indutny",
      "email": "fedor@indutny.com"
    }
  ],
  "name": "elliptic",
  "optionalDependencies": {},
  "readme": "ERROR: No README data found!",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "scripts": {
    "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
    "lint": "npm run jscs && npm run jshint",
    "test": "npm run lint && npm run unit",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "version": "grunt dist && git add dist/"
  },
  "version": "6.3.3"
}

},{}],90:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],91:[function(require,module,exports){
(function (Buffer){
var md5 = require('create-hash/md5')
module.exports = EVP_BytesToKey
function EVP_BytesToKey (password, salt, keyLen, ivLen) {
  if (!Buffer.isBuffer(password)) {
    password = new Buffer(password, 'binary')
  }
  if (salt && !Buffer.isBuffer(salt)) {
    salt = new Buffer(salt, 'binary')
  }
  keyLen = keyLen / 8
  ivLen = ivLen || 0
  var ki = 0
  var ii = 0
  var key = new Buffer(keyLen)
  var iv = new Buffer(ivLen)
  var addmd = 0
  var md_buf
  var i
  var bufs = []
  while (true) {
    if (addmd++ > 0) {
      bufs.push(md_buf)
    }
    bufs.push(password)
    if (salt) {
      bufs.push(salt)
    }
    md_buf = md5(Buffer.concat(bufs))
    bufs = []
    i = 0
    if (keyLen > 0) {
      while (true) {
        if (keyLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        key[ki++] = md_buf[i]
        keyLen--
        i++
      }
    }
    if (ivLen > 0 && i !== md_buf.length) {
      while (true) {
        if (ivLen === 0) {
          break
        }
        if (i === md_buf.length) {
          break
        }
        iv[ii++] = md_buf[i]
        ivLen--
        i++
      }
    }
    if (keyLen === 0 && ivLen === 0) {
      break
    }
  }
  for (i = 0; i < md_buf.length; i++) {
    md_buf[i] = 0
  }
  return {
    key: key,
    iv: iv
  }
}

}).call(this,require("buffer").Buffer)
},{"buffer":51,"create-hash/md5":60}],92:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":93,"./hash/hmac":94,"./hash/ripemd":95,"./hash/sha":96,"./hash/utils":97}],93:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"../hash":92}],94:[function(require,module,exports){
var hmac = exports;

var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (var i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"../hash":92}],95:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = hash.common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"../hash":92}],96:[function(require,module,exports){
var hash = require('../hash');
var utils = hash.utils;
var assert = utils.assert;

var rotr32 = utils.rotr32;
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = hash.common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
             0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19 ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
exports.sha256 = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [ 0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
             0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
exports.sha224 = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [ 0x6a09e667, 0xf3bcc908,
             0xbb67ae85, 0x84caa73b,
             0x3c6ef372, 0xfe94f82b,
             0xa54ff53a, 0x5f1d36f1,
             0x510e527f, 0xade682d1,
             0x9b05688c, 0x2b3e6c1f,
             0x1f83d9ab, 0xfb41bd6b,
             0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
exports.sha512 = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(c0_hi, c0_lo,
                      c1_hi, c1_lo,
                      c2_hi, c2_lo,
                      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo,
                          c1_hi, c1_lo,
                          c2_hi, c2_lo,
                          c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo,
                           c1_hi, c1_lo,
                           c2_hi, c2_lo,
                           c3_hi, c3_lo,
                           c4_hi, c4_lo);

    var c0_hi = s0_512_hi(ah, al);
    var c0_lo = s0_512_lo(ah, al);
    var c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    var c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [ 0xcbbb9d5d, 0xc1059ed8,
             0x629a292a, 0x367cd507,
             0x9159015a, 0x3070dd17,
             0x152fecd8, 0xf70e5939,
             0x67332667, 0xffc00b31,
             0x8eb44a87, 0x68581511,
             0xdb0c2e0d, 0x64f98fa7,
             0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
exports.sha384 = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe,
             0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
exports.sha1 = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (var i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}

function p32(x, y, z) {
  return x ^ y ^ z;
}

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}

function ch64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh, zl) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../hash":92}],97:[function(require,module,exports){
var utils = exports;
var inherits = require('inherits');

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi)
          res.push(hi, lo);
        else
          res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (var i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
utils.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
utils.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
utils.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
utils.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
utils.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
utils.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
utils.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
utils.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
utils.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
utils.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
utils.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
utils.sum32_5 = sum32_5;

function assert(cond, msg) {
  if (!cond)
    throw new Error(msg || 'Assertion failed');
}
utils.assert = assert;

utils.inherits = inherits;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
};
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
};
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
};
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
};
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
};
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
};
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
};
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
};
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
};
exports.shr64_lo = shr64_lo;

},{"inherits":101}],98:[function(require,module,exports){
var http = require('http');

var https = module.exports;

for (var key in http) {
    if (http.hasOwnProperty(key)) https[key] = http[key];
};

https.request = function (params, cb) {
    if (!params) params = {};
    params.scheme = 'https';
    params.protocol = 'https:';
    return http.request.call(this, params, cb);
}

},{"http":158}],99:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],100:[function(require,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],101:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],102:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],103:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],104:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._rand = function _rand(n) {
  var len = n.bitLength();
  var buf = this.rand.generate(Math.ceil(len / 8));

  // Set low bits
  buf[0] |= 3;

  // Mask high bits
  var mask = len & 0x7;
  if (mask !== 0)
    buf[buf.length - 1] >>= 7 - mask;

  return new bn(buf);
}

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._rand(n2);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  var n2 = n1.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._rand(n2);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":19,"brorand":20}],105:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],106:[function(require,module,exports){
'use strict';


var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
                (typeof Uint16Array !== 'undefined') &&
                (typeof Int32Array !== 'undefined');


exports.assign = function (obj /*from1, from2, from3, ...*/) {
  var sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    var source = sources.shift();
    if (!source) { continue; }

    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be non-object');
    }

    for (var p in source) {
      if (source.hasOwnProperty(p)) {
        obj[p] = source[p];
      }
    }
  }

  return obj;
};


// reduce buffer size, avoiding mem copy
exports.shrinkBuf = function (buf, size) {
  if (buf.length === size) { return buf; }
  if (buf.subarray) { return buf.subarray(0, size); }
  buf.length = size;
  return buf;
};


var fnTyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    if (src.subarray && dest.subarray) {
      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
      return;
    }
    // Fallback to ordinary array
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    var i, l, len, pos, chunk, result;

    // calculate data length
    len = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      len += chunks[i].length;
    }

    // join chunks
    result = new Uint8Array(len);
    pos = 0;
    for (i = 0, l = chunks.length; i < l; i++) {
      chunk = chunks[i];
      result.set(chunk, pos);
      pos += chunk.length;
    }

    return result;
  }
};

var fnUntyped = {
  arraySet: function (dest, src, src_offs, len, dest_offs) {
    for (var i = 0; i < len; i++) {
      dest[dest_offs + i] = src[src_offs + i];
    }
  },
  // Join array of chunks to single array.
  flattenChunks: function (chunks) {
    return [].concat.apply([], chunks);
  }
};


// Enable/Disable typed arrays use, for testing
//
exports.setTyped = function (on) {
  if (on) {
    exports.Buf8  = Uint8Array;
    exports.Buf16 = Uint16Array;
    exports.Buf32 = Int32Array;
    exports.assign(exports, fnTyped);
  } else {
    exports.Buf8  = Array;
    exports.Buf16 = Array;
    exports.Buf32 = Array;
    exports.assign(exports, fnUntyped);
  }
};

exports.setTyped(TYPED_OK);

},{}],107:[function(require,module,exports){
'use strict';

// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It doesn't worth to make additional optimizationa as in original.
// Small size is preferable.

function adler32(adler, buf, len, pos) {
  var s1 = (adler & 0xffff) |0,
      s2 = ((adler >>> 16) & 0xffff) |0,
      n = 0;

  while (len !== 0) {
    // Set limit ~ twice less than 5552, to keep
    // s2 in 31-bits, because we force signed ints.
    // in other case %= will fail.
    n = len > 2000 ? 2000 : len;
    len -= n;

    do {
      s1 = (s1 + buf[pos++]) |0;
      s2 = (s2 + s1) |0;
    } while (--n);

    s1 %= 65521;
    s2 %= 65521;
  }

  return (s1 | (s2 << 16)) |0;
}


module.exports = adler32;

},{}],108:[function(require,module,exports){
'use strict';


module.exports = {

  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH:         0,
  Z_PARTIAL_FLUSH:    1,
  Z_SYNC_FLUSH:       2,
  Z_FULL_FLUSH:       3,
  Z_FINISH:           4,
  Z_BLOCK:            5,
  Z_TREES:            6,

  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK:               0,
  Z_STREAM_END:       1,
  Z_NEED_DICT:        2,
  Z_ERRNO:           -1,
  Z_STREAM_ERROR:    -2,
  Z_DATA_ERROR:      -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR:       -5,
  //Z_VERSION_ERROR: -6,

  /* compression levels */
  Z_NO_COMPRESSION:         0,
  Z_BEST_SPEED:             1,
  Z_BEST_COMPRESSION:       9,
  Z_DEFAULT_COMPRESSION:   -1,


  Z_FILTERED:               1,
  Z_HUFFMAN_ONLY:           2,
  Z_RLE:                    3,
  Z_FIXED:                  4,
  Z_DEFAULT_STRATEGY:       0,

  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY:                 0,
  Z_TEXT:                   1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN:                2,

  /* The deflate compression method */
  Z_DEFLATED:               8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};

},{}],109:[function(require,module,exports){
'use strict';

// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.


// Use ordinary array, since untyped makes no boost here
function makeTable() {
  var c, table = [];

  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
    }
    table[n] = c;
  }

  return table;
}

// Create table on load. Just 255 signed longs. Not a problem.
var crcTable = makeTable();


function crc32(crc, buf, len, pos) {
  var t = crcTable,
      end = pos + len;

  crc ^= -1;

  for (var i = pos; i < end; i++) {
    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
  }

  return (crc ^ (-1)); // >>> 0;
}


module.exports = crc32;

},{}],110:[function(require,module,exports){
'use strict';

var utils   = require('../utils/common');
var trees   = require('./trees');
var adler32 = require('./adler32');
var crc32   = require('./crc32');
var msg     = require('./messages');

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
var Z_NO_FLUSH      = 0;
var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
//var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
//var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
//var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;


/* compression levels */
//var Z_NO_COMPRESSION      = 0;
//var Z_BEST_SPEED          = 1;
//var Z_BEST_COMPRESSION    = 9;
var Z_DEFAULT_COMPRESSION = -1;


var Z_FILTERED            = 1;
var Z_HUFFMAN_ONLY        = 2;
var Z_RLE                 = 3;
var Z_FIXED               = 4;
var Z_DEFAULT_STRATEGY    = 0;

/* Possible values of the data_type field (though see inflate()) */
//var Z_BINARY              = 0;
//var Z_TEXT                = 1;
//var Z_ASCII               = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;


/* The deflate compression method */
var Z_DEFLATED  = 8;

/*============================================================================*/


var MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */
var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_MEM_LEVEL = 8;


var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */
var LITERALS      = 256;
/* number of literal bytes 0..255 */
var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */
var D_CODES       = 30;
/* number of distance codes */
var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */
var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */
var MAX_BITS  = 15;
/* All codes must not exceed MAX_BITS bits */

var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

var PRESET_DICT = 0x20;

var INIT_STATE = 42;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;

var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
var BS_BLOCK_DONE     = 2; /* block flush performed */
var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

function err(strm, errorCode) {
  strm.msg = msg[errorCode];
  return errorCode;
}

function rank(f) {
  return ((f) << 1) - ((f) > 4 ? 9 : 0);
}

function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


/* =========================================================================
 * Flush as much pending output as possible. All deflate() output goes
 * through this function so some applications may wish to modify it
 * to avoid allocating a large strm->output buffer and copying into it.
 * (See also read_buf()).
 */
function flush_pending(strm) {
  var s = strm.state;

  //_tr_flush_bits(s);
  var len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) { return; }

  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
}


function flush_block_only(s, last) {
  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
}


function put_byte(s, b) {
  s.pending_buf[s.pending++] = b;
}


/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */
function putShortMSB(s, b) {
//  put_byte(s, (Byte)(b >> 8));
//  put_byte(s, (Byte)(b & 0xff));
  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
  s.pending_buf[s.pending++] = b & 0xff;
}


/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */
function read_buf(strm, buf, start, size) {
  var len = strm.avail_in;

  if (len > size) { len = size; }
  if (len === 0) { return 0; }

  strm.avail_in -= len;

  // zmemcpy(buf, strm->next_in, len);
  utils.arraySet(buf, strm.input, strm.next_in, len, start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32(strm.adler, buf, len, start);
  }

  else if (strm.state.wrap === 2) {
    strm.adler = crc32(strm.adler, buf, len, start);
  }

  strm.next_in += len;
  strm.total_in += len;

  return len;
}


/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */
function longest_match(s, cur_match) {
  var chain_length = s.max_chain_length;      /* max hash chain length */
  var scan = s.strstart; /* current string */
  var match;                       /* matched string */
  var len;                           /* length of current match */
  var best_len = s.prev_length;              /* best match length so far */
  var nice_match = s.nice_match;             /* stop if match long enough */
  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

  var _win = s.window; // shortcut

  var wmask = s.w_mask;
  var prev  = s.prev;

  /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */

  var strend = s.strstart + MAX_MATCH;
  var scan_end1  = _win[scan + best_len - 1];
  var scan_end   = _win[scan + best_len];

  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */
  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

  /* Do not waste too much time if we already have a good match: */
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */
  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

  do {
    // Assert(cur_match < s->strstart, "no future");
    match = cur_match;

    /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */

    if (_win[match + best_len]     !== scan_end  ||
        _win[match + best_len - 1] !== scan_end1 ||
        _win[match]                !== _win[scan] ||
        _win[++match]              !== _win[scan + 1]) {
      continue;
    }

    /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */
    scan += 2;
    match++;
    // Assert(*scan == *match, "match[2]?");

    /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */
    do {
      /*jshint noempty:false*/
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
             scan < strend);

    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;

    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1  = _win[scan + best_len - 1];
      scan_end   = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
}


/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */
function fill_window(s) {
  var _w_size = s.w_size;
  var p, n, m, more, str;

  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

  do {
    more = s.window_size - s.lookahead - s.strstart;

    // JS ints have 32 bit, block below not needed
    /* Deal with !@#$% 64K limit: */
    //if (sizeof(int) <= 2) {
    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
    //        more = wsize;
    //
    //  } else if (more == (unsigned)(-1)) {
    //        /* Very unlikely, but possible on 16 bit machine if
    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
    //         */
    //        more--;
    //    }
    //}


    /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      /* we now have strstart >= MAX_DIST */
      s.block_start -= _w_size;

      /* Slide the hash table (could be avoided with 32 bit values
       at the expense of memory usage). We slide even when level == 0
       to keep the hash table consistent if we switch back to level > 0
       later. (Using level 0 permanently is not an optimal usage of
       zlib, so we don't care about this pathological case.)
       */

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= _w_size ? m - _w_size : 0);
      } while (--n);

      n = _w_size;
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);

      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }

    /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */
    //Assert(more >= 2, "more < 2");
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;

    /* Initialize the hash value now that we have some input: */
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];

      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
//#if MIN_MATCH != 3
//        Call update_hash() MIN_MATCH-3 more times
//#endif
      while (s.insert) {
        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */

  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

  /* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */
//  if (s.high_water < s.window_size) {
//    var curr = s.strstart + s.lookahead;
//    var init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
}

/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 * This function does not insert new strings in the dictionary since
 * uncompressible data is probably not useful. This function is used
 * only for the level=0 compression option.
 * NOTE: this function should be optimized to avoid extra copying from
 * window to pending_buf.
 */
function deflate_stored(s, flush) {
  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
   * to pending_buf_size, and each stored block has a 5 byte header:
   */
  var max_block_size = 0xffff;

  if (max_block_size > s.pending_buf_size - 5) {
    max_block_size = s.pending_buf_size - 5;
  }

  /* Copy as much as possible from input to output: */
  for (;;) {
    /* Fill the window as much as possible: */
    if (s.lookahead <= 1) {

      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
      //  s->block_start >= (long)s->w_size, "slide too late");
//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
//        s.block_start >= s.w_size)) {
//        throw  new Error("slide too late");
//      }

      fill_window(s);
      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }

      if (s.lookahead === 0) {
        break;
      }
      /* flush the current block */
    }
    //Assert(s->block_start >= 0L, "block gone");
//    if (s.block_start < 0) throw new Error("block gone");

    s.strstart += s.lookahead;
    s.lookahead = 0;

    /* Emit a stored block if pending_buf will be full: */
    var max_start = s.block_start + max_block_size;

    if (s.strstart === 0 || s.strstart >= max_start) {
      /* strstart == 0 is possible when wraparound on 16-bit machine */
      s.lookahead = s.strstart - max_start;
      s.strstart = max_start;
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/


    }
    /* Flush if we may have to slide, otherwise block_start may become
     * negative and the data will be gone:
     */
    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }

  s.insert = 0;

  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }

  if (s.strstart > s.block_start) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_NEED_MORE;
}

/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */
function deflate_fast(s, flush) {
  var hash_head;        /* head of the hash chain */
  var bflush;           /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break; /* flush the current block */
      }
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */
    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */
    }
    if (s.match_length >= MIN_MATCH) {
      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

      /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;

      /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */
      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
        s.match_length--; /* string at strstart already in table */
        do {
          s.strstart++;
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */
        } while (--s.match_length !== 0);
        s.strstart++;
      } else
      {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

//#if MIN_MATCH != 3
//                Call UPDATE_HASH() MIN_MATCH-3 more times
//#endif
        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */
      }
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s.window[s.strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */
function deflate_slow(s, flush) {
  var hash_head;          /* head of hash chain */
  var bflush;              /* set if current block must be flushed */

  var max_insert;

  /* Process the input block. */
  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */
    hash_head = 0/*NIL*/;
    if (s.lookahead >= MIN_MATCH) {
      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
      /***/
    }

    /* Find the longest match, discarding those <= prev_length.
     */
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;

    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
      /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */
      s.match_length = longest_match(s, hash_head);
      /* longest_match() sets match_start */

      if (s.match_length <= 5 &&
         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

        /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */
        s.match_length = MIN_MATCH - 1;
      }
    }
    /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      /* Do not insert strings in hash table beyond this. */

      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/
      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;

      if (bflush) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

    } else if (s.match_available) {
      /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */
      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

      if (bflush) {
        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
        flush_block_only(s, false);
        /***/
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      /* There is no previous match to compare with, wait for
       * the next step to decide.
       */
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  //Assert (flush != Z_NO_FLUSH, "no flush?");
  if (s.match_available) {
    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }

  return BS_BLOCK_DONE;
}


/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */
function deflate_rle(s, flush) {
  var bflush;            /* set if current block must be flushed */
  var prev;              /* byte at distance one to match */
  var scan, strend;      /* scan goes up to strend for length of run */

  var _win = s.window;

  for (;;) {
    /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) { break; } /* flush the current block */
    }

    /* See how many times the previous byte repeats */
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
          /*jshint noempty:false*/
        } while (prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 prev === _win[++scan] && prev === _win[++scan] &&
                 scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
    }

    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
    if (s.match_length >= MIN_MATCH) {
      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      /* No match, output a literal byte */
      //Tracevv((stderr,"%c", s->window[s->strstart]));
      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */
function deflate_huff(s, flush) {
  var bflush;             /* set if current block must be flushed */

  for (;;) {
    /* Make sure that we have a literal to write. */
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH) {
          return BS_NEED_MORE;
        }
        break;      /* flush the current block */
      }
    }

    /* Output a literal byte */
    s.match_length = 0;
    //Tracevv((stderr,"%c", s->window[s->strstart]));
    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      /*** FLUSH_BLOCK(s, 0); ***/
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
      /***/
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH) {
    /*** FLUSH_BLOCK(s, 1); ***/
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    /***/
    return BS_FINISH_DONE;
  }
  if (s.last_lit) {
    /*** FLUSH_BLOCK(s, 0); ***/
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
    /***/
  }
  return BS_BLOCK_DONE;
}

/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}

var configuration_table;

configuration_table = [
  /*      good lazy nice chain */
  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
];


/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */
function lm_init(s) {
  s.window_size = 2 * s.w_size;

  /*** CLEAR_HASH(s); ***/
  zero(s.head); // Fill with NIL (= 0);

  /* Set the default configuration parameters:
   */
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;

  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
}


function DeflateState() {
  this.strm = null;            /* pointer back to this zlib stream */
  this.status = 0;            /* as the name implies */
  this.pending_buf = null;      /* output still pending */
  this.pending_buf_size = 0;  /* size of pending_buf */
  this.pending_out = 0;       /* next pending byte to output to the stream */
  this.pending = 0;           /* nb of bytes in the pending buffer */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.gzhead = null;         /* gzip header information to write */
  this.gzindex = 0;           /* where in extra, name, or comment */
  this.method = Z_DEFLATED; /* can only be DEFLATED */
  this.last_flush = -1;   /* value of flush param for previous deflate call */

  this.w_size = 0;  /* LZ77 window size (32K by default) */
  this.w_bits = 0;  /* log2(w_size)  (8..16) */
  this.w_mask = 0;  /* w_size - 1 */

  this.window = null;
  /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */

  this.window_size = 0;
  /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */

  this.prev = null;
  /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */

  this.head = null;   /* Heads of the hash chains or NIL. */

  this.ins_h = 0;       /* hash index of string to be inserted */
  this.hash_size = 0;   /* number of elements in hash table */
  this.hash_bits = 0;   /* log2(hash_size) */
  this.hash_mask = 0;   /* hash_size-1 */

  this.hash_shift = 0;
  /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */

  this.block_start = 0;
  /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */

  this.match_length = 0;      /* length of best match */
  this.prev_match = 0;        /* previous match */
  this.match_available = 0;   /* set if previous match exists */
  this.strstart = 0;          /* start of string to insert */
  this.match_start = 0;       /* start of matching string */
  this.lookahead = 0;         /* number of valid bytes ahead in window */

  this.prev_length = 0;
  /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */

  this.max_chain_length = 0;
  /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */

  this.max_lazy_match = 0;
  /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */
  // That's alias to max_lazy_match, don't use directly
  //this.max_insert_length = 0;
  /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */

  this.level = 0;     /* compression level (1..9) */
  this.strategy = 0;  /* favor or force Huffman coding*/

  this.good_match = 0;
  /* Use a faster search when the previous match is longer than this */

  this.nice_match = 0; /* Stop searching when current match exceeds this */

              /* used by trees.c: */

  /* Didn't use ct_data typedef below to suppress compiler warning */

  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

  // Use flat array of DOUBLE size, with interleaved fata,
  // because JS does not support effective
  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);
  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);
  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);

  this.l_desc   = null;         /* desc. for literal tree */
  this.d_desc   = null;         /* desc. for distance tree */
  this.bl_desc  = null;         /* desc. for bit length tree */

  //ush bl_count[MAX_BITS+1];
  this.bl_count = new utils.Buf16(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
  zero(this.heap);

  this.heap_len = 0;               /* number of elements in the heap */
  this.heap_max = 0;               /* element of largest frequency */
  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */

  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
  zero(this.depth);
  /* Depth of each subtree used as tie breaker for trees of equal frequency
   */

  this.l_buf = 0;          /* buffer index for literals or lengths */

  this.lit_bufsize = 0;
  /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */

  this.last_lit = 0;      /* running index in l_buf */

  this.d_buf = 0;
  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
   * the same number of elements. To use different lengths, an extra flag
   * array would be necessary.
   */

  this.opt_len = 0;       /* bit length of current block with optimal trees */
  this.static_len = 0;    /* bit length of current block with static trees */
  this.matches = 0;       /* number of string matches in current block */
  this.insert = 0;        /* bytes at end of window left to insert */


  this.bi_buf = 0;
  /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */
  this.bi_valid = 0;
  /* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */

  // Used for window memory init. We safely ignore it for JS. That makes
  // sense only for pointers and memory check tools.
  //this.high_water = 0;
  /* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */
}


function deflateResetKeep(strm) {
  var s;

  if (!strm || !strm.state) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;

  s = strm.state;
  s.pending = 0;
  s.pending_out = 0;

  if (s.wrap < 0) {
    s.wrap = -s.wrap;
    /* was made negative by deflate(..., Z_FINISH); */
  }
  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
  strm.adler = (s.wrap === 2) ?
    0  // crc32(0, Z_NULL, 0)
  :
    1; // adler32(0, Z_NULL, 0)
  s.last_flush = Z_NO_FLUSH;
  trees._tr_init(s);
  return Z_OK;
}


function deflateReset(strm) {
  var ret = deflateResetKeep(strm);
  if (ret === Z_OK) {
    lm_init(strm.state);
  }
  return ret;
}


function deflateSetHeader(strm, head) {
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }
  strm.state.gzhead = head;
  return Z_OK;
}


function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
  if (!strm) { // === Z_NULL
    return Z_STREAM_ERROR;
  }
  var wrap = 1;

  if (level === Z_DEFAULT_COMPRESSION) {
    level = 6;
  }

  if (windowBits < 0) { /* suppress zlib wrapper */
    wrap = 0;
    windowBits = -windowBits;
  }

  else if (windowBits > 15) {
    wrap = 2;           /* write gzip wrapper instead */
    windowBits -= 16;
  }


  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||
    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
    strategy < 0 || strategy > Z_FIXED) {
    return err(strm, Z_STREAM_ERROR);
  }


  if (windowBits === 8) {
    windowBits = 9;
  }
  /* until 256-byte window bug fixed */

  var s = new DeflateState();

  strm.state = s;
  s.strm = strm;

  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;

  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

  s.window = new utils.Buf8(s.w_size * 2);
  s.head = new utils.Buf16(s.hash_size);
  s.prev = new utils.Buf16(s.w_size);

  // Don't need mem init magic for JS.
  //s.high_water = 0;  /* nothing written to s->window yet */

  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  s.pending_buf_size = s.lit_bufsize * 4;

  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
  //s->pending_buf = (uchf *) overlay;
  s.pending_buf = new utils.Buf8(s.pending_buf_size);

  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
  s.d_buf = 1 * s.lit_bufsize;

  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
  s.l_buf = (1 + 2) * s.lit_bufsize;

  s.level = level;
  s.strategy = strategy;
  s.method = method;

  return deflateReset(strm);
}

function deflateInit(strm, level) {
  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
}


function deflate(strm, flush) {
  var old_flush, s;
  var beg, val; // for gzip header write only

  if (!strm || !strm.state ||
    flush > Z_BLOCK || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
  }

  s = strm.state;

  if (!strm.output ||
      (!strm.input && strm.avail_in !== 0) ||
      (s.status === FINISH_STATE && flush !== Z_FINISH)) {
    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);
  }

  s.strm = strm; /* just in case */
  old_flush = s.last_flush;
  s.last_flush = flush;

  /* Write the header */
  if (s.status === INIT_STATE) {

    if (s.wrap === 2) { // GZIP header
      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
      put_byte(s, 31);
      put_byte(s, 139);
      put_byte(s, 8);
      if (!s.gzhead) { // s->gzhead == Z_NULL
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, 0);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, OS_CODE);
        s.status = BUSY_STATE;
      }
      else {
        put_byte(s, (s.gzhead.text ? 1 : 0) +
                    (s.gzhead.hcrc ? 2 : 0) +
                    (!s.gzhead.extra ? 0 : 4) +
                    (!s.gzhead.name ? 0 : 8) +
                    (!s.gzhead.comment ? 0 : 16)
                );
        put_byte(s, s.gzhead.time & 0xff);
        put_byte(s, (s.gzhead.time >> 8) & 0xff);
        put_byte(s, (s.gzhead.time >> 16) & 0xff);
        put_byte(s, (s.gzhead.time >> 24) & 0xff);
        put_byte(s, s.level === 9 ? 2 :
                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                     4 : 0));
        put_byte(s, s.gzhead.os & 0xff);
        if (s.gzhead.extra && s.gzhead.extra.length) {
          put_byte(s, s.gzhead.extra.length & 0xff);
          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
        }
        if (s.gzhead.hcrc) {
          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
        }
        s.gzindex = 0;
        s.status = EXTRA_STATE;
      }
    }
    else // DEFLATE header
    {
      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;
      var level_flags = -1;

      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
        level_flags = 0;
      } else if (s.level < 6) {
        level_flags = 1;
      } else if (s.level === 6) {
        level_flags = 2;
      } else {
        level_flags = 3;
      }
      header |= (level_flags << 6);
      if (s.strstart !== 0) { header |= PRESET_DICT; }
      header += 31 - (header % 31);

      s.status = BUSY_STATE;
      putShortMSB(s, header);

      /* Save the adler32 of the preset dictionary: */
      if (s.strstart !== 0) {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }
      strm.adler = 1; // adler32(0L, Z_NULL, 0);
    }
  }

//#ifdef GZIP
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */

      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            break;
          }
        }
        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
        s.gzindex++;
      }
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (s.gzindex === s.gzhead.extra.length) {
        s.gzindex = 0;
        s.status = NAME_STATE;
      }
    }
    else {
      s.status = NAME_STATE;
    }
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.gzindex = 0;
        s.status = COMMENT_STATE;
      }
    }
    else {
      s.status = COMMENT_STATE;
    }
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment/* != Z_NULL*/) {
      beg = s.pending;  /* start of bytes to update crc */
      //int val;

      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          beg = s.pending;
          if (s.pending === s.pending_buf_size) {
            val = 1;
            break;
          }
        }
        // JS specific: little magic to add zero terminator to end of string
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);

      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      if (val === 0) {
        s.status = HCRC_STATE;
      }
    }
    else {
      s.status = HCRC_STATE;
    }
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
      }
      if (s.pending + 2 <= s.pending_buf_size) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        strm.adler = 0; //crc32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
      }
    }
    else {
      s.status = BUSY_STATE;
    }
  }
//#endif

  /* Flush as much pending output as possible */
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */
      s.last_flush = -1;
      return Z_OK;
    }

    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
    flush !== Z_FINISH) {
    return err(strm, Z_BUF_ERROR);
  }

  /* User must not provide more input after the first FINISH: */
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR);
  }

  /* Start a new block or continue the current one.
   */
  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {
    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
        configuration_table[s.level].func(s, flush));

    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        /* avoid BUF_ERROR next call, see above */
      }
      return Z_OK;
      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        trees._tr_align(s);
      }
      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

        trees._tr_stored_block(s, 0, 0, false);
        /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */
        if (flush === Z_FULL_FLUSH) {
          /*** CLEAR_HASH(s); ***/             /* forget history */
          zero(s.head); // Fill with NIL (= 0);

          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
        return Z_OK;
      }
    }
  }
  //Assert(strm->avail_out > 0, "bug2");
  //if (strm.avail_out <= 0) { throw new Error("bug2");}

  if (flush !== Z_FINISH) { return Z_OK; }
  if (s.wrap <= 0) { return Z_STREAM_END; }

  /* Write the trailer */
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 0xff);
    put_byte(s, (strm.adler >> 8) & 0xff);
    put_byte(s, (strm.adler >> 16) & 0xff);
    put_byte(s, (strm.adler >> 24) & 0xff);
    put_byte(s, strm.total_in & 0xff);
    put_byte(s, (strm.total_in >> 8) & 0xff);
    put_byte(s, (strm.total_in >> 16) & 0xff);
    put_byte(s, (strm.total_in >> 24) & 0xff);
  }
  else
  {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 0xffff);
  }

  flush_pending(strm);
  /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */
  if (s.wrap > 0) { s.wrap = -s.wrap; }
  /* write the trailer only once! */
  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
}

function deflateEnd(strm) {
  var status;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  status = strm.state.status;
  if (status !== INIT_STATE &&
    status !== EXTRA_STATE &&
    status !== NAME_STATE &&
    status !== COMMENT_STATE &&
    status !== HCRC_STATE &&
    status !== BUSY_STATE &&
    status !== FINISH_STATE
  ) {
    return err(strm, Z_STREAM_ERROR);
  }

  strm.state = null;

  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
}


/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */
function deflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var s;
  var str, n;
  var wrap;
  var avail;
  var next;
  var input;
  var tmpDict;

  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
    return Z_STREAM_ERROR;
  }

  s = strm.state;
  wrap = s.wrap;

  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
    return Z_STREAM_ERROR;
  }

  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
  if (wrap === 1) {
    /* adler32(strm->adler, dictionary, dictLength); */
    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
  }

  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

  /* if dictionary would fill window, just replace the history */
  if (dictLength >= s.w_size) {
    if (wrap === 0) {            /* already empty otherwise */
      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    /* use the tail */
    // dictionary = dictionary.slice(dictLength - s.w_size);
    tmpDict = new utils.Buf8(s.w_size);
    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
    dictionary = tmpDict;
    dictLength = s.w_size;
  }
  /* insert dictionary into window and hash */
  avail = strm.avail_in;
  next = strm.next_in;
  input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    str = s.strstart;
    n = s.lookahead - (MIN_MATCH - 1);
    do {
      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

      s.prev[str & s.w_mask] = s.head[s.ins_h];

      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK;
}


exports.deflateInit = deflateInit;
exports.deflateInit2 = deflateInit2;
exports.deflateReset = deflateReset;
exports.deflateResetKeep = deflateResetKeep;
exports.deflateSetHeader = deflateSetHeader;
exports.deflate = deflate;
exports.deflateEnd = deflateEnd;
exports.deflateSetDictionary = deflateSetDictionary;
exports.deflateInfo = 'pako deflate (from Nodeca project)';

/* Not implemented
exports.deflateBound = deflateBound;
exports.deflateCopy = deflateCopy;
exports.deflateParams = deflateParams;
exports.deflatePending = deflatePending;
exports.deflatePrime = deflatePrime;
exports.deflateTune = deflateTune;
*/

},{"../utils/common":106,"./adler32":107,"./crc32":109,"./messages":114,"./trees":115}],111:[function(require,module,exports){
'use strict';

// See state defs from inflate.js
var BAD = 30;       /* got a data error -- remain here until reset */
var TYPE = 12;      /* i: waiting for type bits, including last-flag bit */

/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */
module.exports = function inflate_fast(strm, start) {
  var state;
  var _in;                    /* local strm.input */
  var last;                   /* have enough input while in < last */
  var _out;                   /* local strm.output */
  var beg;                    /* inflate()'s initial strm.output */
  var end;                    /* while out < end, enough space available */
//#ifdef INFLATE_STRICT
  var dmax;                   /* maximum distance from zlib header */
//#endif
  var wsize;                  /* window size or zero if not using window */
  var whave;                  /* valid bytes in the window */
  var wnext;                  /* window write index */
  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
  var s_window;               /* allocated sliding window, if wsize != 0 */
  var hold;                   /* local strm.hold */
  var bits;                   /* local strm.bits */
  var lcode;                  /* local strm.lencode */
  var dcode;                  /* local strm.distcode */
  var lmask;                  /* mask for first level of length codes */
  var dmask;                  /* mask for first level of distance codes */
  var here;                   /* retrieved table entry */
  var op;                     /* code bits, operation, extra bits, or */
                              /*  window position, window bytes to copy */
  var len;                    /* match length, unused bytes */
  var dist;                   /* match distance */
  var from;                   /* where to copy match from */
  var from_source;


  var input, output; // JS specific, because we have no pointers

  /* copy state to local variables */
  state = strm.state;
  //here = state.here;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
//#ifdef INFLATE_STRICT
  dmax = state.dmax;
//#endif
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;


  /* decode literals and length/distances until end-of-block or not enough
     input data or output space */

  top:
  do {
    if (bits < 15) {
      hold += input[_in++] << bits;
      bits += 8;
      hold += input[_in++] << bits;
      bits += 8;
    }

    here = lcode[hold & lmask];

    dolen:
    for (;;) { // Goto emulation
      op = here >>> 24/*here.bits*/;
      hold >>>= op;
      bits -= op;
      op = (here >>> 16) & 0xff/*here.op*/;
      if (op === 0) {                          /* literal */
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        output[_out++] = here & 0xffff/*here.val*/;
      }
      else if (op & 16) {                     /* length base */
        len = here & 0xffff/*here.val*/;
        op &= 15;                           /* number of extra bits */
        if (op) {
          if (bits < op) {
            hold += input[_in++] << bits;
            bits += 8;
          }
          len += hold & ((1 << op) - 1);
          hold >>>= op;
          bits -= op;
        }
        //Tracevv((stderr, "inflate:         length %u\n", len));
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }
        here = dcode[hold & dmask];

        dodist:
        for (;;) { // goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;

          if (op & 16) {                      /* distance base */
            dist = here & 0xffff/*here.val*/;
            op &= 15;                       /* number of extra bits */
            if (bits < op) {
              hold += input[_in++] << bits;
              bits += 8;
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
            }
            dist += hold & ((1 << op) - 1);
//#ifdef INFLATE_STRICT
            if (dist > dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break top;
            }
//#endif
            hold >>>= op;
            bits -= op;
            //Tracevv((stderr, "inflate:         distance %u\n", dist));
            op = _out - beg;                /* max distance in output */
            if (dist > op) {                /* see if copy from window */
              op = dist - op;               /* distance back in window */
              if (op > whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break top;
                }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//                if (len <= op - whave) {
//                  do {
//                    output[_out++] = 0;
//                  } while (--len);
//                  continue top;
//                }
//                len -= op - whave;
//                do {
//                  output[_out++] = 0;
//                } while (--op > whave);
//                if (op === 0) {
//                  from = _out - dist;
//                  do {
//                    output[_out++] = output[from++];
//                  } while (--len);
//                  continue top;
//                }
//#endif
              }
              from = 0; // window index
              from_source = s_window;
              if (wnext === 0) {           /* very common case */
                from += wsize - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              else if (wnext < op) {      /* wrap around window */
                from += wsize + wnext - op;
                op -= wnext;
                if (op < len) {         /* some from end of window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = 0;
                  if (wnext < len) {  /* some from start of window */
                    op = wnext;
                    len -= op;
                    do {
                      output[_out++] = s_window[from++];
                    } while (--op);
                    from = _out - dist;      /* rest from output */
                    from_source = output;
                  }
                }
              }
              else {                      /* contiguous in window */
                from += wnext - op;
                if (op < len) {         /* some from window */
                  len -= op;
                  do {
                    output[_out++] = s_window[from++];
                  } while (--op);
                  from = _out - dist;  /* rest from output */
                  from_source = output;
                }
              }
              while (len > 2) {
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                output[_out++] = from_source[from++];
                len -= 3;
              }
              if (len) {
                output[_out++] = from_source[from++];
                if (len > 1) {
                  output[_out++] = from_source[from++];
                }
              }
            }
            else {
              from = _out - dist;          /* copy direct from output */
              do {                        /* minimum length is three */
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                output[_out++] = output[from++];
                len -= 3;
              } while (len > 2);
              if (len) {
                output[_out++] = output[from++];
                if (len > 1) {
                  output[_out++] = output[from++];
                }
              }
            }
          }
          else if ((op & 64) === 0) {          /* 2nd level distance code */
            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dodist;
          }
          else {
            strm.msg = 'invalid distance code';
            state.mode = BAD;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      }
      else if ((op & 64) === 0) {              /* 2nd level length code */
        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
        continue dolen;
      }
      else if (op & 32) {                     /* end-of-block */
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.mode = TYPE;
        break top;
      }
      else {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break top;
      }

      break; // need to emulate goto via "continue"
    }
  } while (_in < last && _out < end);

  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;

  /* update state and return */
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
  state.hold = hold;
  state.bits = bits;
  return;
};

},{}],112:[function(require,module,exports){
'use strict';


var utils         = require('../utils/common');
var adler32       = require('./adler32');
var crc32         = require('./crc32');
var inflate_fast  = require('./inffast');
var inflate_table = require('./inftrees');

var CODES = 0;
var LENS = 1;
var DISTS = 2;

/* Public constants ==========================================================*/
/* ===========================================================================*/


/* Allowed flush values; see deflate() and inflate() below for details */
//var Z_NO_FLUSH      = 0;
//var Z_PARTIAL_FLUSH = 1;
//var Z_SYNC_FLUSH    = 2;
//var Z_FULL_FLUSH    = 3;
var Z_FINISH        = 4;
var Z_BLOCK         = 5;
var Z_TREES         = 6;


/* Return codes for the compression/decompression functions. Negative values
 * are errors, positive values are used for special but normal events.
 */
var Z_OK            = 0;
var Z_STREAM_END    = 1;
var Z_NEED_DICT     = 2;
//var Z_ERRNO         = -1;
var Z_STREAM_ERROR  = -2;
var Z_DATA_ERROR    = -3;
var Z_MEM_ERROR     = -4;
var Z_BUF_ERROR     = -5;
//var Z_VERSION_ERROR = -6;

/* The deflate compression method */
var Z_DEFLATED  = 8;


/* STATES ====================================================================*/
/* ===========================================================================*/


var    HEAD = 1;       /* i: waiting for magic header */
var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
var    TIME = 3;       /* i: waiting for modification time (gzip) */
var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
var    NAME = 7;       /* i: waiting for end of file name (gzip) */
var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
var    HCRC = 9;       /* i: waiting for header crc (gzip) */
var    DICTID = 10;    /* i: waiting for dictionary check value */
var    DICT = 11;      /* waiting for inflateSetDictionary() call */
var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
var        STORED = 14;    /* i: waiting for stored size (length and complement) */
var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
var        LENLENS = 18;   /* i: waiting for code length code lengths */
var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
var            LEN = 21;       /* i: waiting for length/lit/eob code */
var            LENEXT = 22;    /* i: waiting for length extra bits */
var            DIST = 23;      /* i: waiting for distance code */
var            DISTEXT = 24;   /* i: waiting for distance extra bits */
var            MATCH = 25;     /* o: waiting for output space to copy string */
var            LIT = 26;       /* o: waiting for output space to write literal */
var    CHECK = 27;     /* i: waiting for 32-bit check value */
var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
var    DONE = 29;      /* finished check, done -- remain here until reset */
var    BAD = 30;       /* got a data error -- remain here until reset */
var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

/* ===========================================================================*/



var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

var MAX_WBITS = 15;
/* 32K LZ77 window */
var DEF_WBITS = MAX_WBITS;


function zswap32(q) {
  return  (((q >>> 24) & 0xff) +
          ((q >>> 8) & 0xff00) +
          ((q & 0xff00) << 8) +
          ((q & 0xff) << 24));
}


function InflateState() {
  this.mode = 0;             /* current inflate mode */
  this.last = false;          /* true if processing last block */
  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
  this.havedict = false;      /* true if dictionary provided */
  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
  this.check = 0;             /* protected copy of check value */
  this.total = 0;             /* protected copy of output count */
  // TODO: may be {}
  this.head = null;           /* where to save gzip header information */

  /* sliding window */
  this.wbits = 0;             /* log base 2 of requested window size */
  this.wsize = 0;             /* window size or zero if not using window */
  this.whave = 0;             /* valid bytes in the window */
  this.wnext = 0;             /* window write index */
  this.window = null;         /* allocated sliding window, if needed */

  /* bit accumulator */
  this.hold = 0;              /* input bit accumulator */
  this.bits = 0;              /* number of bits in "in" */

  /* for string and stored block copying */
  this.length = 0;            /* literal or length of data to copy */
  this.offset = 0;            /* distance back to copy string from */

  /* for table and code decoding */
  this.extra = 0;             /* extra bits needed */

  /* fixed and dynamic code tables */
  this.lencode = null;          /* starting table for length/literal codes */
  this.distcode = null;         /* starting table for distance codes */
  this.lenbits = 0;           /* index bits for lencode */
  this.distbits = 0;          /* index bits for distcode */

  /* dynamic table building */
  this.ncode = 0;             /* number of code length code lengths */
  this.nlen = 0;              /* number of length code lengths */
  this.ndist = 0;             /* number of distance code lengths */
  this.have = 0;              /* number of code lengths in lens[] */
  this.next = null;              /* next available space in codes[] */

  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
  this.work = new utils.Buf16(288); /* work area for code table building */

  /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */
  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
  this.sane = 0;                   /* if false, allow invalid distance too far */
  this.back = 0;                   /* bits back of last unprocessed length/lit */
  this.was = 0;                    /* initial length of match */
}

function inflateResetKeep(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = ''; /*Z_NULL*/
  if (state.wrap) {       /* to support ill-conceived Java test suite */
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.dmax = 32768;
  state.head = null/*Z_NULL*/;
  state.hold = 0;
  state.bits = 0;
  //state.lencode = state.distcode = state.next = state.codes;
  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);

  state.sane = 1;
  state.back = -1;
  //Tracev((stderr, "inflate: reset\n"));
  return Z_OK;
}

function inflateReset(strm) {
  var state;

  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);

}

function inflateReset2(strm, windowBits) {
  var wrap;
  var state;

  /* get the state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;

  /* extract wrap request from windowBits parameter */
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  }
  else {
    wrap = (windowBits >> 4) + 1;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }

  /* set number of window bits, free window if different */
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }

  /* update state and reset the rest of it */
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
}

function inflateInit2(strm, windowBits) {
  var ret;
  var state;

  if (!strm) { return Z_STREAM_ERROR; }
  //strm.msg = Z_NULL;                 /* in case we return an error */

  state = new InflateState();

  //if (state === Z_NULL) return Z_MEM_ERROR;
  //Tracev((stderr, "inflate: allocated\n"));
  strm.state = state;
  state.window = null/*Z_NULL*/;
  ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK) {
    strm.state = null/*Z_NULL*/;
  }
  return ret;
}

function inflateInit(strm) {
  return inflateInit2(strm, DEF_WBITS);
}


/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */
var virgin = true;

var lenfix, distfix; // We have no pointers in JS, so keep tables separate

function fixedtables(state) {
  /* build fixed huffman tables if first call (may not be thread safe) */
  if (virgin) {
    var sym;

    lenfix = new utils.Buf32(512);
    distfix = new utils.Buf32(32);

    /* literal/length table */
    sym = 0;
    while (sym < 144) { state.lens[sym++] = 8; }
    while (sym < 256) { state.lens[sym++] = 9; }
    while (sym < 280) { state.lens[sym++] = 7; }
    while (sym < 288) { state.lens[sym++] = 8; }

    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

    /* distance table */
    sym = 0;
    while (sym < 32) { state.lens[sym++] = 5; }

    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

    /* do this just once */
    virgin = false;
  }

  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
}


/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */
function updatewindow(strm, src, end, copy) {
  var dist;
  var state = strm.state;

  /* if it hasn't been done already, allocate space for the window */
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;

    state.window = new utils.Buf8(state.wsize);
  }

  /* copy state->wsize or less output bytes into the circular window */
  if (copy >= state.wsize) {
    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
    state.wnext = 0;
    state.whave = state.wsize;
  }
  else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    //zmemcpy(state->window + state->wnext, end - copy, dist);
    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
    copy -= dist;
    if (copy) {
      //zmemcpy(state->window, end - copy, copy);
      utils.arraySet(state.window, src, end - copy, copy, 0);
      state.wnext = copy;
      state.whave = state.wsize;
    }
    else {
      state.wnext += dist;
      if (state.wnext === state.wsize) { state.wnext = 0; }
      if (state.whave < state.wsize) { state.whave += dist; }
    }
  }
  return 0;
}

function inflate(strm, flush) {
  var state;
  var input, output;          // input/output buffers
  var next;                   /* next input INDEX */
  var put;                    /* next output INDEX */
  var have, left;             /* available input and output */
  var hold;                   /* bit buffer */
  var bits;                   /* bits in bit buffer */
  var _in, _out;              /* save starting available input and output */
  var copy;                   /* number of stored or match bytes to copy */
  var from;                   /* where to copy match bytes from */
  var from_source;
  var here = 0;               /* current decoding table entry */
  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
  //var last;                   /* parent table entry */
  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
  var len;                    /* length to copy for repeats, bits to drop */
  var ret;                    /* return code */
  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */
  var opts;

  var n; // temporary var for NEED_BITS

  var order = /* permutation of code lengths */
    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


  if (!strm || !strm.state || !strm.output ||
      (!strm.input && strm.avail_in !== 0)) {
    return Z_STREAM_ERROR;
  }

  state = strm.state;
  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


  //--- LOAD() ---
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  //---

  _in = have;
  _out = left;
  ret = Z_OK;

  inf_leave: // goto emulation
  for (;;) {
    switch (state.mode) {
    case HEAD:
      if (state.wrap === 0) {
        state.mode = TYPEDO;
        break;
      }
      //=== NEEDBITS(16);
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
        state.check = 0/*crc32(0L, Z_NULL, 0)*/;
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//

        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        state.mode = FLAGS;
        break;
      }
      state.flags = 0;           /* expect zlib header */
      if (state.head) {
        state.head.done = false;
      }
      if (!(state.wrap & 1) ||   /* check if zlib header allowed */
        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
        strm.msg = 'incorrect header check';
        state.mode = BAD;
        break;
      }
      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
      len = (hold & 0x0f)/*BITS(4)*/ + 8;
      if (state.wbits === 0) {
        state.wbits = len;
      }
      else if (len > state.wbits) {
        strm.msg = 'invalid window size';
        state.mode = BAD;
        break;
      }
      state.dmax = 1 << len;
      //Tracev((stderr, "inflate:   zlib header ok\n"));
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = hold & 0x200 ? DICTID : TYPE;
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      break;
    case FLAGS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.flags = hold;
      if ((state.flags & 0xff) !== Z_DEFLATED) {
        strm.msg = 'unknown compression method';
        state.mode = BAD;
        break;
      }
      if (state.flags & 0xe000) {
        strm.msg = 'unknown header flags set';
        state.mode = BAD;
        break;
      }
      if (state.head) {
        state.head.text = ((hold >> 8) & 1);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = TIME;
      /* falls through */
    case TIME:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.time = hold;
      }
      if (state.flags & 0x0200) {
        //=== CRC4(state.check, hold)
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        hbuf[2] = (hold >>> 16) & 0xff;
        hbuf[3] = (hold >>> 24) & 0xff;
        state.check = crc32(state.check, hbuf, 4, 0);
        //===
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = OS;
      /* falls through */
    case OS:
      //=== NEEDBITS(16); */
      while (bits < 16) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if (state.head) {
        state.head.xflags = (hold & 0xff);
        state.head.os = (hold >> 8);
      }
      if (state.flags & 0x0200) {
        //=== CRC2(state.check, hold);
        hbuf[0] = hold & 0xff;
        hbuf[1] = (hold >>> 8) & 0xff;
        state.check = crc32(state.check, hbuf, 2, 0);
        //===//
      }
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = EXLEN;
      /* falls through */
    case EXLEN:
      if (state.flags & 0x0400) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length = hold;
        if (state.head) {
          state.head.extra_len = hold;
        }
        if (state.flags & 0x0200) {
          //=== CRC2(state.check, hold);
          hbuf[0] = hold & 0xff;
          hbuf[1] = (hold >>> 8) & 0xff;
          state.check = crc32(state.check, hbuf, 2, 0);
          //===//
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      else if (state.head) {
        state.head.extra = null/*Z_NULL*/;
      }
      state.mode = EXTRA;
      /* falls through */
    case EXTRA:
      if (state.flags & 0x0400) {
        copy = state.length;
        if (copy > have) { copy = have; }
        if (copy) {
          if (state.head) {
            len = state.head.extra_len - state.length;
            if (!state.head.extra) {
              // Use untyped array for more conveniend processing later
              state.head.extra = new Array(state.head.extra_len);
            }
            utils.arraySet(
              state.head.extra,
              input,
              next,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              copy,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              len
            );
            //zmemcpy(state.head.extra + len, next,
            //        len + copy > state.head.extra_max ?
            //        state.head.extra_max - len : copy);
          }
          if (state.flags & 0x0200) {
            state.check = crc32(state.check, input, copy, next);
          }
          have -= copy;
          next += copy;
          state.length -= copy;
        }
        if (state.length) { break inf_leave; }
      }
      state.length = 0;
      state.mode = NAME;
      /* falls through */
    case NAME:
      if (state.flags & 0x0800) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          // TODO: 2 or 1 bytes?
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.name_max*/)) {
            state.head.name += String.fromCharCode(len);
          }
        } while (len && copy < have);

        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.name = null;
      }
      state.length = 0;
      state.mode = COMMENT;
      /* falls through */
    case COMMENT:
      if (state.flags & 0x1000) {
        if (have === 0) { break inf_leave; }
        copy = 0;
        do {
          len = input[next + copy++];
          /* use constant limit because in js we should not preallocate memory */
          if (state.head && len &&
              (state.length < 65536 /*state.head.comm_max*/)) {
            state.head.comment += String.fromCharCode(len);
          }
        } while (len && copy < have);
        if (state.flags & 0x0200) {
          state.check = crc32(state.check, input, copy, next);
        }
        have -= copy;
        next += copy;
        if (len) { break inf_leave; }
      }
      else if (state.head) {
        state.head.comment = null;
      }
      state.mode = HCRC;
      /* falls through */
    case HCRC:
      if (state.flags & 0x0200) {
        //=== NEEDBITS(16); */
        while (bits < 16) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.check & 0xffff)) {
          strm.msg = 'header crc mismatch';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
      }
      if (state.head) {
        state.head.hcrc = ((state.flags >> 9) & 1);
        state.head.done = true;
      }
      strm.adler = state.check = 0;
      state.mode = TYPE;
      break;
    case DICTID:
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      strm.adler = state.check = zswap32(hold);
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = DICT;
      /* falls through */
    case DICT:
      if (state.havedict === 0) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        return Z_NEED_DICT;
      }
      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
      state.mode = TYPE;
      /* falls through */
    case TYPE:
      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case TYPEDO:
      if (state.last) {
        //--- BYTEBITS() ---//
        hold >>>= bits & 7;
        bits -= bits & 7;
        //---//
        state.mode = CHECK;
        break;
      }
      //=== NEEDBITS(3); */
      while (bits < 3) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.last = (hold & 0x01)/*BITS(1)*/;
      //--- DROPBITS(1) ---//
      hold >>>= 1;
      bits -= 1;
      //---//

      switch ((hold & 0x03)/*BITS(2)*/) {
      case 0:                             /* stored block */
        //Tracev((stderr, "inflate:     stored block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = STORED;
        break;
      case 1:                             /* fixed block */
        fixedtables(state);
        //Tracev((stderr, "inflate:     fixed codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = LEN_;             /* decode codes */
        if (flush === Z_TREES) {
          //--- DROPBITS(2) ---//
          hold >>>= 2;
          bits -= 2;
          //---//
          break inf_leave;
        }
        break;
      case 2:                             /* dynamic block */
        //Tracev((stderr, "inflate:     dynamic codes block%s\n",
        //        state.last ? " (last)" : ""));
        state.mode = TABLE;
        break;
      case 3:
        strm.msg = 'invalid block type';
        state.mode = BAD;
      }
      //--- DROPBITS(2) ---//
      hold >>>= 2;
      bits -= 2;
      //---//
      break;
    case STORED:
      //--- BYTEBITS() ---// /* go to byte boundary */
      hold >>>= bits & 7;
      bits -= bits & 7;
      //---//
      //=== NEEDBITS(32); */
      while (bits < 32) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
        strm.msg = 'invalid stored block lengths';
        state.mode = BAD;
        break;
      }
      state.length = hold & 0xffff;
      //Tracev((stderr, "inflate:       stored length %u\n",
      //        state.length));
      //=== INITBITS();
      hold = 0;
      bits = 0;
      //===//
      state.mode = COPY_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case COPY_:
      state.mode = COPY;
      /* falls through */
    case COPY:
      copy = state.length;
      if (copy) {
        if (copy > have) { copy = have; }
        if (copy > left) { copy = left; }
        if (copy === 0) { break inf_leave; }
        //--- zmemcpy(put, next, copy); ---
        utils.arraySet(output, input, next, copy, put);
        //---//
        have -= copy;
        next += copy;
        left -= copy;
        put += copy;
        state.length -= copy;
        break;
      }
      //Tracev((stderr, "inflate:       stored end\n"));
      state.mode = TYPE;
      break;
    case TABLE:
      //=== NEEDBITS(14); */
      while (bits < 14) {
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
      }
      //===//
      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
      //--- DROPBITS(5) ---//
      hold >>>= 5;
      bits -= 5;
      //---//
      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
      //--- DROPBITS(4) ---//
      hold >>>= 4;
      bits -= 4;
      //---//
//#ifndef PKZIP_BUG_WORKAROUND
      if (state.nlen > 286 || state.ndist > 30) {
        strm.msg = 'too many length or distance symbols';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracev((stderr, "inflate:       table sizes ok\n"));
      state.have = 0;
      state.mode = LENLENS;
      /* falls through */
    case LENLENS:
      while (state.have < state.ncode) {
        //=== NEEDBITS(3);
        while (bits < 3) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
        //--- DROPBITS(3) ---//
        hold >>>= 3;
        bits -= 3;
        //---//
      }
      while (state.have < 19) {
        state.lens[order[state.have++]] = 0;
      }
      // We have separate tables & no pointers. 2 commented lines below not needed.
      //state.next = state.codes;
      //state.lencode = state.next;
      // Switch to use dynamic table
      state.lencode = state.lendyn;
      state.lenbits = 7;

      opts = { bits: state.lenbits };
      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
      state.lenbits = opts.bits;

      if (ret) {
        strm.msg = 'invalid code lengths set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, "inflate:       code lengths ok\n"));
      state.have = 0;
      state.mode = CODELENS;
      /* falls through */
    case CODELENS:
      while (state.have < state.nlen + state.ndist) {
        for (;;) {
          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        if (here_val < 16) {
          //--- DROPBITS(here.bits) ---//
          hold >>>= here_bits;
          bits -= here_bits;
          //---//
          state.lens[state.have++] = here_val;
        }
        else {
          if (here_val === 16) {
            //=== NEEDBITS(here.bits + 2);
            n = here_bits + 2;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            if (state.have === 0) {
              strm.msg = 'invalid bit length repeat';
              state.mode = BAD;
              break;
            }
            len = state.lens[state.have - 1];
            copy = 3 + (hold & 0x03);//BITS(2);
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
          }
          else if (here_val === 17) {
            //=== NEEDBITS(here.bits + 3);
            n = here_bits + 3;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 3 + (hold & 0x07);//BITS(3);
            //--- DROPBITS(3) ---//
            hold >>>= 3;
            bits -= 3;
            //---//
          }
          else {
            //=== NEEDBITS(here.bits + 7);
            n = here_bits + 7;
            while (bits < n) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            len = 0;
            copy = 11 + (hold & 0x7f);//BITS(7);
            //--- DROPBITS(7) ---//
            hold >>>= 7;
            bits -= 7;
            //---//
          }
          if (state.have + copy > state.nlen + state.ndist) {
            strm.msg = 'invalid bit length repeat';
            state.mode = BAD;
            break;
          }
          while (copy--) {
            state.lens[state.have++] = len;
          }
        }
      }

      /* handle error breaks in while */
      if (state.mode === BAD) { break; }

      /* check for end-of-block code (better have one) */
      if (state.lens[256] === 0) {
        strm.msg = 'invalid code -- missing end-of-block';
        state.mode = BAD;
        break;
      }

      /* build code tables -- note: do not change the lenbits or distbits
         values here (9 and 6) without reading the comments in inftrees.h
         concerning the ENOUGH constants, which depend on those values */
      state.lenbits = 9;

      opts = { bits: state.lenbits };
      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.lenbits = opts.bits;
      // state.lencode = state.next;

      if (ret) {
        strm.msg = 'invalid literal/lengths set';
        state.mode = BAD;
        break;
      }

      state.distbits = 6;
      //state.distcode.copy(state.codes);
      // Switch to use dynamic table
      state.distcode = state.distdyn;
      opts = { bits: state.distbits };
      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
      // We have separate tables & no pointers. 2 commented lines below not needed.
      // state.next_index = opts.table_index;
      state.distbits = opts.bits;
      // state.distcode = state.next;

      if (ret) {
        strm.msg = 'invalid distances set';
        state.mode = BAD;
        break;
      }
      //Tracev((stderr, 'inflate:       codes ok\n'));
      state.mode = LEN_;
      if (flush === Z_TREES) { break inf_leave; }
      /* falls through */
    case LEN_:
      state.mode = LEN;
      /* falls through */
    case LEN:
      if (have >= 6 && left >= 258) {
        //--- RESTORE() ---
        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits;
        //---
        inflate_fast(strm, _out);
        //--- LOAD() ---
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        //---

        if (state.mode === TYPE) {
          state.back = -1;
        }
        break;
      }
      state.back = 0;
      for (;;) {
        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if (here_bits <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if (here_op && (here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.lencode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      state.length = here_val;
      if (here_op === 0) {
        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
        //        "inflate:         literal '%c'\n" :
        //        "inflate:         literal 0x%02x\n", here.val));
        state.mode = LIT;
        break;
      }
      if (here_op & 32) {
        //Tracevv((stderr, "inflate:         end of block\n"));
        state.back = -1;
        state.mode = TYPE;
        break;
      }
      if (here_op & 64) {
        strm.msg = 'invalid literal/length code';
        state.mode = BAD;
        break;
      }
      state.extra = here_op & 15;
      state.mode = LENEXT;
      /* falls through */
    case LENEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
      //Tracevv((stderr, "inflate:         length %u\n", state.length));
      state.was = state.length;
      state.mode = DIST;
      /* falls through */
    case DIST:
      for (;;) {
        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
        here_bits = here >>> 24;
        here_op = (here >>> 16) & 0xff;
        here_val = here & 0xffff;

        if ((here_bits) <= bits) { break; }
        //--- PULLBYTE() ---//
        if (have === 0) { break inf_leave; }
        have--;
        hold += input[next++] << bits;
        bits += 8;
        //---//
      }
      if ((here_op & 0xf0) === 0) {
        last_bits = here_bits;
        last_op = here_op;
        last_val = here_val;
        for (;;) {
          here = state.distcode[last_val +
                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
          here_bits = here >>> 24;
          here_op = (here >>> 16) & 0xff;
          here_val = here & 0xffff;

          if ((last_bits + here_bits) <= bits) { break; }
          //--- PULLBYTE() ---//
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
          //---//
        }
        //--- DROPBITS(last.bits) ---//
        hold >>>= last_bits;
        bits -= last_bits;
        //---//
        state.back += last_bits;
      }
      //--- DROPBITS(here.bits) ---//
      hold >>>= here_bits;
      bits -= here_bits;
      //---//
      state.back += here_bits;
      if (here_op & 64) {
        strm.msg = 'invalid distance code';
        state.mode = BAD;
        break;
      }
      state.offset = here_val;
      state.extra = (here_op) & 15;
      state.mode = DISTEXT;
      /* falls through */
    case DISTEXT:
      if (state.extra) {
        //=== NEEDBITS(state.extra);
        n = state.extra;
        while (bits < n) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
        //--- DROPBITS(state.extra) ---//
        hold >>>= state.extra;
        bits -= state.extra;
        //---//
        state.back += state.extra;
      }
//#ifdef INFLATE_STRICT
      if (state.offset > state.dmax) {
        strm.msg = 'invalid distance too far back';
        state.mode = BAD;
        break;
      }
//#endif
      //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
      state.mode = MATCH;
      /* falls through */
    case MATCH:
      if (left === 0) { break inf_leave; }
      copy = _out - left;
      if (state.offset > copy) {         /* copy from window */
        copy = state.offset - copy;
        if (copy > state.whave) {
          if (state.sane) {
            strm.msg = 'invalid distance too far back';
            state.mode = BAD;
            break;
          }
// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility
//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
//          Trace((stderr, "inflate.c too far\n"));
//          copy -= state.whave;
//          if (copy > state.length) { copy = state.length; }
//          if (copy > left) { copy = left; }
//          left -= copy;
//          state.length -= copy;
//          do {
//            output[put++] = 0;
//          } while (--copy);
//          if (state.length === 0) { state.mode = LEN; }
//          break;
//#endif
        }
        if (copy > state.wnext) {
          copy -= state.wnext;
          from = state.wsize - copy;
        }
        else {
          from = state.wnext - copy;
        }
        if (copy > state.length) { copy = state.length; }
        from_source = state.window;
      }
      else {                              /* copy from output */
        from_source = output;
        from = put - state.offset;
        copy = state.length;
      }
      if (copy > left) { copy = left; }
      left -= copy;
      state.length -= copy;
      do {
        output[put++] = from_source[from++];
      } while (--copy);
      if (state.length === 0) { state.mode = LEN; }
      break;
    case LIT:
      if (left === 0) { break inf_leave; }
      output[put++] = state.length;
      left--;
      state.mode = LEN;
      break;
    case CHECK:
      if (state.wrap) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          // Use '|' insdead of '+' to make sure that result is signed
          hold |= input[next++] << bits;
          bits += 8;
        }
        //===//
        _out -= left;
        strm.total_out += _out;
        state.total += _out;
        if (_out) {
          strm.adler = state.check =
              /*UPDATE(state.check, put - _out, _out);*/
              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

        }
        _out = left;
        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
        if ((state.flags ? hold : zswap32(hold)) !== state.check) {
          strm.msg = 'incorrect data check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   check matches trailer\n"));
      }
      state.mode = LENGTH;
      /* falls through */
    case LENGTH:
      if (state.wrap && state.flags) {
        //=== NEEDBITS(32);
        while (bits < 32) {
          if (have === 0) { break inf_leave; }
          have--;
          hold += input[next++] << bits;
          bits += 8;
        }
        //===//
        if (hold !== (state.total & 0xffffffff)) {
          strm.msg = 'incorrect length check';
          state.mode = BAD;
          break;
        }
        //=== INITBITS();
        hold = 0;
        bits = 0;
        //===//
        //Tracev((stderr, "inflate:   length matches trailer\n"));
      }
      state.mode = DONE;
      /* falls through */
    case DONE:
      ret = Z_STREAM_END;
      break inf_leave;
    case BAD:
      ret = Z_DATA_ERROR;
      break inf_leave;
    case MEM:
      return Z_MEM_ERROR;
    case SYNC:
      /* falls through */
    default:
      return Z_STREAM_ERROR;
    }
  }

  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

  /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */

  //--- RESTORE() ---
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  //---

  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                      (state.mode < CHECK || flush !== Z_FINISH))) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
      state.mode = MEM;
      return Z_MEM_ERROR;
    }
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap && _out) {
    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) +
                    (state.mode === TYPE ? 128 : 0) +
                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
    ret = Z_BUF_ERROR;
  }
  return ret;
}

function inflateEnd(strm) {

  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
    return Z_STREAM_ERROR;
  }

  var state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK;
}

function inflateGetHeader(strm, head) {
  var state;

  /* check state */
  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
  state = strm.state;
  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

  /* save header structure */
  state.head = head;
  head.done = false;
  return Z_OK;
}

function inflateSetDictionary(strm, dictionary) {
  var dictLength = dictionary.length;

  var state;
  var dictid;
  var ret;

  /* check state */
  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
  state = strm.state;

  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR;
  }

  /* check for correct dictionary identifier */
  if (state.mode === DICT) {
    dictid = 1; /* adler32(0, null, 0)*/
    /* dictid = adler32(dictid, dictionary, dictLength); */
    dictid = adler32(dictid, dictionary, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR;
    }
  }
  /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */
  ret = updatewindow(strm, dictionary, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR;
  }
  state.havedict = 1;
  // Tracev((stderr, "inflate:   dictionary set\n"));
  return Z_OK;
}

exports.inflateReset = inflateReset;
exports.inflateReset2 = inflateReset2;
exports.inflateResetKeep = inflateResetKeep;
exports.inflateInit = inflateInit;
exports.inflateInit2 = inflateInit2;
exports.inflate = inflate;
exports.inflateEnd = inflateEnd;
exports.inflateGetHeader = inflateGetHeader;
exports.inflateSetDictionary = inflateSetDictionary;
exports.inflateInfo = 'pako inflate (from Nodeca project)';

/* Not implemented
exports.inflateCopy = inflateCopy;
exports.inflateGetDictionary = inflateGetDictionary;
exports.inflateMark = inflateMark;
exports.inflatePrime = inflatePrime;
exports.inflateSync = inflateSync;
exports.inflateSyncPoint = inflateSyncPoint;
exports.inflateUndermine = inflateUndermine;
*/

},{"../utils/common":106,"./adler32":107,"./crc32":109,"./inffast":111,"./inftrees":113}],113:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

var MAXBITS = 15;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

var CODES = 0;
var LENS = 1;
var DISTS = 2;

var lbase = [ /* Length codes 257..285 base */
  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
];

var lext = [ /* Length codes 257..285 extra */
  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
];

var dbase = [ /* Distance codes 0..29 base */
  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
  8193, 12289, 16385, 24577, 0, 0
];

var dext = [ /* Distance codes 0..29 extra */
  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
  28, 28, 29, 29, 64, 64
];

module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
{
  var bits = opts.bits;
      //here = opts.here; /* table entry for duplication */

  var len = 0;               /* a code's length in bits */
  var sym = 0;               /* index of code symbols */
  var min = 0, max = 0;          /* minimum and maximum code lengths */
  var root = 0;              /* number of index bits for root table */
  var curr = 0;              /* number of index bits for current table */
  var drop = 0;              /* code bits to drop for sub-table */
  var left = 0;                   /* number of prefix codes available */
  var used = 0;              /* code entries in table used */
  var huff = 0;              /* Huffman code */
  var incr;              /* for incrementing code, index */
  var fill;              /* index for replicating entries */
  var low;               /* low bits for current root entry */
  var mask;              /* mask for low root bits */
  var next;             /* next available space in table */
  var base = null;     /* base value table to use */
  var base_index = 0;
//  var shoextra;    /* extra bits table to use */
  var end;                    /* use base and extra for symbol > end */
  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
  var extra = null;
  var extra_index = 0;

  var here_bits, here_op, here_val;

  /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */

  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }

  /* bound code lengths, force root to be within code lengths */
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) { break; }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {                     /* no symbols to code at all */
    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;


    //table.op[opts.table_index] = 64;
    //table.bits[opts.table_index] = 1;
    //table.val[opts.table_index++] = 0;
    table[table_index++] = (1 << 24) | (64 << 16) | 0;

    opts.bits = 1;
    return 0;     /* no symbols, but wait for decoding to report error */
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) { break; }
  }
  if (root < min) {
    root = min;
  }

  /* check for an over-subscribed or incomplete set of lengths */
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }        /* over-subscribed */
  }
  if (left > 0 && (type === CODES || max !== 1)) {
    return -1;                      /* incomplete set */
  }

  /* generate offsets into symbol table for each length for sorting */
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }

  /* sort symbols by length, by symbol order within each length */
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }

  /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */

  /* set up for code type */
  // poor man optimization - use if-else instead of switch,
  // to avoid deopts in old v8
  if (type === CODES) {
    base = extra = work;    /* dummy value--not used */
    end = 19;

  } else if (type === LENS) {
    base = lbase;
    base_index -= 257;
    extra = lext;
    extra_index -= 257;
    end = 256;

  } else {                    /* DISTS */
    base = dbase;
    extra = dext;
    end = -1;
  }

  /* initialize opts for loop */
  huff = 0;                   /* starting code */
  sym = 0;                    /* starting code symbol */
  len = min;                  /* starting code length */
  next = table_index;              /* current table to fill in */
  curr = root;                /* current table index bits */
  drop = 0;                   /* current bits to drop from code for index */
  low = -1;                   /* trigger new sub-table when len > root */
  used = 1 << root;          /* use root table entries */
  mask = used - 1;            /* mask for comparing low */

  /* check available table space */
  if ((type === LENS && used > ENOUGH_LENS) ||
    (type === DISTS && used > ENOUGH_DISTS)) {
    return 1;
  }

  var i = 0;
  /* process all codes and make table entries */
  for (;;) {
    i++;
    /* create table entry */
    here_bits = len - drop;
    if (work[sym] < end) {
      here_op = 0;
      here_val = work[sym];
    }
    else if (work[sym] > end) {
      here_op = extra[extra_index + work[sym]];
      here_val = base[base_index + work[sym]];
    }
    else {
      here_op = 32 + 64;         /* end of block */
      here_val = 0;
    }

    /* replicate for those indices with low len bits equal to huff */
    incr = 1 << (len - drop);
    fill = 1 << curr;
    min = fill;                 /* save offset to next table */
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
    } while (fill !== 0);

    /* backwards increment the len-bit code huff */
    incr = 1 << (len - 1);
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }

    /* go to next symbol, update count, len */
    sym++;
    if (--count[len] === 0) {
      if (len === max) { break; }
      len = lens[lens_index + work[sym]];
    }

    /* create new sub-table if needed */
    if (len > root && (huff & mask) !== low) {
      /* if first time, transition to sub-tables */
      if (drop === 0) {
        drop = root;
      }

      /* increment past last table */
      next += min;            /* here min is 1 << curr */

      /* determine length of next table */
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) { break; }
        curr++;
        left <<= 1;
      }

      /* check for enough space */
      used += 1 << curr;
      if ((type === LENS && used > ENOUGH_LENS) ||
        (type === DISTS && used > ENOUGH_DISTS)) {
        return 1;
      }

      /* point entry in root table to sub-table */
      low = huff & mask;
      /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/
      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
    }
  }

  /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */
  if (huff !== 0) {
    //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
  }

  /* set return parameters */
  //opts.table_index += used;
  opts.bits = root;
  return 0;
};

},{"../utils/common":106}],114:[function(require,module,exports){
'use strict';

module.exports = {
  2:      'need dictionary',     /* Z_NEED_DICT       2  */
  1:      'stream end',          /* Z_STREAM_END      1  */
  0:      '',                    /* Z_OK              0  */
  '-1':   'file error',          /* Z_ERRNO         (-1) */
  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
};

},{}],115:[function(require,module,exports){
'use strict';


var utils = require('../utils/common');

/* Public constants ==========================================================*/
/* ===========================================================================*/


//var Z_FILTERED          = 1;
//var Z_HUFFMAN_ONLY      = 2;
//var Z_RLE               = 3;
var Z_FIXED               = 4;
//var Z_DEFAULT_STRATEGY  = 0;

/* Possible values of the data_type field (though see inflate()) */
var Z_BINARY              = 0;
var Z_TEXT                = 1;
//var Z_ASCII             = 1; // = Z_TEXT
var Z_UNKNOWN             = 2;

/*============================================================================*/


function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

// From zutil.h

var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES    = 2;
/* The three kinds of block type */

var MIN_MATCH    = 3;
var MAX_MATCH    = 258;
/* The minimum and maximum match lengths */

// From deflate.h
/* ===========================================================================
 * Internal compression state.
 */

var LENGTH_CODES  = 29;
/* number of length codes, not counting the special END_BLOCK code */

var LITERALS      = 256;
/* number of literal bytes 0..255 */

var L_CODES       = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */

var D_CODES       = 30;
/* number of distance codes */

var BL_CODES      = 19;
/* number of codes used to transfer the bit lengths */

var HEAP_SIZE     = 2 * L_CODES + 1;
/* maximum heap size */

var MAX_BITS      = 15;
/* All codes must not exceed MAX_BITS bits */

var Buf_size      = 16;
/* size of bit buffer in bi_buf */


/* ===========================================================================
 * Constants
 */

var MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */

var END_BLOCK   = 256;
/* end of block literal code */

var REP_3_6     = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */

var REPZ_3_10   = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */

var REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */

/* eslint-disable comma-spacing,array-bracket-spacing */
var extra_lbits =   /* extra bits for each length code */
  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

var extra_dbits =   /* extra bits for each distance code */
  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

var extra_blbits =  /* extra bits for each bit length code */
  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

var bl_order =
  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
/* eslint-enable comma-spacing,array-bracket-spacing */

/* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */

/* ===========================================================================
 * Local data. These are initialized only once.
 */

// We pre-fill arrays with 0 to avoid uninitialized gaps

var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
var static_ltree  = new Array((L_CODES + 2) * 2);
zero(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */

var static_dtree  = new Array(D_CODES * 2);
zero(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */

var _dist_code    = new Array(DIST_CODE_LEN);
zero(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */

var _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);
zero(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */

var base_length   = new Array(LENGTH_CODES);
zero(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */

var base_dist     = new Array(D_CODES);
zero(base_dist);
/* First normalized distance for each code (0 = distance of 1) */


function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

  this.static_tree  = static_tree;  /* static tree or NULL */
  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
  this.extra_base   = extra_base;   /* base index for extra_bits */
  this.elems        = elems;        /* max number of elements in the tree */
  this.max_length   = max_length;   /* max bit length for the codes */

  // show if `static_tree` has data or dummy - needed for monomorphic objects
  this.has_stree    = static_tree && static_tree.length;
}


var static_l_desc;
var static_d_desc;
var static_bl_desc;


function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;     /* the dynamic tree */
  this.max_code = 0;            /* largest code with non zero frequency */
  this.stat_desc = stat_desc;   /* the corresponding static tree */
}



function d_code(dist) {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
}


/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */
function put_short(s, w) {
//    put_byte(s, (uch)((w) & 0xff));
//    put_byte(s, (uch)((ush)(w) >> 8));
  s.pending_buf[s.pending++] = (w) & 0xff;
  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
}


/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */
function send_bits(s, value, length) {
  if (s.bi_valid > (Buf_size - length)) {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> (Buf_size - s.bi_valid);
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= (value << s.bi_valid) & 0xffff;
    s.bi_valid += length;
  }
}


function send_code(s, c, tree) {
  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
}


/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */
function bi_reverse(code, len) {
  var res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
}


/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */
function bi_flush(s) {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;

  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
}


/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */
function gen_bitlen(s, desc)
//    deflate_state *s;
//    tree_desc *desc;    /* the tree descriptor */
{
  var tree            = desc.dyn_tree;
  var max_code        = desc.max_code;
  var stree           = desc.stat_desc.static_tree;
  var has_stree       = desc.stat_desc.has_stree;
  var extra           = desc.stat_desc.extra_bits;
  var base            = desc.stat_desc.extra_base;
  var max_length      = desc.stat_desc.max_length;
  var h;              /* heap index */
  var n, m;           /* iterate over the tree elements */
  var bits;           /* bit length */
  var xbits;          /* extra bits */
  var f;              /* frequency */
  var overflow = 0;   /* number of elements with bit length too large */

  for (bits = 0; bits <= MAX_BITS; bits++) {
    s.bl_count[bits] = 0;
  }

  /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */
  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
    n = s.heap[h];
    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1]/*.Len*/ = bits;
    /* We overwrite tree[n].Dad which is no longer needed */

    if (n > max_code) { continue; } /* not a leaf node */

    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2]/*.Freq*/;
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
    }
  }
  if (overflow === 0) { return; }

  // Trace((stderr,"\nbit length overflow\n"));
  /* This happens for example on obj2 and pic of the Calgary corpus */

  /* Find the first bit length which could increase: */
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) { bits--; }
    s.bl_count[bits]--;      /* move one leaf down the tree */
    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
    s.bl_count[max_length]--;
    /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */
    overflow -= 2;
  } while (overflow > 0);

  /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h];
      if (m > max_code) { continue; }
      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
        tree[m * 2 + 1]/*.Len*/ = bits;
      }
      n--;
    }
  }
}


/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */
function gen_codes(tree, max_code, bl_count)
//    ct_data *tree;             /* the tree to decorate */
//    int max_code;              /* largest code with non zero frequency */
//    ushf *bl_count;            /* number of codes at each bit length */
{
  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
  var code = 0;              /* running code value */
  var bits;                  /* bit index */
  var n;                     /* code index */

  /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */
  for (bits = 1; bits <= MAX_BITS; bits++) {
    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
  }
  /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */
  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
  //        "inconsistent bit counts");
  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

  for (n = 0;  n <= max_code; n++) {
    var len = tree[n * 2 + 1]/*.Len*/;
    if (len === 0) { continue; }
    /* Now reverse the bits */
    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
  }
}


/* ===========================================================================
 * Initialize the various 'constant' tables.
 */
function tr_static_init() {
  var n;        /* iterates over tree elements */
  var bits;     /* bit counter */
  var length;   /* length value */
  var code;     /* code value */
  var dist;     /* distance index */
  var bl_count = new Array(MAX_BITS + 1);
  /* number of codes at each bit length for an optimal tree */

  // do check in _tr_init()
  //if (static_init_done) return;

  /* For some embedded targets, global variables are not initialized: */
/*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/

  /* Initialize the mapping length (0..255) -> length code (0..28) */
  length = 0;
  for (code = 0; code < LENGTH_CODES - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < (1 << extra_lbits[code]); n++) {
      _length_code[length++] = code;
    }
  }
  //Assert (length == 256, "tr_static_init: length != 256");
  /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */
  _length_code[length - 1] = code;

  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < (1 << extra_dbits[code]); n++) {
      _dist_code[dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: dist != 256");
  dist >>= 7; /* from now on, all distances are divided by 128 */
  for (; code < D_CODES; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

  /* Construct the codes of the static literal tree */
  for (bits = 0; bits <= MAX_BITS; bits++) {
    bl_count[bits] = 0;
  }

  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1]/*.Len*/ = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1]/*.Len*/ = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1]/*.Len*/ = 8;
    n++;
    bl_count[8]++;
  }
  /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */
  gen_codes(static_ltree, L_CODES + 1, bl_count);

  /* The static distance tree is trivial: */
  for (n = 0; n < D_CODES; n++) {
    static_dtree[n * 2 + 1]/*.Len*/ = 5;
    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
  }

  // Now data ready and we can init static trees
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);

  //static_init_done = true;
}


/* ===========================================================================
 * Initialize a new block.
 */
function init_block(s) {
  var n; /* iterates over tree elements */

  /* Initialize the trees. */
  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
  s.opt_len = s.static_len = 0;
  s.last_lit = s.matches = 0;
}


/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */
function bi_windup(s)
{
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
}

/* ===========================================================================
 * Copy a stored block, storing first the length and its
 * one's complement if requested.
 */
function copy_block(s, buf, len, header)
//DeflateState *s;
//charf    *buf;    /* the input data */
//unsigned len;     /* its length */
//int      header;  /* true if block header must be written */
{
  bi_windup(s);        /* align on byte boundary */

  if (header) {
    put_short(s, len);
    put_short(s, ~len);
  }
//  while (len--) {
//    put_byte(s, *buf++);
//  }
  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
  s.pending += len;
}

/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */
function smaller(tree, n, m, depth) {
  var _n2 = n * 2;
  var _m2 = m * 2;
  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
}

/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */
function pqdownheap(s, tree, k)
//    deflate_state *s;
//    ct_data *tree;  /* the tree to restore */
//    int k;               /* node to move down */
{
  var v = s.heap[k];
  var j = k << 1;  /* left son of k */
  while (j <= s.heap_len) {
    /* Set j to the smallest of the two sons: */
    if (j < s.heap_len &&
      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    /* Exit if v is smaller than both sons */
    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

    /* Exchange v with the smallest son */
    s.heap[k] = s.heap[j];
    k = j;

    /* And continue down the tree, setting j to the left son of k */
    j <<= 1;
  }
  s.heap[k] = v;
}


// inlined manually
// var SMALLEST = 1;

/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */
function compress_block(s, ltree, dtree)
//    deflate_state *s;
//    const ct_data *ltree; /* literal tree */
//    const ct_data *dtree; /* distance tree */
{
  var dist;           /* distance of matched string */
  var lc;             /* match length or unmatched char (if dist == 0) */
  var lx = 0;         /* running index in l_buf */
  var code;           /* the code to send */
  var extra;          /* number of extra bits to send */

  if (s.last_lit !== 0) {
    do {
      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
      lc = s.pending_buf[s.l_buf + lx];
      lx++;

      if (dist === 0) {
        send_code(s, lc, ltree); /* send a literal byte */
        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
      } else {
        /* Here, lc is the match length - MIN_MATCH */
        code = _length_code[lc];
        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);       /* send the extra length bits */
        }
        dist--; /* dist is now the match distance - 1 */
        code = d_code(dist);
        //Assert (code < D_CODES, "bad d_code");

        send_code(s, code, dtree);       /* send the distance code */
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);   /* send the extra distance bits */
        }
      } /* literal or match pair ? */

      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
      //       "pendingBuf overflow");

    } while (lx < s.last_lit);
  }

  send_code(s, END_BLOCK, ltree);
}


/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */
function build_tree(s, desc)
//    deflate_state *s;
//    tree_desc *desc; /* the tree descriptor */
{
  var tree     = desc.dyn_tree;
  var stree    = desc.stat_desc.static_tree;
  var has_stree = desc.stat_desc.has_stree;
  var elems    = desc.stat_desc.elems;
  var n, m;          /* iterate over heap elements */
  var max_code = -1; /* largest code with non zero frequency */
  var node;          /* new node being created */

  /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE;

  for (n = 0; n < elems; n++) {
    if (tree[n * 2]/*.Freq*/ !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;

    } else {
      tree[n * 2 + 1]/*.Len*/ = 0;
    }
  }

  /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
    tree[node * 2]/*.Freq*/ = 1;
    s.depth[node] = 0;
    s.opt_len--;

    if (has_stree) {
      s.static_len -= stree[node * 2 + 1]/*.Len*/;
    }
    /* node is 0 or 1 so it does not have extra bits */
  }
  desc.max_code = max_code;

  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */
  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

  /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */
  node = elems;              /* next internal node of the tree */
  do {
    //pqremove(s, tree, n);  /* n = node of least frequency */
    /*** pqremove ***/
    n = s.heap[1/*SMALLEST*/];
    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1/*SMALLEST*/);
    /***/

    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
    s.heap[--s.heap_max] = m;

    /* Create a new node father of n and m */
    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

    /* and insert the new node in the heap */
    s.heap[1/*SMALLEST*/] = node++;
    pqdownheap(s, tree, 1/*SMALLEST*/);

  } while (s.heap_len >= 2);

  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

  /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */
  gen_bitlen(s, desc);

  /* The field len is now set, we can generate the bit codes */
  gen_codes(tree, max_code, s.bl_count);
}


/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */
function scan_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree;   /* the tree to be scanned */
//    int max_code;    /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      s.bl_tree[curlen * 2]/*.Freq*/ += count;

    } else if (curlen !== 0) {

      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

    } else {
      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
    }

    count = 0;
    prevlen = curlen;

    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */
function send_tree(s, tree, max_code)
//    deflate_state *s;
//    ct_data *tree; /* the tree to be scanned */
//    int max_code;       /* and its largest code of non zero frequency */
{
  var n;                     /* iterates over all tree elements */
  var prevlen = -1;          /* last emitted length */
  var curlen;                /* length of current code */

  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

  var count = 0;             /* repeat count of the current code */
  var max_count = 7;         /* max repeat count */
  var min_count = 4;         /* min repeat count */

  /* tree[max_code+1].Len = -1; */  /* guard already set */
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }

  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

    if (++count < max_count && curlen === nextlen) {
      continue;

    } else if (count < min_count) {
      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      //Assert(count >= 3 && count <= 6, " 3_6?");
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);

    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);

    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }

    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;

    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;

    } else {
      max_count = 7;
      min_count = 4;
    }
  }
}


/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */
function build_bl_tree(s) {
  var max_blindex;  /* index of last bit length code of non zero freq */

  /* Determine the bit length frequencies for literal and distance trees */
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

  /* Build the bit length tree: */
  build_tree(s, s.bl_desc);
  /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */

  /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */
  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
      break;
    }
  }
  /* Update opt_len to include the bit length tree and counts */
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
  //        s->opt_len, s->static_len));

  return max_blindex;
}


/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */
function send_all_trees(s, lcodes, dcodes, blcodes)
//    deflate_state *s;
//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
{
  var rank;                    /* index in bl_order */

  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
  //        "too many codes");
  //Tracev((stderr, "\nbl counts: "));
  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
  send_bits(s, dcodes - 1,   5);
  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
  for (rank = 0; rank < blcodes; rank++) {
    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
  }
  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
}


/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "black list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */
function detect_data_type(s) {
  /* black_mask is the bit mask of black-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */
  var black_mask = 0xf3ffc07f;
  var n;

  /* Check for non-textual ("black-listed") bytes. */
  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
      return Z_BINARY;
    }
  }

  /* Check for textual ("white-listed") bytes. */
  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS; n++) {
    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
      return Z_TEXT;
    }
  }

  /* There are no "black-listed" or "white-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */
  return Z_BINARY;
}


var static_init_done = false;

/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */
function _tr_init(s)
{

  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }

  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

  s.bi_buf = 0;
  s.bi_valid = 0;

  /* Initialize the first block of the first file: */
  init_block(s);
}


/* ===========================================================================
 * Send a stored block
 */
function _tr_stored_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
  copy_block(s, buf, stored_len, true); /* with header */
}


/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */
function _tr_align(s) {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
}


/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and output the encoded block to the zip file.
 */
function _tr_flush_block(s, buf, stored_len, last)
//DeflateState *s;
//charf *buf;       /* input block, or NULL if too old */
//ulg stored_len;   /* length of input block */
//int last;         /* one if this is the last block for a file */
{
  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
  var max_blindex = 0;        /* index of last bit length code of non zero freq */

  /* Build the Huffman trees unless a stored block is forced */
  if (s.level > 0) {

    /* Check if the file is binary or text */
    if (s.strm.data_type === Z_UNKNOWN) {
      s.strm.data_type = detect_data_type(s);
    }

    /* Construct the literal and distance trees */
    build_tree(s, s.l_desc);
    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));

    build_tree(s, s.d_desc);
    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
    //        s->static_len));
    /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */

    /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */
    max_blindex = build_bl_tree(s);

    /* Determine the best encoding. Compute the block lengths in bytes. */
    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
    static_lenb = (s.static_len + 3 + 7) >>> 3;

    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
    //        s->last_lit));

    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

  } else {
    // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
  }

  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
    /* 4: two words for the lengths */

    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */
    _tr_stored_block(s, buf, stored_len, last);

  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {

    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);

  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
  /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */
  init_block(s);

  if (last) {
    bi_windup(s);
  }
  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
  //       s->compressed_len-7*last));
}

/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */
function _tr_tally(s, dist, lc)
//    deflate_state *s;
//    unsigned dist;  /* distance of matched string */
//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
{
  //var out_length, in_length, dcode;

  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
  s.last_lit++;

  if (dist === 0) {
    /* lc is the unmatched char */
    s.dyn_ltree[lc * 2]/*.Freq*/++;
  } else {
    s.matches++;
    /* Here, lc is the match length - MIN_MATCH */
    dist--;             /* dist = match distance - 1 */
    //Assert((ush)dist < (ush)MAX_DIST(s) &&
    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;
    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
  }

// (!) This block is disabled in zlib defailts,
// don't enable it for binary compatibility

//#ifdef TRUNCATE_BLOCK
//  /* Try to guess if it is profitable to stop the current block here */
//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
//    /* Compute an upper bound for the compressed length */
//    out_length = s.last_lit*8;
//    in_length = s.strstart - s.block_start;
//
//    for (dcode = 0; dcode < D_CODES; dcode++) {
//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
//    }
//    out_length >>>= 3;
//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
//    //       s->last_lit, in_length, out_length,
//    //       100L - out_length*100L/in_length));
//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
//      return true;
//    }
//  }
//#endif

  return (s.last_lit === s.lit_bufsize - 1);
  /* We avoid equality with lit_bufsize because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */
}

exports._tr_init  = _tr_init;
exports._tr_stored_block = _tr_stored_block;
exports._tr_flush_block  = _tr_flush_block;
exports._tr_tally = _tr_tally;
exports._tr_align = _tr_align;

},{"../utils/common":106}],116:[function(require,module,exports){
'use strict';


function ZStream() {
  /* next input byte */
  this.input = null; // JS specific, because we have no pointers
  this.next_in = 0;
  /* number of bytes available at input */
  this.avail_in = 0;
  /* total number of input bytes read so far */
  this.total_in = 0;
  /* next output byte should be put there */
  this.output = null; // JS specific, because we have no pointers
  this.next_out = 0;
  /* remaining free space at output */
  this.avail_out = 0;
  /* total number of bytes output so far */
  this.total_out = 0;
  /* last error message, NULL if no error */
  this.msg = ''/*Z_NULL*/;
  /* not visible by applications */
  this.state = null;
  /* best guess about the data type: binary or text */
  this.data_type = 2/*Z_UNKNOWN*/;
  /* adler32 value of the uncompressed data */
  this.adler = 0;
}

module.exports = ZStream;

},{}],117:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],118:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.

var asn1 = require('asn1.js')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})
var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey
var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"asn1.js":2}],119:[function(require,module,exports){
(function (Buffer){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED\r?\nDEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)\r?\n\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n/m
var startRegex = /^-----BEGIN (.*) KEY-----\r?\n/m
var fullRegex = /^-----BEGIN (.*) KEY-----\r?\n([0-9A-z\n\r\+\/\=]+)\r?\n-----END \1 KEY-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = new Buffer(match2[2].replace(/\r?\n/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = new Buffer(match[2], 'hex')
    var cipherText = new Buffer(match[3].replace(/\r?\n/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1] + ' KEY'
  return {
    tag: tag,
    data: decrypted
  }
}

}).call(this,require("buffer").Buffer)
},{"browserify-aes":24,"buffer":51,"evp_bytestokey":91}],120:[function(require,module,exports){
(function (Buffer){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'PUBLIC KEY':
      ndata = asn1.PublicKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen)
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

}).call(this,require("buffer").Buffer)
},{"./aesid.json":117,"./asn1":118,"./fixProc":119,"browserify-aes":24,"buffer":51,"pbkdf2":122}],121:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":125}],122:[function(require,module,exports){
(function (process,Buffer){
var createHmac = require('create-hmac')
var checkParameters = require('./precondition')

exports.pbkdf2 = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  checkParameters(iterations, keylen)
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

  setTimeout(function () {
    callback(null, exports.pbkdf2Sync(password, salt, iterations, keylen, digest))
  })
}

var defaultEncoding
if (process.browser) {
  defaultEncoding = 'utf-8'
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
}

exports.pbkdf2Sync = function (password, salt, iterations, keylen, digest) {
  if (!Buffer.isBuffer(password)) password = new Buffer(password, defaultEncoding)
  if (!Buffer.isBuffer(salt)) salt = new Buffer(salt, defaultEncoding)

  checkParameters(iterations, keylen)

  digest = digest || 'sha1'

  var hLen
  var l = 1
  var DK = new Buffer(keylen)
  var block1 = new Buffer(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var r
  var T

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)
    var U = createHmac(digest, password).update(block1).digest()

    if (!hLen) {
      hLen = U.length
      T = new Buffer(hLen)
      l = Math.ceil(keylen / hLen)
      r = keylen - (l - 1) * hLen
    }

    U.copy(T, 0, 0, hLen)

    for (var j = 1; j < iterations; j++) {
      U = createHmac(digest, password).update(U).digest()
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    var destPos = (i - 1) * hLen
    var len = (i === l ? r : hLen)
    T.copy(DK, destPos, 0, len)
  }

  return DK
}

}).call(this,require('_process'),require("buffer").Buffer)
},{"./precondition":123,"_process":125,"buffer":51,"create-hmac":61}],123:[function(require,module,exports){
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

},{}],124:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}

}).call(this,require('_process'))
},{"_process":125}],125:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],126:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt');
exports.privateDecrypt = require('./privateDecrypt');

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};
},{"./privateDecrypt":128,"./publicEncrypt":129}],127:[function(require,module,exports){
(function (Buffer){
var createHash = require('create-hash');
module.exports = function (seed, len) {
  var t = new Buffer('');
  var  i = 0, c;
  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }
  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c,0);
  return out;
}
}).call(this,require("buffer").Buffer)
},{"buffer":51,"create-hash":58}],128:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var crt = require('browserify-rsa');
var createHash = require('create-hash');
var withPublic = require('./withPublic');
module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;
  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  
  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();
  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }
  var msg;
  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }
  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);
  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg){
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }
  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb =  msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }
  var i = hLen;
  while (db[i] === 0) {
    i++;
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }
  return db.slice(i);
}

function pkcs1(key, msg, reverse){
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }
  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)){
    status++;
  }
  if (ps.length < 8) {
    status++;
  }
  if (status) {
    throw new Error('decryption error');
  }
  return  msg.slice(i);
}
function compare(a, b){
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;
  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }
  var i = -1;
  while (++i < len) {
    dif += (a[i] ^ b[i]);
  }
  return dif;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":127,"./withPublic":130,"./xor":131,"bn.js":19,"browserify-rsa":40,"buffer":51,"create-hash":58,"parse-asn1":120}],129:[function(require,module,exports){
(function (Buffer){
var parseKeys = require('parse-asn1');
var randomBytes = require('randombytes');
var createHash = require('create-hash');
var mgf = require('./mgf');
var xor = require('./xor');
var bn = require('bn.js');
var withPublic = require('./withPublic');
var crt = require('browserify-rsa');

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;
  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }
  var key = parseKeys(public_key);
  var paddedMsg;
  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }
  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg){
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }
  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}
function pkcs1(key, msg, reverse){
  var mLen = msg.length;
  var k = key.modulus.byteLength();
  if (mLen > k - 11) {
    throw new Error('message too long');
  }
  var ps;
  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }
  return new bn(Buffer.concat([new Buffer([0, reverse?1:2]), ps, new Buffer([0]), msg], k));
}
function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len*2);
  var cur = 0;
  var num;
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len*2);
      cur = 0;
    }
    num = cache[cur++];
    if (num) {
      out[i++] = num;
    }
  }
  return out;
}
}).call(this,require("buffer").Buffer)
},{"./mgf":127,"./withPublic":130,"./xor":131,"bn.js":19,"browserify-rsa":40,"buffer":51,"create-hash":58,"parse-asn1":120,"randombytes":136}],130:[function(require,module,exports){
(function (Buffer){
var bn = require('bn.js');
function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg
    .toRed(bn.mont(key.modulus))
    .redPow(new bn(key.publicExponent))
    .fromRed()
    .toArray());
}

module.exports = withPublic;
}).call(this,require("buffer").Buffer)
},{"bn.js":19,"buffer":51}],131:[function(require,module,exports){
module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;
  while (++i < len) {
    a[i] ^= b[i];
  }
  return a
};
},{}],132:[function(require,module,exports){
(function (global){
/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],133:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],134:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],135:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":133,"./encode":134}],136:[function(require,module,exports){
(function (process,global,Buffer){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}

var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > 65536) throw new Error('requested too many random bytes')
  // in case browserify  isn't using the Uint8Array version
  var rawBytes = new global.Uint8Array(size)

  // This will not work in older browsers.
  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
  if (size > 0) {  // getRandomValues fails on IE if size == 0
    crypto.getRandomValues(rawBytes)
  }
  // phantomjs doesn't like a buffer being passed here
  var bytes = new Buffer(rawBytes.buffer)

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"_process":125,"buffer":51}],137:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":138}],138:[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}
},{"./_stream_readable":140,"./_stream_writable":142,"core-util-is":56,"inherits":101,"process-nextick-args":124}],139:[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":141,"core-util-is":56,"inherits":101}],140:[function(require,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var StringDecoder;

util.inherits(Readable, Stream);

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') {
    return emitter.prependListener(event, fn);
  } else {
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  }
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function') this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = bufferShim.from(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var _e = new Error('stream.unshift() after end event');
      stream.emit('error', _e);
    } else {
      var skipAdd;
      if (state.decoder && !addToFront && !encoding) {
        chunk = state.decoder.write(chunk);
        skipAdd = !state.objectMode && chunk.length === 0;
      }

      if (!addToFront) state.reading = false;

      // Don't add to the buffer if we've decoded to an empty string chunk and
      // we're not in object mode
      if (!skipAdd) {
        // if we want the data now, just emit it.
        if (state.flowing && state.length === 0 && !state.sync) {
          stream.emit('data', chunk);
          stream.read(0);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

          if (state.needReadable) emitReadable(stream);
        }
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function (ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = bufferShim.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach(xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this,require('_process'))
},{"./_stream_duplex":138,"./internal/streams/BufferList":143,"_process":125,"buffer":51,"buffer-shims":49,"core-util-is":56,"events":90,"inherits":101,"isarray":103,"process-nextick-args":124,"string_decoder/":162,"util":21}],141:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function TransformState(stream) {
  this.afterTransform = function (er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
  this.writeencoding = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined) stream.push(data);

  cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.once('prefinish', function () {
    if (typeof this._flush === 'function') this._flush(function (er, data) {
      done(stream, er, data);
    });else done(stream);
  });
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data !== null && data !== undefined) stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

  if (ts.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":138,"core-util-is":56,"inherits":101}],142:[function(require,module,exports){
(function (process){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream;
(function () {
  try {
    Stream = require('st' + 'ream');
  } catch (_) {} finally {
    if (!Stream) Stream = require('events').EventEmitter;
  }
})();
/*</replacement>*/

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~ ~this.highWaterMark;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;

      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;

    if (typeof options.writev === 'function') this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;
  // Always throw error if a null is written
  // if we are not in object mode then throw
  // if it is not a buffer, string, or undefined.
  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  if (er) {
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

  if (typeof cb !== 'function') cb = nop;

  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = bufferShim.from(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) processNextTick(cb, er);else cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
        afterWrite(stream, state, finished, cb);
      }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;

    var count = 0;
    while (entry) {
      buffer[count] = entry;
      entry = entry.next;
      count += 1;
    }

    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequestCount = 0;
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function (err) {
    var entry = _this.entry;
    _this.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = _this;
    } else {
      state.corkedRequestsFree = _this;
    }
  };
}
}).call(this,require('_process'))
},{"./_stream_duplex":138,"_process":125,"buffer":51,"buffer-shims":49,"core-util-is":56,"events":90,"inherits":101,"process-nextick-args":124,"util-deprecate":169}],143:[function(require,module,exports){
'use strict';

var Buffer = require('buffer').Buffer;
/*<replacement>*/
var bufferShim = require('buffer-shims');
/*</replacement>*/

module.exports = BufferList;

function BufferList() {
  this.head = null;
  this.tail = null;
  this.length = 0;
}

BufferList.prototype.push = function (v) {
  var entry = { data: v, next: null };
  if (this.length > 0) this.tail.next = entry;else this.head = entry;
  this.tail = entry;
  ++this.length;
};

BufferList.prototype.unshift = function (v) {
  var entry = { data: v, next: this.head };
  if (this.length === 0) this.tail = entry;
  this.head = entry;
  ++this.length;
};

BufferList.prototype.shift = function () {
  if (this.length === 0) return;
  var ret = this.head.data;
  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
  --this.length;
  return ret;
};

BufferList.prototype.clear = function () {
  this.head = this.tail = null;
  this.length = 0;
};

BufferList.prototype.join = function (s) {
  if (this.length === 0) return '';
  var p = this.head;
  var ret = '' + p.data;
  while (p = p.next) {
    ret += s + p.data;
  }return ret;
};

BufferList.prototype.concat = function (n) {
  if (this.length === 0) return bufferShim.alloc(0);
  if (this.length === 1) return this.head.data;
  var ret = bufferShim.allocUnsafe(n >>> 0);
  var p = this.head;
  var i = 0;
  while (p) {
    p.data.copy(ret, i);
    i += p.data.length;
    p = p.next;
  }
  return ret;
};
},{"buffer":51,"buffer-shims":49}],144:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":139}],145:[function(require,module,exports){
(function (process){
var Stream = (function (){
  try {
    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
  module.exports = Stream;
}

}).call(this,require('_process'))
},{"./lib/_stream_duplex.js":138,"./lib/_stream_passthrough.js":139,"./lib/_stream_readable.js":140,"./lib/_stream_transform.js":141,"./lib/_stream_writable.js":142,"_process":125}],146:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":141}],147:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":142}],148:[function(require,module,exports){
(function (Buffer){
/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
/** @preserve
(c) 2012 by Cédric Mesnil. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// constants table
var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]
var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]

function bytesToWords (bytes) {
  var words = []
  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
    words[b >>> 5] |= bytes[i] << (24 - b % 32)
  }
  return words
}

function wordsToBytes (words) {
  var bytes = []
  for (var b = 0; b < words.length * 32; b += 8) {
    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF)
  }
  return bytes
}

function processBlock (H, M, offset) {
  // swap endian
  for (var i = 0; i < 16; i++) {
    var offset_i = offset + i
    var M_offset_i = M[offset_i]

    // Swap
    M[offset_i] = (
      (((M_offset_i << 8) | (M_offset_i >>> 24)) & 0x00ff00ff) |
      (((M_offset_i << 24) | (M_offset_i >>> 8)) & 0xff00ff00)
    )
  }

  // Working variables
  var al, bl, cl, dl, el
  var ar, br, cr, dr, er

  ar = al = H[0]
  br = bl = H[1]
  cr = cl = H[2]
  dr = dl = H[3]
  er = el = H[4]

  // computation
  var t
  for (i = 0; i < 80; i += 1) {
    t = (al + M[offset + zl[i]]) | 0
    if (i < 16) {
      t += f1(bl, cl, dl) + hl[0]
    } else if (i < 32) {
      t += f2(bl, cl, dl) + hl[1]
    } else if (i < 48) {
      t += f3(bl, cl, dl) + hl[2]
    } else if (i < 64) {
      t += f4(bl, cl, dl) + hl[3]
    } else {// if (i<80) {
      t += f5(bl, cl, dl) + hl[4]
    }
    t = t | 0
    t = rotl(t, sl[i])
    t = (t + el) | 0
    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = t

    t = (ar + M[offset + zr[i]]) | 0
    if (i < 16) {
      t += f5(br, cr, dr) + hr[0]
    } else if (i < 32) {
      t += f4(br, cr, dr) + hr[1]
    } else if (i < 48) {
      t += f3(br, cr, dr) + hr[2]
    } else if (i < 64) {
      t += f2(br, cr, dr) + hr[3]
    } else {// if (i<80) {
      t += f1(br, cr, dr) + hr[4]
    }

    t = t | 0
    t = rotl(t, sr[i])
    t = (t + er) | 0
    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = t
  }

  // intermediate hash value
  t = (H[1] + cl + dr) | 0
  H[1] = (H[2] + dl + er) | 0
  H[2] = (H[3] + el + ar) | 0
  H[3] = (H[4] + al + br) | 0
  H[4] = (H[0] + bl + cr) | 0
  H[0] = t
}

function f1 (x, y, z) {
  return ((x) ^ (y) ^ (z))
}

function f2 (x, y, z) {
  return (((x) & (y)) | ((~x) & (z)))
}

function f3 (x, y, z) {
  return (((x) | (~(y))) ^ (z))
}

function f4 (x, y, z) {
  return (((x) & (z)) | ((y) & (~(z))))
}

function f5 (x, y, z) {
  return ((x) ^ ((y) | (~(z))))
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function ripemd160 (message) {
  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]

  if (typeof message === 'string') {
    message = new Buffer(message, 'utf8')
  }

  var m = bytesToWords(message)

  var nBitsLeft = message.length * 8
  var nBitsTotal = message.length * 8

  // Add padding
  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32)
  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
    (((nBitsTotal << 8) | (nBitsTotal >>> 24)) & 0x00ff00ff) |
    (((nBitsTotal << 24) | (nBitsTotal >>> 8)) & 0xff00ff00)
  )

  for (var i = 0; i < m.length; i += 16) {
    processBlock(H, m, i)
  }

  // swap endian
  for (i = 0; i < 5; i++) {
    // shortcut
    var H_i = H[i]

    // Swap
    H[i] = (((H_i << 8) | (H_i >>> 24)) & 0x00ff00ff) |
      (((H_i << 24) | (H_i >>> 8)) & 0xff00ff00)
  }

  var digestbytes = wordsToBytes(H)
  return new Buffer(digestbytes)
}

module.exports = ripemd160

}).call(this,require("buffer").Buffer)
},{"buffer":51}],149:[function(require,module,exports){
(function (Buffer){
// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = new Buffer(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
  this._s = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = new Buffer(data, enc)
  }

  var l = this._len += data.length
  var s = this._s || 0
  var f = 0
  var buffer = this._block

  while (s < l) {
    var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
    var ch = (t - f)

    for (var i = 0; i < ch; i++) {
      buffer[(s % this._blockSize) + i] = data[i + f]
    }

    s += ch
    f += ch

    if ((s % this._blockSize) === 0) {
      this._update(buffer)
    }
  }
  this._s = s

  return this
}

Hash.prototype.digest = function (enc) {
  // Suppose the length of the message M, in bits, is l
  var l = this._len * 8

  // Append the bit 1 to the end of the message
  this._block[this._len % this._blockSize] = 0x80

  // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
  this._block.fill(0, this._len % this._blockSize + 1)

  if (l % (this._blockSize * 8) >= this._finalSize * 8) {
    this._update(this._block)
    this._block.fill(0)
  }

  // to this append the block which is equal to the number l written in binary
  // TODO: handle case where l is > Math.pow(2, 29)
  this._block.writeInt32BE(l, this._blockSize - 4)

  var hash = this._update(this._block) || this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

}).call(this,require("buffer").Buffer)
},{"buffer":51}],150:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":151,"./sha1":152,"./sha224":153,"./sha256":154,"./sha384":155,"./sha512":156}],151:[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

}).call(this,require("buffer").Buffer)
},{"./hash":149,"buffer":51,"inherits":101}],152:[function(require,module,exports){
(function (Buffer){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = new Buffer(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

}).call(this,require("buffer").Buffer)
},{"./hash":149,"buffer":51,"inherits":101}],153:[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = new Buffer(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

}).call(this,require("buffer").Buffer)
},{"./hash":149,"./sha256":154,"buffer":51,"inherits":101}],154:[function(require,module,exports){
(function (Buffer){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = new Buffer(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

}).call(this,require("buffer").Buffer)
},{"./hash":149,"buffer":51,"inherits":101}],155:[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = new Buffer(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

}).call(this,require("buffer").Buffer)
},{"./hash":149,"./sha512":156,"buffer":51,"inherits":101}],156:[function(require,module,exports){
(function (Buffer){
var inherits = require('inherits')
var Hash = require('./hash')

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = new Buffer(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

}).call(this,require("buffer").Buffer)
},{"./hash":149,"buffer":51,"inherits":101}],157:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":90,"inherits":101,"readable-stream/duplex.js":137,"readable-stream/passthrough.js":144,"readable-stream/readable.js":145,"readable-stream/transform.js":146,"readable-stream/writable.js":147}],158:[function(require,module,exports){
(function (global){
var ClientRequest = require('./lib/request')
var extend = require('xtend')
var statusCodes = require('builtin-status-codes')
var url = require('url')

var http = exports

http.request = function (opts, cb) {
	if (typeof opts === 'string')
		opts = url.parse(opts)
	else
		opts = extend(opts)

	// Normally, the page is loaded from http or https, so not specifying a protocol
	// will result in a (valid) protocol-relative url. However, this won't work if
	// the protocol is something else, like 'file:'
	var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''

	var protocol = opts.protocol || defaultProtocol
	var host = opts.hostname || opts.host
	var port = opts.port
	var path = opts.path || '/'

	// Necessary for IPv6 addresses
	if (host && host.indexOf(':') !== -1)
		host = '[' + host + ']'

	// This may be a relative url. The browser should always be able to interpret it correctly.
	opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
	opts.method = (opts.method || 'GET').toUpperCase()
	opts.headers = opts.headers || {}

	// Also valid opts.auth, opts.mode

	var req = new ClientRequest(opts)
	if (cb)
		req.on('response', cb)
	return req
}

http.get = function get (opts, cb) {
	var req = http.request(opts, cb)
	req.end()
	return req
}

http.Agent = function () {}
http.Agent.defaultMaxSockets = 4

http.STATUS_CODES = statusCodes

http.METHODS = [
	'CHECKOUT',
	'CONNECT',
	'COPY',
	'DELETE',
	'GET',
	'HEAD',
	'LOCK',
	'M-SEARCH',
	'MERGE',
	'MKACTIVITY',
	'MKCOL',
	'MOVE',
	'NOTIFY',
	'OPTIONS',
	'PATCH',
	'POST',
	'PROPFIND',
	'PROPPATCH',
	'PURGE',
	'PUT',
	'REPORT',
	'SEARCH',
	'SUBSCRIBE',
	'TRACE',
	'UNLOCK',
	'UNSUBSCRIBE'
]
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./lib/request":160,"builtin-status-codes":54,"url":165,"xtend":187}],159:[function(require,module,exports){
(function (global){
exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)

exports.blobConstructor = false
try {
	new Blob([new ArrayBuffer(1)])
	exports.blobConstructor = true
} catch (e) {}

// The xhr request to example.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var xhr
function getXHR () {
	// Cache the xhr value
	if (xhr !== undefined) return xhr

	if (global.XMLHttpRequest) {
		xhr = new global.XMLHttpRequest()
		// If XDomainRequest is available (ie only, where xhr might not work
		// cross domain), use the page location. Otherwise use example.com
		// Note: this doesn't actually make an http request.
		try {
			xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
		} catch(e) {
			xhr = null
		}
	} else {
		// Service workers don't have XHR
		xhr = null
	}
	return xhr
}

function checkTypeSupport (type) {
	var xhr = getXHR()
	if (!xhr) return false
	try {
		xhr.responseType = type
		return xhr.responseType === type
	} catch (e) {}
	return false
}

// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
// Safari 7.1 appears to have fixed this bug.
var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'
var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)

// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
exports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))

// These next two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')
exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&
	checkTypeSupport('moz-chunked-arraybuffer')

// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)

exports.vbArray = isFunction(global.VBArray)

function isFunction (value) {
	return typeof value === 'function'
}

xhr = null // Help gc

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],160:[function(require,module,exports){
(function (process,global,Buffer){
var capability = require('./capability')
var inherits = require('inherits')
var response = require('./response')
var stream = require('readable-stream')
var toArrayBuffer = require('to-arraybuffer')

var IncomingMessage = response.IncomingMessage
var rStates = response.readyStates

function decideMode (preferBinary, useFetch) {
	if (capability.fetch && useFetch) {
		return 'fetch'
	} else if (capability.mozchunkedarraybuffer) {
		return 'moz-chunked-arraybuffer'
	} else if (capability.msstream) {
		return 'ms-stream'
	} else if (capability.arraybuffer && preferBinary) {
		return 'arraybuffer'
	} else if (capability.vbArray && preferBinary) {
		return 'text:vbarray'
	} else {
		return 'text'
	}
}

var ClientRequest = module.exports = function (opts) {
	var self = this
	stream.Writable.call(self)

	self._opts = opts
	self._body = []
	self._headers = {}
	if (opts.auth)
		self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'))
	Object.keys(opts.headers).forEach(function (name) {
		self.setHeader(name, opts.headers[name])
	})

	var preferBinary
	var useFetch = true
	if (opts.mode === 'disable-fetch' || 'timeout' in opts) {
		// If the use of XHR should be preferred and includes preserving the 'content-type' header.
		// Force XHR to be used since the Fetch API does not yet support timeouts.
		useFetch = false
		preferBinary = true
	} else if (opts.mode === 'prefer-streaming') {
		// If streaming is a high priority but binary compatibility and
		// the accuracy of the 'content-type' header aren't
		preferBinary = false
	} else if (opts.mode === 'allow-wrong-content-type') {
		// If streaming is more important than preserving the 'content-type' header
		preferBinary = !capability.overrideMimeType
	} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
		// Use binary if text streaming may corrupt data or the content-type header, or for speed
		preferBinary = true
	} else {
		throw new Error('Invalid value for opts.mode')
	}
	self._mode = decideMode(preferBinary, useFetch)

	self.on('finish', function () {
		self._onFinish()
	})
}

inherits(ClientRequest, stream.Writable)

ClientRequest.prototype.setHeader = function (name, value) {
	var self = this
	var lowerName = name.toLowerCase()
	// This check is not necessary, but it prevents warnings from browsers about setting unsafe
	// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
	// http-browserify did it, so I will too.
	if (unsafeHeaders.indexOf(lowerName) !== -1)
		return

	self._headers[lowerName] = {
		name: name,
		value: value
	}
}

ClientRequest.prototype.getHeader = function (name) {
	var self = this
	return self._headers[name.toLowerCase()].value
}

ClientRequest.prototype.removeHeader = function (name) {
	var self = this
	delete self._headers[name.toLowerCase()]
}

ClientRequest.prototype._onFinish = function () {
	var self = this

	if (self._destroyed)
		return
	var opts = self._opts

	var headersObj = self._headers
	var body = null
	if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH' || opts.method === 'MERGE') {
		if (capability.blobConstructor) {
			body = new global.Blob(self._body.map(function (buffer) {
				return toArrayBuffer(buffer)
			}), {
				type: (headersObj['content-type'] || {}).value || ''
			})
		} else {
			// get utf8 string
			body = Buffer.concat(self._body).toString()
		}
	}

	if (self._mode === 'fetch') {
		var headers = Object.keys(headersObj).map(function (name) {
			return [headersObj[name].name, headersObj[name].value]
		})

		global.fetch(self._opts.url, {
			method: self._opts.method,
			headers: headers,
			body: body || undefined,
			mode: 'cors',
			credentials: opts.withCredentials ? 'include' : 'same-origin'
		}).then(function (response) {
			self._fetchResponse = response
			self._connect()
		}, function (reason) {
			self.emit('error', reason)
		})
	} else {
		var xhr = self._xhr = new global.XMLHttpRequest()
		try {
			xhr.open(self._opts.method, self._opts.url, true)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}

		// Can't set responseType on really old browsers
		if ('responseType' in xhr)
			xhr.responseType = self._mode.split(':')[0]

		if ('withCredentials' in xhr)
			xhr.withCredentials = !!opts.withCredentials

		if (self._mode === 'text' && 'overrideMimeType' in xhr)
			xhr.overrideMimeType('text/plain; charset=x-user-defined')

		if ('timeout' in opts) {
			xhr.timeout = opts.timeout
			xhr.ontimeout = function () {
				self.emit('timeout')
			}
		}

		Object.keys(headersObj).forEach(function (name) {
			xhr.setRequestHeader(headersObj[name].name, headersObj[name].value)
		})

		self._response = null
		xhr.onreadystatechange = function () {
			switch (xhr.readyState) {
				case rStates.LOADING:
				case rStates.DONE:
					self._onXHRProgress()
					break
			}
		}
		// Necessary for streaming in Firefox, since xhr.response is ONLY defined
		// in onprogress, not in onreadystatechange with xhr.readyState = 3
		if (self._mode === 'moz-chunked-arraybuffer') {
			xhr.onprogress = function () {
				self._onXHRProgress()
			}
		}

		xhr.onerror = function () {
			if (self._destroyed)
				return
			self.emit('error', new Error('XHR error'))
		}

		try {
			xhr.send(body)
		} catch (err) {
			process.nextTick(function () {
				self.emit('error', err)
			})
			return
		}
	}
}

/**
 * Checks if xhr.status is readable and non-zero, indicating no error.
 * Even though the spec says it should be available in readyState 3,
 * accessing it throws an exception in IE8
 */
function statusValid (xhr) {
	try {
		var status = xhr.status
		return (status !== null && status !== 0)
	} catch (e) {
		return false
	}
}

ClientRequest.prototype._onXHRProgress = function () {
	var self = this

	if (!statusValid(self._xhr) || self._destroyed)
		return

	if (!self._response)
		self._connect()

	self._response._onXHRProgress()
}

ClientRequest.prototype._connect = function () {
	var self = this

	if (self._destroyed)
		return

	self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode)
	self._response.on('error', function(err) {
		self.emit('error', err)
	})

	self.emit('response', self._response)
}

ClientRequest.prototype._write = function (chunk, encoding, cb) {
	var self = this

	self._body.push(chunk)
	cb()
}

ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
	var self = this
	self._destroyed = true
	if (self._response)
		self._response._destroyed = true
	if (self._xhr)
		self._xhr.abort()
	// Currently, there isn't a way to truly abort a fetch.
	// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
}

ClientRequest.prototype.end = function (data, encoding, cb) {
	var self = this
	if (typeof data === 'function') {
		cb = data
		data = undefined
	}

	stream.Writable.prototype.end.call(self, data, encoding, cb)
}

ClientRequest.prototype.flushHeaders = function () {}
ClientRequest.prototype.setTimeout = function () {}
ClientRequest.prototype.setNoDelay = function () {}
ClientRequest.prototype.setSocketKeepAlive = function () {}

// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
var unsafeHeaders = [
	'accept-charset',
	'accept-encoding',
	'access-control-request-headers',
	'access-control-request-method',
	'connection',
	'content-length',
	'cookie',
	'cookie2',
	'date',
	'dnt',
	'expect',
	'host',
	'keep-alive',
	'origin',
	'referer',
	'te',
	'trailer',
	'transfer-encoding',
	'upgrade',
	'user-agent',
	'via'
]

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"./capability":159,"./response":161,"_process":125,"buffer":51,"inherits":101,"readable-stream":145,"to-arraybuffer":163}],161:[function(require,module,exports){
(function (process,global,Buffer){
var capability = require('./capability')
var inherits = require('inherits')
var stream = require('readable-stream')

var rStates = exports.readyStates = {
	UNSENT: 0,
	OPENED: 1,
	HEADERS_RECEIVED: 2,
	LOADING: 3,
	DONE: 4
}

var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {
	var self = this
	stream.Readable.call(self)

	self._mode = mode
	self.headers = {}
	self.rawHeaders = []
	self.trailers = {}
	self.rawTrailers = []

	// Fake the 'close' event, but only once 'end' fires
	self.on('end', function () {
		// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
		process.nextTick(function () {
			self.emit('close')
		})
	})

	if (mode === 'fetch') {
		self._fetchResponse = response

		self.url = response.url
		self.statusCode = response.status
		self.statusMessage = response.statusText
		
		response.headers.forEach(function(header, key){
			self.headers[key.toLowerCase()] = header
			self.rawHeaders.push(key, header)
		})


		// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
		var reader = response.body.getReader()
		function read () {
			reader.read().then(function (result) {
				if (self._destroyed)
					return
				if (result.done) {
					self.push(null)
					return
				}
				self.push(new Buffer(result.value))
				read()
			}).catch(function(err) {
				self.emit('error', err)
			})
		}
		read()

	} else {
		self._xhr = xhr
		self._pos = 0

		self.url = xhr.responseURL
		self.statusCode = xhr.status
		self.statusMessage = xhr.statusText
		var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
		headers.forEach(function (header) {
			var matches = header.match(/^([^:]+):\s*(.*)/)
			if (matches) {
				var key = matches[1].toLowerCase()
				if (key === 'set-cookie') {
					if (self.headers[key] === undefined) {
						self.headers[key] = []
					}
					self.headers[key].push(matches[2])
				} else if (self.headers[key] !== undefined) {
					self.headers[key] += ', ' + matches[2]
				} else {
					self.headers[key] = matches[2]
				}
				self.rawHeaders.push(matches[1], matches[2])
			}
		})

		self._charset = 'x-user-defined'
		if (!capability.overrideMimeType) {
			var mimeType = self.rawHeaders['mime-type']
			if (mimeType) {
				var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
				if (charsetMatch) {
					self._charset = charsetMatch[1].toLowerCase()
				}
			}
			if (!self._charset)
				self._charset = 'utf-8' // best guess
		}
	}
}

inherits(IncomingMessage, stream.Readable)

IncomingMessage.prototype._read = function () {}

IncomingMessage.prototype._onXHRProgress = function () {
	var self = this

	var xhr = self._xhr

	var response = null
	switch (self._mode) {
		case 'text:vbarray': // For IE9
			if (xhr.readyState !== rStates.DONE)
				break
			try {
				// This fails in IE8
				response = new global.VBArray(xhr.responseBody).toArray()
			} catch (e) {}
			if (response !== null) {
				self.push(new Buffer(response))
				break
			}
			// Falls through in IE8	
		case 'text':
			try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
				response = xhr.responseText
			} catch (e) {
				self._mode = 'text:vbarray'
				break
			}
			if (response.length > self._pos) {
				var newData = response.substr(self._pos)
				if (self._charset === 'x-user-defined') {
					var buffer = new Buffer(newData.length)
					for (var i = 0; i < newData.length; i++)
						buffer[i] = newData.charCodeAt(i) & 0xff

					self.push(buffer)
				} else {
					self.push(newData, self._charset)
				}
				self._pos = response.length
			}
			break
		case 'arraybuffer':
			if (xhr.readyState !== rStates.DONE || !xhr.response)
				break
			response = xhr.response
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'moz-chunked-arraybuffer': // take whole
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING || !response)
				break
			self.push(new Buffer(new Uint8Array(response)))
			break
		case 'ms-stream':
			response = xhr.response
			if (xhr.readyState !== rStates.LOADING)
				break
			var reader = new global.MSStreamReader()
			reader.onprogress = function () {
				if (reader.result.byteLength > self._pos) {
					self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))))
					self._pos = reader.result.byteLength
				}
			}
			reader.onload = function () {
				self.push(null)
			}
			// reader.onerror = ??? // TODO: this
			reader.readAsArrayBuffer(response)
			break
	}

	// The ms-stream case handles end separately in reader.onload()
	if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
		self.push(null)
	}
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
},{"./capability":159,"_process":125,"buffer":51,"inherits":101,"readable-stream":145}],162:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":51}],163:[function(require,module,exports){
var Buffer = require('buffer').Buffer

module.exports = function (buf) {
	// If the buffer is backed by a Uint8Array, a faster version will work
	if (buf instanceof Uint8Array) {
		// If the buffer isn't a subarray, return the underlying ArrayBuffer
		if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
			return buf.buffer
		} else if (typeof buf.buffer.slice === 'function') {
			// Otherwise we need to get a proper copy
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)
		}
	}

	if (Buffer.isBuffer(buf)) {
		// This is the slow version that will work with any Buffer
		// implementation (even in old browsers)
		var arrayCopy = new Uint8Array(buf.length)
		var len = buf.length
		for (var i = 0; i < len; i++) {
			arrayCopy[i] = buf[i]
		}
		return arrayCopy.buffer
	} else {
		throw new Error('Argument must be a Buffer')
	}
}

},{"buffer":51}],164:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty;

/**
 * An auto incrementing id which we can use to create "unique" Ultron instances
 * so we can track the event emitters that are added through the Ultron
 * interface.
 *
 * @type {Number}
 * @private
 */
var id = 0;

/**
 * Ultron is high-intelligence robot. It gathers intelligence so it can start improving
 * upon his rudimentary design. It will learn from your EventEmitting patterns
 * and exterminate them.
 *
 * @constructor
 * @param {EventEmitter} ee EventEmitter instance we need to wrap.
 * @api public
 */
function Ultron(ee) {
  if (!(this instanceof Ultron)) return new Ultron(ee);

  this.id = id++;
  this.ee = ee;
}

/**
 * Register a new EventListener for the given event.
 *
 * @param {String} event Name of the event.
 * @param {Functon} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @returns {Ultron}
 * @api public
 */
Ultron.prototype.on = function on(event, fn, context) {
  fn.__ultron = this.id;
  this.ee.on(event, fn, context);

  return this;
};
/**
 * Add an EventListener that's only called once.
 *
 * @param {String} event Name of the event.
 * @param {Function} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @returns {Ultron}
 * @api public
 */
Ultron.prototype.once = function once(event, fn, context) {
  fn.__ultron = this.id;
  this.ee.once(event, fn, context);

  return this;
};

/**
 * Remove the listeners we assigned for the given event.
 *
 * @returns {Ultron}
 * @api public
 */
Ultron.prototype.remove = function remove() {
  var args = arguments
    , ee = this.ee
    , event;

  //
  // When no event names are provided we assume that we need to clear all the
  // events that were assigned through us.
  //
  if (args.length === 1 && 'string' === typeof args[0]) {
    args = args[0].split(/[, ]+/);
  } else if (!args.length) {
    if (ee.eventNames) {
      args = ee.eventNames();
    } else if (ee._events) {
      args = [];

      for (event in ee._events) {
        if (has.call(ee._events, event)) args.push(event);
      }

      if (Object.getOwnPropertySymbols) {
        args = args.concat(Object.getOwnPropertySymbols(ee._events));
      }
    }
  }

  for (var i = 0; i < args.length; i++) {
    var listeners = ee.listeners(args[i]);

    for (var j = 0; j < listeners.length; j++) {
      event = listeners[j];

      //
      // Once listeners have a `listener` property that stores the real listener
      // in the EventEmitter that ships with Node.js.
      //
      if (event.listener) {
        if (event.listener.__ultron !== this.id) continue;
        delete event.listener.__ultron;
      } else {
        if (event.__ultron !== this.id) continue;
        delete event.__ultron;
      }

      ee.removeListener(args[i], event);
    }
  }

  return this;
};

/**
 * Destroy the Ultron instance, remove all listeners and release all references.
 *
 * @returns {Boolean}
 * @api public
 */
Ultron.prototype.destroy = function destroy() {
  if (!this.ee) return false;

  this.remove();
  this.ee = null;

  return true;
};

//
// Expose the module.
//
module.exports = Ultron;

},{}],165:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var punycode = require('punycode');
var util = require('./util');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

},{"./util":166,"punycode":132,"querystring":135}],166:[function(require,module,exports){
'use strict';

module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

},{}],167:[function(require,module,exports){
(function (Buffer){
/*!
 * UTF-8 validate: UTF-8 validation for WebSockets.
 * Copyright(c) 2015 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

'use strict';

/**
 * Checks if a given buffer contains only correct UTF-8.
 * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by
 * Markus Kuhn.
 *
 * @param {Buffer} buf The buffer to check
 * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`
 * @public
 */
const isValidUTF8 = (buf) => {
  if (!Buffer.isBuffer(buf)) {
    throw new TypeError('First argument needs to be a buffer');
  }

  var len = buf.length;
  var i = 0;

  while (i < len) {
    if (buf[i] < 0x80) {  // 0xxxxxxx
      i++;
    } else if ((buf[i] & 0xe0) === 0xc0) {  // 110xxxxx 10xxxxxx
      if (
        i + 1 === len ||
        (buf[i + 1] & 0xc0) !== 0x80 ||
        (buf[i] & 0xfe) === 0xc0  // overlong
      ) {
        return false;
      } else {
        i += 2;
      }
    } else if ((buf[i] & 0xf0) === 0xe0) {  // 1110xxxx 10xxxxxx 10xxxxxx
      if (
        i + 2 >= len ||
        (buf[i + 1] & 0xc0) !== 0x80 ||
        (buf[i + 2] & 0xc0) !== 0x80 ||
        buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80 ||  // overlong
        buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0     // surrogate (U+D800 - U+DFFF)
      ) {
        return false;
      } else {
        i += 3;
      }
    } else if ((buf[i] & 0xf8) === 0xf0) {  // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
      if (
        i + 3 >= len ||
        (buf[i + 1] & 0xc0) !== 0x80 ||
        (buf[i + 2] & 0xc0) !== 0x80 ||
        (buf[i + 3] & 0xc0) !== 0x80 ||
        buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80 ||  // overlong
        buf[i] === 0xf4 && buf[i + 1] > 0x8f || buf[i] > 0xf4  // > U+10FFFF
      ) {
        return false;
      } else {
        i += 4;
      }
    } else {
      return false;
    }
  }

  return true;
};

module.exports = isValidUTF8;

}).call(this,{"isBuffer":require("../is-buffer/index.js")})
},{"../is-buffer/index.js":102}],168:[function(require,module,exports){
'use strict';

try {
  module.exports = require('bindings')('validation');
} catch (e) {
  module.exports = require('./fallback');
}

},{"./fallback":167,"bindings":18}],169:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],170:[function(require,module,exports){
arguments[4][101][0].apply(exports,arguments)
},{"dup":101}],171:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],172:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":171,"_process":125,"inherits":170}],173:[function(require,module,exports){
var indexOf = require('indexof');

var Object_keys = function (obj) {
    if (Object.keys) return Object.keys(obj)
    else {
        var res = [];
        for (var key in obj) res.push(key)
        return res;
    }
};

var forEach = function (xs, fn) {
    if (xs.forEach) return xs.forEach(fn)
    else for (var i = 0; i < xs.length; i++) {
        fn(xs[i], i, xs);
    }
};

var defineProp = (function() {
    try {
        Object.defineProperty({}, '_', {});
        return function(obj, name, value) {
            Object.defineProperty(obj, name, {
                writable: true,
                enumerable: false,
                configurable: true,
                value: value
            })
        };
    } catch(e) {
        return function(obj, name, value) {
            obj[name] = value;
        };
    }
}());

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}
Context.prototype = {};

var Script = exports.Script = function NodeScript (code) {
    if (!(this instanceof Script)) return new Script(code);
    this.code = code;
};

Script.prototype.runInContext = function (context) {
    if (!(context instanceof Context)) {
        throw new TypeError("needs a 'context' argument.");
    }
    
    var iframe = document.createElement('iframe');
    if (!iframe.style) iframe.style = {};
    iframe.style.display = 'none';
    
    document.body.appendChild(iframe);
    
    var win = iframe.contentWindow;
    var wEval = win.eval, wExecScript = win.execScript;

    if (!wEval && wExecScript) {
        // win.eval() magically appears when this is called in IE:
        wExecScript.call(win, 'null');
        wEval = win.eval;
    }
    
    forEach(Object_keys(context), function (key) {
        win[key] = context[key];
    });
    forEach(globals, function (key) {
        if (context[key]) {
            win[key] = context[key];
        }
    });
    
    var winKeys = Object_keys(win);

    var res = wEval.call(win, this.code);
    
    forEach(Object_keys(win), function (key) {
        // Avoid copying circular objects like `top` and `window` by only
        // updating existing context properties or new properties in the `win`
        // that was only introduced after the eval.
        if (key in context || indexOf(winKeys, key) === -1) {
            context[key] = win[key];
        }
    });

    forEach(globals, function (key) {
        if (!(key in context)) {
            defineProp(context, key, win[key]);
        }
    });
    
    document.body.removeChild(iframe);
    
    return res;
};

Script.prototype.runInThisContext = function () {
    return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
    var ctx = Script.createContext(context);
    var res = this.runInContext(ctx);

    forEach(Object_keys(ctx), function (key) {
        context[key] = ctx[key];
    });

    return res;
};

forEach(Object_keys(Script.prototype), function (name) {
    exports[name] = Script[name] = function (code) {
        var s = Script(code);
        return s[name].apply(s, [].slice.call(arguments, 1));
    };
});

exports.createScript = function (code) {
    return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
    var copy = new Context();
    if(typeof context === 'object') {
        forEach(Object_keys(context), function (key) {
            copy[key] = context[key];
        });
    }
    return copy;
};

},{"indexof":100}],174:[function(require,module,exports){
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

'use strict';

const WebSocket = require('./lib/WebSocket');

WebSocket.Server = require('./lib/WebSocketServer');
WebSocket.Receiver = require('./lib/Receiver');
WebSocket.Sender = require('./lib/Sender');

module.exports = WebSocket;

},{"./lib/Receiver":181,"./lib/Sender":182,"./lib/WebSocket":185,"./lib/WebSocketServer":186}],175:[function(require,module,exports){
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

'use strict';

/**
 * Merges an array of buffers into a target buffer.
 *
 * @param {Buffer} target The target buffer
 * @param {Buffer[]} buffers The array of buffers to merge
 * @public
 */
const merge = (target, buffers) => {
  var offset = 0;
  for (var i = 0; i < buffers.length; i++) {
    const buf = buffers[i];
    buf.copy(target, offset);
    offset += buf.length;
  }
};

/**
 * Masks a buffer using the given mask.
 *
 * @param {Buffer} source The buffer to mask
 * @param {Buffer} mask The mask to use
 * @param {Buffer} output The buffer where to store the result
 * @param {Number} offset The offset at which to start writing
 * @param {Number} length The number of bytes to mask.
 * @public
 */
const mask = (source, mask, output, offset, length) => {
  for (var i = 0; i < length; i++) {
    output[offset + i] = source[i] ^ mask[i & 3];
  }
};

/**
 * Unmasks a buffer using the given mask.
 *
 * @param {Buffer} buffer The buffer to unmask
 * @param {Buffer} mask The mask to use
 * @public
 */
const unmask = (buffer, mask) => {
  // Required until https://github.com/nodejs/node/issues/9006 is resolved.
  const length = buffer.length;
  for (var i = 0; i < length; i++) {
    buffer[i] ^= mask[i & 3];
  }
};

module.exports = { merge, mask, unmask };

},{}],176:[function(require,module,exports){
'use strict';

/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

try {
  const bufferUtil = require('bufferutil');

  module.exports = bufferUtil.BufferUtil || bufferUtil;
} catch (e) {
  module.exports = require('./BufferUtil.fallback');
}

},{"./BufferUtil.fallback":175,"bufferutil":53}],177:[function(require,module,exports){
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

'use strict';

module.exports = {
  isValidErrorCode: function (code) {
    return (code >= 1000 && code <= 1013 && code !== 1004 && code !== 1005 && code !== 1006) ||
      (code >= 3000 && code <= 4999);
  },
  1000: 'normal',
  1001: 'going away',
  1002: 'protocol error',
  1003: 'unsupported data',
  1004: 'reserved',
  1005: 'reserved for extensions',
  1006: 'reserved for extensions',
  1007: 'inconsistent or invalid data',
  1008: 'policy violation',
  1009: 'message too big',
  1010: 'extension handshake missing',
  1011: 'an unexpected condition prevented the request from being fulfilled',
  1012: 'service restart',
  1013: 'try again later'
};

},{}],178:[function(require,module,exports){
'use strict';

/**
 * Class representing an event.
 *
 * @private
 */
class Event {
  /**
   * Create a new `Event`.
   *
   * @param {String} type The name of the event
   * @param {Object} target A reference to the target to which the event was dispatched
   */
  constructor (type, target) {
    this.target = target;
    this.type = type;
  }
}

/**
 * Class representing a message event.
 *
 * @extends Event
 * @private
 */
class MessageEvent extends Event {
  /**
   * Create a new `MessageEvent`.
   *
   * @param {(String|Buffer|ArrayBuffer)} data The received data
   * @param {Boolean} isBinary Specifies if `data` is binary
   * @param {WebSocket} target A reference to the target to which the event was dispatched
   */
  constructor (data, isBinary, target) {
    super('message', target);

    this.binary = isBinary; // non-standard.
    this.data = data;
  }
}

/**
 * Class representing a close event.
 *
 * @extends Event
 * @private
 */
class CloseEvent extends Event {
  /**
   * Create a new `CloseEvent`.
   *
   * @param {Number} code The status code explaining why the connection is being closed
   * @param {String} reason A human-readable string explaining why the connection is closing
   * @param {WebSocket} target A reference to the target to which the event was dispatched
   */
  constructor (code, reason, target) {
    super('close', target);

    this.wasClean = code === undefined || code === 1000;
    this.reason = reason;
    this.target = target;
    this.type = 'close';
    this.code = code;
  }
}

/**
 * Class representing an open event.
 *
 * @extends Event
 * @private
 */
class OpenEvent extends Event {
  /**
   * Create a new `OpenEvent`.
   *
   * @param {WebSocket} target A reference to the target to which the event was dispatched
   */
  constructor (target) {
    super('open', target);
  }
}

/**
 * This provides methods for emulating the `EventTarget` interface. It's not
 * meant to be used directly.
 *
 * @mixin
 */
const EventTarget = {
  /**
   * Register an event listener.
   *
   * @param {String} method A string representing the event type to listen for
   * @param {Function} listener The listener to add
   * @public
   */
  addEventListener (method, listener) {
    if (typeof listener !== 'function') return;

    function onMessage (data, flags) {
      if (flags.binary && this.binaryType === 'arraybuffer') {
        data = new Uint8Array(data).buffer;
      }
      listener.call(this, new MessageEvent(data, !!flags.binary, this));
    }

    function onClose (code, message) {
      listener.call(this, new CloseEvent(code, message, this));
    }

    function onError (event) {
      event.type = 'error';
      event.target = this;
      listener.call(this, event);
    }

    function onOpen () {
      listener.call(this, new OpenEvent(this));
    }

    if (method === 'message') {
      onMessage._listener = listener;
      this.on(method, onMessage);
    } else if (method === 'close') {
      onClose._listener = listener;
      this.on(method, onClose);
    } else if (method === 'error') {
      onError._listener = listener;
      this.on(method, onError);
    } else if (method === 'open') {
      onOpen._listener = listener;
      this.on(method, onOpen);
    } else {
      this.on(method, listener);
    }
  },

  /**
   * Remove an event listener.
   *
   * @param {String} method A string representing the event type to remove
   * @param {Function} listener The listener to remove
   * @public
   */
  removeEventListener (method, listener) {
    const listeners = this.listeners(method);

    for (var i = 0; i < listeners.length; i++) {
      if (listeners[i] === listener || listeners[i]._listener === listener) {
        this.removeListener(method, listeners[i]);
      }
    }
  }
};

module.exports = EventTarget;

},{}],179:[function(require,module,exports){
'use strict';

/**
 * Module exports.
 */

exports.parse = parse;
exports.format = format;

/**
 * Parse extensions header value
 */

function parse (value) {
  value = value || '';

  var extensions = {};

  value.split(',').forEach(function (v) {
    var params = v.split(';');
    var token = params.shift().trim();
    var paramsList = extensions[token] = extensions[token] || [];
    var parsedParams = {};

    params.forEach(function (param) {
      var parts = param.trim().split('=');
      var key = parts[0];
      var value = parts[1];
      if (value === undefined) {
        value = true;
      } else {
        // unquote value
        if (value[0] === '"') {
          value = value.slice(1);
        }
        if (value[value.length - 1] === '"') {
          value = value.slice(0, value.length - 1);
        }
      }
      (parsedParams[key] = parsedParams[key] || []).push(value);
    });

    paramsList.push(parsedParams);
  });

  return extensions;
}

/**
 * Format extensions header value
 */

function format (value) {
  return Object.keys(value).map(function (token) {
    var paramsList = value[token];
    if (!Array.isArray(paramsList)) {
      paramsList = [paramsList];
    }
    return paramsList.map(function (params) {
      return [token].concat(Object.keys(params).map(function (k) {
        var p = params[k];
        if (!Array.isArray(p)) p = [p];
        return p.map(function (v) {
          return v === true ? k : k + '=' + v;
        }).join('; ');
      })).join('; ');
    }).join(', ');
  }).join(', ');
}

},{}],180:[function(require,module,exports){
(function (Buffer){
'use strict';

const zlib = require('zlib');

const AVAILABLE_WINDOW_BITS = [8, 9, 10, 11, 12, 13, 14, 15];
const DEFAULT_WINDOW_BITS = 15;
const DEFAULT_MEM_LEVEL = 8;
const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
const EMPTY_BLOCK = Buffer.from([0x00]);

/**
 * Per-message Compression Extensions implementation
 */
class PerMessageDeflate {
  constructor (options, isServer, maxPayload) {
    this._options = options || {};
    this._isServer = !!isServer;
    this._inflate = null;
    this._deflate = null;
    this.params = null;
    this._maxPayload = maxPayload || 0;
    this.threshold = this._options.threshold === undefined ? 1024 : this._options.threshold;
  }

  /**
   * Create extension parameters offer
   *
   * @api public
   */

  offer () {
    var params = {};
    if (this._options.serverNoContextTakeover) {
      params.server_no_context_takeover = true;
    }
    if (this._options.clientNoContextTakeover) {
      params.client_no_context_takeover = true;
    }
    if (this._options.serverMaxWindowBits) {
      params.server_max_window_bits = this._options.serverMaxWindowBits;
    }
    if (this._options.clientMaxWindowBits) {
      params.client_max_window_bits = this._options.clientMaxWindowBits;
    } else if (this._options.clientMaxWindowBits == null) {
      params.client_max_window_bits = true;
    }
    return params;
  }

  /**
   * Accept extension offer
   *
   * @api public
   */
  accept (paramsList) {
    paramsList = this.normalizeParams(paramsList);

    var params;
    if (this._isServer) {
      params = this.acceptAsServer(paramsList);
    } else {
      params = this.acceptAsClient(paramsList);
    }

    this.params = params;
    return params;
  }

  /**
   * Releases all resources used by the extension
   *
   * @api public
   */
  cleanup () {
    if (this._inflate) {
      if (this._inflate.writeInProgress) {
        this._inflate.pendingClose = true;
      } else {
        this._inflate.close();
        this._inflate = null;
      }
    }
    if (this._deflate) {
      if (this._deflate.writeInProgress) {
        this._deflate.pendingClose = true;
      } else {
        this._deflate.close();
        this._deflate = null;
      }
    }
  }

  /**
   * Accept extension offer from client
   *
   * @api private
   */

  acceptAsServer (paramsList) {
    var accepted = {};
    var result = paramsList.some((params) => {
      accepted = {};
      if (this._options.serverNoContextTakeover === false && params.server_no_context_takeover) {
        return;
      }
      if (this._options.serverMaxWindowBits === false && params.server_max_window_bits) {
        return;
      }
      if (typeof this._options.serverMaxWindowBits === 'number' &&
          typeof params.server_max_window_bits === 'number' &&
          this._options.serverMaxWindowBits > params.server_max_window_bits) {
        return;
      }
      if (typeof this._options.clientMaxWindowBits === 'number' && !params.client_max_window_bits) {
        return;
      }

      if (this._options.serverNoContextTakeover || params.server_no_context_takeover) {
        accepted.server_no_context_takeover = true;
      }
      if (this._options.clientNoContextTakeover) {
        accepted.client_no_context_takeover = true;
      }
      if (this._options.clientNoContextTakeover !== false && params.client_no_context_takeover) {
        accepted.client_no_context_takeover = true;
      }
      if (typeof this._options.serverMaxWindowBits === 'number') {
        accepted.server_max_window_bits = this._options.serverMaxWindowBits;
      } else if (typeof params.server_max_window_bits === 'number') {
        accepted.server_max_window_bits = params.server_max_window_bits;
      }
      if (typeof this._options.clientMaxWindowBits === 'number') {
        accepted.client_max_window_bits = this._options.clientMaxWindowBits;
      } else if (this._options.clientMaxWindowBits !== false && typeof params.client_max_window_bits === 'number') {
        accepted.client_max_window_bits = params.client_max_window_bits;
      }
      return true;
    });

    if (!result) {
      throw new Error(`Doesn't support the offered configuration`);
    }

    return accepted;
  }

  /**
   * Accept extension response from server
   *
   * @api privaye
   */

  acceptAsClient (paramsList) {
    var params = paramsList[0];
    if (this._options.clientNoContextTakeover != null) {
      if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
        throw new Error('Invalid value for "client_no_context_takeover"');
      }
    }
    if (this._options.clientMaxWindowBits != null) {
      if (this._options.clientMaxWindowBits === false && params.client_max_window_bits) {
        throw new Error('Invalid value for "client_max_window_bits"');
      }
      if (typeof this._options.clientMaxWindowBits === 'number' &&
          (!params.client_max_window_bits || params.client_max_window_bits > this._options.clientMaxWindowBits)) {
        throw new Error('Invalid value for "client_max_window_bits"');
      }
    }
    return params;
  }

  /**
   * Normalize extensions parameters
   *
   * @api private
   */

  normalizeParams (paramsList) {
    return paramsList.map((params) => {
      Object.keys(params).forEach((key) => {
        var value = params[key];
        if (value.length > 1) {
          throw new Error('Multiple extension parameters for ' + key);
        }

        value = value[0];

        switch (key) {
          case 'server_no_context_takeover':
          case 'client_no_context_takeover':
            if (value !== true) {
              throw new Error(`invalid extension parameter value for ${key} (${value})`);
            }
            params[key] = true;
            break;
          case 'server_max_window_bits':
          case 'client_max_window_bits':
            if (typeof value === 'string') {
              value = parseInt(value, 10);
              if (!~AVAILABLE_WINDOW_BITS.indexOf(value)) {
                throw new Error(`invalid extension parameter value for ${key} (${value})`);
              }
            }
            if (!this._isServer && value === true) {
              throw new Error(`Missing extension parameter value for ${key}`);
            }
            params[key] = value;
            break;
          default:
            throw new Error(`Not defined extension parameter (${key})`);
        }
      });
      return params;
    });
  }

  /**
   * Decompress data.
   *
   * @param {Buffer} data Compressed data
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @public
   */
  decompress (data, fin, callback) {
    const endpoint = this._isServer ? 'client' : 'server';

    if (!this._inflate) {
      const maxWindowBits = this.params[`${endpoint}_max_window_bits`];
      this._inflate = zlib.createInflateRaw({
        windowBits: typeof maxWindowBits === 'number' ? maxWindowBits : DEFAULT_WINDOW_BITS
      });
    }
    this._inflate.writeInProgress = true;

    var totalLength = 0;
    const buffers = [];
    var err;

    const onData = (data) => {
      totalLength += data.length;
      if (this._maxPayload < 1 || totalLength <= this._maxPayload) {
        return buffers.push(data);
      }

      err = new Error('max payload size exceeded');
      err.closeCode = 1009;
      this._inflate.reset();
    };

    const onError = (err) => {
      cleanup();
      callback(err);
    };

    const cleanup = () => {
      if (!this._inflate) return;

      this._inflate.removeListener('error', onError);
      this._inflate.removeListener('data', onData);
      this._inflate.writeInProgress = false;

      if (
        fin && this.params[`${endpoint}_no_context_takeover`] ||
        this._inflate.pendingClose
      ) {
        this._inflate.close();
        this._inflate = null;
      }
    };

    this._inflate.on('error', onError).on('data', onData);
    this._inflate.write(data);
    if (fin) this._inflate.write(TRAILER);

    this._inflate.flush(() => {
      cleanup();
      if (err) callback(err);
      else callback(null, Buffer.concat(buffers, totalLength));
    });
  }

  /**
   * Compress message
   *
   * @api public
   */

  compress (data, fin, callback) {
    if (!data || data.length === 0) {
      return callback(null, EMPTY_BLOCK);
    }

    var endpoint = this._isServer ? 'server' : 'client';

    if (!this._deflate) {
      var maxWindowBits = this.params[endpoint + '_max_window_bits'];
      this._deflate = zlib.createDeflateRaw({
        flush: zlib.Z_SYNC_FLUSH,
        windowBits: typeof maxWindowBits === 'number' ? maxWindowBits : DEFAULT_WINDOW_BITS,
        memLevel: this._options.memLevel || DEFAULT_MEM_LEVEL
      });
    }
    this._deflate.writeInProgress = true;

    const buffers = [];

    const onData = (data) => buffers.push(data);
    const onError = (err) => {
      cleanup();
      callback(err);
    };
    const cleanup = () => {
      if (!this._deflate) return;
      this._deflate.removeListener('error', onError);
      this._deflate.removeListener('data', onData);
      this._deflate.writeInProgress = false;
      if ((fin && this.params[endpoint + '_no_context_takeover']) || this._deflate.pendingClose) {
        this._deflate.close();
        this._deflate = null;
      }
    };

    this._deflate.on('error', onError).on('data', onData);
    this._deflate.write(data);
    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
      cleanup();
      var data = Buffer.concat(buffers);
      if (fin) {
        data = data.slice(0, data.length - 4);
      }
      callback(null, data);
    });
  }
}

PerMessageDeflate.extensionName = 'permessage-deflate';

module.exports = PerMessageDeflate;

}).call(this,require("buffer").Buffer)
},{"buffer":51,"zlib":47}],181:[function(require,module,exports){
(function (Buffer){
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

'use strict';

const PerMessageDeflate = require('./PerMessageDeflate');
const isValidUTF8 = require('./Validation');
const bufferUtil = require('./BufferUtil');
const ErrorCodes = require('./ErrorCodes');

const EMPTY_BUFFER = Buffer.alloc(0);

const GET_INFO = 0;
const GET_PAYLOAD_LENGTH_16 = 1;
const GET_PAYLOAD_LENGTH_64 = 2;
const HAVE_LENGTH = 3;
const GET_MASK = 4;
const GET_DATA = 5;
const HANDLE_DATA = 6;
const INFLATING = 7;

/**
 * HyBi Receiver implementation.
 */
class Receiver {
  /**
   * Creates a Receiver instance.
   *
   * @param {Object} extensions An object containing the negotiated extensions
   * @param {Number} maxPayload The maximum allowed message length
   */
  constructor (extensions, maxPayload) {
    this.extensions = extensions || {};
    this.maxPayload = maxPayload | 0;

    this.bufferedBytes = 0;
    this.buffers = [];

    this.compressed = false;
    this.payloadLength = 0;
    this.fragmented = 0;
    this.masked = false;
    this.fin = false;
    this.mask = null;
    this.opcode = 0;

    this.totalPayloadLength = 0;
    this.messageLength = 0;
    this.fragments = [];

    this.cleanupCallback = null;
    this.hadError = false;
    this.dead = false;

    this.onmessage = null;
    this.onclose = null;
    this.onerror = null;
    this.onping = null;
    this.onpong = null;

    this.state = GET_INFO;
  }

  /**
   * Consumes bytes from the available buffered data.
   *
   * @param {Number} bytes The number of bytes to consume
   * @return {Buffer} Consumed bytes
   * @private
   */
  readBuffer (bytes) {
    var offset = 0;
    var dst;
    var l;

    this.bufferedBytes -= bytes;

    if (bytes === this.buffers[0].length) return this.buffers.shift();

    if (bytes < this.buffers[0].length) {
      dst = this.buffers[0].slice(0, bytes);
      this.buffers[0] = this.buffers[0].slice(bytes);
      return dst;
    }

    dst = new Buffer(bytes);

    while (bytes > 0) {
      l = this.buffers[0].length;

      if (bytes >= l) {
        this.buffers[0].copy(dst, offset);
        offset += l;
        this.buffers.shift();
      } else {
        this.buffers[0].copy(dst, offset, 0, bytes);
        this.buffers[0] = this.buffers[0].slice(bytes);
      }

      bytes -= l;
    }

    return dst;
  }

  /**
   * Checks if the number of buffered bytes is bigger or equal than `n` and
   * calls `cleanup` if necessary.
   *
   * @param {Number} n The number of bytes to check against
   * @return {Boolean} `true` if `bufferedBytes >= n`, else `false`
   * @private
   */
  hasBufferedBytes (n) {
    if (this.bufferedBytes >= n) return true;

    if (this.dead) this.cleanup(this.cleanupCallback);
    return false;
  }

  /**
   * Adds new data to the parser.
   *
   * @public
   */
  add (data) {
    if (this.dead) return;

    this.bufferedBytes += data.length;
    this.buffers.push(data);
    this.startLoop();
  }

  /**
   * Starts the parsing loop.
   *
   * @private
   */
  startLoop () {
    while (true) {
      if (this.state === GET_INFO) {
        if (!this.getInfo()) break;
      } else if (this.state === GET_PAYLOAD_LENGTH_16) {
        if (!this.getPayloadLength16()) break;
      } else if (this.state === GET_PAYLOAD_LENGTH_64) {
        if (!this.getPayloadLength64()) break;
      } else if (this.state === HAVE_LENGTH) {
        if (!this.haveLength()) break;
      } else if (this.state === GET_MASK) {
        if (!this.getMask()) break;
      } else if (this.state === GET_DATA) {
        if (!this.getData()) break;
      } else { // `HANDLE_DATA` or `INFLATING`
        break;
      }
    }
  }

  /**
   * Reads the first two bytes of a frame.
   *
   * @return {Boolean} `true` if the operation is successful, else `false`
   * @private
   */
  getInfo () {
    if (!this.hasBufferedBytes(2)) return false;

    const buf = this.readBuffer(2);

    if ((buf[0] & 0x30) !== 0x00) {
      this.error(new Error('RSV2 and RSV3 must be clear'), 1002);
      return false;
    }

    const compressed = (buf[0] & 0x40) === 0x40;

    if (compressed && !this.extensions[PerMessageDeflate.extensionName]) {
      this.error(new Error('RSV1 must be clear'), 1002);
      return false;
    }

    this.fin = (buf[0] & 0x80) === 0x80;
    this.opcode = buf[0] & 0x0f;
    this.payloadLength = buf[1] & 0x7f;

    if (this.opcode === 0x00) {
      if (compressed) {
        this.error(new Error('RSV1 must be clear'), 1002);
        return false;
      }

      if (!this.fragmented) {
        this.error(new Error(`invalid opcode: ${this.opcode}`), 1002);
        return false;
      } else {
        this.opcode = this.fragmented;
      }
    } else if (this.opcode === 0x01 || this.opcode === 0x02) {
      if (this.fragmented) {
        this.error(new Error(`invalid opcode: ${this.opcode}`), 1002);
        return false;
      }

      this.compressed = compressed;
    } else if (this.opcode > 0x07 && this.opcode < 0x0b) {
      if (!this.fin) {
        this.error(new Error('FIN must be set'), 1002);
        return false;
      }

      if (compressed) {
        this.error(new Error('RSV1 must be clear'), 1002);
        return false;
      }

      if (this.payloadLength > 0x7d) {
        this.error(new Error('invalid payload length'), 1002);
        return false;
      }
    } else {
      this.error(new Error(`invalid opcode: ${this.opcode}`), 1002);
      return false;
    }

    if (!this.fin && !this.fragmented) this.fragmented = this.opcode;

    this.masked = (buf[1] & 0x80) === 0x80;

    if (this.payloadLength === 126) this.state = GET_PAYLOAD_LENGTH_16;
    else if (this.payloadLength === 127) this.state = GET_PAYLOAD_LENGTH_64;
    else this.state = HAVE_LENGTH;

    return true;
  }

  /**
   * Gets extended payload length (7+16).
   *
   * @return {Boolean} `true` if payload length has been read, else `false`
   * @private
   */
  getPayloadLength16 () {
    if (!this.hasBufferedBytes(2)) return false;

    this.payloadLength = this.readBuffer(2).readUInt16BE(0, true);
    this.state = HAVE_LENGTH;
    return true;
  }

  /**
   * Gets extended payload length (7+64).
   *
   * @return {Boolean} `true` if payload length has been read, else `false`
   * @private
   */
  getPayloadLength64 () {
    if (!this.hasBufferedBytes(8)) return false;

    const buf = this.readBuffer(8);
    const num = buf.readUInt32BE(0, true);

    //
    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
    // if payload length is greater than this number.
    //
    if (num > Math.pow(2, 53 - 32) - 1) {
      this.error(new Error('max payload size exceeded'), 1009);
      return false;
    }

    this.payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4, true);
    this.state = HAVE_LENGTH;
    return true;
  }

  /**
   * Payload length has been read.
   *
   * @return {Boolean} `false` if payload length exceeds `maxPayload`, else `true`
   * @private
   */
  haveLength () {
    if (this.opcode < 0x08 && this.maxPayloadExceeded(this.payloadLength)) {
      return false;
    }

    if (this.masked) this.state = GET_MASK;
    else this.state = GET_DATA;
    return true;
  }

  /**
   * Reads mask bytes.
   *
   * @return {Boolean} `true` if the mask has been read, else `false`
   * @private
   */
  getMask () {
    if (!this.hasBufferedBytes(4)) return false;

    this.mask = this.readBuffer(4);
    this.state = GET_DATA;
    return true;
  }

  /**
   * Reads data bytes.
   *
   * @return {Boolean} `true` if the data bytes have been read, else `false`
   * @private
   */
  getData () {
    var data = EMPTY_BUFFER;

    if (this.payloadLength) {
      if (!this.hasBufferedBytes(this.payloadLength)) return false;

      data = this.readBuffer(this.payloadLength);
      if (this.masked) bufferUtil.unmask(data, this.mask);
    }

    this.state = HANDLE_DATA;

    if (this.opcode > 0x07) {
      this.controlMessage(data);
    } else if (this.compressed) {
      this.state = INFLATING;
      this.decompress(data);
    } else if (this.pushFragment(data)) {
      this.dataMessage();
    }

    return true;
  }

  /**
   * Decompresses data.
   *
   * @param {Buffer} data Compressed data
   * @private
   */
  decompress (data) {
    const extension = this.extensions[PerMessageDeflate.extensionName];

    extension.decompress(data, this.fin, (err, buf) => {
      if (err) {
        this.error(err, err.closeCode === 1009 ? 1009 : 1007);
        return;
      }

      if (this.pushFragment(buf)) this.dataMessage();
      if (this.state === GET_INFO) this.startLoop();
    });
  }

  /**
   * Handles a data message.
   *
   * @private
   */
  dataMessage () {
    if (this.fin) {
      const buf = this.fragments.length > 1
        ? Buffer.concat(this.fragments, this.messageLength)
        : this.fragments.length === 1
          ? this.fragments[0]
          : EMPTY_BUFFER;

      this.totalPayloadLength = 0;
      this.fragments.length = 0;
      this.messageLength = 0;
      this.fragmented = 0;

      if (this.opcode === 2) {
        this.onmessage(buf, { masked: this.masked, binary: true });
      } else {
        if (!isValidUTF8(buf)) {
          this.error(new Error('invalid utf8 sequence'), 1007);
          return;
        }

        this.onmessage(buf.toString(), { masked: this.masked });
      }
    }

    this.state = GET_INFO;
  }

  /**
   * Handles a control message.
   *
   * @param {Buffer} data Data to handle
   * @private
   */
  controlMessage (data) {
    if (this.opcode === 0x08) {
      if (data.length === 0) {
        this.onclose(1000, '', { masked: this.masked });
        this.cleanup(this.cleanupCallback);
      } else if (data.length === 1) {
        this.error(new Error('invalid payload length'), 1002);
      } else {
        const code = data.readUInt16BE(0, true);

        if (!ErrorCodes.isValidErrorCode(code)) {
          this.error(new Error(`invalid status code: ${code}`), 1002);
          return;
        }

        const buf = data.slice(2);

        if (!isValidUTF8(buf)) {
          this.error(new Error('invalid utf8 sequence'), 1007);
          return;
        }

        this.onclose(code, buf.toString(), { masked: this.masked });
        this.cleanup(this.cleanupCallback);
      }

      return;
    }

    const flags = { masked: this.masked, binary: true };

    if (this.opcode === 0x09) this.onping(data, flags);
    else this.onpong(data, flags);

    this.state = GET_INFO;
  }

  /**
   * Handles an error.
   *
   * @param {Error} err The error
   * @param {Number} code Close code
   * @private
   */
  error (err, code) {
    this.onerror(err, code);
    this.hadError = true;
    this.cleanup(this.cleanupCallback);
  }

  /**
   * Checks payload size, disconnects socket when it exceeds `maxPayload`.
   *
   * @param {Number} length Payload length
   * @private
   */
  maxPayloadExceeded (length) {
    if (length === 0 || this.maxPayload < 1) return false;

    const fullLength = this.totalPayloadLength + length;

    if (fullLength <= this.maxPayload) {
      this.totalPayloadLength = fullLength;
      return false;
    }

    this.error(new Error('max payload size exceeded'), 1009);
    return true;
  }

  /**
   * Appends a fragment in the fragments array after checking that the sum of
   * fragment lengths does not exceed `maxPayload`.
   *
   * @param {Buffer} fragment The fragment to add
   * @return {Boolean} `true` if `maxPayload` is not exceeded, else `false`
   * @private
   */
  pushFragment (fragment) {
    if (fragment.length === 0) return true;

    const totalLength = this.messageLength + fragment.length;

    if (this.maxPayload < 1 || totalLength <= this.maxPayload) {
      this.messageLength = totalLength;
      this.fragments.push(fragment);
      return true;
    }

    this.error(new Error('max payload size exceeded'), 1009);
    return false;
  }

  /**
   * Releases resources used by the receiver.
   *
   * @param {Function} cb Callback
   * @public
   */
  cleanup (cb) {
    this.dead = true;

    if (!this.hadError && this.state === INFLATING) {
      this.cleanupCallback = cb;
    } else {
      this.extensions = null;
      this.fragments = null;
      this.buffers = null;
      this.mask = null;

      this.cleanupCallback = null;
      this.onmessage = null;
      this.onclose = null;
      this.onerror = null;
      this.onping = null;
      this.onpong = null;

      if (cb) cb();
    }
  }
}

module.exports = Receiver;

}).call(this,require("buffer").Buffer)
},{"./BufferUtil":176,"./ErrorCodes":177,"./PerMessageDeflate":180,"./Validation":184,"buffer":51}],182:[function(require,module,exports){
(function (process,Buffer){
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

'use strict';

const crypto = require('crypto');

const PerMessageDeflate = require('./PerMessageDeflate');
const bufferUtil = require('./BufferUtil');
const ErrorCodes = require('./ErrorCodes');

/**
 * HyBi Sender implementation.
 */
class Sender {
  /**
   * Creates a Sender instance.
   *
   * @param {net.Socket} socket The connection socket
   * @param {Object} extensions An object containing the negotiated extensions
   */
  constructor (socket, extensions) {
    this.perMessageDeflate = (extensions || {})[PerMessageDeflate.extensionName];
    this._socket = socket;

    this.firstFragment = true;
    this.compress = false;

    this.processing = false;
    this.bufferedBytes = 0;
    this.queue = [];

    this.onerror = null;
  }

  /**
   * Sends a close message to the other peer.
   *
   * @param {(Number|undefined)} code The status code component of the body
   * @param {String} data The message component of the body
   * @param {Boolean} mask Specifies whether or not to mask the message
   * @param {Function} cb Callback
   * @public
   */
  close (code, data, mask, cb) {
    if (code !== undefined && (typeof code !== 'number' || !ErrorCodes.isValidErrorCode(code))) {
      throw new Error('first argument must be a valid error code number');
    }

    const buf = Buffer.allocUnsafe(2 + (data ? Buffer.byteLength(data) : 0));

    buf.writeUInt16BE(code || 1000, 0, true);
    if (buf.length > 2) buf.write(data, 2);

    if (this.perMessageDeflate) {
      this.enqueue([this.doClose, buf, mask, cb]);
    } else {
      this.doClose(buf, mask, cb);
    }
  }

  /**
   * Frames and sends a close message.
   *
   * @param {Buffer} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback
   * @private
   */
  doClose (data, mask, cb) {
    this.frameAndSend(data, {
      readOnly: false,
      opcode: 0x08,
      rsv1: false,
      fin: true,
      mask
    }, cb);

    if (this.perMessageDeflate) this.continue();
  }

  /**
   * Sends a ping message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @public
   */
  ping (data, mask) {
    var readOnly = true;

    if (data && !Buffer.isBuffer(data)) {
      if (data instanceof ArrayBuffer) {
        data = Buffer.from(data);
      } else if (ArrayBuffer.isView(data)) {
        data = viewToBuffer(data);
      } else {
        data = Buffer.from(data);
        readOnly = false;
      }
    }

    if (this.perMessageDeflate) {
      this.enqueue([this.doPing, data, mask, readOnly]);
    } else {
      this.doPing(data, mask, readOnly);
    }
  }

  /**
   * Frames and sends a ping message.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Boolean} readOnly Specifies whether `data` can be modified
   * @private
   */
  doPing (data, mask, readOnly) {
    this.frameAndSend(data, {
      opcode: 0x09,
      rsv1: false,
      fin: true,
      readOnly,
      mask
    });

    if (this.perMessageDeflate) this.continue();
  }

  /**
   * Sends a pong message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @public
   */
  pong (data, mask) {
    var readOnly = true;

    if (data && !Buffer.isBuffer(data)) {
      if (data instanceof ArrayBuffer) {
        data = Buffer.from(data);
      } else if (ArrayBuffer.isView(data)) {
        data = viewToBuffer(data);
      } else {
        data = Buffer.from(data);
        readOnly = false;
      }
    }

    if (this.perMessageDeflate) {
      this.enqueue([this.doPong, data, mask, readOnly]);
    } else {
      this.doPong(data, mask, readOnly);
    }
  }

  /**
   * Frames and sends a pong message.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Boolean} readOnly Specifies whether `data` can be modified
   * @private
   */
  doPong (data, mask, readOnly) {
    this.frameAndSend(data, {
      opcode: 0x0a,
      rsv1: false,
      fin: true,
      readOnly,
      mask
    });

    if (this.perMessageDeflate) this.continue();
  }

  /**
   * Sends a data message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Object} options Options object
   * @param {Boolean} options.compress Specifies whether or not to compress `data`
   * @param {Boolean} options.binary Specifies whether `data` is binary or text
   * @param {Boolean} options.fin Specifies whether the fragment is the last one
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback
   * @public
   */
  send (data, options, cb) {
    var opcode = options.binary ? 2 : 1;
    var rsv1 = options.compress;
    var readOnly = true;

    if (data && !Buffer.isBuffer(data)) {
      if (data instanceof ArrayBuffer) {
        data = Buffer.from(data);
      } else if (ArrayBuffer.isView(data)) {
        data = viewToBuffer(data);
      } else {
        data = Buffer.from(data);
        readOnly = false;
      }
    }

    if (this.firstFragment) {
      this.firstFragment = false;
      if (rsv1 && data && this.perMessageDeflate) {
        rsv1 = data.length >= this.perMessageDeflate.threshold;
      }
      this.compress = rsv1;
    } else {
      rsv1 = false;
      opcode = 0;
    }

    if (options.fin) this.firstFragment = true;

    if (this.perMessageDeflate) {
      this.enqueue([this.dispatch, data, {
        compress: this.compress,
        mask: options.mask,
        fin: options.fin,
        readOnly,
        opcode,
        rsv1
      }, cb]);
    } else {
      this.frameAndSend(data, {
        mask: options.mask,
        fin: options.fin,
        rsv1: false,
        readOnly,
        opcode
      }, cb);
    }
  }

  /**
   * Dispatches a data message.
   *
   * @param {Buffer} data The message to send
   * @param {Object} options Options object
   * @param {Number} options.opcode The opcode
   * @param {Boolean} options.readOnly Specifies whether `data` can be modified
   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit
   * @param {Boolean} options.compress Specifies whether or not to compress `data`
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit
   * @param {Function} cb Callback
   * @private
   */
  dispatch (data, options, cb) {
    if (!options.compress) {
      this.frameAndSend(data, options, cb);
      this.continue();
      return;
    }

    this.perMessageDeflate.compress(data, options.fin, (err, buf) => {
      if (err) {
        if (cb) cb(err);
        else this.onerror(err);
        return;
      }

      options.readOnly = false;
      this.frameAndSend(buf, options, cb);
      this.continue();
    });
  }

  /**
   * Frames and sends a piece of data according to the HyBi WebSocket protocol.
   *
   * @param {Buffer} data The data to send
   * @param {Object} options Options object
   * @param {Number} options.opcode The opcode
   * @param {Boolean} options.readOnly Specifies whether `data` can be modified
   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit
   * @param {Function} cb Callback
   * @private
   */
  frameAndSend (data, options, cb) {
    if (!data) {
      const bytes = [options.opcode, 0];

      if (options.fin) bytes[0] |= 0x80;
      if (options.mask) {
        bytes[1] |= 0x80;
        bytes.push(0, 0, 0, 0);
      }

      sendFramedData(this, Buffer.from(bytes), null, cb);
      return;
    }

    const mergeBuffers = data.length < 1024 || options.mask && options.readOnly;
    var dataOffset = options.mask ? 6 : 2;
    var payloadLength = data.length;

    if (data.length >= 65536) {
      dataOffset += 8;
      payloadLength = 127;
    } else if (data.length > 125) {
      dataOffset += 2;
      payloadLength = 126;
    }

    const outputBuffer = Buffer.allocUnsafe(
      mergeBuffers ? data.length + dataOffset : dataOffset
    );

    outputBuffer[0] = options.fin ? options.opcode | 0x80 : options.opcode;
    if (options.rsv1) outputBuffer[0] |= 0x40;

    if (payloadLength === 126) {
      outputBuffer.writeUInt16BE(data.length, 2, true);
    } else if (payloadLength === 127) {
      outputBuffer.writeUInt32BE(0, 2, true);
      outputBuffer.writeUInt32BE(data.length, 6, true);
    }

    if (options.mask) {
      const mask = getRandomMask();

      outputBuffer[1] = payloadLength | 0x80;
      outputBuffer[dataOffset - 4] = mask[0];
      outputBuffer[dataOffset - 3] = mask[1];
      outputBuffer[dataOffset - 2] = mask[2];
      outputBuffer[dataOffset - 1] = mask[3];

      if (mergeBuffers) {
        bufferUtil.mask(data, mask, outputBuffer, dataOffset, data.length);
      } else {
        bufferUtil.mask(data, mask, data, 0, data.length);
      }
    } else {
      outputBuffer[1] = payloadLength;
      if (mergeBuffers) data.copy(outputBuffer, dataOffset);
    }

    sendFramedData(this, outputBuffer, mergeBuffers ? null : data, cb);
  }

  /**
   * Executes a queued send operation.
   *
   * @private
   */
  dequeue () {
    if (this.processing) return;

    const params = this.queue.shift();
    if (!params) return;

    if (params[1]) this.bufferedBytes -= params[1].length;
    this.processing = true;

    params[0].apply(this, params.slice(1));
  }

  /**
   * Signals the completion of a send operation.
   *
   * @private
   */
  continue () {
    process.nextTick(() => {
      this.processing = false;
      this.dequeue();
    });
  }

  /**
   * Enqueues a send operation.
   *
   * @param {Array} params Send operation parameters.
   * @private
   */
  enqueue (params) {
    if (params[1]) this.bufferedBytes += params[1].length;
    this.queue.push(params);
    this.dequeue();
  }
}

module.exports = Sender;

/**
 * Converts an `ArrayBuffer` view into a buffer.
 *
 * @param {(DataView|TypedArray)} view The view to convert
 * @return {Buffer} Converted view
 * @private
 */
function viewToBuffer (view) {
  const buf = Buffer.from(view.buffer);

  if (view.byteLength !== view.buffer.byteLength) {
    return buf.slice(view.byteOffset, view.byteOffset + view.byteLength);
  }

  return buf;
}

/**
 * Generates a random mask.
 *
 * @return {Buffer} The mask
 * @private
 */
function getRandomMask () {
  return crypto.randomBytes(4);
}

/**
 * Sends a frame.
 *
 * @param {Sender} sender Sender instance
 * @param {Buffer} outputBuffer The data to send
 * @param {Buffer} data Additional data to send if frame is split into two buffers
 * @param {Function} cb Callback
 * @private
 */
function sendFramedData (sender, outputBuffer, data, cb) {
  if (data) {
    sender._socket.write(outputBuffer);
    sender._socket.write(data, cb);
  } else {
    sender._socket.write(outputBuffer, cb);
  }
}

}).call(this,require('_process'),require("buffer").Buffer)
},{"./BufferUtil":176,"./ErrorCodes":177,"./PerMessageDeflate":180,"_process":125,"buffer":51,"crypto":62}],183:[function(require,module,exports){
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

'use strict';

module.exports = () => true;

},{}],184:[function(require,module,exports){
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

'use strict';

try {
  const isValidUTF8 = require('utf-8-validate');

  module.exports = typeof isValidUTF8 === 'object'
    ? isValidUTF8.Validation.isValidUTF8  // utf-8-validate@<3.0.0
    : isValidUTF8;
} catch (e) {
  module.exports = require('./Validation.fallback');
}

},{"./Validation.fallback":183,"utf-8-validate":168}],185:[function(require,module,exports){
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

'use strict';

const EventEmitter = require('events');
const crypto = require('crypto');
const Ultron = require('ultron');
const https = require('https');
const http = require('http');
const url = require('url');

const PerMessageDeflate = require('./PerMessageDeflate');
const EventTarget = require('./EventTarget');
const Extensions = require('./Extensions');
const Receiver = require('./Receiver');
const Sender = require('./Sender');

const GUID = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';
const closeTimeout = 30 * 1000; // Allow 30 seconds to terminate the connection cleanly.
const protocolVersion = 13;
const noop = () => {};

/**
 * Class representing a WebSocket.
 *
 * @extends EventEmitter
 */
class WebSocket extends EventEmitter {
  /**
   * Create a new `WebSocket`.
   *
   * @param {String} address The URL to which to connect
   * @param {(String|String[])} protocols The subprotocols
   * @param {Object} options Connection options
   */
  constructor (address, protocols, options) {
    super();

    if (typeof protocols === 'object' && !Array.isArray(protocols)) {
      options = protocols;
      protocols = null;
    }

    if (typeof protocols === 'string') protocols = [protocols];
    if (!Array.isArray(protocols)) protocols = [];

    this.readyState = WebSocket.CONNECTING;
    this.bytesReceived = 0;
    this.extensions = {};
    this.protocol = '';

    this._finalize = this.finalize.bind(this);
    this._binaryType = 'nodebuffer';
    this._finalizeCalled = false;
    this._closeMessage = null;
    this._closeTimer = null;
    this._closeCode = null;
    this._receiver = null;
    this._sender = null;
    this._socket = null;
    this._ultron = null;

    if (Array.isArray(address)) {
      initAsServerClient.call(this, address[0], address[1], address[2], options);
    } else {
      initAsClient.call(this, address, protocols, options);
    }
  }

  get CONNECTING () { return WebSocket.CONNECTING; }
  get CLOSING () { return WebSocket.CLOSING; }
  get CLOSED () { return WebSocket.CLOSED; }
  get OPEN () { return WebSocket.OPEN; }

  /**
   * @type {Number}
   */
  get bufferedAmount () {
    var amount = 0;

    if (this._socket) {
      amount = this._socket.bufferSize + this._sender.bufferedBytes;
    }
    return amount;
  }

  /**
   * This deviates from the WHATWG interface since ws doesn't support the required
   * default "blob" type (instead we define a custom "nodebuffer" type).
   *
   * @type {String}
   */
  get binaryType () {
    return this._binaryType;
  }

  set binaryType (type) {
    if (type === 'arraybuffer' || type === 'nodebuffer') {
      this._binaryType = type;
    } else {
      throw new SyntaxError('unsupported binaryType: must be either "nodebuffer" or "arraybuffer"');
    }
  }

  /**
   * Set up the socket and the internal resources.
   *
   * @param {net.Socket} socket The network socket between the server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @private
   */
  setSocket (socket, head) {
    socket.setTimeout(0);
    socket.setNoDelay();

    this._receiver = new Receiver(this.extensions, this.maxPayload);
    this._sender = new Sender(socket, this.extensions);
    this._ultron = new Ultron(socket);
    this._socket = socket;

    // socket cleanup handlers
    this._ultron.on('close', this._finalize);
    this._ultron.on('error', this._finalize);
    this._ultron.on('end', this._finalize);

    // ensure that the head is added to the receiver
    if (head && head.length > 0) {
      socket.unshift(head);
      head = null;
    }

    // subsequent packets are pushed to the receiver
    this._ultron.on('data', (data) => {
      this.bytesReceived += data.length;
      this._receiver.add(data);
    });

    // receiver event handlers
    this._receiver.onmessage = (data, flags) => this.emit('message', data, flags);
    this._receiver.onping = (data, flags) => {
      this.pong(data, !this._isServer, true);
      this.emit('ping', data, flags);
    };
    this._receiver.onpong = (data, flags) => this.emit('pong', data, flags);
    this._receiver.onclose = (code, reason) => {
      this._closeMessage = reason;
      this._closeCode = code;
      this.close(code, reason);
    };
    this._receiver.onerror = (error, code) => {
      // close the connection when the receiver reports a HyBi error code
      this.close(code, '');
      this.emit('error', error);
    };

    // sender event handlers
    this._sender.onerror = (error) => {
      this.close(1002, '');
      this.emit('error', error);
    };

    this.readyState = WebSocket.OPEN;
    this.emit('open');
  }

  /**
   * Clean up and release internal resources.
   *
   * @param {(Boolean|Error)} Indicates whether or not an error occurred
   * @private
   */
  finalize (error) {
    if (this._finalizeCalled) return;

    this.readyState = WebSocket.CLOSING;
    this._finalizeCalled = true;

    clearTimeout(this._closeTimer);
    this._closeTimer = null;

    //
    // If the connection was closed abnormally (with an error), or if the close
    // control frame was malformed or not received then the close code must be
    // 1006.
    //
    if (error) this._closeCode = 1006;

    if (this._socket) {
      this._ultron.destroy();
      this._socket.on('error', function onerror () {
        this.destroy();
      });

      if (!error) this._socket.end();
      else this._socket.destroy();

      this._socket = null;
      this._ultron = null;
    }

    if (this._sender) {
      this._sender = this._sender.onerror = null;
    }

    if (this._receiver) {
      this._receiver.cleanup(() => this.emitClose());
      this._receiver = null;
    } else {
      this.emitClose();
    }
  }

  /**
   * Emit the `close` event.
   *
   * @private
   */
  emitClose () {
    this.readyState = WebSocket.CLOSED;
    this.emit('close', this._closeCode || 1006, this._closeMessage || '');

    if (this.extensions[PerMessageDeflate.extensionName]) {
      this.extensions[PerMessageDeflate.extensionName].cleanup();
    }

    this.extensions = null;

    this.removeAllListeners();
    this.on('error', noop); // Catch all errors after this.
  }

  /**
   * Pause the socket stream.
   *
   * @public
   */
  pause () {
    if (this.readyState !== WebSocket.OPEN) throw new Error('not opened');

    this._socket.pause();
  }

  /**
   * Resume the socket stream
   *
   * @public
   */
  resume () {
    if (this.readyState !== WebSocket.OPEN) throw new Error('not opened');

    this._socket.resume();
  }

  /**
   * Start a closing handshake.
   *
   * @param {Number} code Status code explaining why the connection is closing
   * @param {String} data A string explaining why the connection is closing
   * @public
   */
  close (code, data) {
    if (this.readyState === WebSocket.CLOSED) return;
    if (this.readyState === WebSocket.CONNECTING) {
      if (this._req && !this._req.aborted) {
        this._req.abort();
        this.emit('error', new Error('closed before the connection is established'));
        this.finalize(true);
      }
      return;
    }

    if (this.readyState === WebSocket.CLOSING) {
      if (this._closeCode) this.terminate();
      return;
    }

    this.readyState = WebSocket.CLOSING;
    this._sender.close(code, data, !this._isServer, (err) => {
      if (err) this.emit('error', err);

      if (this._closeCode) {
        this.terminate();
      } else {
        //
        // Ensure that the connection is cleaned up even when the closing
        // handshake fails.
        //
        clearTimeout(this._closeTimer);
        this._closeTimer = setTimeout(this._finalize, closeTimeout, true);
      }
    });
  }

  /**
   * Send a ping message.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Indicates whether or not to mask `data`
   * @param {Boolean} failSilently Indicates whether or not to throw if `readyState` isn't `OPEN`
   * @public
   */
  ping (data, mask, failSilently) {
    if (this.readyState !== WebSocket.OPEN) {
      if (failSilently) return;
      throw new Error('not opened');
    }

    if (typeof data === 'number') data = data.toString();
    if (mask === undefined) mask = !this._isServer;
    this._sender.ping(data, mask);
  }

  /**
   * Send a pong message.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Indicates whether or not to mask `data`
   * @param {Boolean} failSilently Indicates whether or not to throw if `readyState` isn't `OPEN`
   * @public
   */
  pong (data, mask, failSilently) {
    if (this.readyState !== WebSocket.OPEN) {
      if (failSilently) return;
      throw new Error('not opened');
    }

    if (typeof data === 'number') data = data.toString();
    if (mask === undefined) mask = !this._isServer;
    this._sender.pong(data, mask);
  }

  /**
   * Send a data message.
   *
   * @param {*} data The message to send
   * @param {Object} options Options object
   * @param {Boolean} options.compress Specifies whether or not to compress `data`
   * @param {Boolean} options.binary Specifies whether `data` is binary or text
   * @param {Boolean} options.fin Specifies whether the fragment is the last one
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback which is executed when data is written out
   * @public
   */
  send (data, options, cb) {
    if (typeof options === 'function') {
      cb = options;
      options = {};
    }

    if (this.readyState !== WebSocket.OPEN) {
      if (cb) cb(new Error('not opened'));
      else throw new Error('not opened');
      return;
    }

    if (typeof data === 'number') data = data.toString();
    else if (!data) data = '';

    const opts = Object.assign({
      fin: true,
      binary: typeof data !== 'string',
      mask: !this._isServer,
      compress: true
    }, options);

    if (!this.extensions[PerMessageDeflate.extensionName]) {
      opts.compress = false;
    }

    this._sender.send(data, opts, cb);
  }

  /**
   * Half-close the socket sending a FIN packet.
   *
   * @public
   */
  terminate () {
    if (this.readyState === WebSocket.CLOSED) return;
    if (this.readyState === WebSocket.CONNECTING) {
      if (this._req && !this._req.aborted) {
        this._req.abort();
        this.emit('error', new Error('closed before the connection is established'));
        this.finalize(true);
      }
      return;
    }

    if (this._socket) {
      this.readyState = WebSocket.CLOSING;
      this._socket.end();

      //
      // Add a timeout to ensure that the connection is completely cleaned up
      // within 30 seconds, even if the other peer does not send a FIN packet.
      //
      clearTimeout(this._closeTimer);
      this._closeTimer = setTimeout(this._finalize, closeTimeout, true);
    }
  }
}

WebSocket.CONNECTING = 0;
WebSocket.OPEN = 1;
WebSocket.CLOSING = 2;
WebSocket.CLOSED = 3;

//
// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.
// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface
//
['open', 'error', 'close', 'message'].forEach((method) => {
  Object.defineProperty(WebSocket.prototype, `on${method}`, {
    /**
     * Return the listener of the event.
     *
     * @return {(Function|undefined)} The event listener or `undefined`
     * @public
     */
    get () {
      const listeners = this.listeners(method);
      for (var i = 0; i < listeners.length; i++) {
        if (listeners[i]._listener) return listeners[i]._listener;
      }
    },
    /**
     * Add a listener for the event.
     *
     * @param {Function} listener The listener to add
     * @public
     */
    set (listener) {
      const listeners = this.listeners(method);
      for (var i = 0; i < listeners.length; i++) {
        //
        // Remove only the listeners added via `addEventListener`.
        //
        if (listeners[i]._listener) this.removeListener(method, listeners[i]);
      }
      this.addEventListener(method, listener);
    }
  });
});

WebSocket.prototype.addEventListener = EventTarget.addEventListener;
WebSocket.prototype.removeEventListener = EventTarget.removeEventListener;

module.exports = WebSocket;

/**
 * Initialize a WebSocket server client.
 *
 * @param {http.IncomingMessage} req The request object
 * @param {net.Socket} socket The network socket between the server and client
 * @param {Buffer} head The first packet of the upgraded stream
 * @param {Object} options WebSocket attributes
 * @param {Number} options.protocolVersion The WebSocket protocol version
 * @param {Object} options.extensions The negotiated extensions
 * @param {Number} options.maxPayload The maximum allowed message size
 * @param {String} options.protocol The chosen subprotocol
 * @private
 */
function initAsServerClient (req, socket, head, options) {
  this.protocolVersion = options.protocolVersion;
  this.extensions = options.extensions;
  this.maxPayload = options.maxPayload;
  this.protocol = options.protocol;

  this.upgradeReq = req;
  this._isServer = true;

  this.setSocket(socket, head);
}

/**
 * Initialize a WebSocket client.
 *
 * @param {String} address The URL to which to connect
 * @param {String[]} protocols The list of subprotocols
 * @param {Object} options Connection options
 * @param {String} options.protocol Value of the `Sec-WebSocket-Protocol` header
 * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate
 * @param {String} options.localAddress Local interface to bind for network connections
 * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version` header
 * @param {Object} options.headers An object containing request headers
 * @param {String} options.origin Value of the `Origin` or `Sec-WebSocket-Origin` header
 * @param {http.Agent} options.agent Use the specified Agent
 * @param {String} options.host Value of the `Host` header
 * @param {Number} options.family IP address family to use during hostname lookup (4 or 6).
 * @param {Function} options.checkServerIdentity A function to validate the server hostname
 * @param {Boolean} options.rejectUnauthorized Verify or not the server certificate
 * @param {String} options.passphrase The passphrase for the private key or pfx
 * @param {String} options.ciphers The ciphers to use or exclude
 * @param {(String|String[]|Buffer|Buffer[])} options.cert The certificate key
 * @param {(String|String[]|Buffer|Buffer[])} options.key The private key
 * @param {(String|Buffer)} options.pfx The private key, certificate, and CA certs
 * @param {(String|String[]|Buffer|Buffer[])} options.ca Trusted certificates
 * @private
 */
function initAsClient (address, protocols, options) {
  options = Object.assign({
    protocol: protocols.join(','),
    perMessageDeflate: true,
    localAddress: null,
    protocolVersion,
    headers: null,
    origin: null,
    agent: null,
    host: null,
    family: null,

    //
    // SSL options.
    //
    checkServerIdentity: null,
    rejectUnauthorized: null,
    passphrase: null,
    ciphers: null,
    cert: null,
    key: null,
    pfx: null,
    ca: null
  }, options);

  if (options.protocolVersion !== 8 && options.protocolVersion !== 13) {
    throw new Error('unsupported protocol version');
  }

  this.protocolVersion = options.protocolVersion;
  this._isServer = false;
  this.url = address;

  const serverUrl = url.parse(address);
  const isUnixSocket = serverUrl.protocol === 'ws+unix:';

  if (!serverUrl.host && !isUnixSocket) throw new Error('invalid url');

  const isSecure = serverUrl.protocol === 'wss:' || serverUrl.protocol === 'https:';
  const key = crypto.randomBytes(16).toString('base64');
  const port = serverUrl.port || (isSecure ? 443 : 80);
  const httpObj = isSecure ? https : http;

  //
  // Prepare extensions.
  //
  const extensionsOffer = {};
  var perMessageDeflate;

  if (options.perMessageDeflate) {
    perMessageDeflate = new PerMessageDeflate(
      options.perMessageDeflate !== true ? options.perMessageDeflate : {},
      false
    );
    extensionsOffer[PerMessageDeflate.extensionName] = perMessageDeflate.offer();
  }

  const requestOptions = {
    host: serverUrl.hostname,
    port,
    path: '/',
    headers: {
      'Sec-WebSocket-Version': options.protocolVersion,
      'Sec-WebSocket-Key': key,
      'Connection': 'Upgrade',
      'Upgrade': 'websocket'
    }
  };

  if (options.headers) Object.assign(requestOptions.headers, options.headers);
  if (Object.keys(extensionsOffer).length) {
    requestOptions.headers['Sec-WebSocket-Extensions'] = Extensions.format(extensionsOffer);
  }
  if (options.protocol) {
    requestOptions.headers['Sec-WebSocket-Protocol'] = options.protocol;
  }
  if (options.origin) {
    if (options.protocolVersion < 13) {
      requestOptions.headers['Sec-WebSocket-Origin'] = options.origin;
    } else {
      requestOptions.headers.Origin = options.origin;
    }
  }
  if (options.host) requestOptions.headers.Host = options.host;
  if (options.family) requestOptions.family = options.family;

  if (options.localAddress) requestOptions.localAddress = options.localAddress;
  if (isUnixSocket) requestOptions.socketPath = serverUrl.pathname;
  if (serverUrl.auth) requestOptions.auth = serverUrl.auth;

  //
  // Make sure that path starts with `/`.
  //
  if (serverUrl.path) {
    if (serverUrl.path.charAt(0) !== '/') {
      requestOptions.path = `/${serverUrl.path}`;
    } else {
      requestOptions.path = serverUrl.path;
    }
  }

  var agent = options.agent;

  //
  // A custom agent is required for these options.
  //
  if (
    options.rejectUnauthorized != null ||
    options.checkServerIdentity ||
    options.passphrase ||
    options.ciphers ||
    options.cert ||
    options.key ||
    options.pfx ||
    options.ca
  ) {
    if (options.passphrase) requestOptions.passphrase = options.passphrase;
    if (options.ciphers) requestOptions.ciphers = options.ciphers;
    if (options.cert) requestOptions.cert = options.cert;
    if (options.key) requestOptions.key = options.key;
    if (options.pfx) requestOptions.pfx = options.pfx;
    if (options.ca) requestOptions.ca = options.ca;
    if (options.checkServerIdentity) {
      requestOptions.checkServerIdentity = options.checkServerIdentity;
    }
    if (options.rejectUnauthorized != null) {
      requestOptions.rejectUnauthorized = options.rejectUnauthorized;
    }

    if (!agent) agent = new httpObj.Agent(requestOptions);
  }

  if (agent) requestOptions.agent = agent;

  this._req = httpObj.get(requestOptions);

  this._req.on('error', (error) => {
    if (this._req.aborted) return;

    this._req = null;
    this.emit('error', error);
    this.finalize(true);
  });

  this._req.on('response', (res) => {
    if (!this.emit('unexpected-response', this._req, res)) {
      this._req.abort();
      this.emit('error', new Error(`unexpected server response (${res.statusCode})`));
      this.finalize(true);
    }
  });

  this._req.on('upgrade', (res, socket, head) => {
    this._req = null;

    const digest = crypto.createHash('sha1')
      .update(key + GUID, 'binary')
      .digest('base64');

    if (res.headers['sec-websocket-accept'] !== digest) {
      socket.destroy();
      this.emit('error', new Error('invalid server key'));
      return this.finalize(true);
    }

    const serverProt = res.headers['sec-websocket-protocol'];
    const protList = (options.protocol || '').split(/, */);
    var protError;

    if (!options.protocol && serverProt) {
      protError = 'server sent a subprotocol even though none requested';
    } else if (options.protocol && !serverProt) {
      protError = 'server sent no subprotocol even though requested';
    } else if (serverProt && protList.indexOf(serverProt) === -1) {
      protError = 'server responded with an invalid protocol';
    }

    if (protError) {
      socket.destroy();
      this.emit('error', new Error(protError));
      return this.finalize(true);
    }

    if (serverProt) this.protocol = serverProt;

    const serverExtensions = Extensions.parse(res.headers['sec-websocket-extensions']);

    if (perMessageDeflate && serverExtensions[PerMessageDeflate.extensionName]) {
      try {
        perMessageDeflate.accept(serverExtensions[PerMessageDeflate.extensionName]);
      } catch (err) {
        socket.destroy();
        this.emit('error', new Error('invalid extension parameter'));
        return this.finalize(true);
      }

      this.extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
    }

    this.setSocket(socket, head);
  });
}

},{"./EventTarget":178,"./Extensions":179,"./PerMessageDeflate":180,"./Receiver":181,"./Sender":182,"crypto":62,"events":90,"http":158,"https":98,"ultron":164,"url":165}],186:[function(require,module,exports){
(function (Buffer){
/*!
 * ws: a node.js websocket client
 * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
 * MIT Licensed
 */

'use strict';

const EventEmitter = require('events');
const crypto = require('crypto');
const Ultron = require('ultron');
const http = require('http');
const url = require('url');

const PerMessageDeflate = require('./PerMessageDeflate');
const Extensions = require('./Extensions');
const WebSocket = require('./WebSocket');

const GUID = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';

/**
 * Class representing a WebSocket server.
 *
 * @extends EventEmitter
 */
class WebSocketServer extends EventEmitter {
  /**
   * Create a `WebSocketServer` instance.
   *
   * @param {Object} options Configuration options
   * @param {String} options.host The hostname where to bind the server
   * @param {Number} options.port The port where to bind the server
   * @param {http.Server} options.server A pre-created HTTP/S server to use
   * @param {Function} options.verifyClient An hook to reject connections
   * @param {Function} options.handleProtocols An hook to handle protocols
   * @param {String} options.path Accept only connections matching this path
   * @param {Boolean} options.noServer Enable no server mode
   * @param {Boolean} options.clientTracking Specifies whether or not to track clients
   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate
   * @param {Number} options.maxPayload The maximum allowed message size
   * @param {Function} callback A listener for the `listening` event
   */
  constructor (options, callback) {
    super();

    options = Object.assign({
      maxPayload: 100 * 1024 * 1024,
      perMessageDeflate: true,
      handleProtocols: null,
      clientTracking: true,
      verifyClient: null,
      noServer: false,
      backlog: null, // use default (511 as implemented in net.js)
      server: null,
      host: null,
      path: null,
      port: null
    }, options);

    if (options.port == null && !options.server && !options.noServer) {
      throw new TypeError('missing or invalid options');
    }

    if (options.port != null) {
      this._server = http.createServer((req, res) => {
        const body = http.STATUS_CODES[426];

        res.writeHead(426, {
          'Content-Length': body.length,
          'Content-Type': 'text/plain'
        });
        res.end(body);
      });
      this._server.allowHalfOpen = false;
      this._server.listen(options.port, options.host, options.backlog, callback);
    } else if (options.server) {
      this._server = options.server;
    }

    if (this._server) {
      this._ultron = new Ultron(this._server);
      this._ultron.on('listening', () => this.emit('listening'));
      this._ultron.on('error', (err) => this.emit('error', err));
      this._ultron.on('upgrade', (req, socket, head) => {
        this.handleUpgrade(req, socket, head, (client) => {
          this.emit(`connection${req.url}`, client);
          this.emit('connection', client);
        });
      });
    }

    if (options.clientTracking) this.clients = new Set();
    this.options = options;
    this.path = options.path;
  }

  /**
   * Close the server.
   *
   * @param {Function} cb Callback
   * @public
   */
  close (cb) {
    //
    // Terminate all associated clients.
    //
    if (this.clients) {
      for (const client of this.clients) client.terminate();
    }

    const server = this._server;

    if (server) {
      this._ultron.destroy();
      this._ultron = this._server = null;

      //
      // Close the http server if it was internally created.
      //
      if (this.options.port != null) return server.close(cb);
    }

    if (cb) cb();
  }

  /**
   * See if a given request should be handled by this server instance.
   *
   * @param {http.IncomingMessage} req Request object to inspect
   * @return {Boolean} `true` if the request is valid, else `false`
   * @public
   */
  shouldHandle (req) {
    if (this.options.path && url.parse(req.url).pathname !== this.options.path) {
      return false;
    }

    return true;
  }

  /**
   * Handle a HTTP Upgrade request.
   *
   * @param {http.IncomingMessage} req The request object
   * @param {net.Socket} socket The network socket between the server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Function} cb Callback
   * @public
   */
  handleUpgrade (req, socket, head, cb) {
    socket.on('error', socketError);

    const version = +req.headers['sec-websocket-version'];

    if (
      !this.shouldHandle(req) ||
      !req.headers.upgrade ||
      req.headers.upgrade.toLowerCase() !== 'websocket' ||
      !req.headers['sec-websocket-key'] ||
      version !== 8 && version !== 13
    ) {
      return abortConnection(socket, 400);
    }

    var protocol = (req.headers['sec-websocket-protocol'] || '').split(/, */);

    //
    // Optionally call external protocol selection handler.
    //
    if (this.options.handleProtocols) {
      protocol = this.options.handleProtocols(protocol);
      if (protocol === false) return abortConnection(socket, 401);
    } else {
      protocol = protocol[0];
    }

    //
    // Optionally call external client verification handler.
    //
    if (this.options.verifyClient) {
      const info = {
        origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],
        secure: !!(req.connection.authorized || req.connection.encrypted),
        req
      };

      if (this.options.verifyClient.length === 2) {
        this.options.verifyClient(info, (verified, code, message) => {
          if (!verified) return abortConnection(socket, code || 401, message);

          this.completeUpgrade(protocol, version, req, socket, head, cb);
        });
        return;
      } else if (!this.options.verifyClient(info)) {
        return abortConnection(socket, 401);
      }
    }

    this.completeUpgrade(protocol, version, req, socket, head, cb);
  }

  /**
   * Upgrade the connection to WebSocket.
   *
   * @param {String} protocol The chosen subprotocol
   * @param {Number} version The WebSocket protocol version
   * @param {http.IncomingMessage} req The request object
   * @param {net.Socket} socket The network socket between the server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Function} cb Callback
   * @private
   */
  completeUpgrade (protocol, version, req, socket, head, cb) {
    //
    // Destroy the socket if the client has already sent a FIN packet.
    //
    if (!socket.readable || !socket.writable) return socket.destroy();

    const key = crypto.createHash('sha1')
      .update(req.headers['sec-websocket-key'] + GUID, 'binary')
      .digest('base64');

    const headers = [
      'HTTP/1.1 101 Switching Protocols',
      'Upgrade: websocket',
      'Connection: Upgrade',
      `Sec-WebSocket-Accept: ${key}`
    ];

    if (protocol) headers.push(`Sec-WebSocket-Protocol: ${protocol}`);

    const offer = Extensions.parse(req.headers['sec-websocket-extensions']);
    var extensions;

    try {
      extensions = acceptExtensions(this.options, offer);
    } catch (err) {
      return abortConnection(socket, 400);
    }

    const props = Object.keys(extensions);

    if (props.length) {
      const serverExtensions = props.reduce((obj, key) => {
        obj[key] = [extensions[key].params];
        return obj;
      }, {});

      headers.push(`Sec-WebSocket-Extensions: ${Extensions.format(serverExtensions)}`);
    }

    //
    // Allow external modification/inspection of handshake headers.
    //
    this.emit('headers', headers);

    socket.write(headers.concat('', '').join('\r\n'));

    const client = new WebSocket([req, socket, head], {
      maxPayload: this.options.maxPayload,
      protocolVersion: version,
      extensions,
      protocol
    });

    if (this.clients) {
      this.clients.add(client);
      client.on('close', () => this.clients.delete(client));
    }

    socket.removeListener('error', socketError);
    cb(client);
  }
}

module.exports = WebSocketServer;

/**
 * Handle premature socket errors.
 *
 * @private
 */
function socketError () {
  this.destroy();
}

/**
 * Accept WebSocket extensions.
 *
 * @param {Object} options The `WebSocketServer` configuration options
 * @param {Object} offer The parsed value of the `sec-websocket-extensions` header
 * @return {Object} Accepted extensions
 * @private
 */
function acceptExtensions (options, offer) {
  const pmd = options.perMessageDeflate;
  const extensions = {};

  if (pmd && offer[PerMessageDeflate.extensionName]) {
    const perMessageDeflate = new PerMessageDeflate(
      pmd !== true ? pmd : {},
      true,
      options.maxPayload
    );

    perMessageDeflate.accept(offer[PerMessageDeflate.extensionName]);
    extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
  }

  return extensions;
}

/**
 * Close the connection when preconditions are not fulfilled.
 *
 * @param {net.Socket} socket The socket of the upgrade request
 * @param {Number} code The HTTP response status code
 * @param {String} [message] The HTTP response body
 * @private
 */
function abortConnection (socket, code, message) {
  if (socket.writable) {
    message = message || http.STATUS_CODES[code];
    socket.write(
      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\r\n` +
      'Connection: close\r\n' +
      'Content-type: text/html\r\n' +
      `Content-Length: ${Buffer.byteLength(message)}\r\n` +
      '\r\n' +
      message
    );
  }

  socket.removeListener('error', socketError);
  socket.destroy();
}

}).call(this,require("buffer").Buffer)
},{"./Extensions":179,"./PerMessageDeflate":180,"./WebSocket":185,"buffer":51,"crypto":62,"events":90,"http":158,"ultron":164,"url":165}],187:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],188:[function(require,module,exports){

var engine = require("./CuraEngineInternal.js");

GCODE.slice = function(stl)
{
    engine.write_file("a.stl", "utf8", stl);
    engine.main(["-o", "a.gcode", "a.stl"]);
    return engine.read_file("a.gcode", "utf8");
}

},{"./CuraEngineInternal.js":1}]},{},[188]);
